{
    "tornado-5.0.2/demos/benchmark/benchmark.py": {
        "RootHandler._log": {
            "name": "_log",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "RootHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "global": {},
        "handle_sigchld": {
            "name": "handle_sigchld",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "sig": [],
                "frame": []
            },
            "variables": {}
        },
        "main": {
            "name": "main",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "run": {
            "name": "run",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "io_loop": [
                    "IOLoop"
                ],
                "app": [
                    "Application"
                ],
                "args": [
                    "list[typing.Text]"
                ]
            }
        }
    },
    "tornado-5.0.2/demos/benchmark/chunk_benchmark.py": {
        "callback": {
            "name": "callback",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "response": []
            },
            "variables": {}
        },
        "ChunkHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "global": {},
        "main": {
            "name": "main",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "app": [
                    "Application"
                ],
                "curl_client": [
                    "CurlAsyncHTTPClient"
                ],
                "simple_client": [
                    "SimpleAsyncHTTPClient"
                ]
            }
        }
    },
    "tornado-5.0.2/demos/benchmark/gen_benchmark.py": {
        "c1": {
            "name": "c1",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {}
        },
        "c2": {
            "name": "c2",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "e1": {
            "name": "e1",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {}
        },
        "e2": {
            "name": "e2",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "callback": []
            },
            "variables": {}
        },
        "global": {},
        "main": {
            "name": "main",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "t": [
                    "Timer"
                ]
            }
        }
    },
    "tornado-5.0.2/demos/benchmark/stack_context_benchmark.py": {
        "StackBenchmark.__context": {
            "name": "__context",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {}
        },
        "ExceptionBenchmark.__handle_exception": {
            "name": "__handle_exception",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "typ": [],
                "value": [],
                "tb": []
            },
            "variables": {}
        },
        "Benchmark.call_wrapped": {
            "name": "call_wrapped",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "count": []
            },
            "variables": {}
        },
        "Benchmark.call_wrapped_inner": {
            "name": "call_wrapped_inner",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "queue": [],
                "count": []
            },
            "variables": {}
        },
        "Benchmark.enter_exit": {
            "name": "enter_exit",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "count": []
            },
            "variables": {}
        },
        "global": {},
        "main": {
            "name": "main",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "base_cmd": [
                    "list[typing.Text]"
                ],
                "cmds": [
                    "list[typing.Text]"
                ],
                "cmd": [
                    "typing.Text"
                ]
            }
        },
        "ExceptionBenchmark.make_context": {
            "name": "make_context",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "StackBenchmark.make_context": {
            "name": "make_context",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        }
    },
    "tornado-5.0.2/demos/benchmark/template_benchmark.py": {
        "global": {},
        "main": {
            "name": "main",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "tmpl": [
                    "Template"
                ],
                "t": [
                    "Timer"
                ]
            }
        },
        "render": {
            "name": "render",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "tmpl": [
                    "Template"
                ],
                "context": [
                    "dict[typing.Text, typing.Union[typing.Text,list]]"
                ]
            }
        }
    },
    "tornado-5.0.2/demos/blog/blog.py": {
        "Application.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "handlers": [
                    "list[tuple[typing.Text]]"
                ]
            }
        },
        "BaseHandler.any_author_exists": {
            "name": "any_author_exists",
            "location": -1,
            "return": [
                "bool"
            ],
            "arguments": {},
            "variables": {}
        },
        "BaseHandler.db": {
            "name": "db",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "ArchiveHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "AuthCreateHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "AuthLoginHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "AuthLogoutHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "ComposeHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "entry": [
                    "None"
                ]
            }
        },
        "EntryHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "slug": []
            },
            "variables": {}
        },
        "FeedHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "HomeHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "BaseHandler.get_current_user": {
            "name": "get_current_user",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "global": {},
        "main": {
            "name": "main",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "Application.maybe_create_tables": {
            "name": "maybe_create_tables",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "AuthCreateHandler.post": {
            "name": "post",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "hashed_password": [
                    "typing.Generator"
                ]
            }
        },
        "AuthLoginHandler.post": {
            "name": "post",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "hashed_password": [
                    "typing.Generator"
                ]
            }
        },
        "ComposeHandler.post": {
            "name": "post",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "slug": [
                    "str",
                    "typing.Text"
                ]
            }
        },
        "EntryModule.render": {
            "name": "render",
            "location": -1,
            "return": [],
            "arguments": {
                "entry": []
            },
            "variables": {}
        }
    },
    "tornado-5.0.2/demos/chat/chatdemo.py": {
        "MessageBuffer.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "waiters": [
                    "set"
                ],
                "cache": [
                    "list"
                ],
                "cache_size": [
                    "int"
                ]
            }
        },
        "MessageBuffer.cancel_wait": {
            "name": "cancel_wait",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "future": []
            },
            "variables": {}
        },
        "MainHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "global_message_buffer": [
                    "MessageBuffer"
                ]
            }
        },
        "global": {},
        "main": {
            "name": "main",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "MessageBuffer.new_messages": {
            "name": "new_messages",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "messages": []
            },
            "variables": {
                "waiters": [
                    "set"
                ]
            }
        },
        "MessageUpdatesHandler.on_connection_close": {
            "name": "on_connection_close",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "global_message_buffer": [
                    "MessageBuffer"
                ]
            }
        },
        "MessageNewHandler.post": {
            "name": "post",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "message": [
                    "dict[typing.Text, str]"
                ],
                "global_message_buffer": [
                    "MessageBuffer"
                ]
            }
        },
        "MessageUpdatesHandler.post": {
            "name": "post",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "global_message_buffer": [
                    "MessageBuffer"
                ],
                "messages": [
                    "typing.Generator"
                ]
            }
        },
        "MessageBuffer.wait_for_messages": {
            "name": "wait_for_messages",
            "location": -1,
            "return": [
                "Future"
            ],
            "arguments": {
                "cursor": [
                    "None"
                ]
            },
            "variables": {
                "result_future": [
                    "Future"
                ],
                "cursor": [
                    "None"
                ],
                "new_count": [
                    "int"
                ]
            }
        }
    },
    "tornado-5.0.2/demos/facebook/facebook.py": {
        "Application.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "handlers": [
                    "list[tuple[typing.Text]]"
                ]
            }
        },
        "AuthLoginHandler._on_auth": {
            "name": "_on_auth",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "user": []
            },
            "variables": {}
        },
        "MainHandler._on_stream": {
            "name": "_on_stream",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "stream": []
            },
            "variables": {
                "stream": [
                    "None"
                ]
            }
        },
        "AuthLoginHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "AuthLogoutHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "MainHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "BaseHandler.get_current_user": {
            "name": "get_current_user",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "global": {},
        "main": {
            "name": "main",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "PostModule.render": {
            "name": "render",
            "location": -1,
            "return": [],
            "arguments": {
                "post": []
            },
            "variables": {}
        }
    },
    "tornado-5.0.2/demos/file_upload/file_receiver.py": {
        "PUTHandler.data_received": {
            "name": "data_received",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "chunk": []
            },
            "variables": {}
        },
        "global": {},
        "PUTHandler.initialize": {
            "name": "initialize",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "bytes_read": [
                    "int"
                ]
            }
        },
        "make_app": {
            "name": "make_app",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "POSTHandler.post": {
            "name": "post",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "PUTHandler.put": {
            "name": "put",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "filename": []
            },
            "variables": {}
        }
    },
    "tornado-5.0.2/demos/file_upload/file_uploader.py": {
        "global": {},
        "multipart_producer": {
            "name": "multipart_producer",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {
                "boundary": [],
                "filenames": [],
                "write": []
            },
            "variables": {
                "mtype": [
                    "typing.Text"
                ],
                "f": [
                    "typing.IO"
                ],
                "chunk": [
                    "str"
                ]
            }
        },
        "post": {
            "name": "post",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "filenames": []
            },
            "variables": {
                "headers": [
                    "dict[typing.Text, typing.Text]"
                ],
                "response": [
                    "typing.Generator"
                ]
            }
        },
        "put": {
            "name": "put",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "filenames": []
            },
            "variables": {
                "mtype": [
                    "typing.Text"
                ],
                "headers": [
                    "dict[typing.Text, typing.Text]"
                ],
                "response": [
                    "typing.Generator"
                ]
            }
        },
        "raw_producer": {
            "name": "raw_producer",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {
                "filename": [],
                "write": []
            },
            "variables": {
                "f": [
                    "typing.IO"
                ],
                "chunk": [
                    "str"
                ]
            }
        }
    },
    "tornado-5.0.2/demos/helloworld/helloworld.py": {
        "MainHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "global": {},
        "main": {
            "name": "main",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        }
    },
    "tornado-5.0.2/demos/s3server/s3server.py": {
        "S3Application.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "root_directory": [],
                "bucket_depth": [
                    "int"
                ]
            },
            "variables": {
                "bucket_depth": [
                    "int"
                ]
            }
        },
        "BaseRequestHandler._object_path": {
            "name": "_object_path",
            "location": -1,
            "return": [],
            "arguments": {
                "bucket": [],
                "object_name": []
            },
            "variables": {}
        },
        "BaseRequestHandler._render_parts": {
            "name": "_render_parts",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "value": [],
                "parts": [
                    "list"
                ]
            },
            "variables": {
                "value": [
                    "datetime_@_datetime",
                    "dict"
                ],
                "parts": [
                    "list",
                    "list[str]"
                ],
                "long": [
                    "int"
                ],
                "subvalue": [
                    "list"
                ]
            }
        },
        "BucketHandler.delete": {
            "name": "delete",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "bucket_name": []
            },
            "variables": {}
        },
        "ObjectHandler.delete": {
            "name": "delete",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "bucket": [],
                "object_name": []
            },
            "variables": {}
        },
        "BucketHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "bucket_name": []
            },
            "variables": {
                "max_keys": [
                    "int"
                ],
                "terse": [
                    "int"
                ],
                "object_names": [
                    "list"
                ],
                "skip": [
                    "int"
                ],
                "contents": [
                    "list",
                    "list[dict[typing.Text, ]]"
                ],
                "start_pos": [
                    "int"
                ],
                "truncated": [
                    "bool"
                ],
                "c": [
                    "dict[typing.Text, ]"
                ]
            }
        },
        "ObjectHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "bucket": [],
                "object_name": []
            },
            "variables": {
                "object_file": [
                    "typing.IO"
                ]
            }
        },
        "RootHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "buckets": [
                    "list",
                    "list[dict[typing.Text, ]]"
                ]
            }
        },
        "global": {},
        "BucketHandler.put": {
            "name": "put",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "bucket_name": []
            },
            "variables": {}
        },
        "ObjectHandler.put": {
            "name": "put",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "bucket": [],
                "object_name": []
            },
            "variables": {
                "object_file": [
                    "typing.IO"
                ]
            }
        },
        "BaseRequestHandler.render_xml": {
            "name": "render_xml",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "value": []
            },
            "variables": {
                "parts": [
                    "list"
                ]
            }
        },
        "start": {
            "name": "start",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "port": [],
                "root_directory": [
                    "typing.Text"
                ],
                "bucket_depth": [
                    "int"
                ]
            },
            "variables": {
                "root_directory": [
                    "typing.Text"
                ],
                "bucket_depth": [
                    "int"
                ],
                "application": [
                    "S3Application"
                ],
                "http_server": [
                    "HTTPServer"
                ]
            }
        }
    },
    "tornado-5.0.2/demos/tcpecho/client.py": {
        "global": {},
        "send_message": {
            "name": "send_message",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {
                "stream": [
                    "typing.Generator"
                ],
                "reply": [
                    "typing.Generator"
                ]
            }
        }
    },
    "tornado-5.0.2/demos/tcpecho/server.py": {
        "global": {},
        "EchoServer.handle_stream": {
            "name": "handle_stream",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {
                "stream": [],
                "address": []
            },
            "variables": {
                "data": [
                    "typing.Generator"
                ],
                "e": [
                    "Exception"
                ]
            }
        }
    },
    "tornado-5.0.2/demos/twitter/twitterdemo.py": {
        "LoginHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {
                "user": [
                    "typing.Generator"
                ]
            }
        },
        "LogoutHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "MainHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "timeline": [
                    "typing.Generator"
                ]
            }
        },
        "BaseHandler.get_current_user": {
            "name": "get_current_user",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "global": {},
        "main": {
            "name": "main",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "app": [
                    "Application"
                ]
            }
        }
    },
    "tornado-5.0.2/demos/websocket/chatdemo.py": {
        "Application.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "handlers": [
                    "list[tuple[typing.Text]]"
                ]
            }
        },
        "MainHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "ChatSocketHandler.get_compression_options": {
            "name": "get_compression_options",
            "location": -1,
            "return": [
                "dict"
            ],
            "arguments": {},
            "variables": {}
        },
        "global": {},
        "main": {
            "name": "main",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "app": [
                    "Application"
                ]
            }
        },
        "ChatSocketHandler.on_close": {
            "name": "on_close",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "ChatSocketHandler.on_message": {
            "name": "on_message",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "message": []
            },
            "variables": {
                "chat": [
                    "dict[typing.Text, str]"
                ]
            }
        },
        "ChatSocketHandler.open": {
            "name": "open",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "ChatSocketHandler.send_updates": {
            "name": "send_updates",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "chat": []
            },
            "variables": {}
        },
        "ChatSocketHandler.update_cache": {
            "name": "update_cache",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "chat": []
            },
            "variables": {}
        }
    },
    "tornado-5.0.2/demos/webspider/webspider.py": {
        "URLSeeker.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "urls": [
                    "list"
                ]
            }
        },
        "fetch_url": {
            "name": "fetch_url",
            "location": -1,
            "return": [
                "None",
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {
                "current_url": [
                    "typing.Generator"
                ],
                "urls": [
                    "typing.Generator"
                ],
                "base_url": [
                    "typing.Text"
                ]
            }
        },
        "get_links": {
            "name": "get_links",
            "location": -1,
            "return": [],
            "arguments": {
                "html": []
            },
            "variables": {
                "url_seeker": [
                    "URLSeeker"
                ]
            }
        },
        "get_links_from_url": {
            "name": "get_links_from_url",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "url": []
            },
            "variables": {
                "response": [
                    "typing.Generator"
                ],
                "response_": [
                    "str"
                ],
                "html": [
                    "str"
                ],
                "urls": [
                    "list"
                ],
                "e": [
                    "Exception"
                ]
            }
        },
        "global": {},
        "URLSeeker.handle_starttag": {
            "name": "handle_starttag",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "tag": [],
                "attrs": []
            },
            "variables": {}
        },
        "main": {
            "name": "main",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {
                "q": [
                    "Queue"
                ],
                "fetching": [
                    "set"
                ],
                "fetched": [
                    "set"
                ],
                "base_url": [
                    "typing.Text"
                ],
                "concurrency": [
                    "int"
                ]
            }
        },
        "remove_fragment": {
            "name": "remove_fragment",
            "location": -1,
            "return": [],
            "arguments": {
                "url": []
            },
            "variables": {}
        },
        "worker": {
            "name": "worker",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {}
        }
    },
    "tornado-5.0.2/docs/conf.py": {
        "global": {}
    },
    "tornado-5.0.2/maint/circlerefs/circlerefs.py": {
        "find_circular_references": {
            "name": "find_circular_references",
            "location": -1,
            "return": [
                "list"
            ],
            "arguments": {
                "garbage": [
                    "None"
                ]
            },
            "variables": {
                "garbage": [
                    "None"
                ],
                "found": [
                    "list"
                ],
                "stack": [
                    "list"
                ],
                "stack_ids": [
                    "set"
                ],
                "garbage_ids": [
                    "set"
                ],
                "visited_ids": [
                    "set"
                ],
                "inner": [
                    "None"
                ]
            }
        },
        "CollectHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "item": [
                    "types_@_FrameType"
                ]
            }
        },
        "DummyAsyncHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "DummyHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "global": {},
        "inner": {
            "name": "inner",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "level": []
            },
            "variables": {
                "item_id": [
                    "int"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {
                "resp": [
                    "typing.Generator"
                ]
            }
        }
    },
    "tornado-5.0.2/maint/scripts/custom_fixers/__init__.py": {
        "global": {}
    },
    "tornado-5.0.2/maint/scripts/custom_fixers/fix_future_imports.py": {
        "FixFutureImports.finish_tree": {
            "name": "finish_tree",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "tree": [],
                "filename": []
            },
            "variables": {
                "pos": [
                    "int"
                ],
                "first_stmt_": [
                    "typing.Text"
                ],
                "newline": [
                    "Newline"
                ]
            }
        },
        "global": {},
        "is_docstring": {
            "name": "is_docstring",
            "location": -1,
            "return": [
                "bool"
            ],
            "arguments": {
                "stmt": []
            },
            "variables": {}
        },
        "FixFutureImports.new_future_import": {
            "name": "new_future_import",
            "location": -1,
            "return": [
                "FromImport"
            ],
            "arguments": {
                "old": []
            },
            "variables": {
                "new": [
                    "FromImport"
                ],
                "old": [
                    "None"
                ]
            }
        },
        "FixFutureImports.start_tree": {
            "name": "start_tree",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "tree": [],
                "filename": []
            },
            "variables": {
                "found_future_import": [
                    "bool"
                ]
            }
        },
        "FixFutureImports.transform": {
            "name": "transform",
            "location": -1,
            "return": [],
            "arguments": {
                "node": [],
                "results": []
            },
            "variables": {
                "found_future_import": [
                    "bool"
                ]
            }
        }
    },
    "tornado-5.0.2/maint/scripts/custom_fixers/fix_unicode_literal.py": {
        "global": {},
        "FixUnicodeLiteral.transform": {
            "name": "transform",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "node": [],
                "results": []
            },
            "variables": {}
        }
    },
    "tornado-5.0.2/maint/scripts/run_fixers.py": {
        "global": {}
    },
    "tornado-5.0.2/maint/scripts/test_resolvers.py": {
        "global": {},
        "main": {
            "name": "main",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "args": [
                    "list[typing.Text]"
                ],
                "resolvers": [
                    "list[typing.Union[Resolver,ThreadedResolver]]",
                    "list[typing.Union[Resolver,ThreadedResolver,TwistedResolver]]",
                    "list[typing.Union[Resolver,ThreadedResolver,TwistedResolver,CaresResolver]]"
                ],
                "twisted": [
                    "None"
                ],
                "pycares": [
                    "None"
                ],
                "host": [
                    "typing.Text"
                ],
                "resolver": [
                    "Resolver",
                    "ThreadedResolver",
                    "TwistedResolver",
                    "CaresResolver"
                ],
                "addrinfo": [
                    "typing.Generator"
                ]
            }
        }
    },
    "tornado-5.0.2/maint/test/appengine/common/cgi_runtests.py": {
        "all": {
            "name": "all",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {
                "TEST_MODULES": [
                    "list[typing.Text]"
                ]
            }
        },
        "global": {},
        "main": {
            "name": "main",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "e": [
                    "Exception"
                ]
            }
        }
    },
    "tornado-5.0.2/maint/test/appengine/setup.py": {
        "global": {}
    },
    "tornado-5.0.2/maint/test/cython/cythonapp_test.py": {
        "global": {},
        "CythonArgReplacerTest.test_arg_replacer_function": {
            "name": "test_arg_replacer_function",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "replacer": [
                    "ArgReplacer"
                ],
                "args": [
                    "tuple[typing.Union[int,typing.Text]]"
                ],
                "kwargs": [
                    "dict"
                ]
            }
        },
        "CythonArgReplacerTest.test_arg_replacer_method": {
            "name": "test_arg_replacer_method",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "replacer": [
                    "ArgReplacer"
                ],
                "args": [
                    "tuple[typing.Union[int,typing.Text]]"
                ],
                "kwargs": [
                    "dict"
                ]
            }
        },
        "CythonCoroutineTest.test_decorated_coroutine": {
            "name": "test_decorated_coroutine",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "x": [
                    "typing.Generator"
                ]
            }
        },
        "CythonCoroutineTest.test_native_coroutine": {
            "name": "test_native_coroutine",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "x": [
                    "typing.Generator"
                ]
            }
        }
    },
    "tornado-5.0.2/maint/test/cython/pythonmodule.py": {
        "global": {},
        "hello": {
            "name": "hello",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {}
        }
    },
    "tornado-5.0.2/maint/test/cython/setup.py": {
        "global": {}
    },
    "tornado-5.0.2/maint/test/redbot/red_test.py": {
        "TestMixin.check_url": {
            "name": "check_url",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [],
                "method": [
                    "typing.Text"
                ],
                "body": [
                    "None"
                ],
                "headers": [
                    "None"
                ],
                "expected_status": [
                    "int"
                ],
                "allowed_warnings": [
                    "None"
                ],
                "allowed_errors": [
                    "None"
                ]
            },
            "variables": {
                "method": [
                    "typing.Text"
                ],
                "body": [
                    "None"
                ],
                "headers": [
                    "None"
                ],
                "red_": [
                    "Exception"
                ],
                "expected_status": [
                    "int"
                ],
                "allowed_warnings": [
                    "None"
                ],
                "allowed_errors": [
                    "None"
                ],
                "errors": [
                    "list"
                ],
                "warnings": [
                    "list"
                ]
            }
        },
        "CacheHandler.compute_etag": {
            "name": "compute_etag",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "CacheHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "computed_etag": []
            },
            "variables": {}
        },
        "ChunkedHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {}
        },
        "HelloHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "RedirectHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "path": []
            },
            "variables": {}
        },
        "GzipHTTPTest.get_allowed_errors": {
            "name": "get_allowed_errors",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "TestMixin.get_allowed_errors": {
            "name": "get_allowed_errors",
            "location": -1,
            "return": [
                "list"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestMixin.get_allowed_warnings": {
            "name": "get_allowed_warnings",
            "location": -1,
            "return": [
                "list"
            ],
            "arguments": {},
            "variables": {}
        },
        "DefaultHTTPTest.get_app": {
            "name": "get_app",
            "location": -1,
            "return": [
                "Application"
            ],
            "arguments": {},
            "variables": {}
        },
        "GzipHTTPTest.get_app": {
            "name": "get_app",
            "location": -1,
            "return": [
                "Application"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestMixin.get_app_kwargs": {
            "name": "get_app_kwargs",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "TestMixin.get_handlers": {
            "name": "get_handlers",
            "location": -1,
            "return": [
                "list[typing.Union[tuple[typing.Union[typing.Text,HelloHandler]],tuple[typing.Union[typing.Text,RedirectHandler]],tuple[typing.Union[typing.Text,PostHandler]],tuple[typing.Union[typing.Text,ChunkedHandler]],tuple[typing.Union[typing.Text,CacheHandler]]]]"
            ],
            "arguments": {},
            "variables": {}
        },
        "global": {},
        "PostHandler.post": {
            "name": "post",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestMixin.run_redbot": {
            "name": "run_redbot",
            "location": -1,
            "return": [
                "HttpResource"
            ],
            "arguments": {
                "url": [],
                "method": [],
                "body": [],
                "headers": []
            },
            "variables": {
                "red": [
                    "HttpResource"
                ]
            }
        },
        "TestMixin.test_404": {
            "name": "test_404",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestMixin.test_chunked": {
            "name": "test_chunked",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestMixin.test_hello": {
            "name": "test_hello",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestMixin.test_multiple_strong_etag_match": {
            "name": "test_multiple_strong_etag_match",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "computed_etag": [
                    "typing.Text"
                ],
                "etags": [
                    "typing.Text"
                ]
            }
        },
        "TestMixin.test_multiple_strong_etag_not_match": {
            "name": "test_multiple_strong_etag_not_match",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "computed_etag": [
                    "typing.Text"
                ],
                "etags": [
                    "typing.Text"
                ]
            }
        },
        "TestMixin.test_multiple_weak_etag_match": {
            "name": "test_multiple_weak_etag_match",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "computed_etag": [
                    "typing.Text"
                ],
                "etags": [
                    "typing.Text"
                ]
            }
        },
        "TestMixin.test_multiple_weak_etag_not_match": {
            "name": "test_multiple_weak_etag_not_match",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "computed_etag": [
                    "typing.Text"
                ],
                "etags": [
                    "typing.Text"
                ]
            }
        },
        "TestMixin.test_permanent_redirect": {
            "name": "test_permanent_redirect",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestMixin.test_post": {
            "name": "test_post",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "body": [
                    "typing.Text"
                ]
            }
        },
        "TestMixin.test_redirect": {
            "name": "test_redirect",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestMixin.test_static": {
            "name": "test_static",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestMixin.test_static_versioned_url": {
            "name": "test_static_versioned_url",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestMixin.test_strong_etag_match": {
            "name": "test_strong_etag_match",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "computed_etag": [
                    "typing.Text"
                ],
                "etags": [
                    "typing.Text"
                ]
            }
        },
        "TestMixin.test_strong_etag_not_match": {
            "name": "test_strong_etag_not_match",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "computed_etag": [
                    "typing.Text"
                ],
                "etags": [
                    "typing.Text"
                ]
            }
        },
        "TestMixin.test_weak_etag_match": {
            "name": "test_weak_etag_match",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "computed_etag": [
                    "typing.Text"
                ],
                "etags": [
                    "typing.Text"
                ]
            }
        },
        "TestMixin.test_weak_etag_not_match": {
            "name": "test_weak_etag_not_match",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "computed_etag": [
                    "typing.Text"
                ],
                "etags": [
                    "typing.Text"
                ]
            }
        },
        "TestMixin.test_wildcard_etag": {
            "name": "test_wildcard_etag",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "computed_etag": [
                    "typing.Text"
                ],
                "etags": [
                    "typing.Text"
                ]
            }
        },
        "TestMixin.work": {
            "name": "work",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        }
    },
    "tornado-5.0.2/maint/test/websocket/client.py": {
        "global": {},
        "main": {
            "name": "main",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "run_tests": {
            "name": "run_tests",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "control_ws": [
                    "typing.Generator"
                ],
                "num_tests": [
                    "int"
                ],
                "msg": [
                    "typing.Generator"
                ],
                "test_ws": [
                    "typing.Generator"
                ],
                "message": [
                    "typing.Generator",
                    "None"
                ],
                "update_ws": [
                    "typing.Generator"
                ]
            }
        }
    },
    "tornado-5.0.2/maint/test/websocket/server.py": {
        "EchoHandler.get_compression_options": {
            "name": "get_compression_options",
            "location": -1,
            "return": [
                "dict"
            ],
            "arguments": {},
            "variables": {}
        },
        "global": {},
        "EchoHandler.on_message": {
            "name": "on_message",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "message": []
            },
            "variables": {}
        }
    },
    "tornado-5.0.2/maint/vm/windows/bootstrap.py": {
        "download_to_cache": {
            "name": "download_to_cache",
            "location": -1,
            "return": [],
            "arguments": {
                "url": [],
                "local_name": [
                    "None"
                ]
            },
            "variables": {
                "local_name": [
                    "None"
                ],
                "TMPDIR": [
                    "typing.Text"
                ],
                "f": [
                    "typing.IO"
                ]
            }
        },
        "global": {},
        "main": {
            "name": "main",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "TMPDIR": [
                    "typing.Text"
                ],
                "exe": [
                    "typing.Text"
                ],
                "url": [
                    "typing.Text"
                ],
                "PYTHON_VERSIONS": [
                    "list[tuple[typing.Text]]"
                ],
                "PY_PACKAGES": [
                    "list[typing.Text]"
                ]
            }
        }
    },
    "tornado-5.0.2/setup.py": {
        "custom_build_ext.build_extension": {
            "name": "build_extension",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "ext": []
            },
            "variables": {}
        },
        "global": {},
        "custom_build_ext.run": {
            "name": "run",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        }
    },
    "tornado-5.0.2/tornado/__init__.py": {
        "global": {}
    },
    "tornado-5.0.2/tornado/_locale_data.py": {
        "global": {}
    },
    "tornado-5.0.2/tornado/auth.py": {
        "_auth_future_to_callback": {
            "name": "_auth_future_to_callback",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "callback": [],
                "future": []
            },
            "variables": {
                "result": [
                    "None"
                ],
                "e": [
                    "Exception"
                ]
            }
        },
        "_auth_return_future": {
            "name": "_auth_return_future",
            "location": -1,
            "return": [],
            "arguments": {
                "f": []
            },
            "variables": {
                "replacer": [
                    "ArgReplacer"
                ]
            }
        },
        "_oauth10a_signature": {
            "name": "_oauth10a_signature",
            "location": -1,
            "return": [],
            "arguments": {
                "consumer_token": [],
                "method": [],
                "url": [],
                "parameters": [
                    "dict"
                ],
                "token": []
            },
            "variables": {
                "base_elems": [
                    "list",
                    "list[str]"
                ],
                "parameters": [
                    "dict"
                ],
                "e": [
                    "str"
                ],
                "base_string": [
                    "str"
                ],
                "key_elems": [
                    "list"
                ],
                "key": [
                    "bytes"
                ]
            }
        },
        "OAuthMixin._oauth_access_token_url": {
            "name": "_oauth_access_token_url",
            "location": -1,
            "return": [],
            "arguments": {
                "request_token": []
            },
            "variables": {}
        },
        "OAuthMixin._oauth_consumer_token": {
            "name": "_oauth_consumer_token",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TwitterMixin._oauth_consumer_token": {
            "name": "_oauth_consumer_token",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "_oauth_escape": {
            "name": "_oauth_escape",
            "location": -1,
            "return": [],
            "arguments": {
                "val": []
            },
            "variables": {
                "val": [
                    "unicode_type"
                ]
            }
        },
        "OAuthMixin._oauth_get_user": {
            "name": "_oauth_get_user",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "access_token": [],
                "callback": []
            },
            "variables": {}
        },
        "OAuthMixin._oauth_get_user_future": {
            "name": "_oauth_get_user_future",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "access_token": [],
                "callback": []
            },
            "variables": {}
        },
        "TwitterMixin._oauth_get_user_future": {
            "name": "_oauth_get_user_future",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "access_token": []
            },
            "variables": {
                "user": [
                    "typing.Generator"
                ]
            }
        },
        "_oauth_parse_response": {
            "name": "_oauth_parse_response",
            "location": -1,
            "return": [],
            "arguments": {
                "body": []
            },
            "variables": {
                "special": [
                    "tuple[typing.Text]"
                ]
            }
        },
        "OAuthMixin._oauth_request_parameters": {
            "name": "_oauth_request_parameters",
            "location": -1,
            "return": [],
            "arguments": {
                "url": [],
                "access_token": [],
                "parameters": [
                    "dict"
                ],
                "method": [
                    "typing.Text"
                ]
            },
            "variables": {
                "args": [
                    "dict"
                ],
                "parameters": [
                    "dict"
                ],
                "method": [
                    "typing.Text"
                ]
            }
        },
        "OAuth2Mixin._oauth_request_token_url": {
            "name": "_oauth_request_token_url",
            "location": -1,
            "return": [],
            "arguments": {
                "redirect_uri": [
                    "None"
                ],
                "client_id": [
                    "None"
                ],
                "client_secret": [
                    "None"
                ],
                "code": [
                    "None"
                ],
                "extra_params": [
                    "None"
                ]
            },
            "variables": {
                "redirect_uri": [
                    "None"
                ],
                "code": [
                    "None"
                ],
                "client_id": [
                    "None"
                ],
                "client_secret": [
                    "None"
                ],
                "extra_params": [
                    "None"
                ]
            }
        },
        "OAuthMixin._oauth_request_token_url": {
            "name": "_oauth_request_token_url",
            "location": -1,
            "return": [],
            "arguments": {
                "callback_uri": [
                    "None"
                ],
                "extra_params": [
                    "None"
                ]
            },
            "variables": {
                "callback_uri": [
                    "None"
                ],
                "extra_params": [
                    "None"
                ]
            }
        },
        "_oauth_signature": {
            "name": "_oauth_signature",
            "location": -1,
            "return": [],
            "arguments": {
                "consumer_token": [],
                "method": [],
                "url": [],
                "parameters": [
                    "dict"
                ],
                "token": []
            },
            "variables": {
                "base_elems": [
                    "list",
                    "list[str]"
                ],
                "parameters": [
                    "dict"
                ],
                "e": [
                    "str"
                ],
                "base_string": [
                    "str"
                ],
                "key_elems": [
                    "list"
                ],
                "key": [
                    "bytes"
                ]
            }
        },
        "FacebookGraphMixin._on_access_token": {
            "name": "_on_access_token",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "redirect_uri": [],
                "client_id": [],
                "client_secret": [],
                "future": [],
                "fields": [],
                "response": []
            },
            "variables": {
                "session": [
                    "dict[typing.Text, ]"
                ]
            }
        },
        "GoogleOAuth2Mixin._on_access_token": {
            "name": "_on_access_token",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "future": [],
                "response": []
            },
            "variables": {}
        },
        "OAuthMixin._on_access_token": {
            "name": "_on_access_token",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "future": [],
                "response": []
            },
            "variables": {}
        },
        "OpenIdMixin._on_authentication_verified": {
            "name": "_on_authentication_verified",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "future": [],
                "response": []
            },
            "variables": {
                "ax_ns": [
                    "None"
                ],
                "user": [
                    "dict"
                ],
                "name_parts": [
                    "list"
                ]
            }
        },
        "FacebookGraphMixin._on_get_user_info": {
            "name": "_on_get_user_info",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "future": [],
                "session": [],
                "fields": [],
                "user": []
            },
            "variables": {
                "user": [
                    "None"
                ],
                "fieldmap": [
                    "dict",
                    "dict[typing.Text, str]"
                ]
            }
        },
        "OAuth2Mixin._on_oauth2_request": {
            "name": "_on_oauth2_request",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "future": [],
                "response": []
            },
            "variables": {}
        },
        "OAuthMixin._on_oauth_get_user": {
            "name": "_on_oauth_get_user",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "access_token": [],
                "future": [],
                "user_future": []
            },
            "variables": {}
        },
        "OAuthMixin._on_request_token": {
            "name": "_on_request_token",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "authorize_url": [],
                "callback_uri": [],
                "callback": [],
                "response": []
            },
            "variables": {}
        },
        "TwitterMixin._on_twitter_request": {
            "name": "_on_twitter_request",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "future": [],
                "response": []
            },
            "variables": {}
        },
        "OpenIdMixin._openid_args": {
            "name": "_openid_args",
            "location": -1,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,None]]"
            ],
            "arguments": {
                "callback_uri": [],
                "ax_attrs": [
                    "list"
                ],
                "oauth_scope": [
                    "None"
                ]
            },
            "variables": {
                "args": [
                    "dict[typing.Text, typing.Text]",
                    "dict[typing.Text, typing.Union[typing.Text,None]]"
                ],
                "ax_attrs": [
                    "list",
                    "set"
                ],
                "required": [
                    "list",
                    "list[typing.Text]"
                ],
                "known_attrs": [
                    "dict[typing.Text, typing.Text]"
                ],
                "oauth_scope": [
                    "None"
                ]
            }
        },
        "OpenIdMixin.authenticate_redirect": {
            "name": "authenticate_redirect",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "callback_uri": [
                    "None"
                ],
                "ax_attrs": [
                    "list[typing.Text]"
                ],
                "callback": [
                    "None"
                ]
            },
            "variables": {
                "callback_uri": [
                    "None"
                ],
                "ax_attrs": [
                    "list[typing.Text]"
                ]
            }
        },
        "TwitterMixin.authenticate_redirect": {
            "name": "authenticate_redirect",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "callback_uri": [
                    "None"
                ],
                "callback": [
                    "None"
                ]
            },
            "variables": {
                "callback_uri": [
                    "None"
                ],
                "callback": [
                    "None"
                ]
            }
        },
        "OAuth2Mixin.authorize_redirect": {
            "name": "authorize_redirect",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "redirect_uri": [
                    "None"
                ],
                "client_id": [
                    "None"
                ],
                "client_secret": [
                    "None"
                ],
                "extra_params": [],
                "callback": [
                    "None"
                ],
                "scope": [],
                "response_type": [
                    "typing.Text"
                ]
            },
            "variables": {
                "redirect_uri": [
                    "None"
                ],
                "client_id": [
                    "None"
                ],
                "response_type": [
                    "typing.Text"
                ],
                "args": [
                    "dict[typing.Text, typing.Union[None,typing.Text]]"
                ]
            }
        },
        "OAuthMixin.authorize_redirect": {
            "name": "authorize_redirect",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "callback_uri": [
                    "None"
                ],
                "extra_params": [
                    "None"
                ],
                "http_client": [
                    "None"
                ],
                "callback": [
                    "None"
                ]
            },
            "variables": {
                "callback_uri": [
                    "None"
                ],
                "http_client": [
                    "None"
                ],
                "extra_params": [
                    "None"
                ],
                "callback": [
                    "None"
                ]
            }
        },
        "FacebookGraphMixin.facebook_request": {
            "name": "facebook_request",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [],
                "callback": [],
                "access_token": [
                    "None"
                ],
                "post_args": [
                    "None"
                ],
                "args": []
            },
            "variables": {
                "access_token": [
                    "None"
                ],
                "post_args": [
                    "None"
                ]
            }
        },
        "OAuth2Mixin.get_auth_http_client": {
            "name": "get_auth_http_client",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "OAuthMixin.get_auth_http_client": {
            "name": "get_auth_http_client",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "OpenIdMixin.get_auth_http_client": {
            "name": "get_auth_http_client",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "FacebookGraphMixin.get_authenticated_user": {
            "name": "get_authenticated_user",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "redirect_uri": [],
                "client_id": [],
                "client_secret": [],
                "code": [],
                "callback": [],
                "extra_fields": []
            },
            "variables": {
                "args": [
                    "dict[typing.Text, ]"
                ],
                "fields": [
                    "set[typing.Text]"
                ]
            }
        },
        "GoogleOAuth2Mixin.get_authenticated_user": {
            "name": "get_authenticated_user",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "redirect_uri": [],
                "code": [],
                "callback": []
            },
            "variables": {}
        },
        "OAuthMixin.get_authenticated_user": {
            "name": "get_authenticated_user",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "callback": [],
                "http_client": [
                    "None"
                ]
            },
            "variables": {
                "http_client": [
                    "None"
                ]
            }
        },
        "OpenIdMixin.get_authenticated_user": {
            "name": "get_authenticated_user",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "callback": [],
                "http_client": [
                    "None"
                ]
            },
            "variables": {
                "http_client": [
                    "None"
                ]
            }
        },
        "OpenIdMixin.get_ax_arg": {
            "name": "get_ax_arg",
            "location": -1,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "uri": []
            },
            "variables": {
                "ax_name": [
                    "None"
                ]
            }
        },
        "global": {},
        "handle_exception": {
            "name": "handle_exception",
            "location": -1,
            "return": [
                "bool"
            ],
            "arguments": {
                "typ": [],
                "value": [],
                "tb": []
            },
            "variables": {}
        },
        "OAuth2Mixin.oauth2_request": {
            "name": "oauth2_request",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "url": [],
                "callback": [],
                "access_token": [
                    "None"
                ],
                "post_args": [
                    "None"
                ],
                "args": []
            },
            "variables": {
                "all_args": [
                    "dict",
                    "dict[typing.Text, None]"
                ],
                "access_token": [
                    "None"
                ],
                "post_args": [
                    "None"
                ]
            }
        },
        "TwitterMixin.twitter_request": {
            "name": "twitter_request",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [],
                "callback": [
                    "None"
                ],
                "access_token": [
                    "None"
                ],
                "post_args": [
                    "None"
                ],
                "args": []
            },
            "variables": {
                "access_token": [
                    "None"
                ],
                "all_args": [
                    "dict"
                ],
                "post_args": [
                    "None"
                ],
                "method": [
                    "typing.Text"
                ],
                "callback": [
                    "None"
                ]
            }
        },
        "wrapper": {
            "name": "wrapper",
            "location": -1,
            "return": [
                "Future"
            ],
            "arguments": {
                "kwargs": [],
                "args": []
            },
            "variables": {
                "future": [
                    "Future"
                ],
                "callback": [
                    "None"
                ]
            }
        }
    },
    "tornado-5.0.2/tornado/curl_httpclient.py": {
        "CurlError.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "errno": [],
                "message": []
            },
            "variables": {}
        },
        "CurlAsyncHTTPClient._curl_create": {
            "name": "_curl_create",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "CurlAsyncHTTPClient._curl_debug": {
            "name": "_curl_debug",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "debug_type": [],
                "debug_msg": []
            },
            "variables": {
                "debug_types": [
                    "tuple[typing.Text]"
                ]
            }
        },
        "CurlAsyncHTTPClient._curl_header_callback": {
            "name": "_curl_header_callback",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "headers": [],
                "header_callback": [],
                "header_line": []
            },
            "variables": {
                "header_line": [
                    "typing.Text"
                ],
                "header_callback": [
                    "None"
                ]
            }
        },
        "CurlAsyncHTTPClient._curl_setup_request": {
            "name": "_curl_setup_request",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "curl": [],
                "request": [],
                "buffer": [],
                "headers": []
            },
            "variables": {
                "curl_options": [
                    "dict[typing.Text, ]"
                ],
                "custom_methods": [
                    "set[typing.Text]"
                ],
                "o": [
                    "list"
                ]
            }
        },
        "CurlAsyncHTTPClient._finish": {
            "name": "_finish",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "curl": [],
                "curl_error": [
                    "None"
                ],
                "curl_message": [
                    "None"
                ]
            },
            "variables": {
                "curl_": [
                    "None"
                ],
                "buffer": [
                    "None"
                ],
                "curl_error": [
                    "None"
                ],
                "curl_message": [
                    "None"
                ],
                "error": [
                    "CurlError",
                    "None"
                ],
                "effective_url": [
                    "None"
                ]
            }
        },
        "CurlAsyncHTTPClient._finish_pending_requests": {
            "name": "_finish_pending_requests",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "CurlAsyncHTTPClient._handle_events": {
            "name": "_handle_events",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "fd": [],
                "events": []
            },
            "variables": {
                "action": [
                    "int"
                ],
                "e": [
                    "Exception"
                ]
            }
        },
        "CurlAsyncHTTPClient._handle_force_timeout": {
            "name": "_handle_force_timeout",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "e": [
                    "Exception"
                ]
            }
        },
        "CurlAsyncHTTPClient._handle_socket": {
            "name": "_handle_socket",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "event": [],
                "fd": [],
                "multi": [],
                "data": []
            },
            "variables": {
                "event_map": [
                    "dict"
                ]
            }
        },
        "CurlAsyncHTTPClient._handle_timeout": {
            "name": "_handle_timeout",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "_timeout": [
                    "None"
                ],
                "e": [
                    "Exception"
                ]
            }
        },
        "CurlAsyncHTTPClient._process_queue": {
            "name": "_process_queue",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "started": [
                    "int"
                ],
                "curl_": [
                    "dict[typing.Text, BytesIO]"
                ],
                "e": [
                    "Exception"
                ]
            }
        },
        "CurlAsyncHTTPClient._set_timeout": {
            "name": "_set_timeout",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "msecs": []
            },
            "variables": {
                "_timeout": [
                    "None"
                ]
            }
        },
        "CurlAsyncHTTPClient.close": {
            "name": "close",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "_timeout": [
                    "None"
                ],
                "_force_timeout_callback": [
                    "None"
                ],
                "_multi": [
                    "None"
                ]
            }
        },
        "CurlAsyncHTTPClient.fetch_impl": {
            "name": "fetch_impl",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "request": [],
                "callback": []
            },
            "variables": {}
        },
        "global": {},
        "CurlAsyncHTTPClient.handle_callback_exception": {
            "name": "handle_callback_exception",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "callback": []
            },
            "variables": {}
        },
        "CurlAsyncHTTPClient.initialize": {
            "name": "initialize",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "max_clients": [
                    "int"
                ],
                "defaults": [
                    "None"
                ]
            },
            "variables": {
                "defaults": [
                    "None"
                ],
                "max_clients": [
                    "int"
                ],
                "_curls": [
                    "list"
                ],
                "_fds": [
                    "dict"
                ],
                "_timeout": [
                    "None"
                ]
            }
        },
        "CurlAsyncHTTPClient.ioctl": {
            "name": "ioctl",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "cmd": []
            },
            "variables": {}
        },
        "CurlAsyncHTTPClient.write_function": {
            "name": "write_function",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "chunk": []
            },
            "variables": {}
        }
    },
    "tornado-5.0.2/tornado/escape.py": {
        "_build_unicode_map": {
            "name": "_build_unicode_map",
            "location": -1,
            "return": [
                "dict"
            ],
            "arguments": {},
            "variables": {
                "unicode_map": [
                    "dict"
                ]
            }
        },
        "_convert_entity": {
            "name": "_convert_entity",
            "location": -1,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "m": []
            },
            "variables": {}
        },
        "global": {},
        "json_decode": {
            "name": "json_decode",
            "location": -1,
            "return": [],
            "arguments": {
                "value": []
            },
            "variables": {}
        },
        "json_encode": {
            "name": "json_encode",
            "location": -1,
            "return": [],
            "arguments": {
                "value": []
            },
            "variables": {}
        },
        "linkify": {
            "name": "linkify",
            "location": -1,
            "return": [],
            "arguments": {
                "text": [],
                "shorten": [
                    "bool"
                ],
                "extra_params": [
                    "typing.Text"
                ],
                "require_protocol": [
                    "bool"
                ],
                "permitted_protocols": [
                    "list[typing.Text]"
                ]
            },
            "variables": {
                "extra_params": [
                    "typing.Text"
                ]
            }
        },
        "make_link": {
            "name": "make_link",
            "location": -1,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "m": []
            },
            "variables": {
                "max_len": [
                    "int"
                ],
                "proto_len": [
                    "int"
                ]
            }
        },
        "parse_qs_bytes": {
            "name": "parse_qs_bytes",
            "location": -1,
            "return": [
                "dict[, list]"
            ],
            "arguments": {
                "qs": [],
                "keep_blank_values": [
                    "bool"
                ],
                "strict_parsing": [
                    "bool"
                ]
            },
            "variables": {
                "keep_blank_values": [
                    "bool"
                ],
                "strict_parsing": [
                    "bool"
                ],
                "encoded": [
                    "dict",
                    "dict[, list]"
                ]
            }
        },
        "recursive_unicode": {
            "name": "recursive_unicode",
            "location": -1,
            "return": [
                "list",
                "tuple"
            ],
            "arguments": {
                "obj": []
            },
            "variables": {
                "obj": [
                    "dict",
                    "list",
                    "tuple",
                    "bytes"
                ]
            }
        },
        "squeeze": {
            "name": "squeeze",
            "location": -1,
            "return": [],
            "arguments": {
                "value": []
            },
            "variables": {}
        },
        "to_basestring": {
            "name": "to_basestring",
            "location": -1,
            "return": [
                "_BASESTRING_TYPES"
            ],
            "arguments": {
                "value": []
            },
            "variables": {
                "value": [
                    "_BASESTRING_TYPES"
                ]
            }
        },
        "to_unicode": {
            "name": "to_unicode",
            "location": -1,
            "return": [
                "_TO_UNICODE_TYPES"
            ],
            "arguments": {
                "value": []
            },
            "variables": {
                "value": [
                    "_TO_UNICODE_TYPES"
                ]
            }
        },
        "url_escape": {
            "name": "url_escape",
            "location": -1,
            "return": [],
            "arguments": {
                "value": [],
                "plus": [
                    "bool"
                ]
            },
            "variables": {
                "plus": [
                    "bool"
                ]
            }
        },
        "url_unescape": {
            "name": "url_unescape",
            "location": -1,
            "return": [],
            "arguments": {
                "value": [],
                "encoding": [
                    "typing.Text"
                ],
                "plus": [
                    "bool"
                ]
            },
            "variables": {
                "plus": [
                    "bool"
                ],
                "encoding": [
                    "typing.Text",
                    "None"
                ]
            }
        },
        "utf8": {
            "name": "utf8",
            "location": -1,
            "return": [
                "_UTF8_TYPES"
            ],
            "arguments": {
                "value": []
            },
            "variables": {
                "value": [
                    "_UTF8_TYPES"
                ]
            }
        },
        "xhtml_escape": {
            "name": "xhtml_escape",
            "location": -1,
            "return": [],
            "arguments": {
                "value": []
            },
            "variables": {}
        },
        "xhtml_unescape": {
            "name": "xhtml_unescape",
            "location": -1,
            "return": [],
            "arguments": {
                "value": []
            },
            "variables": {}
        }
    },
    "tornado-5.0.2/tornado/http1connection.py": {
        "_ExceptionLoggingContext.__enter__": {
            "name": "__enter__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "_ExceptionLoggingContext.__exit__": {
            "name": "__exit__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "typ": [],
                "value": [],
                "tb": []
            },
            "variables": {
                "value": [
                    "None"
                ]
            }
        },
        "HTTP1Connection.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "stream": [],
                "is_client": [],
                "params": [
                    "None"
                ],
                "context": [
                    "None"
                ]
            },
            "variables": {
                "params": [
                    "None",
                    "HTTP1ConnectionParameters"
                ],
                "context": [
                    "None"
                ],
                "_write_finished": [
                    "bool"
                ],
                "_read_finished": [
                    "bool"
                ],
                "_finish_future": [
                    "Future"
                ],
                "_disconnect_on_finish": [
                    "bool"
                ],
                "_request_start_line": [
                    "None"
                ],
                "_response_start_line": [
                    "None"
                ],
                "_request_headers": [
                    "None"
                ],
                "_chunking_output": [
                    "None"
                ],
                "_expected_content_remaining": [
                    "None"
                ],
                "_pending_write": [
                    "None"
                ]
            }
        },
        "HTTP1ConnectionParameters.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "no_keep_alive": [
                    "bool"
                ],
                "chunk_size": [
                    "None"
                ],
                "max_header_size": [
                    "None"
                ],
                "header_timeout": [
                    "None"
                ],
                "max_body_size": [
                    "None"
                ],
                "body_timeout": [
                    "None"
                ],
                "decompress": [
                    "bool"
                ]
            },
            "variables": {
                "no_keep_alive": [
                    "bool"
                ],
                "chunk_size": [
                    "None",
                    "int"
                ],
                "max_header_size": [
                    "None",
                    "int"
                ],
                "header_timeout": [
                    "None"
                ],
                "max_body_size": [
                    "None"
                ],
                "body_timeout": [
                    "None"
                ],
                "decompress": [
                    "bool"
                ]
            }
        },
        "HTTP1ServerConnection.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "stream": [],
                "params": [
                    "None"
                ],
                "context": [
                    "None"
                ]
            },
            "variables": {
                "params": [
                    "None",
                    "HTTP1ConnectionParameters"
                ],
                "context": [
                    "None"
                ],
                "_serving_future": [
                    "None"
                ]
            }
        },
        "_ExceptionLoggingContext.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "logger": []
            },
            "variables": {}
        },
        "_GzipMessageDelegate.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "delegate": [],
                "chunk_size": []
            },
            "variables": {
                "_decompressor": [
                    "None"
                ]
            }
        },
        "_QuietException.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "HTTP1Connection._can_keep_alive": {
            "name": "_can_keep_alive",
            "location": -1,
            "return": [
                "bool"
            ],
            "arguments": {
                "start_line": [],
                "headers": []
            },
            "variables": {
                "connection_header": [
                    "None"
                ]
            }
        },
        "HTTP1Connection._clear_callbacks": {
            "name": "_clear_callbacks",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "_write_callback": [
                    "None"
                ],
                "_write_future": [
                    "None"
                ],
                "_close_callback": [
                    "None"
                ],
                "stream": [
                    "None"
                ]
            }
        },
        "HTTP1Connection._finish_request": {
            "name": "_finish_request",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "future": []
            },
            "variables": {}
        },
        "HTTP1Connection._format_chunk": {
            "name": "_format_chunk",
            "location": -1,
            "return": [],
            "arguments": {
                "chunk": []
            },
            "variables": {
                "_expected_content_remaining": [
                    "int",
                    "None"
                ]
            }
        },
        "HTTP1Connection._on_connection_close": {
            "name": "_on_connection_close",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "_close_callback": [
                    "None"
                ]
            }
        },
        "HTTP1Connection._on_write_complete": {
            "name": "_on_write_complete",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "future": []
            },
            "variables": {
                "_write_callback": [
                    "None"
                ],
                "_write_future": [
                    "None"
                ]
            }
        },
        "HTTP1Connection._parse_headers": {
            "name": "_parse_headers",
            "location": -1,
            "return": [
                "tuple"
            ],
            "arguments": {
                "data": []
            },
            "variables": {}
        },
        "HTTP1Connection._read_body": {
            "name": "_read_body",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "code": [],
                "headers": [],
                "delegate": []
            },
            "variables": {
                "content_length": [
                    "int",
                    "None"
                ]
            }
        },
        "HTTP1Connection._read_body_until_close": {
            "name": "_read_body_until_close",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "delegate": []
            },
            "variables": {
                "body": [
                    "typing.Generator"
                ]
            }
        },
        "HTTP1Connection._read_chunked_body": {
            "name": "_read_chunked_body",
            "location": -1,
            "return": [
                "None",
                "typing.Generator"
            ],
            "arguments": {
                "delegate": []
            },
            "variables": {
                "total_size": [
                    "int"
                ],
                "chunk_len": [
                    "int"
                ],
                "crlf": [
                    "typing.Generator"
                ],
                "bytes_to_read": [
                    "int"
                ],
                "chunk": [
                    "typing.Generator"
                ],
                "ret": [
                    "None"
                ]
            }
        },
        "HTTP1Connection._read_fixed_body": {
            "name": "_read_fixed_body",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {
                "content_length": [],
                "delegate": []
            },
            "variables": {
                "content_length": [
                    "int"
                ],
                "body": [
                    "typing.Generator"
                ],
                "ret": [
                    "None"
                ]
            }
        },
        "HTTP1Connection._read_message": {
            "name": "_read_message",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {
                "delegate": []
            },
            "variables": {
                "need_delegate_close": [
                    "bool"
                ],
                "self_": [
                    "None"
                ],
                "header_future": [
                    "None"
                ],
                "header_data": [
                    "typing.Generator"
                ],
                "_disconnect_on_finish": [
                    "bool"
                ],
                "stream": [
                    "None"
                ],
                "skip_body": [
                    "bool"
                ],
                "body_future": [
                    "None"
                ],
                "_body_timeout": [
                    "None"
                ],
                "_read_finished": [
                    "bool"
                ],
                "e": [
                    "Exception"
                ]
            }
        },
        "HTTP1ServerConnection._server_request_loop": {
            "name": "_server_request_loop",
            "location": -1,
            "return": [
                "None",
                "typing.Generator"
            ],
            "arguments": {
                "delegate": []
            },
            "variables": {
                "conn": [
                    "HTTP1Connection"
                ],
                "ret": [
                    "typing.Generator"
                ]
            }
        },
        "HTTP1Connection.close": {
            "name": "close",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "stream": [
                    "None"
                ]
            }
        },
        "HTTP1ServerConnection.close": {
            "name": "close",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {}
        },
        "_GzipMessageDelegate.data_received": {
            "name": "data_received",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {
                "chunk": []
            },
            "variables": {
                "ret": [
                    "None"
                ]
            }
        },
        "HTTP1Connection.detach": {
            "name": "detach",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {
                "stream": [
                    "None"
                ]
            }
        },
        "HTTP1Connection.finish": {
            "name": "finish",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "_pending_write": [
                    "None"
                ],
                "_write_finished": [
                    "bool"
                ],
                "_disconnect_on_finish": [
                    "bool"
                ]
            }
        },
        "_GzipMessageDelegate.finish": {
            "name": "finish",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {
                "_decompressor": [
                    "None"
                ]
            }
        },
        "global": {},
        "_GzipMessageDelegate.headers_received": {
            "name": "headers_received",
            "location": -1,
            "return": [],
            "arguments": {
                "start_line": [],
                "headers": []
            },
            "variables": {
                "_decompressor": [
                    "GzipDecompressor"
                ]
            }
        },
        "_GzipMessageDelegate.on_connection_close": {
            "name": "on_connection_close",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "HTTP1Connection.read_response": {
            "name": "read_response",
            "location": -1,
            "return": [],
            "arguments": {
                "delegate": []
            },
            "variables": {
                "delegate": [
                    "_GzipMessageDelegate"
                ]
            }
        },
        "HTTP1Connection.set_body_timeout": {
            "name": "set_body_timeout",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "timeout": []
            },
            "variables": {}
        },
        "HTTP1Connection.set_close_callback": {
            "name": "set_close_callback",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "callback": []
            },
            "variables": {}
        },
        "HTTP1Connection.set_max_body_size": {
            "name": "set_max_body_size",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "max_body_size": []
            },
            "variables": {}
        },
        "HTTP1ServerConnection.start_serving": {
            "name": "start_serving",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "delegate": []
            },
            "variables": {}
        },
        "HTTP1Connection.write": {
            "name": "write",
            "location": -1,
            "return": [
                "Future",
                "None"
            ],
            "arguments": {
                "chunk": [],
                "callback": [
                    "None"
                ]
            },
            "variables": {
                "future": [
                    "None",
                    "Future"
                ],
                "_write_future": [
                    "Future"
                ],
                "callback": [
                    "None"
                ]
            }
        },
        "HTTP1Connection.write_headers": {
            "name": "write_headers",
            "location": -1,
            "return": [
                "Future",
                "None"
            ],
            "arguments": {
                "start_line": [],
                "headers": [],
                "chunk": [
                    "None"
                ],
                "callback": [
                    "None"
                ]
            },
            "variables": {
                "lines": [
                    "list"
                ],
                "_chunking_output": [
                    "bool"
                ],
                "_expected_content_remaining": [
                    "int",
                    "None"
                ],
                "header_lines": [
                    "typing.Generator"
                ],
                "future": [
                    "None",
                    "Future"
                ],
                "_write_future": [
                    "Future"
                ],
                "callback": [
                    "None"
                ],
                "data": [
                    "bytes"
                ],
                "chunk": [
                    "None"
                ]
            }
        }
    },
    "tornado-5.0.2/tornado/httpclient.py": {
        "HTTPClient.__del__": {
            "name": "__del__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "_RequestProxy.__getattr__": {
            "name": "__getattr__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "name": []
            },
            "variables": {
                "request_attr": [
                    "None"
                ],
                "defaults": [
                    "None"
                ]
            }
        },
        "HTTPClient.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "async_client_class": [
                    "None"
                ],
                "kwargs": []
            },
            "variables": {
                "_closed": [
                    "bool"
                ],
                "_io_loop": [
                    "IOLoop"
                ],
                "async_client_class": [
                    "None"
                ]
            }
        },
        "HTTPError.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "code": [],
                "message": [
                    "None"
                ],
                "response": [
                    "None"
                ]
            },
            "variables": {
                "message": [
                    "None"
                ],
                "response": [
                    "None"
                ]
            }
        },
        "HTTPRequest.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "url": [],
                "method": [
                    "typing.Text"
                ],
                "headers": [
                    "None"
                ],
                "body": [
                    "None"
                ],
                "auth_username": [
                    "None"
                ],
                "auth_password": [
                    "None"
                ],
                "auth_mode": [
                    "None"
                ],
                "connect_timeout": [
                    "None"
                ],
                "request_timeout": [
                    "None"
                ],
                "if_modified_since": [
                    "None"
                ],
                "follow_redirects": [
                    "None"
                ],
                "max_redirects": [
                    "None"
                ],
                "user_agent": [
                    "None"
                ],
                "use_gzip": [
                    "None"
                ],
                "network_interface": [
                    "None"
                ],
                "streaming_callback": [
                    "None"
                ],
                "header_callback": [
                    "None"
                ],
                "prepare_curl_callback": [
                    "None"
                ],
                "proxy_host": [
                    "None"
                ],
                "proxy_port": [
                    "None"
                ],
                "proxy_username": [
                    "None"
                ],
                "proxy_password": [
                    "None"
                ],
                "proxy_auth_mode": [
                    "None"
                ],
                "allow_nonstandard_methods": [
                    "None"
                ],
                "validate_cert": [
                    "None"
                ],
                "ca_certs": [
                    "None"
                ],
                "allow_ipv6": [
                    "None"
                ],
                "client_key": [
                    "None"
                ],
                "client_cert": [
                    "None"
                ],
                "body_producer": [
                    "None"
                ],
                "expect_100_continue": [
                    "bool"
                ],
                "decompress_response": [
                    "None"
                ],
                "ssl_options": [
                    "None"
                ]
            },
            "variables": {
                "headers": [
                    "None"
                ],
                "if_modified_since": [
                    "None"
                ],
                "proxy_host": [
                    "None"
                ],
                "proxy_port": [
                    "None"
                ],
                "proxy_username": [
                    "None"
                ],
                "proxy_password": [
                    "None"
                ],
                "proxy_auth_mode": [
                    "None"
                ],
                "method": [
                    "typing.Text"
                ],
                "body": [
                    "None"
                ],
                "body_producer": [
                    "None"
                ],
                "auth_username": [
                    "None"
                ],
                "auth_password": [
                    "None"
                ],
                "auth_mode": [
                    "None"
                ],
                "connect_timeout": [
                    "None"
                ],
                "request_timeout": [
                    "None"
                ],
                "follow_redirects": [
                    "None"
                ],
                "max_redirects": [
                    "None"
                ],
                "user_agent": [
                    "None"
                ],
                "decompress_response": [
                    "None"
                ],
                "use_gzip": [
                    "None"
                ],
                "network_interface": [
                    "None"
                ],
                "streaming_callback": [
                    "None"
                ],
                "header_callback": [
                    "None"
                ],
                "prepare_curl_callback": [
                    "None"
                ],
                "allow_nonstandard_methods": [
                    "None"
                ],
                "validate_cert": [
                    "None"
                ],
                "ca_certs": [
                    "None"
                ],
                "allow_ipv6": [
                    "None"
                ],
                "client_key": [
                    "None"
                ],
                "client_cert": [
                    "None"
                ],
                "ssl_options": [
                    "None"
                ],
                "expect_100_continue": [
                    "bool"
                ]
            }
        },
        "HTTPResponse.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "request": [],
                "code": [],
                "headers": [
                    "None"
                ],
                "buffer": [
                    "None"
                ],
                "effective_url": [
                    "None"
                ],
                "error": [
                    "None"
                ],
                "request_time": [
                    "None"
                ],
                "time_info": [
                    "None"
                ],
                "reason": [
                    "None"
                ]
            },
            "variables": {
                "request": [
                    "_RequestProxy"
                ],
                "reason": [
                    "None"
                ],
                "headers": [
                    "None"
                ],
                "buffer": [
                    "None"
                ],
                "_body": [
                    "None"
                ],
                "effective_url": [
                    "None"
                ],
                "error": [
                    "None",
                    "HTTPError"
                ],
                "request_time": [
                    "None"
                ],
                "time_info": [
                    "None",
                    "dict"
                ]
            }
        },
        "_RequestProxy.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "request": [],
                "defaults": []
            },
            "variables": {}
        },
        "AsyncHTTPClient.__new__": {
            "name": "__new__",
            "location": -1,
            "return": [],
            "arguments": {
                "cls": [],
                "force_instance": [
                    "bool"
                ],
                "kwargs": []
            },
            "variables": {
                "force_instance": [
                    "bool"
                ],
                "instance_cache": [
                    "None"
                ],
                "instance_": [
                    "None"
                ]
            }
        },
        "HTTPResponse.__repr__": {
            "name": "__repr__",
            "location": -1,
            "return": [
                "typing.Text"
            ],
            "arguments": {},
            "variables": {
                "args": [
                    "str"
                ]
            }
        },
        "HTTPError.__str__": {
            "name": "__str__",
            "location": -1,
            "return": [
                "typing.Text"
            ],
            "arguments": {},
            "variables": {}
        },
        "AsyncHTTPClient._async_clients": {
            "name": "_async_clients",
            "location": -1,
            "return": [],
            "arguments": {
                "cls": []
            },
            "variables": {}
        },
        "HTTPRequest.body": {
            "name": "body",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "HTTPResponse.body": {
            "name": "body",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "buffer": [
                    "None"
                ],
                "_body": [
                    "None"
                ]
            }
        },
        "HTTPRequest.body_producer": {
            "name": "body_producer",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "AsyncHTTPClient.close": {
            "name": "close",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "_closed": [
                    "bool"
                ],
                "_instance_cache": [
                    "None"
                ]
            }
        },
        "HTTPClient.close": {
            "name": "close",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "_closed": [
                    "bool"
                ]
            }
        },
        "AsyncHTTPClient.configurable_base": {
            "name": "configurable_base",
            "location": -1,
            "return": [
                "AsyncHTTPClient"
            ],
            "arguments": {
                "cls": []
            },
            "variables": {}
        },
        "AsyncHTTPClient.configurable_default": {
            "name": "configurable_default",
            "location": -1,
            "return": [],
            "arguments": {
                "cls": []
            },
            "variables": {}
        },
        "AsyncHTTPClient.configure": {
            "name": "configure",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "impl": [],
                "kwargs": []
            },
            "variables": {}
        },
        "AsyncHTTPClient.fetch": {
            "name": "fetch",
            "location": -1,
            "return": [
                "Future"
            ],
            "arguments": {
                "request": [],
                "callback": [
                    "None"
                ],
                "raise_error": [
                    "bool"
                ],
                "kwargs": []
            },
            "variables": {
                "request": [
                    "HTTPRequest",
                    "_RequestProxy"
                ],
                "future": [
                    "Future"
                ],
                "callback": [
                    "None"
                ]
            }
        },
        "HTTPClient.fetch": {
            "name": "fetch",
            "location": -1,
            "return": [],
            "arguments": {
                "request": [],
                "kwargs": []
            },
            "variables": {}
        },
        "AsyncHTTPClient.fetch_impl": {
            "name": "fetch_impl",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "request": [],
                "callback": []
            },
            "variables": {}
        },
        "global": {},
        "AsyncHTTPClient.handle_future": {
            "name": "handle_future",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "future": []
            },
            "variables": {
                "exc": [
                    "None"
                ],
                "response": [
                    "HTTPResponse"
                ]
            }
        },
        "AsyncHTTPClient.handle_response": {
            "name": "handle_response",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "response": []
            },
            "variables": {}
        },
        "HTTPRequest.header_callback": {
            "name": "header_callback",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "HTTPRequest.headers": {
            "name": "headers",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "AsyncHTTPClient.initialize": {
            "name": "initialize",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "defaults": [
                    "None"
                ]
            },
            "variables": {
                "defaults": [
                    "None"
                ],
                "_closed": [
                    "bool"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "client": [
                    "HTTPClient"
                ],
                "e": [
                    "Exception"
                ],
                "e_": [
                    "None"
                ]
            }
        },
        "HTTPRequest.prepare_curl_callback": {
            "name": "prepare_curl_callback",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "HTTPResponse.rethrow": {
            "name": "rethrow",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "HTTPRequest.streaming_callback": {
            "name": "streaming_callback",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        }
    },
    "tornado-5.0.2/tornado/httpserver.py": {
        "HTTPServer.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "kwargs": [],
                "args": []
            },
            "variables": {}
        },
        "_CallableAdapter.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "request_callback": [],
                "request_conn": []
            },
            "variables": {
                "request": [
                    "None"
                ],
                "delegate": [
                    "None"
                ],
                "_chunks": [
                    "list"
                ]
            }
        },
        "_HTTPRequestContext.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "stream": [],
                "address": [],
                "protocol": [],
                "trusted_downstream": [
                    "None"
                ]
            },
            "variables": {
                "stream": [
                    "iostream_@_SSLIOStream"
                ],
                "stream_": [
                    "None"
                ],
                "address_family": [
                    "None"
                ],
                "remote_ip": [
                    "typing.Text"
                ],
                "protocol": [
                    "typing.Text"
                ],
                "_orig_remote_ip": [
                    "typing.Text"
                ],
                "_orig_protocol": [
                    "typing.Text"
                ],
                "trusted_downstream": [
                    "None",
                    "set"
                ]
            }
        },
        "_ProxyAdapter.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "delegate": [],
                "request_conn": []
            },
            "variables": {}
        },
        "_HTTPRequestContext.__str__": {
            "name": "__str__",
            "location": -1,
            "return": [
                "str"
            ],
            "arguments": {},
            "variables": {
                "address": [
                    "bytes"
                ]
            }
        },
        "_HTTPRequestContext._apply_xheaders": {
            "name": "_apply_xheaders",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "headers": []
            },
            "variables": {}
        },
        "_ProxyAdapter._cleanup": {
            "name": "_cleanup",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "_HTTPRequestContext._unapply_xheaders": {
            "name": "_unapply_xheaders",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "HTTPServer.close_all_connections": {
            "name": "close_all_connections",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {}
        },
        "HTTPServer.configurable_base": {
            "name": "configurable_base",
            "location": -1,
            "return": [
                "HTTPServer"
            ],
            "arguments": {
                "cls": []
            },
            "variables": {}
        },
        "HTTPServer.configurable_default": {
            "name": "configurable_default",
            "location": -1,
            "return": [
                "HTTPServer"
            ],
            "arguments": {
                "cls": []
            },
            "variables": {}
        },
        "_CallableAdapter.data_received": {
            "name": "data_received",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "chunk": []
            },
            "variables": {}
        },
        "_ProxyAdapter.data_received": {
            "name": "data_received",
            "location": -1,
            "return": [],
            "arguments": {
                "chunk": []
            },
            "variables": {}
        },
        "_CallableAdapter.finish": {
            "name": "finish",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "self_": [
                    "bytes"
                ]
            }
        },
        "_ProxyAdapter.finish": {
            "name": "finish",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "global": {},
        "HTTPServer.handle_stream": {
            "name": "handle_stream",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "stream": [],
                "address": []
            },
            "variables": {
                "context": [
                    "_HTTPRequestContext"
                ],
                "conn": [
                    "HTTP1ServerConnection"
                ]
            }
        },
        "_CallableAdapter.headers_received": {
            "name": "headers_received",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "start_line": [],
                "headers": []
            },
            "variables": {}
        },
        "_ProxyAdapter.headers_received": {
            "name": "headers_received",
            "location": -1,
            "return": [],
            "arguments": {
                "start_line": [],
                "headers": []
            },
            "variables": {}
        },
        "HTTPServer.initialize": {
            "name": "initialize",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "request_callback": [],
                "no_keep_alive": [
                    "bool"
                ],
                "xheaders": [
                    "bool"
                ],
                "ssl_options": [
                    "None"
                ],
                "protocol": [
                    "None"
                ],
                "decompress_request": [
                    "bool"
                ],
                "chunk_size": [
                    "None"
                ],
                "max_header_size": [
                    "None"
                ],
                "idle_connection_timeout": [
                    "None"
                ],
                "body_timeout": [
                    "None"
                ],
                "max_body_size": [
                    "None"
                ],
                "max_buffer_size": [
                    "None"
                ],
                "trusted_downstream": [
                    "None"
                ]
            },
            "variables": {
                "xheaders": [
                    "bool"
                ],
                "protocol": [
                    "None"
                ],
                "decompress_request": [
                    "bool"
                ],
                "chunk_size": [
                    "None"
                ],
                "max_header_size": [
                    "None"
                ],
                "idle_connection_timeout": [
                    "None"
                ],
                "max_body_size": [
                    "None"
                ],
                "body_timeout": [
                    "None"
                ],
                "no_keep_alive": [
                    "bool"
                ],
                "conn_params": [
                    "HTTP1ConnectionParameters"
                ],
                "ssl_options": [
                    "None"
                ],
                "max_buffer_size": [
                    "None"
                ],
                "_connections": [
                    "set"
                ],
                "trusted_downstream": [
                    "None"
                ]
            }
        },
        "HTTPServer.on_close": {
            "name": "on_close",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "server_conn": []
            },
            "variables": {}
        },
        "_CallableAdapter.on_connection_close": {
            "name": "on_connection_close",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "_chunks": [
                    "None"
                ]
            }
        },
        "_ProxyAdapter.on_connection_close": {
            "name": "on_connection_close",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "HTTPServer.start_request": {
            "name": "start_request",
            "location": -1,
            "return": [
                "_CallableAdapter",
                "_ProxyAdapter"
            ],
            "arguments": {
                "server_conn": [],
                "request_conn": []
            },
            "variables": {
                "request_callback": [
                    "httputil_@_HTTPServerConnectionDelegate"
                ],
                "delegate": [
                    "_CallableAdapter",
                    "_ProxyAdapter"
                ]
            }
        }
    },
    "tornado-5.0.2/tornado/ioloop.py": {
        "PeriodicCallback.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "callback": [],
                "callback_time": []
            },
            "variables": {
                "_running": [
                    "bool"
                ],
                "_timeout": [
                    "None"
                ]
            }
        },
        "_Timeout.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "deadline": [],
                "callback": [],
                "io_loop": []
            },
            "variables": {
                "tdeadline": [
                    "tuple"
                ]
            }
        },
        "_Timeout.__le__": {
            "name": "__le__",
            "location": -1,
            "return": [
                "bool"
            ],
            "arguments": {
                "other": []
            },
            "variables": {}
        },
        "_Timeout.__lt__": {
            "name": "__lt__",
            "location": -1,
            "return": [
                "bool"
            ],
            "arguments": {
                "other": []
            },
            "variables": {}
        },
        "IOLoop._clear_current_hook": {
            "name": "_clear_current_hook",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "IOLoop._discard_future_result": {
            "name": "_discard_future_result",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "future": []
            },
            "variables": {}
        },
        "PeriodicCallback._run": {
            "name": "_run",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "IOLoop._run_callback": {
            "name": "_run_callback",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "callback": []
            },
            "variables": {
                "ret": [
                    "None"
                ]
            }
        },
        "PeriodicCallback._schedule_next": {
            "name": "_schedule_next",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "IOLoop._setup_logging": {
            "name": "_setup_logging",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "PeriodicCallback._update_next": {
            "name": "_update_next",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "current_time": []
            },
            "variables": {
                "callback_time_sec": [
                    "float"
                ]
            }
        },
        "IOLoop.add_callback": {
            "name": "add_callback",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "callback": [],
                "kwargs": [],
                "args": []
            },
            "variables": {}
        },
        "PollIOLoop.add_callback": {
            "name": "add_callback",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "callback": [],
                "kwargs": [],
                "args": []
            },
            "variables": {}
        },
        "IOLoop.add_callback_from_signal": {
            "name": "add_callback_from_signal",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "callback": [],
                "kwargs": [],
                "args": []
            },
            "variables": {}
        },
        "PollIOLoop.add_callback_from_signal": {
            "name": "add_callback_from_signal",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "callback": [],
                "kwargs": [],
                "args": []
            },
            "variables": {}
        },
        "IOLoop.add_future": {
            "name": "add_future",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "future": [],
                "callback": []
            },
            "variables": {}
        },
        "IOLoop.add_handler": {
            "name": "add_handler",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "fd": [],
                "handler": [],
                "events": []
            },
            "variables": {}
        },
        "PollIOLoop.add_handler": {
            "name": "add_handler",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "fd": [],
                "handler": [],
                "events": []
            },
            "variables": {}
        },
        "IOLoop.add_timeout": {
            "name": "add_timeout",
            "location": -1,
            "return": [],
            "arguments": {
                "deadline": [],
                "callback": [],
                "kwargs": [],
                "args": []
            },
            "variables": {
                "deadline": [
                    "numbers_@_Real",
                    "datetime_@_timedelta"
                ]
            }
        },
        "IOLoop.call_at": {
            "name": "call_at",
            "location": -1,
            "return": [],
            "arguments": {
                "when": [],
                "callback": [],
                "kwargs": [],
                "args": []
            },
            "variables": {}
        },
        "PollIOLoop.call_at": {
            "name": "call_at",
            "location": -1,
            "return": [
                "_Timeout"
            ],
            "arguments": {
                "deadline": [],
                "callback": [],
                "kwargs": [],
                "args": []
            },
            "variables": {
                "timeout": [
                    "_Timeout"
                ]
            }
        },
        "IOLoop.call_later": {
            "name": "call_later",
            "location": -1,
            "return": [],
            "arguments": {
                "delay": [],
                "callback": [],
                "kwargs": [],
                "args": []
            },
            "variables": {}
        },
        "IOLoop.clear_current": {
            "name": "clear_current",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "old": [
                    "None"
                ],
                "asyncio": [
                    "None"
                ],
                "IOLoop_": [
                    "None"
                ]
            }
        },
        "IOLoop.clear_instance": {
            "name": "clear_instance",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "IOLoop.close": {
            "name": "close",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "all_fds": [
                    "bool"
                ]
            },
            "variables": {}
        },
        "PollIOLoop.close": {
            "name": "close",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "all_fds": [
                    "bool"
                ]
            },
            "variables": {
                "_closing": [
                    "bool"
                ],
                "all_fds": [
                    "bool"
                ],
                "_callbacks": [
                    "None"
                ],
                "_timeouts": [
                    "None"
                ]
            }
        },
        "IOLoop.close_fd": {
            "name": "close_fd",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "fd": []
            },
            "variables": {}
        },
        "IOLoop.configurable_base": {
            "name": "configurable_base",
            "location": -1,
            "return": [
                "IOLoop"
            ],
            "arguments": {
                "cls": []
            },
            "variables": {}
        },
        "PollIOLoop.configurable_base": {
            "name": "configurable_base",
            "location": -1,
            "return": [
                "PollIOLoop"
            ],
            "arguments": {
                "cls": []
            },
            "variables": {}
        },
        "IOLoop.configurable_default": {
            "name": "configurable_default",
            "location": -1,
            "return": [],
            "arguments": {
                "cls": []
            },
            "variables": {
                "asyncio": [
                    "None"
                ]
            }
        },
        "PollIOLoop.configurable_default": {
            "name": "configurable_default",
            "location": -1,
            "return": [],
            "arguments": {
                "cls": []
            },
            "variables": {}
        },
        "IOLoop.configure": {
            "name": "configure",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "impl": [],
                "kwargs": []
            },
            "variables": {
                "asyncio": [
                    "None"
                ]
            }
        },
        "IOLoop.current": {
            "name": "current",
            "location": -1,
            "return": [
                "None",
                "IOLoop"
            ],
            "arguments": {
                "instance": [
                    "bool"
                ]
            },
            "variables": {
                "asyncio": [
                    "None"
                ],
                "IOLoop_": [
                    "current"
                ],
                "current": [
                    "IOLoop",
                    "AsyncIOMainLoop",
                    "None"
                ],
                "instance": [
                    "bool"
                ]
            }
        },
        "global": {},
        "IOLoop.handle_callback_exception": {
            "name": "handle_callback_exception",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "callback": []
            },
            "variables": {}
        },
        "IOLoop.initialize": {
            "name": "initialize",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "make_current": [
                    "None"
                ]
            },
            "variables": {
                "make_current": [
                    "None"
                ]
            }
        },
        "PollIOLoop.initialize": {
            "name": "initialize",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "impl": [],
                "time_func": [
                    "None"
                ],
                "kwargs": []
            },
            "variables": {
                "time_func": [
                    "None"
                ],
                "_handlers": [
                    "dict"
                ],
                "_events": [
                    "dict"
                ],
                "_timeouts": [
                    "list"
                ],
                "_cancellations": [
                    "int"
                ],
                "_running": [
                    "bool"
                ],
                "_stopped": [
                    "bool"
                ],
                "_closing": [
                    "bool"
                ],
                "_thread_ident": [
                    "None"
                ],
                "_blocking_signal_threshold": [
                    "None"
                ]
            }
        },
        "IOLoop.install": {
            "name": "install",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "IOLoop.instance": {
            "name": "instance",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "PeriodicCallback.is_running": {
            "name": "is_running",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "IOLoop.log_stack": {
            "name": "log_stack",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "signal": [],
                "frame": []
            },
            "variables": {}
        },
        "IOLoop.make_current": {
            "name": "make_current",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "IOLoop_": [
                    "IOLoop"
                ],
                "old": [
                    "None"
                ]
            }
        },
        "IOLoop.remove_handler": {
            "name": "remove_handler",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "fd": []
            },
            "variables": {}
        },
        "PollIOLoop.remove_handler": {
            "name": "remove_handler",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "fd": []
            },
            "variables": {}
        },
        "IOLoop.remove_timeout": {
            "name": "remove_timeout",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "timeout": []
            },
            "variables": {}
        },
        "PollIOLoop.remove_timeout": {
            "name": "remove_timeout",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "timeout": []
            },
            "variables": {
                "timeout_": [
                    "None"
                ]
            }
        },
        "IOLoop.run": {
            "name": "run",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "result": [
                    "None"
                ]
            }
        },
        "IOLoop.run_in_executor": {
            "name": "run_in_executor",
            "location": -1,
            "return": [
                "Future"
            ],
            "arguments": {
                "executor": [],
                "func": [],
                "args": []
            },
            "variables": {
                "ThreadPoolExecutor": [
                    "None"
                ],
                "executor": [
                    "None",
                    "ThreadPoolExecutor"
                ],
                "_executor": [
                    "ThreadPoolExecutor"
                ],
                "t_future": [
                    "Future"
                ]
            }
        },
        "IOLoop.run_sync": {
            "name": "run_sync",
            "location": -1,
            "return": [],
            "arguments": {
                "func": [],
                "timeout": [
                    "None"
                ]
            },
            "variables": {
                "future_cell": [
                    "list[None]"
                ],
                "timeout": [
                    "None"
                ]
            }
        },
        "IOLoop.set_blocking_log_threshold": {
            "name": "set_blocking_log_threshold",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "seconds": []
            },
            "variables": {}
        },
        "IOLoop.set_blocking_signal_threshold": {
            "name": "set_blocking_signal_threshold",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "seconds": [],
                "action": []
            },
            "variables": {}
        },
        "PollIOLoop.set_blocking_signal_threshold": {
            "name": "set_blocking_signal_threshold",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "seconds": [],
                "action": []
            },
            "variables": {
                "signal": [
                    "None"
                ],
                "seconds": [
                    "None"
                ],
                "action": [
                    "None"
                ]
            }
        },
        "IOLoop.set_default_executor": {
            "name": "set_default_executor",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "executor": []
            },
            "variables": {}
        },
        "IOLoop.spawn_callback": {
            "name": "spawn_callback",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "callback": [],
                "kwargs": [],
                "args": []
            },
            "variables": {}
        },
        "IOLoop.split_fd": {
            "name": "split_fd",
            "location": -1,
            "return": [
                "tuple"
            ],
            "arguments": {
                "fd": []
            },
            "variables": {}
        },
        "IOLoop.start": {
            "name": "start",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "PeriodicCallback.start": {
            "name": "start",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "_running": [
                    "bool"
                ]
            }
        },
        "PollIOLoop.start": {
            "name": "start",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "_running": [
                    "bool"
                ],
                "_stopped": [
                    "bool"
                ],
                "old_current": [
                    "self",
                    "None"
                ],
                "old_wakeup_fd": [
                    "None"
                ],
                "signal": [
                    "None"
                ],
                "ncallbacks": [
                    "int"
                ],
                "due_timeouts": [
                    "list",
                    "None"
                ],
                "_timeouts": [
                    "list"
                ],
                "_cancellations": [
                    "int"
                ],
                "timeout": [
                    "None"
                ],
                "timeout_": [
                    "None"
                ],
                "poll_timeout": [
                    "float",
                    "int"
                ],
                "_POLL_TIMEOUT": [
                    "float"
                ],
                "_blocking_signal_threshold": [
                    "None"
                ],
                "e": [
                    "Exception"
                ],
                "fd_obj": [
                    "None"
                ],
                "handler_func": [
                    "None"
                ]
            }
        },
        "IOLoop.stop": {
            "name": "stop",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "PeriodicCallback.stop": {
            "name": "stop",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "_running": [
                    "bool"
                ],
                "_timeout": [
                    "None"
                ]
            }
        },
        "PollIOLoop.stop": {
            "name": "stop",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "_running": [
                    "bool"
                ],
                "_stopped": [
                    "bool"
                ]
            }
        },
        "IOLoop.time": {
            "name": "time",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "PollIOLoop.time": {
            "name": "time",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "IOLoop.timeout_callback": {
            "name": "timeout_callback",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "IOLoop.update_handler": {
            "name": "update_handler",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "fd": [],
                "events": []
            },
            "variables": {}
        },
        "PollIOLoop.update_handler": {
            "name": "update_handler",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "fd": [],
                "events": []
            },
            "variables": {}
        }
    },
    "tornado-5.0.2/tornado/iostream.py": {
        "BaseIOStream.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "max_buffer_size": [
                    "None"
                ],
                "read_chunk_size": [
                    "None"
                ],
                "max_write_buffer_size": [
                    "None"
                ]
            },
            "variables": {
                "max_buffer_size": [
                    "None",
                    "int"
                ],
                "read_chunk_size": [
                    "None",
                    "int"
                ],
                "max_write_buffer_size": [
                    "None"
                ],
                "error": [
                    "None"
                ],
                "_read_buffer": [
                    "bytearray"
                ],
                "_read_buffer_pos": [
                    "int"
                ],
                "_read_buffer_size": [
                    "int"
                ],
                "_user_read_buffer": [
                    "bool"
                ],
                "_after_user_read_buffer": [
                    "None"
                ],
                "_write_buffer": [
                    "_StreamBuffer"
                ],
                "_total_write_index": [
                    "int"
                ],
                "_total_write_done_index": [
                    "int"
                ],
                "_read_delimiter": [
                    "None"
                ],
                "_read_regex": [
                    "None"
                ],
                "_read_max_bytes": [
                    "None"
                ],
                "_read_bytes": [
                    "None"
                ],
                "_read_partial": [
                    "bool"
                ],
                "_read_until_close": [
                    "bool"
                ],
                "_read_callback": [
                    "None"
                ],
                "_read_future": [
                    "None"
                ],
                "_streaming_callback": [
                    "None"
                ],
                "_write_callback": [
                    "None"
                ],
                "_close_callback": [
                    "None"
                ],
                "_connect_callback": [
                    "None"
                ],
                "_connect_future": [
                    "None"
                ],
                "_ssl_connect_future": [
                    "None"
                ],
                "_connecting": [
                    "bool"
                ],
                "_state": [
                    "None"
                ],
                "_pending_callbacks": [
                    "int"
                ],
                "_closed": [
                    "bool"
                ]
            }
        },
        "IOStream.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "socket": [],
                "kwargs": [],
                "args": []
            },
            "variables": {}
        },
        "PipeIOStream.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "fd": [],
                "kwargs": [],
                "args": []
            },
            "variables": {}
        },
        "SSLIOStream.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "kwargs": [],
                "args": []
            },
            "variables": {
                "_ssl_accepting": [
                    "bool"
                ],
                "_handshake_reading": [
                    "bool"
                ],
                "_handshake_writing": [
                    "bool"
                ],
                "_ssl_connect_callback": [
                    "None"
                ],
                "_server_hostname": [
                    "None"
                ]
            }
        },
        "StreamClosedError.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "real_error": [
                    "None"
                ]
            },
            "variables": {
                "real_error": [
                    "None"
                ]
            }
        },
        "_StreamBuffer.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "_first_pos": [
                    "int"
                ],
                "_size": [
                    "int"
                ]
            }
        },
        "_StreamBuffer.__len__": {
            "name": "__len__",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "BaseIOStream._add_io_state": {
            "name": "_add_io_state",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "state": []
            },
            "variables": {
                "_state": [
                    "None"
                ]
            }
        },
        "BaseIOStream._check_closed": {
            "name": "_check_closed",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "BaseIOStream._check_max_bytes": {
            "name": "_check_max_bytes",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "delimiter": [],
                "size": []
            },
            "variables": {}
        },
        "BaseIOStream._consume": {
            "name": "_consume",
            "location": -1,
            "return": [
                "bytes"
            ],
            "arguments": {
                "loc": []
            },
            "variables": {
                "_read_buffer_pos": [
                    "int"
                ]
            }
        },
        "SSLIOStream._do_ssl_handshake": {
            "name": "_do_ssl_handshake",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "_handshake_reading": [
                    "bool"
                ],
                "_handshake_writing": [
                    "bool"
                ],
                "err": [
                    "Exception"
                ],
                "ssl": [
                    "None"
                ],
                "peer": [
                    "typing.Text"
                ],
                "_ssl_accepting": [
                    "bool"
                ]
            }
        },
        "BaseIOStream._find_read_pos": {
            "name": "_find_read_pos",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "_read_delimiter": [
                    "None"
                ],
                "delimiter_len": [
                    "int"
                ],
                "_read_regex": [
                    "None"
                ],
                "m": [
                    "None"
                ]
            }
        },
        "IOStream._handle_connect": {
            "name": "_handle_connect",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "_connect_future": [
                    "None"
                ],
                "_connect_callback": [
                    "None"
                ],
                "_connecting": [
                    "bool"
                ]
            }
        },
        "SSLIOStream._handle_connect": {
            "name": "_handle_connect",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "_state": [
                    "None"
                ]
            }
        },
        "BaseIOStream._handle_events": {
            "name": "_handle_events",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "fd": [],
                "events": []
            },
            "variables": {
                "e": [
                    "Exception"
                ]
            }
        },
        "BaseIOStream._handle_read": {
            "name": "_handle_read",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "pos": [
                    "None"
                ],
                "e": [
                    "Exception"
                ]
            }
        },
        "SSLIOStream._handle_read": {
            "name": "_handle_read",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "BaseIOStream._handle_write": {
            "name": "_handle_write",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "size": [
                    "int"
                ],
                "e": [
                    "Exception"
                ],
                "_ERRNO_WOULDBLOCK": [
                    "tuple"
                ],
                "_write_callback": [
                    "None"
                ]
            }
        },
        "SSLIOStream._handle_write": {
            "name": "_handle_write",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "BaseIOStream._is_connreset": {
            "name": "_is_connreset",
            "location": -1,
            "return": [
                "bool"
            ],
            "arguments": {
                "exc": []
            },
            "variables": {
                "_ERRNO_CONNRESET": [
                    "tuple"
                ]
            }
        },
        "SSLIOStream._is_connreset": {
            "name": "_is_connreset",
            "location": -1,
            "return": [
                "bool"
            ],
            "arguments": {
                "e": []
            },
            "variables": {
                "ssl": [
                    "None"
                ]
            }
        },
        "BaseIOStream._maybe_add_error_listener": {
            "name": "_maybe_add_error_listener",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "BaseIOStream._maybe_run_close_callback": {
            "name": "_maybe_run_close_callback",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "futures": [
                    "list"
                ],
                "_read_future": [
                    "None"
                ],
                "_connect_future": [
                    "None"
                ],
                "_ssl_connect_future": [
                    "None"
                ],
                "_close_callback": [
                    "None"
                ],
                "_read_callback": [
                    "None"
                ],
                "_write_callback": [
                    "None"
                ],
                "_write_buffer": [
                    "None"
                ]
            }
        },
        "BaseIOStream._read_from_buffer": {
            "name": "_read_from_buffer",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "pos": []
            },
            "variables": {
                "_read_bytes": [
                    "None"
                ],
                "_read_delimiter": [
                    "None"
                ],
                "_read_regex": [
                    "None"
                ],
                "_read_partial": [
                    "bool"
                ]
            }
        },
        "BaseIOStream._read_to_buffer": {
            "name": "_read_to_buffer",
            "location": -1,
            "return": [
                "None",
                "int"
            ],
            "arguments": {},
            "variables": {
                "buf": [
                    "bytearray",
                    "None"
                ],
                "bytes_read": [
                    "None"
                ],
                "e": [
                    "Exception"
                ]
            }
        },
        "BaseIOStream._read_to_buffer_loop": {
            "name": "_read_to_buffer_loop",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {
                "_read_bytes": [
                    "None"
                ],
                "target_bytes": [
                    "None",
                    "int"
                ],
                "_read_max_bytes": [
                    "None"
                ],
                "next_find_pos": [
                    "int"
                ],
                "_pending_callbacks": [
                    "int"
                ],
                "pos": [
                    "None"
                ]
            }
        },
        "BaseIOStream._run_callback": {
            "name": "_run_callback",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "callback": [],
                "args": []
            },
            "variables": {}
        },
        "BaseIOStream._run_read_callback": {
            "name": "_run_read_callback",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "size": [],
                "streaming": []
            },
            "variables": {
                "_user_read_buffer": [
                    "bool"
                ],
                "_after_user_read_buffer": [
                    "None"
                ],
                "_read_buffer": [
                    "bytearray"
                ],
                "_read_buffer_pos": [
                    "int"
                ],
                "_read_buffer_size": [
                    "int"
                ],
                "_streaming_callback": [
                    "None"
                ],
                "callback": [
                    "None"
                ],
                "_read_callback": [
                    "None"
                ],
                "_read_future": [
                    "None"
                ]
            }
        },
        "SSLIOStream._run_ssl_connect_callback": {
            "name": "_run_ssl_connect_callback",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "_ssl_connect_callback": [
                    "None"
                ],
                "_ssl_connect_future": [
                    "None"
                ]
            }
        },
        "BaseIOStream._run_streaming_callback": {
            "name": "_run_streaming_callback",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "_read_bytes": [
                    "None"
                ]
            }
        },
        "BaseIOStream._set_read_callback": {
            "name": "_set_read_callback",
            "location": -1,
            "return": [
                "Future"
            ],
            "arguments": {
                "callback": []
            },
            "variables": {
                "callback": [
                    "None"
                ],
                "_read_future": [
                    "Future"
                ]
            }
        },
        "BaseIOStream._try_inline_read": {
            "name": "_try_inline_read",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "pos": [
                    "None"
                ]
            }
        },
        "SSLIOStream._verify_cert": {
            "name": "_verify_cert",
            "location": -1,
            "return": [
                "bool"
            ],
            "arguments": {
                "peercert": []
            },
            "variables": {
                "_ssl_options": [
                    "dict",
                    "ssl_@_SSLContext"
                ],
                "ssl": [
                    "None"
                ],
                "e": [
                    "Exception"
                ]
            }
        },
        "_StreamBuffer.advance": {
            "name": "advance",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "size": []
            },
            "variables": {
                "size": [
                    "int"
                ],
                "_first_pos": [
                    "int"
                ],
                "pos": [
                    "int"
                ],
                "b_remain": [
                    "int"
                ]
            }
        },
        "_StreamBuffer.append": {
            "name": "append",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "data": []
            },
            "variables": {
                "data": [
                    "memoryview"
                ],
                "size": [
                    "int"
                ],
                "new_buf": [
                    "bool"
                ]
            }
        },
        "BaseIOStream.close": {
            "name": "close",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "exc_info": [
                    "bool"
                ]
            },
            "variables": {
                "exc_info": [
                    "bool",
                    "tuple",
                    "BaseException"
                ],
                "error": [
                    "BaseException"
                ],
                "_read_until_close": [
                    "bool"
                ],
                "_state": [
                    "None"
                ],
                "_closed": [
                    "bool"
                ]
            }
        },
        "IOStream.close_callback": {
            "name": "close_callback",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "orig_close_callback": [
                    "None"
                ]
            }
        },
        "BaseIOStream.close_fd": {
            "name": "close_fd",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "IOStream.close_fd": {
            "name": "close_fd",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "socket": [
                    "None"
                ]
            }
        },
        "PipeIOStream.close_fd": {
            "name": "close_fd",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "BaseIOStream.closed": {
            "name": "closed",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "IOStream.connect": {
            "name": "connect",
            "location": -1,
            "return": [
                "Future",
                "None"
            ],
            "arguments": {
                "address": [],
                "callback": [
                    "None"
                ],
                "server_hostname": [
                    "None"
                ]
            },
            "variables": {
                "_connecting": [
                    "bool"
                ],
                "callback": [
                    "None"
                ],
                "future": [
                    "None",
                    "Future"
                ],
                "_connect_future": [
                    "Future"
                ],
                "e": [
                    "Exception"
                ],
                "_ERRNO_INPROGRESS": [
                    "tuple"
                ],
                "_ERRNO_WOULDBLOCK": [
                    "tuple"
                ]
            }
        },
        "SSLIOStream.connect": {
            "name": "connect",
            "location": -1,
            "return": [],
            "arguments": {
                "address": [],
                "callback": [
                    "None"
                ],
                "server_hostname": [
                    "None"
                ]
            },
            "variables": {
                "server_hostname": [
                    "None"
                ],
                "_server_hostname": [
                    "None"
                ],
                "callback": [
                    "None"
                ]
            }
        },
        "doctests": {
            "name": "doctests",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "BaseIOStream.fileno": {
            "name": "fileno",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "IOStream.fileno": {
            "name": "fileno",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "PipeIOStream.fileno": {
            "name": "fileno",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "BaseIOStream.get_fd_error": {
            "name": "get_fd_error",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "IOStream.get_fd_error": {
            "name": "get_fd_error",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "global": {},
        "_StreamBuffer.peek": {
            "name": "peek",
            "location": -1,
            "return": [
                "memoryview"
            ],
            "arguments": {
                "size": []
            },
            "variables": {}
        },
        "BaseIOStream.read_bytes": {
            "name": "read_bytes",
            "location": -1,
            "return": [],
            "arguments": {
                "num_bytes": [],
                "callback": [
                    "None"
                ],
                "streaming_callback": [
                    "None"
                ],
                "partial": [
                    "bool"
                ]
            },
            "variables": {
                "callback": [
                    "None"
                ],
                "future": [
                    "None"
                ],
                "partial": [
                    "bool"
                ],
                "_read_partial": [
                    "bool"
                ],
                "streaming_callback": [
                    "None"
                ]
            }
        },
        "BaseIOStream.read_from_fd": {
            "name": "read_from_fd",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "buf": []
            },
            "variables": {}
        },
        "IOStream.read_from_fd": {
            "name": "read_from_fd",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "buf": []
            },
            "variables": {
                "buf": [
                    "None"
                ],
                "e": [
                    "Exception"
                ],
                "_ERRNO_WOULDBLOCK": [
                    "tuple"
                ]
            }
        },
        "PipeIOStream.read_from_fd": {
            "name": "read_from_fd",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "buf": []
            },
            "variables": {
                "buf": [
                    "None"
                ],
                "e": [
                    "Exception"
                ]
            }
        },
        "SSLIOStream.read_from_fd": {
            "name": "read_from_fd",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "buf": []
            },
            "variables": {
                "buf": [
                    "None"
                ],
                "e": [
                    "Exception"
                ],
                "ssl": [
                    "None"
                ],
                "_ERRNO_WOULDBLOCK": [
                    "tuple"
                ]
            }
        },
        "BaseIOStream.read_into": {
            "name": "read_into",
            "location": -1,
            "return": [],
            "arguments": {
                "buf": [],
                "callback": [
                    "None"
                ],
                "partial": [
                    "bool"
                ]
            },
            "variables": {
                "callback": [
                    "None"
                ],
                "future": [
                    "None"
                ],
                "n": [
                    "int"
                ],
                "_read_buffer_pos": [
                    "int"
                ],
                "_user_read_buffer": [
                    "bool"
                ],
                "_read_bytes": [
                    "int"
                ],
                "partial": [
                    "bool"
                ],
                "_read_partial": [
                    "bool"
                ]
            }
        },
        "BaseIOStream.read_until": {
            "name": "read_until",
            "location": -1,
            "return": [],
            "arguments": {
                "delimiter": [],
                "callback": [
                    "None"
                ],
                "max_bytes": [
                    "None"
                ]
            },
            "variables": {
                "callback": [
                    "None"
                ],
                "future": [
                    "None"
                ],
                "max_bytes": [
                    "None"
                ],
                "_read_max_bytes": [
                    "None"
                ],
                "e": [
                    "Exception"
                ]
            }
        },
        "BaseIOStream.read_until_close": {
            "name": "read_until_close",
            "location": -1,
            "return": [],
            "arguments": {
                "callback": [
                    "None"
                ],
                "streaming_callback": [
                    "None"
                ]
            },
            "variables": {
                "callback": [
                    "None"
                ],
                "future": [
                    "None"
                ],
                "streaming_callback": [
                    "None"
                ],
                "_streaming_callback": [
                    "None"
                ],
                "_read_until_close": [
                    "bool"
                ]
            }
        },
        "BaseIOStream.read_until_regex": {
            "name": "read_until_regex",
            "location": -1,
            "return": [],
            "arguments": {
                "regex": [],
                "callback": [
                    "None"
                ],
                "max_bytes": [
                    "None"
                ]
            },
            "variables": {
                "callback": [
                    "None"
                ],
                "future": [
                    "None"
                ],
                "max_bytes": [
                    "None"
                ],
                "_read_max_bytes": [
                    "None"
                ],
                "e": [
                    "Exception"
                ]
            }
        },
        "BaseIOStream.reading": {
            "name": "reading",
            "location": -1,
            "return": [
                "bool"
            ],
            "arguments": {},
            "variables": {}
        },
        "SSLIOStream.reading": {
            "name": "reading",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "BaseIOStream.set_close_callback": {
            "name": "set_close_callback",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "callback": []
            },
            "variables": {}
        },
        "BaseIOStream.set_nodelay": {
            "name": "set_nodelay",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "value": []
            },
            "variables": {}
        },
        "IOStream.set_nodelay": {
            "name": "set_nodelay",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "value": []
            },
            "variables": {
                "e": [
                    "Exception"
                ]
            }
        },
        "IOStream.start_tls": {
            "name": "start_tls",
            "location": -1,
            "return": [
                "Future"
            ],
            "arguments": {
                "server_side": [],
                "ssl_options": [
                    "None"
                ],
                "server_hostname": [
                    "None"
                ]
            },
            "variables": {
                "ssl_options": [
                    "None"
                ],
                "socket": [
                    "None"
                ],
                "server_hostname": [
                    "None"
                ],
                "_close_callback": [
                    "None"
                ],
                "future": [
                    "Future"
                ],
                "ssl_stream": [
                    "SSLIOStream"
                ],
                "ssl_stream_": [
                    "typing.Callable"
                ]
            }
        },
        "SSLIOStream.wait_for_handshake": {
            "name": "wait_for_handshake",
            "location": -1,
            "return": [
                "Future",
                "None"
            ],
            "arguments": {
                "callback": [
                    "None"
                ]
            },
            "variables": {
                "_ssl_connect_future": [
                    "Future"
                ],
                "callback": [
                    "None"
                ],
                "future": [
                    "None",
                    "Future"
                ]
            }
        },
        "BaseIOStream.wrapper": {
            "name": "wrapper",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {
                "_pending_callbacks": [
                    "int"
                ],
                "e": [
                    "Exception"
                ]
            }
        },
        "BaseIOStream.write": {
            "name": "write",
            "location": -1,
            "return": [
                "Future",
                "None"
            ],
            "arguments": {
                "data": [],
                "callback": [
                    "None"
                ]
            },
            "variables": {
                "callback": [
                    "None"
                ],
                "future": [
                    "None",
                    "Future"
                ]
            }
        },
        "BaseIOStream.write_to_fd": {
            "name": "write_to_fd",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "data": []
            },
            "variables": {}
        },
        "IOStream.write_to_fd": {
            "name": "write_to_fd",
            "location": -1,
            "return": [],
            "arguments": {
                "data": []
            },
            "variables": {}
        },
        "PipeIOStream.write_to_fd": {
            "name": "write_to_fd",
            "location": -1,
            "return": [],
            "arguments": {
                "data": []
            },
            "variables": {}
        },
        "SSLIOStream.write_to_fd": {
            "name": "write_to_fd",
            "location": -1,
            "return": [
                "int"
            ],
            "arguments": {
                "data": []
            },
            "variables": {
                "e": [
                    "Exception"
                ],
                "ssl": [
                    "None"
                ]
            }
        },
        "BaseIOStream.writing": {
            "name": "writing",
            "location": -1,
            "return": [
                "bool"
            ],
            "arguments": {},
            "variables": {}
        },
        "SSLIOStream.writing": {
            "name": "writing",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        }
    },
    "tornado-5.0.2/tornado/locale.py": {
        "GettextLocale.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "code": [],
                "translations": []
            },
            "variables": {}
        },
        "Locale.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "code": [],
                "translations": []
            },
            "variables": {
                "rtl": [
                    "bool"
                ],
                "prefix": [
                    "typing.Text"
                ],
                "_months": [
                    "list"
                ],
                "_weekdays": [
                    "list"
                ]
            }
        },
        "Locale.format_date": {
            "name": "format_date",
            "location": -1,
            "return": [],
            "arguments": {
                "date": [],
                "gmt_offset": [
                    "int"
                ],
                "relative": [
                    "bool"
                ],
                "shorter": [
                    "bool"
                ],
                "full_format": [
                    "bool"
                ]
            },
            "variables": {
                "date": [
                    "numbers_@_Real"
                ],
                "relative": [
                    "bool"
                ],
                "full_format": [
                    "bool"
                ],
                "gmt_offset": [
                    "int"
                ],
                "format": [
                    "None"
                ],
                "shorter": [
                    "bool"
                ],
                "tfhour_clock": [
                    "bool"
                ],
                "str_time": [
                    "typing.Text"
                ]
            }
        },
        "Locale.format_day": {
            "name": "format_day",
            "location": -1,
            "return": [],
            "arguments": {
                "date": [],
                "gmt_offset": [
                    "int"
                ],
                "dow": [
                    "bool"
                ]
            },
            "variables": {
                "gmt_offset": [
                    "int"
                ],
                "dow": [
                    "bool"
                ]
            }
        },
        "Locale.friendly_number": {
            "name": "friendly_number",
            "location": -1,
            "return": [
                "str"
            ],
            "arguments": {
                "value": []
            },
            "variables": {
                "value": [
                    "str"
                ],
                "parts": [
                    "list",
                    "list[str]"
                ]
            }
        },
        "Locale.get": {
            "name": "get",
            "location": -1,
            "return": [
                "CSVLocale",
                "GettextLocale"
            ],
            "arguments": {
                "cls": [],
                "code": []
            },
            "variables": {
                "cls_": [
                    "dict",
                    "dict[, typing.Union[CSVLocale,GettextLocale]]"
                ],
                "_translations": [
                    "dict"
                ],
                "translations": [
                    "None"
                ],
                "locale": [
                    "CSVLocale",
                    "GettextLocale"
                ],
                "_use_gettext": [
                    "bool"
                ]
            }
        },
        "get": {
            "name": "get",
            "location": -1,
            "return": [],
            "arguments": {
                "locale_codes": []
            },
            "variables": {}
        },
        "Locale.get_closest": {
            "name": "get_closest",
            "location": -1,
            "return": [],
            "arguments": {
                "cls": [],
                "locale_codes": []
            },
            "variables": {
                "_supported_locales": [
                    "set[typing.Text]"
                ],
                "_default_locale": [
                    "typing.Text"
                ]
            }
        },
        "get_supported_locales": {
            "name": "get_supported_locales",
            "location": -1,
            "return": [
                "set[typing.Text]"
            ],
            "arguments": {},
            "variables": {
                "_supported_locales": [
                    "set[typing.Text]"
                ]
            }
        },
        "global": {},
        "Locale.list": {
            "name": "list",
            "location": -1,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "parts": []
            },
            "variables": {
                "comma": [
                    "typing.Text"
                ]
            }
        },
        "load_gettext_translations": {
            "name": "load_gettext_translations",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "directory": [],
                "domain": []
            },
            "variables": {
                "_translations": [
                    "dict"
                ],
                "e": [
                    "Exception"
                ],
                "_default_locale": [
                    "typing.Text"
                ],
                "_supported_locales": [
                    "set[typing.Text]"
                ],
                "_use_gettext": [
                    "bool"
                ]
            }
        },
        "load_translations": {
            "name": "load_translations",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "directory": [],
                "encoding": [
                    "None"
                ]
            },
            "variables": {
                "_translations": [
                    "dict",
                    "dict[, dict]"
                ],
                "encoding": [
                    "None",
                    "typing.Text"
                ],
                "f": [
                    "typing.IO",
                    "BytesIO"
                ],
                "data": [
                    "str"
                ],
                "row": [
                    "list"
                ],
                "_default_locale": [
                    "typing.Text"
                ],
                "_supported_locales": [
                    "set[typing.Text]"
                ]
            }
        },
        "CSVLocale.pgettext": {
            "name": "pgettext",
            "location": -1,
            "return": [],
            "arguments": {
                "context": [],
                "message": [],
                "plural_message": [
                    "None"
                ],
                "count": [
                    "None"
                ]
            },
            "variables": {
                "plural_message": [
                    "None"
                ],
                "count": [
                    "None"
                ]
            }
        },
        "GettextLocale.pgettext": {
            "name": "pgettext",
            "location": -1,
            "return": [],
            "arguments": {
                "context": [],
                "message": [],
                "plural_message": [
                    "None"
                ],
                "count": [
                    "None"
                ]
            },
            "variables": {
                "plural_message": [
                    "None"
                ],
                "CONTEXT_SEPARATOR": [
                    "typing.Text"
                ],
                "count": [
                    "None"
                ],
                "msgs_with_ctxt": [
                    "tuple[typing.Optional[typing.Text]]"
                ],
                "msg_with_ctxt": [
                    "typing.Text"
                ]
            }
        },
        "Locale.pgettext": {
            "name": "pgettext",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [],
                "message": [],
                "plural_message": [
                    "None"
                ],
                "count": [
                    "None"
                ]
            },
            "variables": {}
        },
        "set_default_locale": {
            "name": "set_default_locale",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "code": []
            },
            "variables": {
                "_translations": [
                    "dict"
                ],
                "_supported_locales": [
                    "set"
                ]
            }
        },
        "CSVLocale.translate": {
            "name": "translate",
            "location": -1,
            "return": [],
            "arguments": {
                "message": [],
                "plural_message": [
                    "None"
                ],
                "count": [
                    "None"
                ]
            },
            "variables": {
                "plural_message": [
                    "None"
                ],
                "count": [
                    "None"
                ]
            }
        },
        "GettextLocale.translate": {
            "name": "translate",
            "location": -1,
            "return": [],
            "arguments": {
                "message": [],
                "plural_message": [
                    "None"
                ],
                "count": [
                    "None"
                ]
            },
            "variables": {
                "plural_message": [
                    "None"
                ],
                "count": [
                    "None"
                ]
            }
        },
        "Locale.translate": {
            "name": "translate",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "message": [],
                "plural_message": [
                    "None"
                ],
                "count": [
                    "None"
                ]
            },
            "variables": {}
        }
    },
    "tornado-5.0.2/tornado/locks.py": {
        "Lock.__aenter__": {
            "name": "__aenter__",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {}
        },
        "Semaphore.__aenter__": {
            "name": "__aenter__",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {}
        },
        "Lock.__aexit__": {
            "name": "__aexit__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "typ": [],
                "value": [],
                "tb": []
            },
            "variables": {}
        },
        "Semaphore.__aexit__": {
            "name": "__aexit__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "typ": [],
                "value": [],
                "tb": []
            },
            "variables": {}
        },
        "Lock.__enter__": {
            "name": "__enter__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "Semaphore.__enter__": {
            "name": "__enter__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "_ReleasingContextManager.__enter__": {
            "name": "__enter__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "_ReleasingContextManager.__exit__": {
            "name": "__exit__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "exc_type": [],
                "exc_val": [],
                "exc_tb": []
            },
            "variables": {}
        },
        "BoundedSemaphore.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "value": [
                    "int"
                ]
            },
            "variables": {
                "value": [
                    "int"
                ],
                "_initial_value": [
                    "int"
                ]
            }
        },
        "Condition.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "Event.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "_value": [
                    "bool"
                ],
                "_waiters": [
                    "set"
                ]
            }
        },
        "Lock.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "_block": [
                    "BoundedSemaphore"
                ]
            }
        },
        "Semaphore.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "value": [
                    "int"
                ]
            },
            "variables": {
                "value": [
                    "int"
                ],
                "_value": [
                    "int"
                ]
            }
        },
        "_ReleasingContextManager.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "obj": []
            },
            "variables": {}
        },
        "_TimeoutGarbageCollector.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "_timeouts": [
                    "int"
                ]
            }
        },
        "Condition.__repr__": {
            "name": "__repr__",
            "location": -1,
            "return": [
                "typing.Text"
            ],
            "arguments": {},
            "variables": {
                "result": [
                    "typing.Text"
                ]
            }
        },
        "Event.__repr__": {
            "name": "__repr__",
            "location": -1,
            "return": [
                "typing.Text"
            ],
            "arguments": {},
            "variables": {}
        },
        "Lock.__repr__": {
            "name": "__repr__",
            "location": -1,
            "return": [
                "typing.Text"
            ],
            "arguments": {},
            "variables": {}
        },
        "Semaphore.__repr__": {
            "name": "__repr__",
            "location": -1,
            "return": [
                "str"
            ],
            "arguments": {},
            "variables": {
                "extra": [
                    "typing.Text",
                    "str"
                ]
            }
        },
        "_TimeoutGarbageCollector._garbage_collect": {
            "name": "_garbage_collect",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "_timeouts": [
                    "int"
                ]
            }
        },
        "Lock.acquire": {
            "name": "acquire",
            "location": -1,
            "return": [],
            "arguments": {
                "timeout": [
                    "None"
                ]
            },
            "variables": {
                "timeout": [
                    "None"
                ]
            }
        },
        "Semaphore.acquire": {
            "name": "acquire",
            "location": -1,
            "return": [
                "Future"
            ],
            "arguments": {
                "timeout": [
                    "None"
                ]
            },
            "variables": {
                "waiter": [
                    "Future"
                ],
                "_value": [
                    "int"
                ],
                "timeout": [
                    "None"
                ]
            }
        },
        "Event.clear": {
            "name": "clear",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "_value": [
                    "bool"
                ]
            }
        },
        "global": {},
        "Event.is_set": {
            "name": "is_set",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "Condition.notify": {
            "name": "notify",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            },
            "variables": {
                "waiters": [
                    "list"
                ],
                "n": [
                    "int"
                ]
            }
        },
        "Condition.notify_all": {
            "name": "notify_all",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "Condition.on_timeout": {
            "name": "on_timeout",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "Semaphore.on_timeout": {
            "name": "on_timeout",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "BoundedSemaphore.release": {
            "name": "release",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "Lock.release": {
            "name": "release",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "Semaphore.release": {
            "name": "release",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "_value": [
                    "int"
                ]
            }
        },
        "Event.set": {
            "name": "set",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "_value": [
                    "bool"
                ]
            }
        },
        "Condition.wait": {
            "name": "wait",
            "location": -1,
            "return": [
                "Future"
            ],
            "arguments": {
                "timeout": [
                    "None"
                ]
            },
            "variables": {
                "waiter": [
                    "Future"
                ],
                "timeout": [
                    "None"
                ]
            }
        },
        "Event.wait": {
            "name": "wait",
            "location": -1,
            "return": [
                "Future"
            ],
            "arguments": {
                "timeout": [
                    "None"
                ]
            },
            "variables": {
                "fut": [
                    "Future"
                ],
                "timeout": [
                    "None"
                ]
            }
        }
    },
    "tornado-5.0.2/tornado/log.py": {
        "LogFormatter.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "fmt": [],
                "datefmt": [],
                "style": [
                    "typing.Text"
                ],
                "color": [
                    "bool"
                ],
                "colors": []
            },
            "variables": {
                "_colors": [
                    "dict",
                    "dict[, typing.Text]"
                ],
                "color": [
                    "bool"
                ],
                "curses": [
                    "None"
                ],
                "fg_color": [
                    "typing.Text"
                ],
                "_normal": [
                    "typing.Text"
                ]
            }
        },
        "_safe_unicode": {
            "name": "_safe_unicode",
            "location": -1,
            "return": [
                "str"
            ],
            "arguments": {
                "s": []
            },
            "variables": {}
        },
        "_stderr_supports_color": {
            "name": "_stderr_supports_color",
            "location": -1,
            "return": [
                "bool"
            ],
            "arguments": {},
            "variables": {
                "curses": [
                    "None"
                ],
                "colorama": [
                    "None"
                ]
            }
        },
        "define_logging_options": {
            "name": "define_logging_options",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "options": [
                    "None"
                ]
            },
            "variables": {
                "options": [
                    "None"
                ]
            }
        },
        "enable_pretty_logging": {
            "name": "enable_pretty_logging",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "options": [
                    "None"
                ],
                "logger": [
                    "None"
                ]
            },
            "variables": {
                "options": [
                    "None"
                ],
                "logger": [
                    "None"
                ],
                "error_message": [
                    "typing.Text"
                ]
            }
        },
        "LogFormatter.format": {
            "name": "format",
            "location": -1,
            "return": [
                "str"
            ],
            "arguments": {
                "record": []
            },
            "variables": {
                "record_": [
                    "typing.Text"
                ],
                "e": [
                    "Exception"
                ],
                "formatted": [
                    "str"
                ],
                "lines": [
                    "list"
                ]
            }
        },
        "global": {}
    },
    "tornado-5.0.2/tornado/netutil.py": {
        "ThreadedResolver._create_threadpool": {
            "name": "_create_threadpool",
            "location": -1,
            "return": [
                "ThreadPoolExecutor"
            ],
            "arguments": {
                "cls": [],
                "num_threads": []
            },
            "variables": {
                "cls_": [
                    "None",
                    "ThreadPoolExecutor"
                ]
            }
        },
        "_resolve_addr": {
            "name": "_resolve_addr",
            "location": -1,
            "return": [
                "list[tuple]"
            ],
            "arguments": {
                "host": [],
                "port": [],
                "family": []
            },
            "variables": {
                "results": [
                    "list",
                    "list[tuple]"
                ]
            }
        },
        "accept_handler": {
            "name": "accept_handler",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "fd": [],
                "events": []
            },
            "variables": {
                "_DEFAULT_BACKLOG": [
                    "int"
                ],
                "e": [
                    "Exception"
                ],
                "_ERRNO_WOULDBLOCK": [
                    "tuple"
                ]
            }
        },
        "add_accept_handler": {
            "name": "add_accept_handler",
            "location": -1,
            "return": [],
            "arguments": {
                "sock": [],
                "callback": []
            },
            "variables": {
                "removed": [
                    "list[bool]"
                ]
            }
        },
        "bind_sockets": {
            "name": "bind_sockets",
            "location": -1,
            "return": [
                "list"
            ],
            "arguments": {
                "port": [],
                "address": [
                    "None"
                ],
                "family": [],
                "backlog": [
                    "int"
                ],
                "flags": [
                    "None"
                ],
                "reuse_port": [
                    "bool"
                ]
            },
            "variables": {
                "_DEFAULT_BACKLOG": [
                    "int"
                ],
                "reuse_port": [
                    "bool"
                ],
                "sockets": [
                    "list"
                ],
                "address": [
                    "None"
                ],
                "flags": [
                    "None"
                ],
                "bound_port": [
                    "None"
                ],
                "sockaddr": [
                    "tuple"
                ],
                "e": [
                    "Exception"
                ],
                "backlog": [
                    "int"
                ]
            }
        },
        "bind_unix_socket": {
            "name": "bind_unix_socket",
            "location": -1,
            "return": [],
            "arguments": {
                "file": [],
                "mode": [
                    "int"
                ],
                "backlog": [
                    "int"
                ]
            },
            "variables": {
                "_DEFAULT_BACKLOG": [
                    "int"
                ],
                "err": [
                    "Exception"
                ],
                "mode": [
                    "int"
                ],
                "backlog": [
                    "int"
                ]
            }
        },
        "ExecutorResolver.close": {
            "name": "close",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "executor": [
                    "None"
                ]
            }
        },
        "OverrideResolver.close": {
            "name": "close",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "Resolver.close": {
            "name": "close",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "Resolver.configurable_base": {
            "name": "configurable_base",
            "location": -1,
            "return": [
                "Resolver"
            ],
            "arguments": {
                "cls": []
            },
            "variables": {}
        },
        "Resolver.configurable_default": {
            "name": "configurable_default",
            "location": -1,
            "return": [],
            "arguments": {
                "cls": []
            },
            "variables": {}
        },
        "global": {},
        "BlockingResolver.initialize": {
            "name": "initialize",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "ExecutorResolver.initialize": {
            "name": "initialize",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "executor": [
                    "None"
                ],
                "close_executor": [
                    "bool"
                ]
            },
            "variables": {
                "executor": [
                    "None"
                ],
                "close_executor": [
                    "bool"
                ]
            }
        },
        "OverrideResolver.initialize": {
            "name": "initialize",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "resolver": [],
                "mapping": []
            },
            "variables": {}
        },
        "ThreadedResolver.initialize": {
            "name": "initialize",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "num_threads": [
                    "int"
                ]
            },
            "variables": {
                "num_threads": [
                    "int"
                ]
            }
        },
        "is_valid_ip": {
            "name": "is_valid_ip",
            "location": -1,
            "return": [
                "bool"
            ],
            "arguments": {
                "ip": []
            },
            "variables": {
                "e": [
                    "Exception"
                ]
            }
        },
        "remove_handler": {
            "name": "remove_handler",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "DefaultExecutorResolver.resolve": {
            "name": "resolve",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "host": [],
                "port": [],
                "family": []
            },
            "variables": {
                "result": [
                    "typing.Generator"
                ]
            }
        },
        "ExecutorResolver.resolve": {
            "name": "resolve",
            "location": -1,
            "return": [],
            "arguments": {
                "host": [],
                "port": [],
                "family": []
            },
            "variables": {}
        },
        "OverrideResolver.resolve": {
            "name": "resolve",
            "location": -1,
            "return": [],
            "arguments": {
                "host": [],
                "port": [],
                "family": [],
                "kwargs": [],
                "args": []
            },
            "variables": {}
        },
        "Resolver.resolve": {
            "name": "resolve",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "host": [],
                "port": [],
                "family": [],
                "callback": [
                    "None"
                ]
            },
            "variables": {}
        },
        "ssl_options_to_context": {
            "name": "ssl_options_to_context",
            "location": -1,
            "return": [
                "ssl_@_SSLContext"
            ],
            "arguments": {
                "ssl_options": []
            },
            "variables": {
                "ssl_options": [
                    "ssl_@_SSLContext"
                ],
                "ssl": [
                    "None"
                ]
            }
        },
        "ssl_wrap_socket": {
            "name": "ssl_wrap_socket",
            "location": -1,
            "return": [],
            "arguments": {
                "socket": [],
                "ssl_options": [],
                "server_hostname": [
                    "None"
                ],
                "kwargs": []
            },
            "variables": {
                "ssl": [
                    "None"
                ],
                "server_hostname": [
                    "None"
                ]
            }
        }
    },
    "tornado-5.0.2/tornado/options.py": {
        "OptionParser.__contains__": {
            "name": "__contains__",
            "location": -1,
            "return": [
                "bool"
            ],
            "arguments": {
                "name": []
            },
            "variables": {}
        },
        "_Mockable.__delattr__": {
            "name": "__delattr__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "name": []
            },
            "variables": {}
        },
        "OptionParser.__getattr__": {
            "name": "__getattr__",
            "location": -1,
            "return": [],
            "arguments": {
                "name": []
            },
            "variables": {}
        },
        "_Mockable.__getattr__": {
            "name": "__getattr__",
            "location": -1,
            "return": [],
            "arguments": {
                "name": []
            },
            "variables": {}
        },
        "OptionParser.__getitem__": {
            "name": "__getitem__",
            "location": -1,
            "return": [],
            "arguments": {
                "name": []
            },
            "variables": {}
        },
        "OptionParser.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "_Mockable.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "options": []
            },
            "variables": {}
        },
        "_Option.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [],
                "default": [
                    "None"
                ],
                "type": [],
                "help": [
                    "None"
                ],
                "metavar": [
                    "None"
                ],
                "multiple": [
                    "bool"
                ],
                "file_name": [
                    "None"
                ],
                "group_name": [
                    "None"
                ],
                "callback": [
                    "None"
                ]
            },
            "variables": {
                "default": [
                    "None",
                    "list"
                ],
                "multiple": [
                    "bool"
                ],
                "help": [
                    "None"
                ],
                "metavar": [
                    "None"
                ],
                "file_name": [
                    "None"
                ],
                "group_name": [
                    "None"
                ],
                "callback": [
                    "None"
                ]
            }
        },
        "OptionParser.__iter__": {
            "name": "__iter__",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {}
        },
        "OptionParser.__setattr__": {
            "name": "__setattr__",
            "location": -1,
            "return": [],
            "arguments": {
                "name": [],
                "value": []
            },
            "variables": {}
        },
        "_Mockable.__setattr__": {
            "name": "__setattr__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [],
                "value": []
            },
            "variables": {}
        },
        "OptionParser.__setitem__": {
            "name": "__setitem__",
            "location": -1,
            "return": [],
            "arguments": {
                "name": [],
                "value": []
            },
            "variables": {}
        },
        "OptionParser._help_callback": {
            "name": "_help_callback",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "value": []
            },
            "variables": {}
        },
        "OptionParser._normalize_name": {
            "name": "_normalize_name",
            "location": -1,
            "return": [],
            "arguments": {
                "name": []
            },
            "variables": {}
        },
        "_Option._parse_bool": {
            "name": "_parse_bool",
            "location": -1,
            "return": [
                "bool"
            ],
            "arguments": {
                "value": []
            },
            "variables": {}
        },
        "_Option._parse_datetime": {
            "name": "_parse_datetime",
            "location": -1,
            "return": [],
            "arguments": {
                "value": []
            },
            "variables": {}
        },
        "_Option._parse_string": {
            "name": "_parse_string",
            "location": -1,
            "return": [],
            "arguments": {
                "value": []
            },
            "variables": {}
        },
        "_Option._parse_timedelta": {
            "name": "_parse_timedelta",
            "location": -1,
            "return": [],
            "arguments": {
                "value": []
            },
            "variables": {
                "start": [
                    "int"
                ],
                "num": [
                    "float"
                ],
                "units": [
                    "typing.Text"
                ]
            }
        },
        "OptionParser.add_parse_callback": {
            "name": "add_parse_callback",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "callback": []
            },
            "variables": {}
        },
        "add_parse_callback": {
            "name": "add_parse_callback",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "callback": []
            },
            "variables": {
                "options": [
                    "OptionParser"
                ]
            }
        },
        "OptionParser.as_dict": {
            "name": "as_dict",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "OptionParser.define": {
            "name": "define",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [],
                "default": [
                    "None"
                ],
                "type": [
                    "None"
                ],
                "help": [
                    "None"
                ],
                "metavar": [
                    "None"
                ],
                "multiple": [
                    "bool"
                ],
                "group": [
                    "None"
                ],
                "callback": [
                    "None"
                ]
            },
            "variables": {
                "file_name": [
                    "typing.Text"
                ],
                "type": [
                    "None",
                    "str"
                ],
                "multiple": [
                    "bool"
                ],
                "default": [
                    "None"
                ],
                "group": [
                    "None"
                ],
                "group_name": [
                    "None",
                    "typing.Text"
                ],
                "help": [
                    "None"
                ],
                "metavar": [
                    "None"
                ],
                "callback": [
                    "None"
                ],
                "option": [
                    "_Option"
                ]
            }
        },
        "define": {
            "name": "define",
            "location": -1,
            "return": [],
            "arguments": {
                "name": [],
                "default": [
                    "None"
                ],
                "type": [
                    "None"
                ],
                "help": [
                    "None"
                ],
                "metavar": [
                    "None"
                ],
                "multiple": [
                    "bool"
                ],
                "group": [
                    "None"
                ],
                "callback": [
                    "None"
                ]
            },
            "variables": {
                "options": [
                    "OptionParser"
                ],
                "default": [
                    "None"
                ],
                "type": [
                    "None"
                ],
                "help": [
                    "None"
                ],
                "metavar": [
                    "None"
                ],
                "multiple": [
                    "bool"
                ],
                "group": [
                    "None"
                ],
                "callback": [
                    "None"
                ]
            }
        },
        "global": {},
        "OptionParser.group_dict": {
            "name": "group_dict",
            "location": -1,
            "return": [],
            "arguments": {
                "group": []
            },
            "variables": {}
        },
        "OptionParser.groups": {
            "name": "groups",
            "location": -1,
            "return": [
                "set"
            ],
            "arguments": {},
            "variables": {}
        },
        "OptionParser.items": {
            "name": "items",
            "location": -1,
            "return": [
                "list[tuple]"
            ],
            "arguments": {},
            "variables": {}
        },
        "OptionParser.mockable": {
            "name": "mockable",
            "location": -1,
            "return": [
                "_Mockable"
            ],
            "arguments": {},
            "variables": {}
        },
        "_Option.parse": {
            "name": "parse",
            "location": -1,
            "return": [],
            "arguments": {
                "value": []
            },
            "variables": {
                "_value": [
                    "list"
                ],
                "callback": [
                    "None"
                ]
            }
        },
        "OptionParser.parse_command_line": {
            "name": "parse_command_line",
            "location": -1,
            "return": [
                "list"
            ],
            "arguments": {
                "args": [
                    "None"
                ],
                "final": [
                    "bool"
                ]
            },
            "variables": {
                "args": [
                    "None"
                ],
                "remaining": [
                    "list"
                ],
                "value": [
                    "typing.Text"
                ],
                "final": [
                    "bool"
                ]
            }
        },
        "parse_command_line": {
            "name": "parse_command_line",
            "location": -1,
            "return": [],
            "arguments": {
                "args": [
                    "None"
                ],
                "final": [
                    "bool"
                ]
            },
            "variables": {
                "options": [
                    "OptionParser"
                ],
                "args": [
                    "None"
                ],
                "final": [
                    "bool"
                ]
            }
        },
        "OptionParser.parse_config_file": {
            "name": "parse_config_file",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [],
                "final": [
                    "bool"
                ]
            },
            "variables": {
                "config": [
                    "dict[typing.Text, ]"
                ],
                "f": [
                    "typing.IO"
                ],
                "name": [
                    "typing.Text"
                ],
                "final": [
                    "bool"
                ]
            }
        },
        "parse_config_file": {
            "name": "parse_config_file",
            "location": -1,
            "return": [],
            "arguments": {
                "path": [],
                "final": [
                    "bool"
                ]
            },
            "variables": {
                "options": [
                    "OptionParser"
                ],
                "final": [
                    "bool"
                ]
            }
        },
        "OptionParser.print_help": {
            "name": "print_help",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "file": [
                    "None"
                ]
            },
            "variables": {
                "file": [
                    "None"
                ],
                "by_group": [
                    "dict"
                ],
                "description": [
                    "typing.Text"
                ]
            }
        },
        "print_help": {
            "name": "print_help",
            "location": -1,
            "return": [],
            "arguments": {
                "file": [
                    "None"
                ]
            },
            "variables": {
                "options": [
                    "OptionParser"
                ],
                "file": [
                    "None"
                ]
            }
        },
        "OptionParser.run_parse_callbacks": {
            "name": "run_parse_callbacks",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "_Option.set": {
            "name": "set",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "value": []
            },
            "variables": {
                "callback": [
                    "None"
                ]
            }
        },
        "_Option.value": {
            "name": "value",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {
                "_value": [
                    "_Option_@_UNSET"
                ]
            }
        }
    },
    "tornado-5.0.2/tornado/platform/__init__.py": {
        "global": {}
    },
    "tornado-5.0.2/tornado/platform/asyncio.py": {
        "AsyncIOLoop._clear_current_hook": {
            "name": "_clear_current_hook",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "is_current": [
                    "bool"
                ]
            }
        },
        "BaseAsyncIOLoop._handle_events": {
            "name": "_handle_events",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "fd": [],
                "events": []
            },
            "variables": {}
        },
        "BaseAsyncIOLoop.add_callback": {
            "name": "add_callback",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "callback": [],
                "kwargs": [],
                "args": []
            },
            "variables": {}
        },
        "BaseAsyncIOLoop.add_handler": {
            "name": "add_handler",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "fd": [],
                "handler": [],
                "events": []
            },
            "variables": {}
        },
        "BaseAsyncIOLoop.call_at": {
            "name": "call_at",
            "location": -1,
            "return": [],
            "arguments": {
                "when": [],
                "callback": [],
                "kwargs": [],
                "args": []
            },
            "variables": {}
        },
        "AsyncIOLoop.close": {
            "name": "close",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "all_fds": [
                    "bool"
                ]
            },
            "variables": {
                "all_fds": [
                    "bool"
                ]
            }
        },
        "BaseAsyncIOLoop.close": {
            "name": "close",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "all_fds": [
                    "bool"
                ]
            },
            "variables": {
                "closing": [
                    "bool"
                ],
                "all_fds": [
                    "bool"
                ]
            }
        },
        "AnyThreadEventLoopPolicy.get_event_loop": {
            "name": "get_event_loop",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "global": {},
        "AsyncIOLoop.initialize": {
            "name": "initialize",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "kwargs": []
            },
            "variables": {
                "is_current": [
                    "bool"
                ]
            }
        },
        "AsyncIOMainLoop.initialize": {
            "name": "initialize",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "kwargs": []
            },
            "variables": {}
        },
        "BaseAsyncIOLoop.initialize": {
            "name": "initialize",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "asyncio_loop": [],
                "kwargs": []
            },
            "variables": {
                "handlers": [
                    "dict"
                ],
                "readers": [
                    "set"
                ],
                "writers": [
                    "set"
                ],
                "closing": [
                    "bool"
                ]
            }
        },
        "AsyncIOLoop.make_current": {
            "name": "make_current",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "is_current": [
                    "bool"
                ],
                "old_asyncio": [
                    "None"
                ]
            }
        },
        "AsyncIOMainLoop.make_current": {
            "name": "make_current",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "BaseAsyncIOLoop.remove_handler": {
            "name": "remove_handler",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "fd": []
            },
            "variables": {}
        },
        "BaseAsyncIOLoop.remove_timeout": {
            "name": "remove_timeout",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "timeout": []
            },
            "variables": {}
        },
        "BaseAsyncIOLoop.run_in_executor": {
            "name": "run_in_executor",
            "location": -1,
            "return": [],
            "arguments": {
                "executor": [],
                "func": [],
                "args": []
            },
            "variables": {}
        },
        "BaseAsyncIOLoop.set_default_executor": {
            "name": "set_default_executor",
            "location": -1,
            "return": [],
            "arguments": {
                "executor": []
            },
            "variables": {}
        },
        "BaseAsyncIOLoop.start": {
            "name": "start",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "old_loop": [
                    "None"
                ]
            }
        },
        "BaseAsyncIOLoop.stop": {
            "name": "stop",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "to_asyncio_future": {
            "name": "to_asyncio_future",
            "location": -1,
            "return": [],
            "arguments": {
                "tornado_future": []
            },
            "variables": {}
        },
        "to_tornado_future": {
            "name": "to_tornado_future",
            "location": -1,
            "return": [],
            "arguments": {
                "asyncio_future": []
            },
            "variables": {}
        },
        "BaseAsyncIOLoop.update_handler": {
            "name": "update_handler",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "fd": [],
                "events": []
            },
            "variables": {}
        }
    },
    "tornado-5.0.2/tornado/platform/auto.py": {
        "global": {},
        "set_close_exec": {
            "name": "set_close_exec",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "fd": []
            },
            "variables": {}
        }
    },
    "tornado-5.0.2/tornado/platform/caresresolver.py": {
        "CaresResolver._handle_events": {
            "name": "_handle_events",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "fd": [],
                "events": []
            },
            "variables": {}
        },
        "CaresResolver._sock_state_cb": {
            "name": "_sock_state_cb",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "fd": [],
                "readable": [],
                "writable": []
            },
            "variables": {
                "state": [
                    "int"
                ]
            }
        },
        "global": {},
        "CaresResolver.initialize": {
            "name": "initialize",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "fds": [
                    "dict"
                ]
            }
        },
        "CaresResolver.resolve": {
            "name": "resolve",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "host": [],
                "port": [],
                "family": [
                    "int"
                ]
            },
            "variables": {
                "addresses": [
                    "list"
                ],
                "family": [
                    "int"
                ],
                "callback_args": [
                    "typing.Generator"
                ],
                "addrinfo": [
                    "list",
                    "list[tuple[tuple]]"
                ]
            }
        }
    },
    "tornado-5.0.2/tornado/platform/common.py": {
        "Waker.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "count": [
                    "int"
                ],
                "detail": [
                    "Exception"
                ]
            }
        },
        "Waker.close": {
            "name": "close",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "Waker.consume": {
            "name": "consume",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "Waker.fileno": {
            "name": "fileno",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "global": {},
        "try_close": {
            "name": "try_close",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "f": []
            },
            "variables": {}
        },
        "Waker.wake": {
            "name": "wake",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "Waker.write_fileno": {
            "name": "write_fileno",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        }
    },
    "tornado-5.0.2/tornado/platform/epoll.py": {
        "global": {},
        "EPollIOLoop.initialize": {
            "name": "initialize",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "kwargs": []
            },
            "variables": {}
        }
    },
    "tornado-5.0.2/tornado/platform/interface.py": {
        "Waker.close": {
            "name": "close",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "Waker.consume": {
            "name": "consume",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "Waker.fileno": {
            "name": "fileno",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "global": {},
        "monotonic_time": {
            "name": "monotonic_time",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "set_close_exec": {
            "name": "set_close_exec",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "fd": []
            },
            "variables": {}
        },
        "Waker.wake": {
            "name": "wake",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "Waker.write_fileno": {
            "name": "write_fileno",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        }
    },
    "tornado-5.0.2/tornado/platform/kqueue.py": {
        "_KQueue.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "_active": [
                    "dict"
                ]
            }
        },
        "_KQueue._control": {
            "name": "_control",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "fd": [],
                "events": [],
                "flags": []
            },
            "variables": {
                "kevents": [
                    "list"
                ]
            }
        },
        "_KQueue.close": {
            "name": "close",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "_KQueue.fileno": {
            "name": "fileno",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "global": {},
        "KQueueIOLoop.initialize": {
            "name": "initialize",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "kwargs": []
            },
            "variables": {}
        },
        "_KQueue.modify": {
            "name": "modify",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "fd": [],
                "events": []
            },
            "variables": {}
        },
        "_KQueue.poll": {
            "name": "poll",
            "location": -1,
            "return": [
                "set[list]"
            ],
            "arguments": {
                "timeout": []
            },
            "variables": {
                "events": [
                    "dict"
                ]
            }
        },
        "_KQueue.register": {
            "name": "register",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "fd": [],
                "events": []
            },
            "variables": {}
        },
        "_KQueue.unregister": {
            "name": "unregister",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "fd": []
            },
            "variables": {}
        }
    },
    "tornado-5.0.2/tornado/platform/posix.py": {
        "Waker.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "_set_nonblocking": {
            "name": "_set_nonblocking",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "fd": []
            },
            "variables": {}
        },
        "Waker.close": {
            "name": "close",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "Waker.consume": {
            "name": "consume",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "Waker.fileno": {
            "name": "fileno",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "global": {},
        "set_close_exec": {
            "name": "set_close_exec",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "fd": []
            },
            "variables": {}
        },
        "Waker.wake": {
            "name": "wake",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "Waker.write_fileno": {
            "name": "write_fileno",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        }
    },
    "tornado-5.0.2/tornado/platform/select.py": {
        "_Select.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "read_fds": [
                    "set"
                ],
                "write_fds": [
                    "set"
                ],
                "error_fds": [
                    "set"
                ],
                "fd_sets": [
                    "tuple[set]"
                ]
            }
        },
        "_Select.close": {
            "name": "close",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "global": {},
        "SelectIOLoop.initialize": {
            "name": "initialize",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "kwargs": []
            },
            "variables": {}
        },
        "_Select.modify": {
            "name": "modify",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "fd": [],
                "events": []
            },
            "variables": {}
        },
        "_Select.poll": {
            "name": "poll",
            "location": -1,
            "return": [
                "set[list]"
            ],
            "arguments": {
                "timeout": []
            },
            "variables": {
                "events": [
                    "dict"
                ]
            }
        },
        "_Select.register": {
            "name": "register",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "fd": [],
                "events": []
            },
            "variables": {}
        },
        "_Select.unregister": {
            "name": "unregister",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "fd": []
            },
            "variables": {}
        }
    },
    "tornado-5.0.2/tornado/platform/twisted.py": {
        "_": {
            "name": "_",
            "location": -1,
            "return": [
                "Future"
            ],
            "arguments": {
                "d": []
            },
            "variables": {
                "f": [
                    "Future"
                ]
            }
        },
        "TornadoDelayedCall.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "reactor": [],
                "seconds": [],
                "f": [],
                "kw": [],
                "args": []
            },
            "variables": {
                "_active": [
                    "bool"
                ]
            }
        },
        "TornadoReactor.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "_readers": [
                    "dict"
                ],
                "_writers": [
                    "dict"
                ],
                "_fds": [
                    "dict"
                ],
                "_delayedCalls": [
                    "dict"
                ]
            }
        },
        "_FD.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "fd": [],
                "fileobj": [],
                "handler": []
            },
            "variables": {
                "reading": [
                    "bool"
                ],
                "writing": [
                    "bool"
                ],
                "lost": [
                    "bool"
                ]
            }
        },
        "_TestReactor.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TornadoDelayedCall._called": {
            "name": "_called",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "_active": [
                    "bool"
                ]
            }
        },
        "TornadoReactor._invoke_callback": {
            "name": "_invoke_callback",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "fd": [],
                "events": []
            },
            "variables": {
                "err": [
                    "None"
                ]
            }
        },
        "TornadoReactor._removeDelayedCall": {
            "name": "_removeDelayedCall",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "dc": []
            },
            "variables": {}
        },
        "TornadoDelayedCall.active": {
            "name": "active",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "TornadoReactor.addReader": {
            "name": "addReader",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "reader": []
            },
            "variables": {}
        },
        "TornadoReactor.addWriter": {
            "name": "addWriter",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "writer": []
            },
            "variables": {}
        },
        "TwistedIOLoop.add_callback": {
            "name": "add_callback",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "callback": [],
                "kwargs": [],
                "args": []
            },
            "variables": {}
        },
        "TwistedIOLoop.add_callback_from_signal": {
            "name": "add_callback_from_signal",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "callback": [],
                "kwargs": [],
                "args": []
            },
            "variables": {}
        },
        "TwistedIOLoop.add_handler": {
            "name": "add_handler",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "fd": [],
                "handler": [],
                "events": []
            },
            "variables": {}
        },
        "TwistedIOLoop.add_timeout": {
            "name": "add_timeout",
            "location": -1,
            "return": [],
            "arguments": {
                "deadline": [],
                "callback": [],
                "kwargs": [],
                "args": []
            },
            "variables": {
                "deadline": [
                    "numbers_@_Real",
                    "datetime_@_timedelta"
                ],
                "delay": [
                    "int"
                ]
            }
        },
        "TornadoReactor.callFromThread": {
            "name": "callFromThread",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "f": [],
                "kw": [],
                "args": []
            },
            "variables": {}
        },
        "TornadoReactor.callLater": {
            "name": "callLater",
            "location": -1,
            "return": [
                "TornadoDelayedCall"
            ],
            "arguments": {
                "seconds": [],
                "f": [],
                "kw": [],
                "args": []
            },
            "variables": {
                "dc": [
                    "TornadoDelayedCall"
                ]
            }
        },
        "TornadoDelayedCall.cancel": {
            "name": "cancel",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "_active": [
                    "bool"
                ]
            }
        },
        "TwistedIOLoop.close": {
            "name": "close",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "all_fds": [
                    "bool"
                ]
            },
            "variables": {
                "all_fds": [
                    "bool"
                ]
            }
        },
        "_FD.connectionLost": {
            "name": "connectionLost",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "reason": []
            },
            "variables": {
                "lost": [
                    "bool"
                ]
            }
        },
        "TornadoReactor.crash": {
            "name": "crash",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TornadoDelayedCall.delay": {
            "name": "delay",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "seconds": []
            },
            "variables": {}
        },
        "TornadoReactor.doIteration": {
            "name": "doIteration",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "delay": []
            },
            "variables": {}
        },
        "_FD.doRead": {
            "name": "doRead",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "_FD.doWrite": {
            "name": "doWrite",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "errback": {
            "name": "errback",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "failure": []
            },
            "variables": {}
        },
        "_FD.fileno": {
            "name": "fileno",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "TornadoReactor.getDelayedCalls": {
            "name": "getDelayedCalls",
            "location": -1,
            "return": [
                "list"
            ],
            "arguments": {},
            "variables": {}
        },
        "TornadoReactor.getReaders": {
            "name": "getReaders",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "TornadoDelayedCall.getTime": {
            "name": "getTime",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "TornadoReactor.getWriters": {
            "name": "getWriters",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "global": {},
        "TwistedIOLoop.initialize": {
            "name": "initialize",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "reactor": [
                    "None"
                ],
                "kwargs": []
            },
            "variables": {
                "reactor": [
                    "None"
                ],
                "fds": [
                    "dict"
                ]
            }
        },
        "TwistedResolver.initialize": {
            "name": "initialize",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "install": {
            "name": "install",
            "location": -1,
            "return": [
                "TornadoReactor"
            ],
            "arguments": {},
            "variables": {
                "reactor": [
                    "TornadoReactor"
                ]
            }
        },
        "TornadoReactor.installWaker": {
            "name": "installWaker",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "_TestReactor.listenTCP": {
            "name": "listenTCP",
            "location": -1,
            "return": [],
            "arguments": {
                "port": [],
                "factory": [],
                "backlog": [
                    "int"
                ],
                "interface": [
                    "typing.Text"
                ]
            },
            "variables": {
                "interface": [
                    "typing.Text"
                ],
                "backlog": [
                    "int"
                ]
            }
        },
        "_TestReactor.listenUDP": {
            "name": "listenUDP",
            "location": -1,
            "return": [],
            "arguments": {
                "port": [],
                "protocol": [],
                "interface": [
                    "typing.Text"
                ],
                "maxPacketSize": [
                    "int"
                ]
            },
            "variables": {
                "interface": [
                    "typing.Text"
                ],
                "maxPacketSize": [
                    "int"
                ]
            }
        },
        "_FD.logPrefix": {
            "name": "logPrefix",
            "location": -1,
            "return": [
                "typing.Text"
            ],
            "arguments": {},
            "variables": {}
        },
        "TornadoReactor.mainLoop": {
            "name": "mainLoop",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TornadoReactor.removeAll": {
            "name": "removeAll",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "TornadoReactor.removeReader": {
            "name": "removeReader",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "reader": []
            },
            "variables": {}
        },
        "TornadoReactor.removeWriter": {
            "name": "removeWriter",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "writer": []
            },
            "variables": {}
        },
        "TwistedIOLoop.remove_handler": {
            "name": "remove_handler",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "fd": []
            },
            "variables": {}
        },
        "TwistedIOLoop.remove_timeout": {
            "name": "remove_timeout",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "timeout": []
            },
            "variables": {}
        },
        "TornadoDelayedCall.reset": {
            "name": "reset",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "seconds": []
            },
            "variables": {}
        },
        "TwistedResolver.resolve": {
            "name": "resolve",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "host": [],
                "port": [],
                "family": [
                    "int"
                ]
            },
            "variables": {
                "resolved": [
                    "typing.Generator",
                    "failure_@_Failure"
                ],
                "e": [
                    "Exception"
                ],
                "family": [
                    "int"
                ],
                "result": [
                    "list[tuple[tuple[typing.Union[typing.Generator,failure_@_Failure]]]]"
                ]
            }
        },
        "TornadoReactor.seconds": {
            "name": "seconds",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "TwistedIOLoop.start": {
            "name": "start",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "old_current": [
                    "None"
                ]
            }
        },
        "TornadoReactor.start_if_necessary": {
            "name": "start_if_necessary",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TornadoReactor.stop": {
            "name": "stop",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TwistedIOLoop.stop": {
            "name": "stop",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TwistedIOLoop.update_handler": {
            "name": "update_handler",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "fd": [],
                "events": []
            },
            "variables": {}
        },
        "TornadoReactor.wakeUp": {
            "name": "wakeUp",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        }
    },
    "tornado-5.0.2/tornado/platform/windows.py": {
        "global": {},
        "set_close_exec": {
            "name": "set_close_exec",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "fd": []
            },
            "variables": {
                "HANDLE_FLAG_INHERIT": [
                    "int"
                ]
            }
        }
    },
    "tornado-5.0.2/tornado/process.py": {
        "Subprocess.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "kwargs": [],
                "args": []
            },
            "variables": {
                "pipe_fds": [
                    "list"
                ],
                "to_close": [
                    "list"
                ],
                "stdin": [
                    "PipeIOStream"
                ],
                "stdout": [
                    "PipeIOStream"
                ],
                "stderr": [
                    "PipeIOStream"
                ],
                "attr": [
                    "typing.Text"
                ],
                "_exit_callback": [
                    "None"
                ],
                "returncode": [
                    "None"
                ]
            }
        },
        "Subprocess._cleanup": {
            "name": "_cleanup",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            },
            "variables": {}
        },
        "_pipe_cloexec": {
            "name": "_pipe_cloexec",
            "location": -1,
            "return": [
                "tuple"
            ],
            "arguments": {},
            "variables": {}
        },
        "_reseed_random": {
            "name": "_reseed_random",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "Subprocess._set_returncode": {
            "name": "_set_returncode",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "status": []
            },
            "variables": {
                "_exit_callback": [
                    "None"
                ]
            }
        },
        "Subprocess._try_cleanup_process": {
            "name": "_try_cleanup_process",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "pid": []
            },
            "variables": {
                "e": [
                    "Exception"
                ]
            }
        },
        "Subprocess.callback": {
            "name": "callback",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "ret": []
            },
            "variables": {}
        },
        "cpu_count": {
            "name": "cpu_count",
            "location": -1,
            "return": [
                "int"
            ],
            "arguments": {},
            "variables": {
                "multiprocessing": [
                    "None"
                ]
            }
        },
        "fork_processes": {
            "name": "fork_processes",
            "location": -1,
            "return": [],
            "arguments": {
                "num_processes": [],
                "max_restarts": [
                    "int"
                ]
            },
            "variables": {
                "children": [
                    "dict"
                ],
                "id": [
                    "None",
                    "dict"
                ],
                "num_restarts": [
                    "int"
                ],
                "e": [
                    "Exception"
                ],
                "max_restarts": [
                    "int"
                ],
                "new_id": [
                    "None"
                ]
            }
        },
        "global": {},
        "Subprocess.initialize": {
            "name": "initialize",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            },
            "variables": {
                "cls_": [
                    "bool"
                ]
            }
        },
        "Subprocess.set_exit_callback": {
            "name": "set_exit_callback",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "callback": []
            },
            "variables": {}
        },
        "start_child": {
            "name": "start_child",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "i": []
            },
            "variables": {}
        },
        "task_id": {
            "name": "task_id",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "_task_id": [
                    "None"
                ]
            }
        },
        "Subprocess.uninitialize": {
            "name": "uninitialize",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            },
            "variables": {
                "cls_": [
                    "bool"
                ]
            }
        },
        "Subprocess.wait_for_exit": {
            "name": "wait_for_exit",
            "location": -1,
            "return": [
                "Future"
            ],
            "arguments": {
                "raise_error": [
                    "bool"
                ]
            },
            "variables": {
                "future": [
                    "Future"
                ]
            }
        }
    },
    "tornado-5.0.2/tornado/queues.py": {
        "Queue.__aiter__": {
            "name": "__aiter__",
            "location": -1,
            "return": [
                "_QueueIterator"
            ],
            "arguments": {},
            "variables": {}
        },
        "_QueueIterator.__anext__": {
            "name": "__anext__",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "Queue.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "maxsize": [
                    "int"
                ]
            },
            "variables": {
                "maxsize": [
                    "int",
                    "None"
                ],
                "_maxsize": [
                    "int",
                    "None"
                ],
                "_unfinished_tasks": [
                    "int"
                ],
                "_finished": [
                    "Event"
                ]
            }
        },
        "_QueueIterator.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "q": []
            },
            "variables": {}
        },
        "Queue.__put_internal": {
            "name": "__put_internal",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "item": []
            },
            "variables": {}
        },
        "Queue.__repr__": {
            "name": "__repr__",
            "location": -1,
            "return": [
                "typing.Text"
            ],
            "arguments": {},
            "variables": {}
        },
        "Queue.__str__": {
            "name": "__str__",
            "location": -1,
            "return": [
                "typing.Text"
            ],
            "arguments": {},
            "variables": {}
        },
        "Queue._consume_expired": {
            "name": "_consume_expired",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "Queue._format": {
            "name": "_format",
            "location": -1,
            "return": [
                "typing.Text"
            ],
            "arguments": {},
            "variables": {
                "result": [
                    "typing.Text"
                ]
            }
        },
        "LifoQueue._get": {
            "name": "_get",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "PriorityQueue._get": {
            "name": "_get",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "Queue._get": {
            "name": "_get",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "LifoQueue._init": {
            "name": "_init",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "_queue": [
                    "list"
                ]
            }
        },
        "PriorityQueue._init": {
            "name": "_init",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "_queue": [
                    "list"
                ]
            }
        },
        "Queue._init": {
            "name": "_init",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "LifoQueue._put": {
            "name": "_put",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "item": []
            },
            "variables": {}
        },
        "PriorityQueue._put": {
            "name": "_put",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "item": []
            },
            "variables": {}
        },
        "Queue._put": {
            "name": "_put",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "item": []
            },
            "variables": {}
        },
        "_set_timeout": {
            "name": "_set_timeout",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "future": [],
                "timeout": []
            },
            "variables": {}
        },
        "Queue.empty": {
            "name": "empty",
            "location": -1,
            "return": [
                "bool"
            ],
            "arguments": {},
            "variables": {}
        },
        "Queue.full": {
            "name": "full",
            "location": -1,
            "return": [
                "bool"
            ],
            "arguments": {},
            "variables": {}
        },
        "Queue.get": {
            "name": "get",
            "location": -1,
            "return": [
                "Future"
            ],
            "arguments": {
                "timeout": [
                    "None"
                ]
            },
            "variables": {
                "future": [
                    "Future"
                ],
                "timeout": [
                    "None"
                ]
            }
        },
        "Queue.get_nowait": {
            "name": "get_nowait",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "global": {},
        "Queue.join": {
            "name": "join",
            "location": -1,
            "return": [],
            "arguments": {
                "timeout": [
                    "None"
                ]
            },
            "variables": {
                "timeout": [
                    "None"
                ]
            }
        },
        "Queue.maxsize": {
            "name": "maxsize",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "on_timeout": {
            "name": "on_timeout",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "Queue.put": {
            "name": "put",
            "location": -1,
            "return": [
                "Future"
            ],
            "arguments": {
                "item": [],
                "timeout": [
                    "None"
                ]
            },
            "variables": {
                "future": [
                    "Future"
                ],
                "timeout": [
                    "None"
                ]
            }
        },
        "Queue.put_nowait": {
            "name": "put_nowait",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "item": []
            },
            "variables": {}
        },
        "Queue.qsize": {
            "name": "qsize",
            "location": -1,
            "return": [
                "int"
            ],
            "arguments": {},
            "variables": {}
        },
        "Queue.task_done": {
            "name": "task_done",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "_unfinished_tasks": [
                    "int"
                ]
            }
        }
    },
    "tornado-5.0.2/tornado/routing.py": {
        "DefaultHostMatches.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "application": [],
                "host_pattern": []
            },
            "variables": {}
        },
        "HostMatches.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "host_pattern": []
            },
            "variables": {
                "host_pattern": [
                    "basestring_type"
                ]
            }
        },
        "PathMatches.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "path_pattern": []
            },
            "variables": {
                "path_pattern": [
                    "basestring_type"
                ]
            }
        },
        "ReversibleRuleRouter.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "rules": [
                    "None"
                ]
            },
            "variables": {
                "named_rules": [
                    "dict"
                ],
                "rules": [
                    "None"
                ]
            }
        },
        "Rule.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "matcher": [],
                "target": [],
                "target_kwargs": [
                    "None"
                ],
                "name": [
                    "None"
                ]
            },
            "variables": {
                "target": [
                    "str"
                ],
                "target_kwargs": [
                    "None",
                    "dict"
                ],
                "name": [
                    "None"
                ]
            }
        },
        "RuleRouter.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "rules": [
                    "None"
                ]
            },
            "variables": {
                "rules": [
                    "list",
                    "None"
                ]
            }
        },
        "URLSpec.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "pattern": [],
                "handler": [],
                "kwargs": [
                    "None"
                ],
                "name": [
                    "None"
                ]
            },
            "variables": {
                "kwargs": [
                    "None"
                ],
                "name": [
                    "None"
                ]
            }
        },
        "_DefaultMessageDelegate.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "connection": []
            },
            "variables": {}
        },
        "_RoutingDelegate.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "router": [],
                "server_conn": [],
                "request_conn": []
            },
            "variables": {
                "delegate": [
                    "None"
                ]
            }
        },
        "Rule.__repr__": {
            "name": "__repr__",
            "location": -1,
            "return": [
                "typing.Text"
            ],
            "arguments": {},
            "variables": {}
        },
        "URLSpec.__repr__": {
            "name": "__repr__",
            "location": -1,
            "return": [
                "typing.Text"
            ],
            "arguments": {},
            "variables": {}
        },
        "PathMatches._find_groups": {
            "name": "_find_groups",
            "location": -1,
            "return": [
                "tuple[None]",
                "tuple[str]"
            ],
            "arguments": {},
            "variables": {
                "pieces": [
                    "list"
                ]
            }
        },
        "_unquote_or_none": {
            "name": "_unquote_or_none",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "s": []
            },
            "variables": {
                "s": [
                    "None"
                ]
            }
        },
        "RuleRouter.add_rules": {
            "name": "add_rules",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "rules": []
            },
            "variables": {
                "rule": [
                    "Rule"
                ]
            }
        },
        "_RoutingDelegate.data_received": {
            "name": "data_received",
            "location": -1,
            "return": [],
            "arguments": {
                "chunk": []
            },
            "variables": {}
        },
        "Router.find_handler": {
            "name": "find_handler",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "request": [],
                "kwargs": []
            },
            "variables": {}
        },
        "RuleRouter.find_handler": {
            "name": "find_handler",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "request": [],
                "kwargs": []
            },
            "variables": {
                "target_params": [
                    "None"
                ],
                "delegate": [
                    "None"
                ]
            }
        },
        "_DefaultMessageDelegate.finish": {
            "name": "finish",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "_RoutingDelegate.finish": {
            "name": "finish",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "RuleRouter.get_target_delegate": {
            "name": "get_target_delegate",
            "location": -1,
            "return": [
                "_CallableAdapter",
                "None"
            ],
            "arguments": {
                "target": [],
                "request": [],
                "target_params": []
            },
            "variables": {
                "target": [
                    "Router",
                    "httputil_@_HTTPServerConnectionDelegate"
                ]
            }
        },
        "global": {},
        "_RoutingDelegate.headers_received": {
            "name": "headers_received",
            "location": -1,
            "return": [],
            "arguments": {
                "start_line": [],
                "headers": []
            },
            "variables": {
                "delegate": [
                    "None",
                    "_DefaultMessageDelegate"
                ]
            }
        },
        "AnyMatches.match": {
            "name": "match",
            "location": -1,
            "return": [
                "dict"
            ],
            "arguments": {
                "request": []
            },
            "variables": {}
        },
        "DefaultHostMatches.match": {
            "name": "match",
            "location": -1,
            "return": [
                "dict",
                "None"
            ],
            "arguments": {
                "request": []
            },
            "variables": {}
        },
        "HostMatches.match": {
            "name": "match",
            "location": -1,
            "return": [
                "dict",
                "None"
            ],
            "arguments": {
                "request": []
            },
            "variables": {}
        },
        "Matcher.match": {
            "name": "match",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "request": []
            },
            "variables": {}
        },
        "PathMatches.match": {
            "name": "match",
            "location": -1,
            "return": [
                "None",
                "dict"
            ],
            "arguments": {
                "request": []
            },
            "variables": {
                "match": [
                    "None"
                ],
                "path_args": [
                    "list",
                    "dict"
                ],
                "path_kwargs": [
                    "list",
                    "dict"
                ]
            }
        },
        "_RoutingDelegate.on_connection_close": {
            "name": "on_connection_close",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "ReversibleRuleRouter.process_rule": {
            "name": "process_rule",
            "location": -1,
            "return": [],
            "arguments": {
                "rule": []
            },
            "variables": {}
        },
        "RuleRouter.process_rule": {
            "name": "process_rule",
            "location": -1,
            "return": [],
            "arguments": {
                "rule": []
            },
            "variables": {}
        },
        "Matcher.reverse": {
            "name": "reverse",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            },
            "variables": {}
        },
        "PathMatches.reverse": {
            "name": "reverse",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            },
            "variables": {
                "converted_args": [
                    "list"
                ],
                "a": [
                    "str"
                ]
            }
        },
        "Rule.reverse": {
            "name": "reverse",
            "location": -1,
            "return": [],
            "arguments": {
                "args": []
            },
            "variables": {}
        },
        "ReversibleRouter.reverse_url": {
            "name": "reverse_url",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [],
                "args": []
            },
            "variables": {}
        },
        "ReversibleRuleRouter.reverse_url": {
            "name": "reverse_url",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [],
                "args": []
            },
            "variables": {
                "rule_": [
                    "ReversibleRouter"
                ],
                "reversed_url": [
                    "None"
                ]
            }
        },
        "Router.start_request": {
            "name": "start_request",
            "location": -1,
            "return": [
                "_RoutingDelegate"
            ],
            "arguments": {
                "server_conn": [],
                "request_conn": []
            },
            "variables": {}
        }
    },
    "tornado-5.0.2/tornado/simple_httpclient.py": {
        "_HTTPConnection.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "request": [],
                "release_callback": [],
                "final_callback": [],
                "max_buffer_size": [],
                "tcp_client": [],
                "max_header_size": [],
                "max_body_size": []
            },
            "variables": {
                "code": [
                    "None"
                ],
                "headers": [
                    "None"
                ],
                "chunks": [
                    "list"
                ],
                "_decompressor": [
                    "None"
                ],
                "_timeout": [
                    "None"
                ],
                "_sockaddr": [
                    "None"
                ],
                "port": [
                    "None",
                    "int"
                ],
                "request_": [
                    "bool"
                ]
            }
        },
        "SimpleAsyncHTTPClient._connection_class": {
            "name": "_connection_class",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "_HTTPConnection._create_connection": {
            "name": "_create_connection",
            "location": -1,
            "return": [
                "HTTP1Connection"
            ],
            "arguments": {
                "stream": []
            },
            "variables": {
                "connection": [
                    "HTTP1Connection"
                ]
            }
        },
        "_HTTPConnection._get_ssl_options": {
            "name": "_get_ssl_options",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "scheme": []
            },
            "variables": {
                "self_": [
                    "None"
                ],
                "ssl": [
                    "None"
                ],
                "ssl_ctx_": [
                    "bool"
                ]
            }
        },
        "_HTTPConnection._handle_exception": {
            "name": "_handle_exception",
            "location": -1,
            "return": [
                "bool"
            ],
            "arguments": {
                "typ": [],
                "value": [],
                "tb": []
            },
            "variables": {
                "value": [
                    "StreamClosedError",
                    "HTTPError"
                ],
                "value_": [
                    "None"
                ]
            }
        },
        "SimpleAsyncHTTPClient._handle_request": {
            "name": "_handle_request",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "request": [],
                "release_callback": [],
                "final_callback": []
            },
            "variables": {}
        },
        "_HTTPConnection._on_connect": {
            "name": "_on_connect",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "stream": []
            },
            "variables": {
                "final_callback": [
                    "None"
                ],
                "self_": [
                    "None"
                ],
                "key": [
                    "typing.Text"
                ],
                "username": [
                    "None"
                ],
                "password": [
                    "None",
                    "typing.Text"
                ],
                "body_expected": [
                    "bool"
                ],
                "body_present": [
                    "bool"
                ],
                "req_path": [
                    "typing.Text"
                ]
            }
        },
        "_HTTPConnection._on_end_request": {
            "name": "_on_end_request",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "SimpleAsyncHTTPClient._on_timeout": {
            "name": "_on_timeout",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "key": [],
                "info": [
                    "None"
                ]
            },
            "variables": {
                "info": [
                    "None"
                ],
                "error_message": [
                    "str"
                ],
                "timeout_response": [
                    "HTTPResponse"
                ]
            }
        },
        "_HTTPConnection._on_timeout": {
            "name": "_on_timeout",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "info": [
                    "None"
                ]
            },
            "variables": {
                "_timeout": [
                    "None"
                ],
                "info": [
                    "None"
                ],
                "error_message": [
                    "str"
                ],
                "final_callback": [
                    "None"
                ]
            }
        },
        "SimpleAsyncHTTPClient._process_queue": {
            "name": "_process_queue",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "_HTTPConnection._read_response": {
            "name": "_read_response",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "_HTTPConnection._release": {
            "name": "_release",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "release_callback": [
                    "None"
                ]
            }
        },
        "SimpleAsyncHTTPClient._release_fetch": {
            "name": "_release_fetch",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "key": []
            },
            "variables": {}
        },
        "SimpleAsyncHTTPClient._remove_timeout": {
            "name": "_remove_timeout",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "key": []
            },
            "variables": {
                "timeout_handle": [
                    "None"
                ]
            }
        },
        "_HTTPConnection._remove_timeout": {
            "name": "_remove_timeout",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "_timeout": [
                    "None"
                ]
            }
        },
        "_HTTPConnection._run_callback": {
            "name": "_run_callback",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "response": []
            },
            "variables": {
                "final_callback": [
                    "None"
                ]
            }
        },
        "_HTTPConnection._should_follow_redirect": {
            "name": "_should_follow_redirect",
            "location": -1,
            "return": [
                "bool"
            ],
            "arguments": {},
            "variables": {}
        },
        "_HTTPConnection._write_body": {
            "name": "_write_body",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "start_read": []
            },
            "variables": {
                "self_": [
                    "None"
                ],
                "fut": [
                    "None"
                ]
            }
        },
        "SimpleAsyncHTTPClient.close": {
            "name": "close",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "_HTTPConnection.data_received": {
            "name": "data_received",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "chunk": []
            },
            "variables": {
                "self_": [
                    "None"
                ]
            }
        },
        "SimpleAsyncHTTPClient.fetch_impl": {
            "name": "fetch_impl",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "request": [],
                "callback": []
            },
            "variables": {
                "timeout_handle": [
                    "None"
                ]
            }
        },
        "_HTTPConnection.finish": {
            "name": "finish",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "data": [
                    "bytes"
                ],
                "new_request_": [
                    "int",
                    "typing.Text",
                    "None"
                ],
                "h": [
                    "typing.Text"
                ],
                "final_callback": [
                    "None"
                ],
                "buffer": [
                    "BytesIO"
                ],
                "response": [
                    "HTTPResponse"
                ]
            }
        },
        "global": {},
        "_HTTPConnection.headers_received": {
            "name": "headers_received",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "first_line": [],
                "headers": []
            },
            "variables": {
                "self_": [
                    "None"
                ]
            }
        },
        "SimpleAsyncHTTPClient.initialize": {
            "name": "initialize",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "max_clients": [
                    "int"
                ],
                "hostname_mapping": [
                    "None"
                ],
                "max_buffer_size": [
                    "int"
                ],
                "resolver": [
                    "None"
                ],
                "defaults": [
                    "None"
                ],
                "max_header_size": [
                    "None"
                ],
                "max_body_size": [
                    "None"
                ]
            },
            "variables": {
                "defaults": [
                    "None"
                ],
                "max_clients": [
                    "int"
                ],
                "active": [
                    "dict"
                ],
                "waiting": [
                    "dict"
                ],
                "max_buffer_size": [
                    "int"
                ],
                "max_header_size": [
                    "None"
                ],
                "max_body_size": [
                    "None"
                ],
                "resolver": [
                    "None",
                    "Resolver",
                    "OverrideResolver"
                ],
                "own_resolver": [
                    "bool"
                ],
                "hostname_mapping": [
                    "None"
                ],
                "tcp_client": [
                    "TCPClient"
                ]
            }
        },
        "_HTTPConnection.on_body_written": {
            "name": "on_body_written",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "fut": []
            },
            "variables": {}
        },
        "_HTTPConnection.on_connection_close": {
            "name": "on_connection_close",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "final_callback": [
                    "None"
                ],
                "message": [
                    "typing.Text"
                ]
            }
        }
    },
    "tornado-5.0.2/tornado/tcpclient.py": {
        "TCPClient.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "resolver": [
                    "None"
                ]
            },
            "variables": {
                "resolver": [
                    "None",
                    "Resolver"
                ],
                "_own_resolver": [
                    "bool"
                ]
            }
        },
        "_Connector.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "addrinfo": [],
                "connect": []
            },
            "variables": {
                "future": [
                    "Future"
                ],
                "timeout": [
                    "None"
                ],
                "connect_timeout": [
                    "None"
                ],
                "last_error": [
                    "None"
                ],
                "remaining": [
                    "int"
                ],
                "streams": [
                    "set"
                ]
            }
        },
        "TCPClient._create_stream": {
            "name": "_create_stream",
            "location": -1,
            "return": [
                "Future",
                "tuple[IOStream]"
            ],
            "arguments": {
                "max_buffer_size": [],
                "af": [],
                "addr": [],
                "source_ip": [
                    "None"
                ],
                "source_port": [
                    "None"
                ]
            },
            "variables": {
                "source_port": [
                    "None",
                    "int"
                ],
                "source_port_bind": [
                    "int"
                ],
                "source_ip": [
                    "None"
                ],
                "source_ip_bind": [
                    "None",
                    "typing.Text"
                ],
                "stream": [
                    "IOStream"
                ],
                "e": [
                    "Exception"
                ],
                "fu": [
                    "Future"
                ]
            }
        },
        "_Connector.clear_timeout": {
            "name": "clear_timeout",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "timeout": [
                    "None"
                ]
            }
        },
        "_Connector.clear_timeouts": {
            "name": "clear_timeouts",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "timeout": [
                    "None"
                ],
                "connect_timeout": [
                    "None"
                ]
            }
        },
        "TCPClient.close": {
            "name": "close",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "_Connector.close_streams": {
            "name": "close_streams",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TCPClient.connect": {
            "name": "connect",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "host": [],
                "port": [],
                "af": [],
                "ssl_options": [
                    "None"
                ],
                "max_buffer_size": [
                    "None"
                ],
                "source_ip": [
                    "None"
                ],
                "source_port": [
                    "None"
                ],
                "timeout": [
                    "None"
                ]
            },
            "variables": {
                "timeout": [
                    "None",
                    "numbers_@_Real",
                    "datetime_@_timedelta"
                ],
                "addrinfo": [
                    "typing.Generator"
                ],
                "max_buffer_size": [
                    "None"
                ],
                "source_ip": [
                    "None"
                ],
                "source_port": [
                    "None"
                ],
                "connector": [
                    "_Connector"
                ],
                "stream": [
                    "typing.Generator"
                ],
                "ssl_options": [
                    "None"
                ]
            }
        },
        "global": {},
        "_Connector.on_connect_done": {
            "name": "on_connect_done",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "addrs": [],
                "af": [],
                "addr": [],
                "future": []
            },
            "variables": {
                "remaining": [
                    "int"
                ],
                "e": [
                    "Exception"
                ],
                "last_error": [
                    "Exception"
                ],
                "timeout": [
                    "None"
                ]
            }
        },
        "_Connector.on_connect_timeout": {
            "name": "on_connect_timeout",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "_Connector.on_timeout": {
            "name": "on_timeout",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "timeout": [
                    "None"
                ]
            }
        },
        "_Connector.set_connect_timeout": {
            "name": "set_connect_timeout",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "connect_timeout": []
            },
            "variables": {}
        },
        "_Connector.set_timeout": {
            "name": "set_timeout",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "timeout": []
            },
            "variables": {}
        },
        "_Connector.split": {
            "name": "split",
            "location": -1,
            "return": [
                "tuple[list[tuple]]"
            ],
            "arguments": {
                "addrinfo": []
            },
            "variables": {
                "primary": [
                    "list",
                    "list[tuple]"
                ],
                "secondary": [
                    "list",
                    "list[tuple]"
                ]
            }
        },
        "_Connector.start": {
            "name": "start",
            "location": -1,
            "return": [],
            "arguments": {
                "timeout": [
                    "float"
                ],
                "connect_timeout": [
                    "None"
                ]
            },
            "variables": {
                "_INITIAL_CONNECT_TIMEOUT": [
                    "float"
                ],
                "timeout": [
                    "float"
                ],
                "connect_timeout": [
                    "None"
                ]
            }
        },
        "_Connector.try_connect": {
            "name": "try_connect",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "addrs": []
            },
            "variables": {}
        }
    },
    "tornado-5.0.2/tornado/tcpserver.py": {
        "TCPServer.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "ssl_options": [],
                "max_buffer_size": [
                    "None"
                ],
                "read_chunk_size": [
                    "None"
                ]
            },
            "variables": {
                "_sockets": [
                    "dict"
                ],
                "_handlers": [
                    "dict"
                ],
                "_pending_sockets": [
                    "list"
                ],
                "_started": [
                    "bool"
                ],
                "_stopped": [
                    "bool"
                ],
                "max_buffer_size": [
                    "None"
                ],
                "read_chunk_size": [
                    "None"
                ]
            }
        },
        "TCPServer._handle_connection": {
            "name": "_handle_connection",
            "location": -1,
            "return": [],
            "arguments": {
                "connection": [],
                "address": []
            },
            "variables": {
                "ssl_options": [
                    "None"
                ],
                "err": [
                    "Exception"
                ],
                "ssl": [
                    "None"
                ],
                "stream": [
                    "SSLIOStream",
                    "IOStream"
                ],
                "future": [
                    "None"
                ]
            }
        },
        "TCPServer.add_socket": {
            "name": "add_socket",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "socket": []
            },
            "variables": {}
        },
        "TCPServer.add_sockets": {
            "name": "add_sockets",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "sockets": []
            },
            "variables": {}
        },
        "TCPServer.bind": {
            "name": "bind",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "port": [],
                "address": [
                    "None"
                ],
                "family": [],
                "backlog": [
                    "int"
                ],
                "reuse_port": [
                    "bool"
                ]
            },
            "variables": {
                "address": [
                    "None"
                ],
                "backlog": [
                    "int"
                ],
                "reuse_port": [
                    "bool"
                ]
            }
        },
        "global": {},
        "TCPServer.handle_stream": {
            "name": "handle_stream",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "stream": [],
                "address": []
            },
            "variables": {}
        },
        "TCPServer.listen": {
            "name": "listen",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "port": [],
                "address": [
                    "typing.Text"
                ]
            },
            "variables": {
                "address": [
                    "typing.Text"
                ]
            }
        },
        "TCPServer.start": {
            "name": "start",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "num_processes": [
                    "int"
                ]
            },
            "variables": {
                "_started": [
                    "bool"
                ],
                "num_processes": [
                    "int"
                ],
                "_pending_sockets": [
                    "list"
                ]
            }
        },
        "TCPServer.stop": {
            "name": "stop",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "_stopped": [
                    "bool"
                ]
            }
        }
    },
    "tornado-5.0.2/tornado/template.py": {
        "_CodeWriter,IncludeTemplate.__enter__": {
            "name": "__enter__",
            "location": -1,
            "return": [
                "IncludeTemplate"
            ],
            "arguments": {
                "_": []
            },
            "variables": {}
        },
        "_CodeWriter,Indenter.__enter__": {
            "name": "__enter__",
            "location": -1,
            "return": [
                "Indenter"
            ],
            "arguments": {
                "_": []
            },
            "variables": {}
        },
        "_CodeWriter,IncludeTemplate.__exit__": {
            "name": "__exit__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "_": [],
                "args": []
            },
            "variables": {}
        },
        "_CodeWriter,Indenter.__exit__": {
            "name": "__exit__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "_": [],
                "args": []
            },
            "variables": {
                "_indent": [
                    "int"
                ]
            }
        },
        "_TemplateReader.__getitem__": {
            "name": "__getitem__",
            "location": -1,
            "return": [],
            "arguments": {
                "key": []
            },
            "variables": {
                "size": [
                    "int"
                ],
                "start": [
                    "None"
                ],
                "stop": [
                    "None"
                ]
            }
        },
        "BaseLoader.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "autoescape": [
                    "typing.Text"
                ],
                "namespace": [
                    "None"
                ],
                "whitespace": [
                    "None"
                ]
            },
            "variables": {
                "_DEFAULT_AUTOESCAPE": [
                    "typing.Text"
                ],
                "autoescape": [
                    "typing.Text"
                ],
                "namespace": [
                    "None",
                    "dict"
                ],
                "whitespace": [
                    "None"
                ],
                "templates": [
                    "dict"
                ]
            }
        },
        "DictLoader.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "dict": [],
                "kwargs": []
            },
            "variables": {
                "dict": [
                    "dict"
                ]
            }
        },
        "Loader.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "root_directory": [],
                "kwargs": []
            },
            "variables": {}
        },
        "ParseError.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "message": [],
                "filename": [
                    "None"
                ],
                "lineno": [
                    "int"
                ]
            },
            "variables": {
                "filename": [
                    "None"
                ],
                "lineno": [
                    "int"
                ]
            }
        },
        "Template.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "template_string": [],
                "name": [
                    "typing.Text"
                ],
                "loader": [
                    "None"
                ],
                "compress_whitespace": [],
                "autoescape": [],
                "whitespace": [
                    "None"
                ]
            },
            "variables": {
                "name": [
                    "typing.Text"
                ],
                "compress_whitespace": [
                    "_UNSET"
                ],
                "whitespace": [
                    "None",
                    "typing.Text"
                ],
                "loader": [
                    "None"
                ],
                "autoescape": [
                    "_UNSET",
                    "typing.Text"
                ],
                "_DEFAULT_AUTOESCAPE": [
                    "typing.Text"
                ],
                "namespace": [
                    "dict"
                ],
                "reader": [
                    "_TemplateReader"
                ],
                "file": [
                    "_File"
                ]
            }
        },
        "_ApplyBlock.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "method": [],
                "line": [],
                "body": [
                    "None"
                ]
            },
            "variables": {
                "body": [
                    "None"
                ]
            }
        },
        "_ChunkList.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "chunks": []
            },
            "variables": {}
        },
        "_CodeWriter.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "file": [],
                "named_blocks": [],
                "loader": [],
                "current_template": []
            },
            "variables": {
                "apply_counter": [
                    "int"
                ],
                "include_stack": [
                    "list"
                ],
                "_indent": [
                    "int"
                ]
            }
        },
        "_ControlBlock.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "statement": [],
                "line": [],
                "body": [
                    "None"
                ]
            },
            "variables": {
                "body": [
                    "None"
                ]
            }
        },
        "_Expression.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "expression": [],
                "line": [],
                "raw": [
                    "bool"
                ]
            },
            "variables": {
                "raw": [
                    "bool"
                ]
            }
        },
        "_ExtendsBlock.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "name": []
            },
            "variables": {}
        },
        "_File.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "template": [],
                "body": []
            },
            "variables": {
                "line": [
                    "int"
                ]
            }
        },
        "_IncludeBlock.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [],
                "reader": [],
                "line": []
            },
            "variables": {}
        },
        "_IntermediateControlBlock.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "statement": [],
                "line": []
            },
            "variables": {}
        },
        "_Module.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "expression": [],
                "line": []
            },
            "variables": {}
        },
        "_NamedBlock.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [],
                "body": [],
                "template": [],
                "line": []
            },
            "variables": {}
        },
        "_Statement.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "statement": [],
                "line": []
            },
            "variables": {}
        },
        "_TemplateReader.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [],
                "text": [],
                "whitespace": []
            },
            "variables": {
                "line": [
                    "int"
                ],
                "pos": [
                    "int"
                ]
            }
        },
        "_Text.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "value": [],
                "line": [],
                "whitespace": []
            },
            "variables": {}
        },
        "_TemplateReader.__len__": {
            "name": "__len__",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "ParseError.__str__": {
            "name": "__str__",
            "location": -1,
            "return": [
                "typing.Text"
            ],
            "arguments": {},
            "variables": {}
        },
        "_TemplateReader.__str__": {
            "name": "__str__",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "BaseLoader._create_template": {
            "name": "_create_template",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "name": []
            },
            "variables": {}
        },
        "DictLoader._create_template": {
            "name": "_create_template",
            "location": -1,
            "return": [
                "Template"
            ],
            "arguments": {
                "name": []
            },
            "variables": {}
        },
        "Loader._create_template": {
            "name": "_create_template",
            "location": -1,
            "return": [
                "Template"
            ],
            "arguments": {
                "name": []
            },
            "variables": {
                "f": [
                    "typing.IO"
                ],
                "template": [
                    "Template"
                ]
            }
        },
        "_format_code": {
            "name": "_format_code",
            "location": -1,
            "return": [
                "str"
            ],
            "arguments": {
                "code": []
            },
            "variables": {
                "format": [
                    "typing.Text"
                ]
            }
        },
        "Template._generate_python": {
            "name": "_generate_python",
            "location": -1,
            "return": [],
            "arguments": {
                "loader": []
            },
            "variables": {
                "buffer": [
                    "StringIO"
                ],
                "named_blocks": [
                    "dict"
                ],
                "writer": [
                    "_CodeWriter"
                ]
            }
        },
        "Template._get_ancestors": {
            "name": "_get_ancestors",
            "location": -1,
            "return": [
                "list"
            ],
            "arguments": {
                "loader": []
            },
            "variables": {
                "ancestors": [
                    "list"
                ],
                "chunk": [
                    "_ExtendsBlock"
                ]
            }
        },
        "_parse": {
            "name": "_parse",
            "location": -1,
            "return": [
                "_ChunkList"
            ],
            "arguments": {
                "reader": [],
                "template": [],
                "in_block": [
                    "None"
                ],
                "in_loop": [
                    "None"
                ]
            },
            "variables": {
                "body": [
                    "_ChunkList"
                ],
                "curly": [
                    "int"
                ],
                "in_block": [
                    "None"
                ],
                "intermediate_blocks": [
                    "dict[typing.Text, set[typing.Text]]"
                ],
                "fn": [
                    "None"
                ],
                "in_loop": [
                    "None"
                ]
            }
        },
        "_TemplateReader.consume": {
            "name": "consume",
            "location": -1,
            "return": [],
            "arguments": {
                "count": [
                    "None"
                ]
            },
            "variables": {
                "count": [
                    "None",
                    "int"
                ]
            }
        },
        "_ApplyBlock.each_child": {
            "name": "each_child",
            "location": -1,
            "return": [
                "tuple"
            ],
            "arguments": {},
            "variables": {}
        },
        "_ChunkList.each_child": {
            "name": "each_child",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "_ControlBlock.each_child": {
            "name": "each_child",
            "location": -1,
            "return": [
                "tuple"
            ],
            "arguments": {},
            "variables": {}
        },
        "_File.each_child": {
            "name": "each_child",
            "location": -1,
            "return": [
                "tuple"
            ],
            "arguments": {},
            "variables": {}
        },
        "_NamedBlock.each_child": {
            "name": "each_child",
            "location": -1,
            "return": [
                "tuple"
            ],
            "arguments": {},
            "variables": {}
        },
        "_Node.each_child": {
            "name": "each_child",
            "location": -1,
            "return": [
                "tuple"
            ],
            "arguments": {},
            "variables": {}
        },
        "filter_whitespace": {
            "name": "filter_whitespace",
            "location": -1,
            "return": [],
            "arguments": {
                "mode": [],
                "text": []
            },
            "variables": {}
        },
        "_TemplateReader.find": {
            "name": "find",
            "location": -1,
            "return": [],
            "arguments": {
                "needle": [],
                "start": [
                    "int"
                ],
                "end": [
                    "None"
                ]
            },
            "variables": {
                "start": [
                    "int"
                ],
                "end": [
                    "None"
                ]
            }
        },
        "_IncludeBlock.find_named_blocks": {
            "name": "find_named_blocks",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "loader": [],
                "named_blocks": []
            },
            "variables": {}
        },
        "_NamedBlock.find_named_blocks": {
            "name": "find_named_blocks",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "loader": [],
                "named_blocks": []
            },
            "variables": {}
        },
        "_Node.find_named_blocks": {
            "name": "find_named_blocks",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "loader": [],
                "named_blocks": []
            },
            "variables": {}
        },
        "Template.generate": {
            "name": "generate",
            "location": -1,
            "return": [],
            "arguments": {
                "kwargs": []
            },
            "variables": {
                "namespace": [
                    "dict[typing.Text, typing.Union[tuple[bytes],ObjectDict]]"
                ],
                "execute": [
                    "tuple[bytes]",
                    "ObjectDict"
                ]
            }
        },
        "_ApplyBlock.generate": {
            "name": "generate",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "writer": []
            },
            "variables": {
                "method_name": [
                    "typing.Text"
                ]
            }
        },
        "_ChunkList.generate": {
            "name": "generate",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "writer": []
            },
            "variables": {}
        },
        "_ControlBlock.generate": {
            "name": "generate",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "writer": []
            },
            "variables": {}
        },
        "_Expression.generate": {
            "name": "generate",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "writer": []
            },
            "variables": {}
        },
        "_File.generate": {
            "name": "generate",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "writer": []
            },
            "variables": {}
        },
        "_IncludeBlock.generate": {
            "name": "generate",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "writer": []
            },
            "variables": {}
        },
        "_IntermediateControlBlock.generate": {
            "name": "generate",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "writer": []
            },
            "variables": {}
        },
        "_NamedBlock.generate": {
            "name": "generate",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "writer": []
            },
            "variables": {}
        },
        "_Node.generate": {
            "name": "generate",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "writer": []
            },
            "variables": {}
        },
        "_Statement.generate": {
            "name": "generate",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "writer": []
            },
            "variables": {}
        },
        "_Text.generate": {
            "name": "generate",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "writer": []
            },
            "variables": {}
        },
        "global": {},
        "_CodeWriter.include": {
            "name": "include",
            "location": -1,
            "return": [
                "IncludeTemplate"
            ],
            "arguments": {
                "template": [],
                "line": []
            },
            "variables": {}
        },
        "_CodeWriter.indent": {
            "name": "indent",
            "location": -1,
            "return": [
                "Indenter"
            ],
            "arguments": {},
            "variables": {}
        },
        "_CodeWriter.indent_size": {
            "name": "indent_size",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "BaseLoader.load": {
            "name": "load",
            "location": -1,
            "return": [],
            "arguments": {
                "name": [],
                "parent_path": [
                    "None"
                ]
            },
            "variables": {
                "parent_path": [
                    "None"
                ]
            }
        },
        "_TemplateReader.raise_parse_error": {
            "name": "raise_parse_error",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "msg": []
            },
            "variables": {}
        },
        "_TemplateReader.remaining": {
            "name": "remaining",
            "location": -1,
            "return": [
                "int"
            ],
            "arguments": {},
            "variables": {}
        },
        "BaseLoader.reset": {
            "name": "reset",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "templates": [
                    "dict"
                ]
            }
        },
        "BaseLoader.resolve_path": {
            "name": "resolve_path",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [],
                "parent_path": [
                    "None"
                ]
            },
            "variables": {}
        },
        "DictLoader.resolve_path": {
            "name": "resolve_path",
            "location": -1,
            "return": [],
            "arguments": {
                "name": [],
                "parent_path": []
            },
            "variables": {
                "parent_path": [
                    "None"
                ]
            }
        },
        "Loader.resolve_path": {
            "name": "resolve_path",
            "location": -1,
            "return": [],
            "arguments": {
                "name": [],
                "parent_path": []
            },
            "variables": {
                "parent_path": [
                    "None"
                ]
            }
        },
        "_CodeWriter.write_line": {
            "name": "write_line",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "line": [],
                "line_number": [],
                "indent": [
                    "None"
                ]
            },
            "variables": {
                "indent": [
                    "None"
                ],
                "line_comment": [
                    "typing.Text"
                ],
                "ancestors": [
                    "list[typing.Text]"
                ]
            }
        }
    },
    "tornado-5.0.2/tornado/test/__init__.py": {
        "global": {}
    },
    "tornado-5.0.2/tornado/test/__main__.py": {
        "global": {}
    },
    "tornado-5.0.2/tornado/test/asyncio_test.py": {
        "AnyThreadEventLoopPolicyTest.get_and_close_event_loop": {
            "name": "get_and_close_event_loop",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {
                "asyncio": [
                    "None"
                ]
            }
        },
        "AnyThreadEventLoopPolicyTest.get_event_loop_on_thread": {
            "name": "get_event_loop_on_thread",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "AsyncIOLoopTest.get_new_ioloop": {
            "name": "get_new_ioloop",
            "location": -1,
            "return": [
                "AsyncIOLoop"
            ],
            "arguments": {},
            "variables": {
                "io_loop": [
                    "AsyncIOLoop"
                ]
            }
        },
        "global": {},
        "AnyThreadEventLoopPolicyTest.run_policy_test": {
            "name": "run_policy_test",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "accessor": [],
                "expected_type": []
            },
            "variables": {
                "asyncio": [
                    "None"
                ]
            }
        },
        "AnyThreadEventLoopPolicyTest.setUp": {
            "name": "setUp",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "asyncio": [
                    "None"
                ],
                "executor": [
                    "ThreadPoolExecutor"
                ]
            }
        },
        "LeakTest.setUp": {
            "name": "setUp",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "asyncio": [
                    "None"
                ]
            }
        },
        "AnyThreadEventLoopPolicyTest.tearDown": {
            "name": "tearDown",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "asyncio": [
                    "None"
                ]
            }
        },
        "LeakTest.tearDown": {
            "name": "tearDown",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "asyncio": [
                    "None"
                ]
            }
        },
        "AnyThreadEventLoopPolicyTest.test_asyncio_accessor": {
            "name": "test_asyncio_accessor",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "asyncio": [
                    "None"
                ]
            }
        },
        "AsyncIOLoopTest.test_asyncio_adapter": {
            "name": "test_asyncio_adapter",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "AsyncIOLoopTest.test_asyncio_callback": {
            "name": "test_asyncio_callback",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "LeakTest.test_asyncio_close_leak": {
            "name": "test_asyncio_close_leak",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "orig_count": [
                    "int"
                ],
                "asyncio": [
                    "None"
                ],
                "new_count": [
                    "int"
                ]
            }
        },
        "AsyncIOLoopTest.test_asyncio_future": {
            "name": "test_asyncio_future",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "asyncio": [
                    "None"
                ],
                "x": [
                    "typing.Generator"
                ]
            }
        },
        "AsyncIOLoopTest.test_asyncio_yield_from": {
            "name": "test_asyncio_yield_from",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "result": [
                    "typing.Generator"
                ]
            }
        },
        "LeakTest.test_ioloop_close_leak": {
            "name": "test_ioloop_close_leak",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "orig_count": [
                    "int"
                ],
                "loop": [
                    "AsyncIOLoop"
                ],
                "new_count": [
                    "int"
                ]
            }
        },
        "AnyThreadEventLoopPolicyTest.test_tornado_accessor": {
            "name": "test_tornado_accessor",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "AsyncIOLoopTest.tornado_coroutine": {
            "name": "tornado_coroutine",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {}
        }
    },
    "tornado-5.0.2/tornado/test/auth_test.py": {
        "OAuth1ClientLoginHandler._oauth_consumer_token": {
            "name": "_oauth_consumer_token",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "OAuth1ClientRequestParametersHandler._oauth_consumer_token": {
            "name": "_oauth_consumer_token",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "OAuth1ClientLoginHandler._oauth_get_user": {
            "name": "_oauth_get_user",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "access_token": [],
                "callback": []
            },
            "variables": {}
        },
        "AuthTest.base_twitter_redirect": {
            "name": "base_twitter_redirect",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "url": []
            },
            "variables": {}
        },
        "FacebookClientLoginHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {
                "user": [
                    "typing.Generator"
                ]
            }
        },
        "FacebookServerAccessTokenHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "FacebookServerMeHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "GoogleLoginHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {
                "code": [
                    "None"
                ],
                "user": [
                    "typing.Generator"
                ]
            }
        },
        "GoogleOAuth2AuthorizeHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "code": [
                    "typing.Text"
                ]
            }
        },
        "GoogleOAuth2UserinfoHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "OAuth1ClientLoginCoroutineHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {
                "e": [
                    "Exception"
                ]
            }
        },
        "OAuth1ClientLoginHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "OAuth1ClientRequestParametersHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "OAuth1ServerAccessTokenHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "OAuth1ServerRequestTokenHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "OAuth2ClientLoginHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "OpenIdClientLoginHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TwitterClientLoginGenCoroutineHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {
                "user": [
                    "typing.Generator"
                ]
            }
        },
        "TwitterClientLoginGenEngineHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "user": [
                    "typing.Generator"
                ]
            }
        },
        "TwitterClientLoginHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TwitterClientShowUserFutureHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "response": [
                    "typing.Generator"
                ],
                "e": [
                    "Exception"
                ]
            }
        },
        "TwitterClientShowUserHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "response": [
                    "typing.Generator",
                    "None"
                ]
            }
        },
        "TwitterServerAccessTokenHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TwitterServerShowUserHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "screen_name": []
            },
            "variables": {}
        },
        "TwitterServerVerifyCredentialsHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "AuthTest.get_app": {
            "name": "get_app",
            "location": -1,
            "return": [
                "Application"
            ],
            "arguments": {},
            "variables": {}
        },
        "GoogleOAuth2Test.get_app": {
            "name": "get_app",
            "location": -1,
            "return": [
                "Application"
            ],
            "arguments": {},
            "variables": {}
        },
        "TwitterClientHandler.get_auth_http_client": {
            "name": "get_auth_http_client",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "global": {},
        "FacebookClientLoginHandler.initialize": {
            "name": "initialize",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "test": []
            },
            "variables": {}
        },
        "GoogleLoginHandler.initialize": {
            "name": "initialize",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "test": []
            },
            "variables": {}
        },
        "OAuth1ClientLoginHandler.initialize": {
            "name": "initialize",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "test": [],
                "version": []
            },
            "variables": {}
        },
        "OAuth1ClientRequestParametersHandler.initialize": {
            "name": "initialize",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "version": []
            },
            "variables": {}
        },
        "OAuth2ClientLoginHandler.initialize": {
            "name": "initialize",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "test": []
            },
            "variables": {}
        },
        "OpenIdClientLoginHandler.initialize": {
            "name": "initialize",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "test": []
            },
            "variables": {}
        },
        "TwitterClientHandler.initialize": {
            "name": "initialize",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "test": []
            },
            "variables": {}
        },
        "OAuth1ClientLoginHandler.on_user": {
            "name": "on_user",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "user": []
            },
            "variables": {
                "user": [
                    "None"
                ]
            }
        },
        "OpenIdClientLoginHandler.on_user": {
            "name": "on_user",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "user": []
            },
            "variables": {
                "user": [
                    "None"
                ]
            }
        },
        "TwitterClientLoginHandler.on_user": {
            "name": "on_user",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "user": []
            },
            "variables": {
                "user": [
                    "None"
                ]
            }
        },
        "GoogleOAuth2TokenHandler.post": {
            "name": "post",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "OpenIdServerAuthenticateHandler.post": {
            "name": "post",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "AuthTest.test_facebook_login": {
            "name": "test_facebook_login",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "GoogleOAuth2Test.test_google_login": {
            "name": "test_google_login",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "AuthTest.test_oauth10_get_user": {
            "name": "test_oauth10_get_user",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "AuthTest.test_oauth10_redirect": {
            "name": "test_oauth10_redirect",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "AuthTest.test_oauth10_request_parameters": {
            "name": "test_oauth10_request_parameters",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "AuthTest.test_oauth10a_get_user": {
            "name": "test_oauth10a_get_user",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "AuthTest.test_oauth10a_get_user_coroutine_exception": {
            "name": "test_oauth10a_get_user_coroutine_exception",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "AuthTest.test_oauth10a_redirect": {
            "name": "test_oauth10a_redirect",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "AuthTest.test_oauth10a_request_parameters": {
            "name": "test_oauth10a_request_parameters",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "AuthTest.test_oauth2_redirect": {
            "name": "test_oauth2_redirect",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "AuthTest.test_openid_get_user": {
            "name": "test_openid_get_user",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "AuthTest.test_openid_redirect": {
            "name": "test_openid_redirect",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "AuthTest.test_twitter_get_user": {
            "name": "test_twitter_get_user",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "AuthTest.test_twitter_redirect": {
            "name": "test_twitter_redirect",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "AuthTest.test_twitter_redirect_gen_coroutine": {
            "name": "test_twitter_redirect_gen_coroutine",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "AuthTest.test_twitter_redirect_gen_engine": {
            "name": "test_twitter_redirect_gen_engine",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "AuthTest.test_twitter_show_user": {
            "name": "test_twitter_show_user",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "AuthTest.test_twitter_show_user_error": {
            "name": "test_twitter_show_user_error",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "AuthTest.test_twitter_show_user_future": {
            "name": "test_twitter_show_user_future",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "AuthTest.test_twitter_show_user_future_error": {
            "name": "test_twitter_show_user_future_error",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        }
    },
    "tornado-5.0.2/tornado/test/autoreload_test.py": {
        "global": {},
        "AutoreloadTest.test_reload_module": {
            "name": "test_reload_module",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "f": [
                    "typing.IO"
                ],
                "MAIN": [
                    "typing.Text"
                ],
                "p": [
                    "Popen"
                ]
            }
        }
    },
    "tornado-5.0.2/tornado/test/concurrent_test.py": {
        "BaseCapClient.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "port": []
            },
            "variables": {}
        },
        "RunOnExecutorTest,Object.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "ReturnFutureTest.async_future": {
            "name": "async_future",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "callback": []
            },
            "variables": {}
        },
        "DecoratorCapClient.capitalize": {
            "name": "capitalize",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "request_data": [],
                "callback": []
            },
            "variables": {
                "stream": [
                    "IOStream"
                ]
            }
        },
        "GeneratorCapClient.capitalize": {
            "name": "capitalize",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {
                "request_data": [],
                "callback": []
            },
            "variables": {
                "stream": [
                    "IOStream"
                ],
                "data": [
                    "typing.Generator"
                ]
            }
        },
        "ManualCapClient.capitalize": {
            "name": "capitalize",
            "location": -1,
            "return": [
                "Future"
            ],
            "arguments": {
                "request_data": [],
                "callback": [
                    "None"
                ]
            },
            "variables": {
                "stream": [
                    "IOStream"
                ],
                "future": [
                    "Future"
                ],
                "callback": [
                    "None"
                ]
            }
        },
        "ReturnFutureTest.delayed_failure": {
            "name": "delayed_failure",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "callback": []
            },
            "variables": {}
        },
        "ReturnFutureTest.exc_handler": {
            "name": "exc_handler",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "loop": [],
                "context": []
            },
            "variables": {}
        },
        "ClientTestMixin.f": {
            "name": "f",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "result": [
                    "typing.Generator"
                ]
            }
        },
        "ReturnFutureTest.f": {
            "name": "f",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "kwargs": []
            },
            "variables": {}
        },
        "RunOnExecutorTest,Object.f": {
            "name": "f",
            "location": -1,
            "return": [
                "int"
            ],
            "arguments": {},
            "variables": {}
        },
        "global": {},
        "DecoratorCapClient.handle_connect": {
            "name": "handle_connect",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "ManualCapClient.handle_connect": {
            "name": "handle_connect",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "CapServer.handle_read": {
            "name": "handle_read",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "data": []
            },
            "variables": {}
        },
        "DecoratorCapClient.handle_read": {
            "name": "handle_read",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "data": []
            },
            "variables": {}
        },
        "ManualCapClient.handle_read": {
            "name": "handle_read",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "data": []
            },
            "variables": {
                "e": [
                    "Exception"
                ]
            }
        },
        "CapServer.handle_stream": {
            "name": "handle_stream",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "stream": [],
                "address": []
            },
            "variables": {}
        },
        "ReturnFutureTest.immediate_failure": {
            "name": "immediate_failure",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "callback": []
            },
            "variables": {}
        },
        "ReturnFutureTest.no_result_future": {
            "name": "no_result_future",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "callback": []
            },
            "variables": {}
        },
        "BaseCapClient.process_response": {
            "name": "process_response",
            "location": -1,
            "return": [],
            "arguments": {
                "data": []
            },
            "variables": {}
        },
        "ReturnFutureTest.return_value": {
            "name": "return_value",
            "location": -1,
            "return": [
                "int"
            ],
            "arguments": {
                "callback": []
            },
            "variables": {}
        },
        "ClientTestMixin.setUp": {
            "name": "setUp",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "server": [
                    "CapServer"
                ]
            }
        },
        "ReturnFutureTest.sync_future": {
            "name": "sync_future",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "callback": []
            },
            "variables": {}
        },
        "ClientTestMixin.tearDown": {
            "name": "tearDown",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "ReturnFutureTest.test_async_future": {
            "name": "test_async_future",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "ReturnFutureTest.test_async_future_gen": {
            "name": "test_async_future_gen",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "result": [
                    "typing.Generator"
                ]
            }
        },
        "RunOnExecutorTest.test_call_with_executor": {
            "name": "test_call_with_executor",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "o": [
                    "Object"
                ],
                "answer": [
                    "typing.Generator"
                ]
            }
        },
        "RunOnExecutorTest.test_call_with_no_args": {
            "name": "test_call_with_no_args",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "o": [
                    "Object"
                ],
                "answer": [
                    "typing.Generator"
                ]
            }
        },
        "ClientTestMixin.test_callback": {
            "name": "test_callback",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "ClientTestMixin.test_callback_error": {
            "name": "test_callback_error",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "ReturnFutureTest.test_callback_kw": {
            "name": "test_callback_kw",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "ReturnFutureTest.test_callback_positional": {
            "name": "test_callback_positional",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "ReturnFutureTest.test_delayed_failure": {
            "name": "test_delayed_failure",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "ReturnFutureTest.test_error_in_callback": {
            "name": "test_error_in_callback",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "ClientTestMixin.test_future": {
            "name": "test_future",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "ClientTestMixin.test_future_error": {
            "name": "test_future_error",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "MiscFutureTest.test_future_set_result_unless_cancelled": {
            "name": "test_future_set_result_unless_cancelled",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "fut": [
                    "Future"
                ]
            }
        },
        "ReturnFutureTest.test_future_traceback": {
            "name": "test_future_traceback",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {}
        },
        "ClientTestMixin.test_generator": {
            "name": "test_generator",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "ClientTestMixin.test_generator_error": {
            "name": "test_generator_error",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "ReturnFutureTest.test_immediate_failure": {
            "name": "test_immediate_failure",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "ReturnFutureTest.test_kw_only_callback": {
            "name": "test_kw_only_callback",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "ReturnFutureTest.test_no_callback": {
            "name": "test_no_callback",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "RunOnExecutorTest.test_no_calling": {
            "name": "test_no_calling",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "o": [
                    "Object"
                ],
                "answer": [
                    "typing.Generator"
                ]
            }
        },
        "ReturnFutureTest.test_no_result_future": {
            "name": "test_no_result_future",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "ReturnFutureTest.test_no_result_future_callback": {
            "name": "test_no_result_future_callback",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "ReturnFutureTest.test_none_callback_kw": {
            "name": "test_none_callback_kw",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "ReturnFutureTest.test_none_callback_pos": {
            "name": "test_none_callback_pos",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "ReturnFutureTest.test_return_value": {
            "name": "test_return_value",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "ReturnFutureTest.test_uncaught_exception_log": {
            "name": "test_uncaught_exception_log",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {}
        }
    },
    "tornado-5.0.2/tornado/test/curl_httpclient_test.py": {
        "CurlHTTPClientTestCase.create_client": {
            "name": "create_client",
            "location": -1,
            "return": [
                "CurlAsyncHTTPClient"
            ],
            "arguments": {
                "kwargs": []
            },
            "variables": {}
        },
        "CurlHTTPClientTestCase.error_handler": {
            "name": "error_handler",
            "location": -1,
            "return": [
                "bool"
            ],
            "arguments": {
                "typ": [],
                "value": [],
                "tb": []
            },
            "variables": {}
        },
        "CustomFailReasonHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "CustomReasonHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "DigestAuthHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "realm": [
                    "typing.Text"
                ],
                "opaque": [
                    "typing.Text"
                ],
                "nonce": [
                    "typing.Text"
                ],
                "username": [
                    "typing.Text"
                ],
                "password": [
                    "typing.Text"
                ],
                "auth_header": [
                    "None"
                ],
                "param_dict": [
                    "dict"
                ]
            }
        },
        "CurlHTTPClientTestCase.get_app": {
            "name": "get_app",
            "location": -1,
            "return": [
                "Application"
            ],
            "arguments": {},
            "variables": {}
        },
        "CurlHTTPClientCommonTestCase.get_http_client": {
            "name": "get_http_client",
            "location": -1,
            "return": [
                "CurlAsyncHTTPClient"
            ],
            "arguments": {},
            "variables": {
                "client": [
                    "CurlAsyncHTTPClient"
                ]
            }
        },
        "global": {},
        "CurlHTTPClientTestCase.setUp": {
            "name": "setUp",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "CurlHTTPClientTestCase.test_custom_reason": {
            "name": "test_custom_reason",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "CurlHTTPClientTestCase.test_digest_auth": {
            "name": "test_digest_auth",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "CurlHTTPClientTestCase.test_fail_custom_reason": {
            "name": "test_fail_custom_reason",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "CurlHTTPClientTestCase.test_failed_setup": {
            "name": "test_failed_setup",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "CurlHTTPClientTestCase.test_prepare_curl_callback_stack_context": {
            "name": "test_prepare_curl_callback_stack_context",
            "location": -1,
            "return": [
                "typing.Generator[list]"
            ],
            "arguments": {},
            "variables": {
                "exc_info": [
                    "list"
                ],
                "error_event": [
                    "Event"
                ],
                "request": [
                    "HTTPRequest"
                ]
            }
        }
    },
    "tornado-5.0.2/tornado/test/escape_test.py": {
        "global": {},
        "EscapeTestCase.test_escape_return_types": {
            "name": "test_escape_return_types",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "EscapeTestCase.test_json_decode": {
            "name": "test_json_decode",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "EscapeTestCase.test_json_encode": {
            "name": "test_json_encode",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "EscapeTestCase.test_linkify": {
            "name": "test_linkify",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "text": [
                    "typing.Text",
                    "dict[typing.Text, list[typing.Text]]",
                    "dict[typing.Text, bool]",
                    "dict[typing.Text, typing.Text]",
                    "dict[typing.Text, typing.Callable]"
                ],
                "kwargs": [
                    "typing.Text",
                    "dict[typing.Text, list[typing.Text]]",
                    "dict[typing.Text, bool]",
                    "dict[typing.Text, typing.Text]",
                    "dict[typing.Text, typing.Callable]"
                ],
                "html": [
                    "typing.Text",
                    "dict[typing.Text, list[typing.Text]]",
                    "dict[typing.Text, bool]",
                    "dict[typing.Text, typing.Text]",
                    "dict[typing.Text, typing.Callable]"
                ],
                "linkify_tests": [
                    "list[typing.Union[tuple[typing.Union[typing.Text,dict[typing.Text, list[typing.Text]]]],tuple[typing.Union[typing.Text,dict[typing.Text, bool]]],tuple[typing.Union[typing.Text,dict[typing.Text, typing.Text]]],tuple[typing.Union[typing.Text,dict[typing.Text, typing.Callable]]]]]"
                ]
            }
        },
        "EscapeTestCase.test_recursive_unicode": {
            "name": "test_recursive_unicode",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "tests": [
                    "dict[typing.Text, typing.Union[dict[bytes, bytes],list[bytes],tuple[bytes],bytes]]"
                ]
            }
        },
        "EscapeTestCase.test_squeeze": {
            "name": "test_squeeze",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "EscapeTestCase.test_url_escape_quote_plus": {
            "name": "test_url_escape_quote_plus",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "unescaped": [
                    "typing.Text"
                ],
                "plus_escaped": [
                    "typing.Text"
                ],
                "escaped": [
                    "typing.Text"
                ]
            }
        },
        "EscapeTestCase.test_url_escape_unicode": {
            "name": "test_url_escape_unicode",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "tests": [
                    "list[tuple[typing.Union[bytes,typing.Text]]]"
                ],
                "unescaped": [
                    "bytes",
                    "typing.Text"
                ],
                "escaped": [
                    "bytes",
                    "typing.Text"
                ]
            }
        },
        "EscapeTestCase.test_url_unescape_unicode": {
            "name": "test_url_unescape_unicode",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "tests": [
                    "list[tuple[typing.Optional[typing.Text]]]"
                ],
                "escaped": [
                    "typing.Text",
                    "None"
                ],
                "unescaped": [
                    "typing.Text",
                    "None"
                ],
                "encoding": [
                    "typing.Text",
                    "None"
                ]
            }
        },
        "EscapeTestCase.test_xhtml_escape": {
            "name": "test_xhtml_escape",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "tests": [
                    "list[typing.Union[tuple[typing.Text],tuple[bytes]]]"
                ],
                "unescaped": [
                    "typing.Text",
                    "bytes"
                ],
                "escaped": [
                    "typing.Text",
                    "bytes"
                ]
            }
        },
        "EscapeTestCase.test_xhtml_unescape_numeric": {
            "name": "test_xhtml_unescape_numeric",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "tests": [
                    "list[tuple[typing.Text]]"
                ],
                "escaped": [
                    "typing.Text"
                ],
                "unescaped": [
                    "typing.Text"
                ]
            }
        }
    },
    "tornado-5.0.2/tornado/test/gen_test.py": {
        "GenEngineTest._stack_depth": {
            "name": "_stack_depth",
            "location": -1,
            "return": [
                "int"
            ],
            "arguments": {},
            "variables": {
                "length": [
                    "int"
                ]
            }
        },
        "GenEngineTest.async_exception": {
            "name": "async_exception",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {
                "e": []
            },
            "variables": {}
        },
        "GenEngineTest.async_future": {
            "name": "async_future",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "result": [],
                "callback": []
            },
            "variables": {}
        },
        "RunnerGCTest.callback": {
            "name": "callback",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "GenEngineTest.context": {
            "name": "context",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {}
        },
        "GenEngineTest.delay_callback": {
            "name": "delay_callback",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "iterations": [],
                "callback": [],
                "arg": []
            },
            "variables": {}
        },
        "RunnerGCTest.do_something": {
            "name": "do_something",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {}
        },
        "GenCoroutineTest.f1": {
            "name": "f1",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "GenCoroutineTest.f2": {
            "name": "f2",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {}
        },
        "GenCoroutineTest.f": {
            "name": "f",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {}
        },
        "GenEngineTest.f": {
            "name": "f",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "GenEngineTest.fail_task": {
            "name": "fail_task",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "callback": []
            },
            "variables": {}
        },
        "GenYieldExceptionHandler.fail_task": {
            "name": "fail_task",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "callback": []
            },
            "variables": {}
        },
        "WaitIteratorTest.finish_coroutines": {
            "name": "finish_coroutines",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "iteration": [],
                "futures": []
            },
            "variables": {
                "futures": [
                    "None"
                ]
            }
        },
        "GenEngineTest.function_with_stack_context": {
            "name": "function_with_stack_context",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "callback": []
            },
            "variables": {}
        },
        "AsyncPrepareErrorHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "GenCoroutineExceptionHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {}
        },
        "GenCoroutineSequenceHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {}
        },
        "GenCoroutineUnfinishedSequenceHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {}
        },
        "GenExceptionHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {}
        },
        "GenSequenceHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {}
        },
        "GenTaskHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "client": [
                    "AsyncHTTPClient"
                ],
                "response": [
                    "typing.Generator"
                ]
            }
        },
        "GenYieldExceptionHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {}
        },
        "UndecoratedCoroutinesHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {}
        },
        "GenWebTest.get_app": {
            "name": "get_app",
            "location": -1,
            "return": [
                "Application"
            ],
            "arguments": {},
            "variables": {}
        },
        "global": {},
        "RunnerGCTest.infinite_coro": {
            "name": "infinite_coro",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {}
        },
        "GenCoroutineTest.inner2": {
            "name": "inner2",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {}
        },
        "GenCoroutineTest.inner": {
            "name": "inner",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "iteration": []
            },
            "variables": {}
        },
        "GenEngineTest.inner": {
            "name": "inner",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {
                "callback": []
            },
            "variables": {}
        },
        "RunnerGCTest.is_pypy3": {
            "name": "is_pypy3",
            "location": -1,
            "return": [
                "bool"
            ],
            "arguments": {},
            "variables": {}
        },
        "GenEngineTest.named_context": {
            "name": "named_context",
            "location": -1,
            "return": [],
            "arguments": {
                "name": []
            },
            "variables": {}
        },
        "GenEngineTest.outer": {
            "name": "outer",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {}
        },
        "AsyncPrepareErrorHandler.prepare": {
            "name": "prepare",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {}
        },
        "UndecoratedCoroutinesHandler.prepare": {
            "name": "prepare",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {
                "chunks": [
                    "list"
                ]
            }
        },
        "GenEngineTest.run_gen": {
            "name": "run_gen",
            "location": -1,
            "return": [],
            "arguments": {
                "f": []
            },
            "variables": {}
        },
        "GenCoroutineTest.setUp": {
            "name": "setUp",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "finished": [
                    "bool"
                ]
            }
        },
        "GenEngineTest.setUp": {
            "name": "setUp",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "named_contexts": [
                    "list"
                ]
            }
        },
        "GenEngineTest.step2": {
            "name": "step2",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "GenCoroutineTest.tearDown": {
            "name": "tearDown",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "WaitIteratorTest.test_already_done": {
            "name": "test_already_done",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "f1": [
                    "Future"
                ],
                "f2": [
                    "Future"
                ],
                "f3": [
                    "Future"
                ],
                "i": [
                    "int"
                ],
                "r": [
                    "typing.Generator"
                ],
                "dr": [
                    "typing.Generator"
                ]
            }
        },
        "WithTimeoutTest.test_already_resolved": {
            "name": "test_already_resolved",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "future": [
                    "Future"
                ],
                "result": [
                    "typing.Generator"
                ]
            }
        },
        "GenEngineTest.test_arguments": {
            "name": "test_arguments",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "GenCoroutineTest.test_async_await": {
            "name": "test_async_await",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "result": [
                    "typing.Generator"
                ],
                "finished": [
                    "bool"
                ]
            }
        },
        "GenCoroutineTest.test_async_await_mixed_multi_native_future": {
            "name": "test_async_await_mixed_multi_native_future",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "results": [
                    "typing.Generator[list]"
                ],
                "finished": [
                    "bool"
                ]
            }
        },
        "GenCoroutineTest.test_async_await_mixed_multi_native_yieldpoint": {
            "name": "test_async_await_mixed_multi_native_yieldpoint",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "results": [
                    "typing.Generator[list]"
                ],
                "finished": [
                    "bool"
                ]
            }
        },
        "GenCoroutineTest.test_async_early_return": {
            "name": "test_async_early_return",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "result": [
                    "typing.Generator"
                ],
                "finished": [
                    "bool"
                ]
            }
        },
        "GenCoroutineTest.test_async_gen_return": {
            "name": "test_async_gen_return",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "result": [
                    "typing.Generator"
                ],
                "finished": [
                    "bool"
                ]
            }
        },
        "GenWebTest.test_async_prepare_error_handler": {
            "name": "test_async_prepare_error_handler",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "GenCoroutineTest.test_async_raise": {
            "name": "test_async_raise",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {
                "finished": [
                    "bool"
                ]
            }
        },
        "GenEngineTest.test_async_raise_return": {
            "name": "test_async_raise_return",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "GenEngineTest.test_async_raise_return_value": {
            "name": "test_async_raise_return_value",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "GenEngineTest.test_async_raise_return_value_tuple": {
            "name": "test_async_raise_return_value_tuple",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "GenCoroutineTest.test_async_return": {
            "name": "test_async_return",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "result": [
                    "typing.Generator"
                ],
                "finished": [
                    "bool"
                ]
            }
        },
        "GenCoroutineTest.test_async_return_no_value": {
            "name": "test_async_return_no_value",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "result": [
                    "typing.Generator"
                ],
                "finished": [
                    "bool"
                ]
            }
        },
        "GenCoroutineTest.test_async_with_timeout": {
            "name": "test_async_with_timeout",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "result": [
                    "typing.Generator"
                ],
                "finished": [
                    "bool"
                ]
            }
        },
        "GenCoroutineTest.test_asyncio_future_debug_info": {
            "name": "test_asyncio_future_debug_info",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "finished": [
                    "bool"
                ],
                "asyncio": [
                    "None"
                ],
                "expected": [
                    "typing.Text"
                ],
                "actual": [
                    "str"
                ]
            }
        },
        "GenCoroutineTest.test_asyncio_gather": {
            "name": "test_asyncio_gather",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "asyncio": [
                    "None"
                ],
                "ret": [
                    "typing.Generator"
                ],
                "finished": [
                    "bool"
                ]
            }
        },
        "GenCoroutineTest.test_asyncio_sleep_zero": {
            "name": "test_asyncio_sleep_zero",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "result": [
                    "typing.Generator"
                ],
                "finished": [
                    "bool"
                ]
            }
        },
        "GenCoroutineTest.test_attributes": {
            "name": "test_attributes",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "finished": [
                    "bool"
                ]
            }
        },
        "GenEngineTest.test_bogus_yield": {
            "name": "test_bogus_yield",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "GenEngineTest.test_bogus_yield_tuple": {
            "name": "test_bogus_yield_tuple",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "WithTimeoutTest.test_completed_concurrent_future": {
            "name": "test_completed_concurrent_future",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {
                "futures": [
                    "None"
                ]
            }
        },
        "WithTimeoutTest.test_completes_before_timeout": {
            "name": "test_completes_before_timeout",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "future": [
                    "Future"
                ],
                "result": [
                    "typing.Generator"
                ]
            }
        },
        "GenWebTest.test_coroutine_exception_handler": {
            "name": "test_coroutine_exception_handler",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "GenCoroutineTest.test_coroutine_refcounting": {
            "name": "test_coroutine_refcounting",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "finished": [
                    "bool"
                ]
            }
        },
        "GenWebTest.test_coroutine_sequence_handler": {
            "name": "test_coroutine_sequence_handler",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "GenWebTest.test_coroutine_unfinished_sequence_handler": {
            "name": "test_coroutine_unfinished_sequence_handler",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "WaitIteratorTest.test_empty_iterator": {
            "name": "test_empty_iterator",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "GenWebTest.test_exception_handler": {
            "name": "test_exception_handler",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "GenEngineTest.test_exception_in_task_phase1": {
            "name": "test_exception_in_task_phase1",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "GenEngineTest.test_exception_in_task_phase2": {
            "name": "test_exception_in_task_phase2",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "GenEngineTest.test_exception_in_yield": {
            "name": "test_exception_in_yield",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "GenEngineTest.test_exception_phase1": {
            "name": "test_exception_phase1",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "GenEngineTest.test_exception_phase2": {
            "name": "test_exception_phase2",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "WithTimeoutTest.test_fails_before_timeout": {
            "name": "test_fails_before_timeout",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {
                "future": [
                    "Future"
                ]
            }
        },
        "GenEngineTest.test_future": {
            "name": "test_future",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "result": [
                    "typing.Generator"
                ]
            }
        },
        "RunnerGCTest.test_gc": {
            "name": "test_gc",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {
                "weakref_scope": [
                    "list[None]"
                ]
            }
        },
        "RunnerGCTest.test_gc_infinite_async_await": {
            "name": "test_gc_infinite_async_await",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "result": [
                    "list"
                ],
                "wfut": [
                    "list"
                ]
            }
        },
        "RunnerGCTest.test_gc_infinite_coro": {
            "name": "test_gc_infinite_coro",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "result": [
                    "list"
                ],
                "wfut": [
                    "list"
                ]
            }
        },
        "GenEngineTest.test_inline_cb": {
            "name": "test_inline_cb",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "GenEngineTest.test_ioloop_cb": {
            "name": "test_ioloop_cb",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "GenCoroutineTest.test_is_coroutine_function": {
            "name": "test_is_coroutine_function",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "finished": [
                    "bool"
                ]
            }
        },
        "WaitIteratorTest.test_iterator": {
            "name": "test_iterator",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "futures": [
                    "list[Future]"
                ],
                "i": [
                    "int"
                ],
                "r": [
                    "typing.Generator"
                ]
            }
        },
        "WaitIteratorTest.test_iterator_async_await": {
            "name": "test_iterator_async_await",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {
                "futures": [
                    "list[Future]"
                ],
                "finished": [
                    "bool"
                ]
            }
        },
        "GenEngineTest.test_key_mismatch": {
            "name": "test_key_mismatch",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "GenEngineTest.test_key_mismatch_tuple": {
            "name": "test_key_mismatch_tuple",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "GenEngineTest.test_key_reuse": {
            "name": "test_key_reuse",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "GenEngineTest.test_key_reuse_tuple": {
            "name": "test_key_reuse_tuple",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "GenEngineTest.test_leaked_callback": {
            "name": "test_leaked_callback",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "GenEngineTest.test_leaked_callback_tuple": {
            "name": "test_leaked_callback_tuple",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "GenCoroutineTest.test_moment": {
            "name": "test_moment",
            "location": -1,
            "return": [
                "typing.Generator[list]"
            ],
            "arguments": {},
            "variables": {
                "calls": [
                    "list"
                ],
                "immediate": [
                    "Future"
                ],
                "finished": [
                    "bool"
                ]
            }
        },
        "GenEngineTest.test_multi": {
            "name": "test_multi",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "GenEngineTest.test_multi_dict": {
            "name": "test_multi_dict",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "GenEngineTest.test_multi_dict_future": {
            "name": "test_multi_dict_future",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "results": [
                    "typing.Generator"
                ]
            }
        },
        "GenEngineTest.test_multi_empty": {
            "name": "test_multi_empty",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "x": [
                    "typing.Generator[list]"
                ],
                "y": [
                    "typing.Generator[dict]"
                ]
            }
        },
        "GenEngineTest.test_multi_exceptions": {
            "name": "test_multi_exceptions",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {}
        },
        "GenEngineTest.test_multi_future": {
            "name": "test_multi_future",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "results": [
                    "typing.Generator[list]"
                ]
            }
        },
        "GenEngineTest.test_multi_future_delayed": {
            "name": "test_multi_future_delayed",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "GenEngineTest.test_multi_future_dict_delayed": {
            "name": "test_multi_future_dict_delayed",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "GenEngineTest.test_multi_future_duplicate": {
            "name": "test_multi_future_duplicate",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "results": [
                    "typing.Generator[list]"
                ]
            }
        },
        "GenEngineTest.test_multi_future_exceptions": {
            "name": "test_multi_future_exceptions",
            "location": -1,
            "return": [
                "typing.Generator[list]",
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {}
        },
        "GenEngineTest.test_multi_mixed_types": {
            "name": "test_multi_mixed_types",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "responses": [
                    "typing.Generator[list]"
                ]
            }
        },
        "RunnerGCTest.test_multi_moment": {
            "name": "test_multi_moment",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "GenEngineTest.test_multi_performance": {
            "name": "test_multi_performance",
            "location": -1,
            "return": [
                "typing.Generator[list]"
            ],
            "arguments": {},
            "variables": {}
        },
        "GenEngineTest.test_multi_yieldpoint_delayed": {
            "name": "test_multi_yieldpoint_delayed",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "GenEngineTest.test_multi_yieldpoint_dict_delayed": {
            "name": "test_multi_yieldpoint_dict_delayed",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "GenWebTest.test_native_coroutine_handler": {
            "name": "test_native_coroutine_handler",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "WaitIteratorTest.test_no_ref": {
            "name": "test_no_ref",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {}
        },
        "GenEngineTest.test_no_yield": {
            "name": "test_no_yield",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "GenEngineTest.test_none": {
            "name": "test_none",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "WithTimeoutTest.test_normal_concurrent_future": {
            "name": "test_normal_concurrent_future",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {
                "futures": [
                    "None"
                ]
            }
        },
        "GenEngineTest.test_orphaned_callback": {
            "name": "test_orphaned_callback",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "GenEngineTest.test_parallel_callback": {
            "name": "test_parallel_callback",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "GenCoroutineTest.test_pass_callback": {
            "name": "test_pass_callback",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "result": [
                    "typing.Generator"
                ],
                "finished": [
                    "bool"
                ]
            }
        },
        "GenCoroutineTest.test_py3_leak_exception_context": {
            "name": "test_py3_leak_exception_context",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {
                "e": [
                    "Exception"
                ],
                "finished": [
                    "bool"
                ]
            }
        },
        "GenEngineTest.test_raise_after_stop": {
            "name": "test_raise_after_stop",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "GenCoroutineTest.test_replace_context_exception": {
            "name": "test_replace_context_exception",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {
                "finished": [
                    "bool"
                ]
            }
        },
        "GenCoroutineTest.test_replace_yieldpoint_exception": {
            "name": "test_replace_yieldpoint_exception",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {
                "finished": [
                    "bool"
                ]
            }
        },
        "GenEngineTest.test_resume_after_exception_in_yield": {
            "name": "test_resume_after_exception_in_yield",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "GenEngineTest.test_return_value": {
            "name": "test_return_value",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "GenEngineTest.test_return_value_tuple": {
            "name": "test_return_value_tuple",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "GenEngineTest.test_reuse": {
            "name": "test_reuse",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "GenWebTest.test_sequence_handler": {
            "name": "test_sequence_handler",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "GenCoroutineTest.test_sleep": {
            "name": "test_sleep",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {
                "finished": [
                    "bool"
                ]
            }
        },
        "GenEngineTest.test_stack_context_leak": {
            "name": "test_stack_context_leak",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "GenEngineTest.test_stack_context_leak_exception": {
            "name": "test_stack_context_leak_exception",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "initial_stack_depth": [
                    "int"
                ]
            }
        },
        "GenCoroutineTest.test_swallow_context_exception": {
            "name": "test_swallow_context_exception",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "result": [
                    "typing.Generator"
                ],
                "finished": [
                    "bool"
                ]
            }
        },
        "GenCoroutineTest.test_swallow_yieldpoint_exception": {
            "name": "test_swallow_yieldpoint_exception",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "result": [
                    "typing.Generator"
                ],
                "finished": [
                    "bool"
                ]
            }
        },
        "GenCoroutineTest.test_sync_gen_return": {
            "name": "test_sync_gen_return",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "result": [
                    "typing.Generator"
                ],
                "finished": [
                    "bool"
                ]
            }
        },
        "GenCoroutineTest.test_sync_raise": {
            "name": "test_sync_raise",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {
                "finished": [
                    "bool"
                ]
            }
        },
        "GenEngineTest.test_sync_raise_return": {
            "name": "test_sync_raise_return",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "GenEngineTest.test_sync_raise_return_value": {
            "name": "test_sync_raise_return_value",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "GenEngineTest.test_sync_raise_return_value_tuple": {
            "name": "test_sync_raise_return_value_tuple",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "GenCoroutineTest.test_sync_return": {
            "name": "test_sync_return",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "result": [
                    "typing.Generator"
                ],
                "finished": [
                    "bool"
                ]
            }
        },
        "GenCoroutineTest.test_sync_return_no_value": {
            "name": "test_sync_return_no_value",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "result": [
                    "typing.Generator"
                ],
                "finished": [
                    "bool"
                ]
            }
        },
        "GenEngineTest.test_task": {
            "name": "test_task",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "GenWebTest.test_task_handler": {
            "name": "test_task_handler",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "GenEngineTest.test_task_refcounting": {
            "name": "test_task_refcounting",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "GenEngineTest.test_task_transfer_stack_context": {
            "name": "test_task_transfer_stack_context",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {}
        },
        "WithTimeoutTest.test_timeout": {
            "name": "test_timeout",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {}
        },
        "WithTimeoutTest.test_timeout_concurrent_future": {
            "name": "test_timeout_concurrent_future",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {
                "futures": [
                    "None"
                ]
            }
        },
        "GenWebTest.test_undecorated_coroutines": {
            "name": "test_undecorated_coroutines",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "GenEngineTest.test_wait_all": {
            "name": "test_wait_all",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "GenEngineTest.test_wait_transfer_stack_context": {
            "name": "test_wait_transfer_stack_context",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {
                "cb": [
                    "typing.Generator"
                ]
            }
        },
        "GenEngineTest.test_with_arg": {
            "name": "test_with_arg",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "GenEngineTest.test_with_arg_tuple": {
            "name": "test_with_arg_tuple",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "GenWebTest.test_yield_exception_handler": {
            "name": "test_yield_exception_handler",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "RunnerGCTest.tester": {
            "name": "tester",
            "location": -1,
            "return": [
                "typing.Generator[Future]"
            ],
            "arguments": {},
            "variables": {
                "fut": [
                    "Future"
                ]
            }
        },
        "RunnerGCTest.wait_a_moment": {
            "name": "wait_a_moment",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "result": [
                    "typing.Generator"
                ]
            }
        }
    },
    "tornado-5.0.2/tornado/test/gettext_translations/extract_me.py": {
        "global": {}
    },
    "tornado-5.0.2/tornado/test/http1connection_test.py": {
        "HTTP1ConnectionTest.accept_callback": {
            "name": "accept_callback",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "conn": [],
                "addr": []
            },
            "variables": {
                "server_stream": [
                    "IOStream"
                ]
            }
        },
        "HTTP1ConnectionTest.asyncSetUp": {
            "name": "asyncSetUp",
            "location": -1,
            "return": [
                "typing.Generator[list]"
            ],
            "arguments": {},
            "variables": {
                "event": [
                    "Event"
                ],
                "client_stream": [
                    "IOStream"
                ]
            }
        },
        "HTTP1ConnectionTest,Delegate.data_received": {
            "name": "data_received",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "data": []
            },
            "variables": {}
        },
        "HTTP1ConnectionTest,Delegate.finish": {
            "name": "finish",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "global": {},
        "HTTP1ConnectionTest,Delegate.headers_received": {
            "name": "headers_received",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "start_line": [],
                "headers": []
            },
            "variables": {}
        },
        "HTTP1ConnectionTest.setUp": {
            "name": "setUp",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "HTTP1ConnectionTest.test_http10_no_content_length": {
            "name": "test_http10_no_content_length",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {
                "conn": [
                    "HTTP1Connection"
                ],
                "event": [
                    "Event"
                ],
                "test": [
                    "HTTP1ConnectionTest"
                ],
                "body": [
                    "list"
                ]
            }
        }
    },
    "tornado-5.0.2/tornado/test/httpclient_test.py": {
        "ContentLength304Handler._clear_headers_for_304": {
            "name": "_clear_headers_for_304",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "HTTPClientCommonTestCase.accept_callback": {
            "name": "accept_callback",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "conn": [],
                "address": []
            },
            "variables": {
                "stream": [
                    "IOStream"
                ]
            }
        },
        "HTTPClientCommonTestCase.error_handler": {
            "name": "error_handler",
            "location": -1,
            "return": [
                "bool"
            ],
            "arguments": {
                "typ": [],
                "value": [],
                "tb": []
            },
            "variables": {}
        },
        "AuthHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "ChunkHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {}
        },
        "ContentLength304Handler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "CountdownHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "count": []
            },
            "variables": {
                "count": [
                    "int"
                ]
            }
        },
        "HelloWorldHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "SetHeaderHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "UserAgentHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "HTTPClientCommonTestCase.get_app": {
            "name": "get_app",
            "location": -1,
            "return": [
                "Application"
            ],
            "arguments": {},
            "variables": {}
        },
        "SyncHTTPClientTest.get_url": {
            "name": "get_url",
            "location": -1,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "path": []
            },
            "variables": {}
        },
        "global": {},
        "HTTPClientCommonTestCase.handle_callback_exception": {
            "name": "handle_callback_exception",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "callback": []
            },
            "variables": {}
        },
        "HTTPClientCommonTestCase.header_callback": {
            "name": "header_callback",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "header_line": []
            },
            "variables": {}
        },
        "SyncHTTPClientTest.init_server": {
            "name": "init_server",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "app": [
                    "Application"
                ],
                "server": [
                    "HTTPServer"
                ]
            }
        },
        "AllMethodsHandler.method": {
            "name": "method",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "PatchHandler.patch": {
            "name": "patch",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "EchoPostHandler.post": {
            "name": "post",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "PostHandler.post": {
            "name": "post",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "RedirectHandler.prepare": {
            "name": "prepare",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "PutHandler.put": {
            "name": "put",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "SyncHTTPClientTest.setUp": {
            "name": "setUp",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "server_ioloop": [
                    "IOLoop"
                ],
                "http_client": [
                    "HTTPClient"
                ]
            }
        },
        "SyncHTTPClientTest.slow_stop": {
            "name": "slow_stop",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {}
        },
        "SyncHTTPClientTest.stop_server": {
            "name": "stop_server",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "HTTPClientCommonTestCase.streaming_callback": {
            "name": "streaming_callback",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "chunk": []
            },
            "variables": {}
        },
        "HTTPClientCommonTestCase.streaming_cb": {
            "name": "streaming_cb",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "chunk": []
            },
            "variables": {}
        },
        "SyncHTTPClientTest.tearDown": {
            "name": "tearDown",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "HTTPClientCommonTestCase.test_304_with_content_length": {
            "name": "test_304_with_content_length",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "HTTPClientCommonTestCase.test_all_methods": {
            "name": "test_all_methods",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "method": [
                    "typing.Text"
                ]
            }
        },
        "RequestProxyTest.test_bad_attribute": {
            "name": "test_bad_attribute",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "proxy": [
                    "_RequestProxy"
                ]
            }
        },
        "HTTPClientCommonTestCase.test_basic_auth": {
            "name": "test_basic_auth",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "HTTPClientCommonTestCase.test_basic_auth_explicit_mode": {
            "name": "test_basic_auth_explicit_mode",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "HTTPRequestTestCase.test_body": {
            "name": "test_body",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "request": [
                    "HTTPRequest"
                ]
            }
        },
        "HTTPClientCommonTestCase.test_body_encoding": {
            "name": "test_body_encoding",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "unicode_body": [
                    "typing.Text"
                ]
            }
        },
        "HTTPClientCommonTestCase.test_body_sanity_checks": {
            "name": "test_body_sanity_checks",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "method": [
                    "typing.Text"
                ]
            }
        },
        "HTTPRequestTestCase.test_body_setter": {
            "name": "test_body_setter",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "request": [
                    "HTTPRequest"
                ],
                "request_": [
                    "typing.Text"
                ]
            }
        },
        "RequestProxyTest.test_both_set": {
            "name": "test_both_set",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "proxy": [
                    "_RequestProxy"
                ]
            }
        },
        "HTTPClientCommonTestCase.test_chunked": {
            "name": "test_chunked",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "chunks": [
                    "list"
                ]
            }
        },
        "HTTPClientCommonTestCase.test_chunked_close": {
            "name": "test_chunked_close",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "HTTPClientCommonTestCase.test_configure_defaults": {
            "name": "test_configure_defaults",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "HTTPErrorTestCase.test_copy": {
            "name": "test_copy",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "e": [
                    "HTTPError"
                ]
            }
        },
        "HTTPClientCommonTestCase.test_credentials_in_url": {
            "name": "test_credentials_in_url",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "RequestProxyTest.test_default_set": {
            "name": "test_default_set",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "proxy": [
                    "_RequestProxy"
                ]
            }
        },
        "RequestProxyTest.test_defaults_none": {
            "name": "test_defaults_none",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "proxy": [
                    "_RequestProxy"
                ]
            }
        },
        "HTTPErrorTestCase.test_error_with_response": {
            "name": "test_error_with_response",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "resp": [
                    "HTTPResponse"
                ]
            }
        },
        "HTTPClientCommonTestCase.test_final_callback_stack_context": {
            "name": "test_final_callback_stack_context",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "exc_info": [
                    "list"
                ]
            }
        },
        "HTTPClientCommonTestCase.test_follow_redirect": {
            "name": "test_follow_redirect",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "HTTPClientCommonTestCase.test_future_http_error": {
            "name": "test_future_http_error",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {}
        },
        "HTTPClientCommonTestCase.test_future_http_error_no_raise": {
            "name": "test_future_http_error_no_raise",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "response": [
                    "typing.Generator"
                ]
            }
        },
        "HTTPClientCommonTestCase.test_future_interface": {
            "name": "test_future_interface",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "response": [
                    "typing.Generator"
                ]
            }
        },
        "HTTPClientCommonTestCase.test_header_callback": {
            "name": "test_header_callback",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "first_line": [
                    "list"
                ],
                "headers": [
                    "dict"
                ],
                "chunks": [
                    "list"
                ]
            }
        },
        "HTTPClientCommonTestCase.test_header_callback_stack_context": {
            "name": "test_header_callback_stack_context",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "exc_info": [
                    "list"
                ]
            }
        },
        "HTTPClientCommonTestCase.test_header_types": {
            "name": "test_header_types",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "value": [
                    "typing.Text",
                    "bytes"
                ],
                "container": [
                    "dict"
                ]
            }
        },
        "HTTPRequestTestCase.test_headers": {
            "name": "test_headers",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "request": [
                    "HTTPRequest"
                ]
            }
        },
        "HTTPRequestTestCase.test_headers_setter": {
            "name": "test_headers_setter",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "request": [
                    "HTTPRequest"
                ],
                "request_": [
                    "dict[typing.Text, typing.Text]"
                ]
            }
        },
        "HTTPClientCommonTestCase.test_hello_world": {
            "name": "test_hello_world",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "HTTPRequestTestCase.test_if_modified_since": {
            "name": "test_if_modified_since",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "request": [
                    "HTTPRequest"
                ]
            }
        },
        "HTTPClientCommonTestCase.test_multi_line_headers": {
            "name": "test_multi_line_headers",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "RequestProxyTest.test_neither_set": {
            "name": "test_neither_set",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "proxy": [
                    "_RequestProxy"
                ]
            }
        },
        "HTTPClientCommonTestCase.test_non_ascii_header": {
            "name": "test_non_ascii_header",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "HTTPRequestTestCase.test_null_headers_setter": {
            "name": "test_null_headers_setter",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "request": [
                    "HTTPRequest"
                ],
                "request_": [
                    "None"
                ]
            }
        },
        "HTTPClientCommonTestCase.test_patch_receives_payload": {
            "name": "test_patch_receives_payload",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "body": [
                    "bytes"
                ]
            }
        },
        "HTTPErrorTestCase.test_plain_error": {
            "name": "test_plain_error",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "e": [
                    "HTTPError"
                ]
            }
        },
        "HTTPClientCommonTestCase.test_post": {
            "name": "test_post",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "HTTPClientCommonTestCase.test_put_307": {
            "name": "test_put_307",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "RequestProxyTest.test_request_set": {
            "name": "test_request_set",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "proxy": [
                    "_RequestProxy"
                ]
            }
        },
        "HTTPClientCommonTestCase.test_reuse_request_from_response": {
            "name": "test_reuse_request_from_response",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "response": [
                    "typing.Generator"
                ],
                "response2": [
                    "typing.Generator"
                ]
            }
        },
        "HTTPResponseTestCase.test_str": {
            "name": "test_str",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "response": [
                    "HTTPResponse"
                ],
                "s": [
                    "str"
                ]
            }
        },
        "HTTPClientCommonTestCase.test_streaming_callback": {
            "name": "test_streaming_callback",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "chunks": [
                    "list"
                ]
            }
        },
        "HTTPClientCommonTestCase.test_streaming_stack_context": {
            "name": "test_streaming_stack_context",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "chunks": [
                    "list"
                ],
                "exc_info": [
                    "list"
                ]
            }
        },
        "SyncHTTPClientTest.test_sync_client": {
            "name": "test_sync_client",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "SyncHTTPClientTest.test_sync_client_error": {
            "name": "test_sync_client_error",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "HTTPClientCommonTestCase.test_types": {
            "name": "test_types",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "HTTPClientCommonTestCase.test_unsupported_auth_mode": {
            "name": "test_unsupported_auth_mode",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "HTTPClientCommonTestCase.write_response": {
            "name": "write_response",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "stream": [],
                "request_data": []
            },
            "variables": {}
        }
    },
    "tornado-5.0.2/tornado/test/httpserver_test.py": {
        "StreamingChunkSizeTest,MessageDelegate.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "connection": []
            },
            "variables": {}
        },
        "StreamingChunkSizeTest.body_producer": {
            "name": "body_producer",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "write": []
            },
            "variables": {}
        },
        "TypeCheckHandler.check_type": {
            "name": "check_type",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [],
                "obj": [],
                "expected_type": []
            },
            "variables": {
                "actual_type": [
                    "typing.Type"
                ]
            }
        },
        "KeepAliveTest.close": {
            "name": "close",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "StreamingChunkSizeTest.compress": {
            "name": "compress",
            "location": -1,
            "return": [],
            "arguments": {
                "body": []
            },
            "variables": {
                "bytesio": [
                    "BytesIO"
                ]
            }
        },
        "IdleTimeoutTest.connect": {
            "name": "connect",
            "location": -1,
            "return": [
                "IOStream"
            ],
            "arguments": {},
            "variables": {
                "stream": [
                    "IOStream"
                ]
            }
        },
        "KeepAliveTest.connect": {
            "name": "connect",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "stream": [
                    "IOStream"
                ]
            }
        },
        "BodyLimitsTest,StreamingHandler.data_received": {
            "name": "data_received",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "data": []
            },
            "variables": {}
        },
        "Delegate.data_received": {
            "name": "data_received",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "chunk": []
            },
            "variables": {}
        },
        "StreamingChunkSizeTest,MessageDelegate.data_received": {
            "name": "data_received",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "chunk": []
            },
            "variables": {}
        },
        "StreamingChunkSizeTest.fetch_chunk_sizes": {
            "name": "fetch_chunk_sizes",
            "location": -1,
            "return": [],
            "arguments": {
                "kwargs": []
            },
            "variables": {}
        },
        "HandlerBaseTestCase.fetch_json": {
            "name": "fetch_json",
            "location": -1,
            "return": [],
            "arguments": {
                "kwargs": [],
                "args": []
            },
            "variables": {}
        },
        "Delegate.finish": {
            "name": "finish",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "StreamingChunkSizeTest,MessageDelegate.finish": {
            "name": "finish",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "EchoHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "HelloWorldRequestHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "KeepAliveTest,FinishOnCloseHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "KeepAliveTest,HelloHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "KeepAliveTest,LargeHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "ManualProtocolTest,Handler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TypeCheckHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "XHeaderTest,Handler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "BaseSSLTest.get_app": {
            "name": "get_app",
            "location": -1,
            "return": [
                "Application"
            ],
            "arguments": {},
            "variables": {}
        },
        "BodyLimitsTest.get_app": {
            "name": "get_app",
            "location": -1,
            "return": [
                "Application"
            ],
            "arguments": {},
            "variables": {}
        },
        "GzipBaseTest.get_app": {
            "name": "get_app",
            "location": -1,
            "return": [
                "Application"
            ],
            "arguments": {},
            "variables": {}
        },
        "HTTPConnectionTest.get_app": {
            "name": "get_app",
            "location": -1,
            "return": [
                "Application"
            ],
            "arguments": {},
            "variables": {}
        },
        "HTTPServerRawTest.get_app": {
            "name": "get_app",
            "location": -1,
            "return": [
                "Application"
            ],
            "arguments": {},
            "variables": {}
        },
        "HTTPServerTest.get_app": {
            "name": "get_app",
            "location": -1,
            "return": [
                "Application"
            ],
            "arguments": {},
            "variables": {}
        },
        "HandlerBaseTestCase.get_app": {
            "name": "get_app",
            "location": -1,
            "return": [
                "Application"
            ],
            "arguments": {},
            "variables": {}
        },
        "IdleTimeoutTest.get_app": {
            "name": "get_app",
            "location": -1,
            "return": [
                "Application"
            ],
            "arguments": {},
            "variables": {}
        },
        "KeepAliveTest.get_app": {
            "name": "get_app",
            "location": -1,
            "return": [
                "Application"
            ],
            "arguments": {},
            "variables": {}
        },
        "LegacyInterfaceTest.get_app": {
            "name": "get_app",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "MaxHeaderSizeTest.get_app": {
            "name": "get_app",
            "location": -1,
            "return": [
                "Application"
            ],
            "arguments": {},
            "variables": {}
        },
        "SSLXHeaderTest.get_app": {
            "name": "get_app",
            "location": -1,
            "return": [
                "Application"
            ],
            "arguments": {},
            "variables": {}
        },
        "StreamingChunkSizeTest.get_app": {
            "name": "get_app",
            "location": -1,
            "return": [
                "App"
            ],
            "arguments": {},
            "variables": {}
        },
        "HTTPConnectionTest.get_handlers": {
            "name": "get_handlers",
            "location": -1,
            "return": [
                "list[typing.Union[tuple[typing.Union[typing.Text,MultipartTestHandler]],tuple[typing.Union[typing.Text,HelloWorldRequestHandler]]]]"
            ],
            "arguments": {},
            "variables": {}
        },
        "BodyLimitsTest.get_http_client": {
            "name": "get_http_client",
            "location": -1,
            "return": [
                "SimpleAsyncHTTPClient"
            ],
            "arguments": {},
            "variables": {}
        },
        "StreamingChunkSizeTest.get_http_client": {
            "name": "get_http_client",
            "location": -1,
            "return": [
                "SimpleAsyncHTTPClient"
            ],
            "arguments": {},
            "variables": {}
        },
        "BodyLimitsTest.get_httpserver_options": {
            "name": "get_httpserver_options",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "GzipTest.get_httpserver_options": {
            "name": "get_httpserver_options",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "IdleTimeoutTest.get_httpserver_options": {
            "name": "get_httpserver_options",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "ManualProtocolTest.get_httpserver_options": {
            "name": "get_httpserver_options",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "MaxHeaderSizeTest.get_httpserver_options": {
            "name": "get_httpserver_options",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "SSLXHeaderTest.get_httpserver_options": {
            "name": "get_httpserver_options",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "StreamingChunkSizeTest.get_httpserver_options": {
            "name": "get_httpserver_options",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "XHeaderTest.get_httpserver_options": {
            "name": "get_httpserver_options",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "SSLContextTest.get_ssl_options": {
            "name": "get_ssl_options",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "SSLTestMixin.get_ssl_options": {
            "name": "get_ssl_options",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "SSLTestMixin.get_ssl_version": {
            "name": "get_ssl_version",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "SSLv23Test.get_ssl_version": {
            "name": "get_ssl_version",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "SSLv3Test.get_ssl_version": {
            "name": "get_ssl_version",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "TLSv1Test.get_ssl_version": {
            "name": "get_ssl_version",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "global": {},
        "LegacyInterfaceTest.handle_request": {
            "name": "handle_request",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "request": []
            },
            "variables": {
                "message": [
                    "bytes"
                ]
            }
        },
        "Delegate.headers_received": {
            "name": "headers_received",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "start_line": [],
                "headers": []
            },
            "variables": {}
        },
        "StreamingChunkSizeTest,MessageDelegate.headers_received": {
            "name": "headers_received",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "start_line": [],
                "headers": []
            },
            "variables": {
                "chunk_lengths": [
                    "list"
                ]
            }
        },
        "BodyLimitsTest,StreamingHandler.initialize": {
            "name": "initialize",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "bytes_read": [
                    "int"
                ]
            }
        },
        "HelloWorldRequestHandler.initialize": {
            "name": "initialize",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "protocol": [
                    "typing.Text"
                ]
            },
            "variables": {
                "protocol": [
                    "typing.Text"
                ],
                "expected_protocol": [
                    "typing.Text"
                ]
            }
        },
        "KeepAliveTest,FinishOnCloseHandler.on_connection_close": {
            "name": "on_connection_close",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "EchoHandler.post": {
            "name": "post",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "HelloWorldRequestHandler.post": {
            "name": "post",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "KeepAliveTest,HelloHandler.post": {
            "name": "post",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "MultipartTestHandler.post": {
            "name": "post",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TypeCheckHandler.post": {
            "name": "post",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "GzipBaseTest.post_gzip": {
            "name": "post_gzip",
            "location": -1,
            "return": [],
            "arguments": {
                "body": []
            },
            "variables": {
                "bytesio": [
                    "BytesIO"
                ]
            }
        },
        "BodyLimitsTest,StreamingHandler.prepare": {
            "name": "prepare",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TypeCheckHandler.prepare": {
            "name": "prepare",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "errors": [
                    "dict"
                ],
                "fields": [
                    "list[tuple[typing.Text]]"
                ],
                "field": [
                    "typing.Text"
                ],
                "expected_type": [
                    "typing.Text"
                ]
            }
        },
        "BodyLimitsTest,BufferedHandler.put": {
            "name": "put",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "BodyLimitsTest,StreamingHandler.put": {
            "name": "put",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "HTTPConnectionTest.raw_fetch": {
            "name": "raw_fetch",
            "location": -1,
            "return": [],
            "arguments": {
                "headers": [],
                "body": [],
                "newline": [
                    "bytes"
                ]
            },
            "variables": {
                "newline": [
                    "bytes"
                ]
            }
        },
        "KeepAliveTest.read_headers": {
            "name": "read_headers",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "KeepAliveTest.read_response": {
            "name": "read_response",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "read_stream_body": {
            "name": "read_stream_body",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "stream": [],
                "callback": []
            },
            "variables": {
                "chunks": [
                    "list"
                ],
                "conn": [
                    "HTTP1Connection"
                ]
            }
        },
        "HTTPServerRawTest.setUp": {
            "name": "setUp",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "stream": [
                    "IOStream"
                ]
            }
        },
        "IdleTimeoutTest.setUp": {
            "name": "setUp",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "streams": [
                    "list"
                ]
            }
        },
        "KeepAliveTest.setUp": {
            "name": "setUp",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "http_version": [
                    "bytes"
                ]
            }
        },
        "UnixSocketTest.setUp": {
            "name": "setUp",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "app": [
                    "Application"
                ],
                "server": [
                    "HTTPServer"
                ],
                "stream": [
                    "IOStream"
                ]
            }
        },
        "StreamingChunkSizeTest,App.start_request": {
            "name": "start_request",
            "location": -1,
            "return": [
                "MessageDelegate"
            ],
            "arguments": {
                "server_conn": [],
                "request_conn": []
            },
            "variables": {}
        },
        "HTTPServerRawTest.tearDown": {
            "name": "tearDown",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "IdleTimeoutTest.tearDown": {
            "name": "tearDown",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "KeepAliveTest.tearDown": {
            "name": "tearDown",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "UnixSocketTest.tearDown": {
            "name": "tearDown",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "HTTPConnectionTest.test_100_continue": {
            "name": "test_100_continue",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "stream": [
                    "IOStream"
                ]
            }
        },
        "BodyLimitsTest.test_body_size_override_reset": {
            "name": "test_body_size_override_reset",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {
                "stream": [
                    "IOStream"
                ],
                "data": [
                    "typing.Generator"
                ]
            }
        },
        "KeepAliveTest.test_cancel_during_download": {
            "name": "test_cancel_during_download",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "StreamingChunkSizeTest.test_chunked_body": {
            "name": "test_chunked_body",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "StreamingChunkSizeTest.test_chunked_compressed": {
            "name": "test_chunked_compressed",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "HTTPServerRawTest.test_chunked_request_body": {
            "name": "test_chunked_request_body",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "HTTPServerRawTest.test_chunked_request_uppercase": {
            "name": "test_chunked_request_uppercase",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "StreamingChunkSizeTest.test_compressed_body": {
            "name": "test_compressed_body",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "HTTPServerTest.test_double_slash": {
            "name": "test_double_slash",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "HTTPServerTest.test_empty_post_parameters": {
            "name": "test_empty_post_parameters",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "HTTPServerTest.test_empty_query_string": {
            "name": "test_empty_query_string",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "HTTPServerRawTest.test_empty_request": {
            "name": "test_empty_request",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "SSLTestMixin.test_error_logging": {
            "name": "test_error_logging",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "expect_log": [
                    "ExpectLog"
                ]
            }
        },
        "KeepAliveTest.test_finish_while_closed": {
            "name": "test_finish_while_closed",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "GzipTest.test_gzip": {
            "name": "test_gzip",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "GzipUnsupportedTest.test_gzip_unsupported": {
            "name": "test_gzip_unsupported",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "KeepAliveTest.test_http10": {
            "name": "test_http10",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "http_version": [
                    "bytes"
                ]
            }
        },
        "KeepAliveTest.test_http10_keepalive": {
            "name": "test_http10_keepalive",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "http_version": [
                    "bytes"
                ]
            }
        },
        "KeepAliveTest.test_http10_keepalive_extra_crlf": {
            "name": "test_http10_keepalive_extra_crlf",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "http_version": [
                    "bytes"
                ]
            }
        },
        "IdleTimeoutTest.test_idle_after_use": {
            "name": "test_idle_after_use",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "HTTPServerRawTest.test_invalid_content_length": {
            "name": "test_invalid_content_length",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "XHeaderTest.test_ip_headers": {
            "name": "test_ip_headers",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "valid_ipv4": [
                    "dict[typing.Text, typing.Text]"
                ],
                "valid_ipv4_list": [
                    "dict[typing.Text, typing.Text]"
                ],
                "valid_ipv6": [
                    "dict[typing.Text, typing.Text]"
                ],
                "valid_ipv6_list": [
                    "dict[typing.Text, typing.Text]"
                ],
                "invalid_chars": [
                    "dict[typing.Text, typing.Text]"
                ],
                "invalid_chars_list": [
                    "dict[typing.Text, typing.Text]"
                ],
                "invalid_host": [
                    "dict[typing.Text, typing.Text]"
                ]
            }
        },
        "KeepAliveTest.test_keepalive_chunked": {
            "name": "test_keepalive_chunked",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "http_version": [
                    "bytes"
                ]
            }
        },
        "BodyLimitsTest.test_large_body_buffered": {
            "name": "test_large_body_buffered",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "BodyLimitsTest.test_large_body_buffered_chunked": {
            "name": "test_large_body_buffered_chunked",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "BodyLimitsTest.test_large_body_streaming": {
            "name": "test_large_body_streaming",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "BodyLimitsTest.test_large_body_streaming_chunked": {
            "name": "test_large_body_streaming_chunked",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "BodyLimitsTest.test_large_body_streaming_chunked_override": {
            "name": "test_large_body_streaming_chunked_override",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "BodyLimitsTest.test_large_body_streaming_override": {
            "name": "test_large_body_streaming_override",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "MaxHeaderSizeTest.test_large_headers": {
            "name": "test_large_headers",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "SSLTestMixin.test_large_post": {
            "name": "test_large_post",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "LegacyInterfaceTest.test_legacy_interface": {
            "name": "test_legacy_interface",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "HTTPServerTest.test_malformed_body": {
            "name": "test_malformed_body",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "HTTPServerRawTest.test_malformed_first_line_log": {
            "name": "test_malformed_first_line_log",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "HTTPServerRawTest.test_malformed_first_line_response": {
            "name": "test_malformed_first_line_response",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "HTTPServerRawTest.test_malformed_headers": {
            "name": "test_malformed_headers",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "ManualProtocolTest.test_manual_protocol": {
            "name": "test_manual_protocol",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "BadSSLOptionsTest.test_missing_arguments": {
            "name": "test_missing_arguments",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "application": [
                    "Application"
                ]
            }
        },
        "BadSSLOptionsTest.test_missing_key": {
            "name": "test_missing_key",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "application": [
                    "Application"
                ]
            }
        },
        "HTTPConnectionTest.test_multipart_form": {
            "name": "test_multipart_form",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "HTTPConnectionTest.test_newlines": {
            "name": "test_newlines",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "newline": [
                    "bytes"
                ]
            }
        },
        "SSLTestMixin.test_non_ssl_request": {
            "name": "test_non_ssl_request",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "KeepAliveTest.test_pipelined_cancel": {
            "name": "test_pipelined_cancel",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "KeepAliveTest.test_pipelined_requests": {
            "name": "test_pipelined_requests",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "HTTPServerTest.test_query_string_encoding": {
            "name": "test_query_string_encoding",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "StreamingChunkSizeTest.test_regular_body": {
            "name": "test_regular_body",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "KeepAliveTest.test_request_close": {
            "name": "test_request_close",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "SSLXHeaderTest.test_request_without_xprotocol": {
            "name": "test_request_without_xprotocol",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "http_scheme": [
                    "dict[typing.Text, typing.Text]"
                ],
                "bad_scheme": [
                    "dict[typing.Text, typing.Text]"
                ]
            }
        },
        "XHeaderTest.test_scheme_headers": {
            "name": "test_scheme_headers",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "https_scheme": [
                    "dict[typing.Text, typing.Text]"
                ],
                "https_forwarded": [
                    "dict[typing.Text, typing.Text]"
                ],
                "https_multi_forwarded": [
                    "dict[typing.Text, typing.Text]"
                ],
                "http_multi_forwarded": [
                    "dict[typing.Text, typing.Text]"
                ],
                "bad_forwarded": [
                    "dict[typing.Text, typing.Text]"
                ]
            }
        },
        "BodyLimitsTest.test_small_body": {
            "name": "test_small_body",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "MaxHeaderSizeTest.test_small_headers": {
            "name": "test_small_headers",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "SSLTestMixin.test_ssl": {
            "name": "test_ssl",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "BodyLimitsTest.test_timeout": {
            "name": "test_timeout",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {
                "stream": [
                    "IOStream"
                ],
                "response": [
                    "typing.Generator"
                ]
            }
        },
        "XHeaderTest.test_trusted_downstream": {
            "name": "test_trusted_downstream",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "valid_ipv4_list": [
                    "dict[typing.Text, typing.Text]"
                ]
            }
        },
        "KeepAliveTest.test_two_requests": {
            "name": "test_two_requests",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "HTTPServerTest.test_types": {
            "name": "test_types",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "headers": [
                    "dict[typing.Text, typing.Text]"
                ]
            }
        },
        "GzipBaseTest.test_uncompressed": {
            "name": "test_uncompressed",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "UnixSocketTest.test_unix_socket": {
            "name": "test_unix_socket",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "UnixSocketTest.test_unix_socket_bad_request": {
            "name": "test_unix_socket_bad_request",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "IdleTimeoutTest.test_unused_connection": {
            "name": "test_unused_connection",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        }
    },
    "tornado-5.0.2/tornado/test/httputil_test.py": {
        "FormatTimestampTest.check": {
            "name": "check",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "value": []
            },
            "variables": {}
        },
        "global": {},
        "HTTPServerRequestTest.test_body_is_a_byte_string": {
            "name": "test_body_is_a_byte_string",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "requets": [
                    "HTTPServerRequest"
                ]
            }
        },
        "MultipartFormDataTest.test_boundary_starts_and_ends_with_quotes": {
            "name": "test_boundary_starts_and_ends_with_quotes",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "data": [
                    "bytes"
                ],
                "args": [
                    "dict"
                ],
                "files": [
                    "dict"
                ]
            }
        },
        "MultipartFormDataTest.test_content_disposition_header_without_name_parameter": {
            "name": "test_content_disposition_header_without_name_parameter",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "data": [
                    "bytes"
                ],
                "args": [
                    "dict"
                ],
                "files": [
                    "dict"
                ]
            }
        },
        "ParseCookieTest.test_cookie_edgecases": {
            "name": "test_cookie_edgecases",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "HTTPHeadersTest.test_copy": {
            "name": "test_copy",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "all_pairs": [
                    "list[tuple[typing.Text]]"
                ],
                "h1": [
                    "HTTPHeaders"
                ],
                "k": [
                    "typing.Text"
                ],
                "v": [
                    "typing.Text"
                ],
                "headers": [
                    "HTTPHeaders"
                ]
            }
        },
        "MultipartFormDataTest.test_data_after_final_boundary": {
            "name": "test_data_after_final_boundary",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "data": [
                    "bytes"
                ],
                "args": [
                    "dict"
                ],
                "files": [
                    "dict"
                ]
            }
        },
        "FormatTimestampTest.test_datetime": {
            "name": "test_datetime",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "HTTPServerRequestTest.test_default_constructor": {
            "name": "test_default_constructor",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "MultipartFormDataTest.test_file_upload": {
            "name": "test_file_upload",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "data": [
                    "bytes"
                ],
                "args": [
                    "dict"
                ],
                "files": [
                    "dict"
                ]
            }
        },
        "MultipartFormDataTest.test_invalid_content_disposition": {
            "name": "test_invalid_content_disposition",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "data": [
                    "bytes"
                ],
                "args": [
                    "dict"
                ],
                "files": [
                    "dict"
                ]
            }
        },
        "ParseCookieTest.test_invalid_cookies": {
            "name": "test_invalid_cookies",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "MultipartFormDataTest.test_line_does_not_end_with_correct_line_break": {
            "name": "test_line_does_not_end_with_correct_line_break",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "data": [
                    "bytes"
                ],
                "args": [
                    "dict"
                ],
                "files": [
                    "dict"
                ]
            }
        },
        "MultipartFormDataTest.test_missing_headers": {
            "name": "test_missing_headers",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "data": [
                    "bytes"
                ],
                "args": [
                    "dict"
                ],
                "files": [
                    "dict"
                ]
            }
        },
        "HTTPHeadersTest.test_multi_line": {
            "name": "test_multi_line",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "data": [
                    "str"
                ]
            }
        },
        "HTTPHeadersTest.test_optional_cr": {
            "name": "test_optional_cr",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "ParseRequestStartLineTest.test_parse_request_start_line": {
            "name": "test_parse_request_start_line",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "start_line": [
                    "str"
                ]
            }
        },
        "QsParseTest.test_parsing": {
            "name": "test_parsing",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "qsstring": [
                    "typing.Text"
                ],
                "qsl": [
                    "list"
                ]
            }
        },
        "HTTPHeadersTest.test_pickle_roundtrip": {
            "name": "test_pickle_roundtrip",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "headers": [
                    "HTTPHeaders"
                ]
            }
        },
        "ParseCookieTest.test_python_cookies": {
            "name": "test_python_cookies",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "HTTPServerRequestTest.test_repr_does_not_contain_headers": {
            "name": "test_repr_does_not_contain_headers",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "request": [
                    "HTTPServerRequest"
                ]
            }
        },
        "HTTPHeadersTest.test_setdefault": {
            "name": "test_setdefault",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "headers": [
                    "HTTPHeaders",
                    "typing.Text"
                ]
            }
        },
        "MultipartFormDataTest.test_special_filenames": {
            "name": "test_special_filenames",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "filenames": [
                    "list[typing.Text]"
                ],
                "filename": [
                    "typing.Text"
                ],
                "data": [
                    "typing.Text"
                ],
                "args": [
                    "dict"
                ],
                "files": [
                    "dict"
                ]
            }
        },
        "HTTPHeadersTest.test_string": {
            "name": "test_string",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "headers": [
                    "HTTPHeaders"
                ]
            }
        },
        "FormatTimestampTest.test_struct_time": {
            "name": "test_struct_time",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "FormatTimestampTest.test_time_tuple": {
            "name": "test_time_tuple",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "tup": [
                    "tuple"
                ]
            }
        },
        "HTTPHeadersTest.test_unicode_newlines": {
            "name": "test_unicode_newlines",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "newlines": [
                    "list[typing.Text]"
                ],
                "newline": [
                    "typing.Text"
                ],
                "encoding": [
                    "typing.Text"
                ],
                "encoded": [
                    "bytes"
                ],
                "data": [
                    "bytes"
                ],
                "expected": [
                    "list[tuple[typing.Text]]"
                ]
            }
        },
        "FormatTimestampTest.test_unix_time_float": {
            "name": "test_unix_time_float",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "FormatTimestampTest.test_unix_time_int": {
            "name": "test_unix_time_int",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "MultipartFormDataTest.test_unquoted_names": {
            "name": "test_unquoted_names",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "data": [
                    "bytes"
                ],
                "args": [
                    "dict"
                ],
                "files": [
                    "dict"
                ]
            }
        },
        "TestUrlConcat.test_url_concat_dict_params": {
            "name": "test_url_concat_dict_params",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestUrlConcat.test_url_concat_encode_args": {
            "name": "test_url_concat_encode_args",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestUrlConcat.test_url_concat_mult_params": {
            "name": "test_url_concat_mult_params",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestUrlConcat.test_url_concat_multi_same_params": {
            "name": "test_url_concat_multi_same_params",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestUrlConcat.test_url_concat_multi_same_query_params": {
            "name": "test_url_concat_multi_same_query_params",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestUrlConcat.test_url_concat_no_params": {
            "name": "test_url_concat_no_params",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestUrlConcat.test_url_concat_no_query_params": {
            "name": "test_url_concat_no_query_params",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestUrlConcat.test_url_concat_none_params": {
            "name": "test_url_concat_none_params",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestUrlConcat.test_url_concat_q_with_no_trailing_amp": {
            "name": "test_url_concat_q_with_no_trailing_amp",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestUrlConcat.test_url_concat_trailing_amp": {
            "name": "test_url_concat_trailing_amp",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestUrlConcat.test_url_concat_trailing_q": {
            "name": "test_url_concat_trailing_q",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestUrlConcat.test_url_concat_with_frag": {
            "name": "test_url_concat_with_frag",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        }
    },
    "tornado-5.0.2/tornado/test/import_test.py": {
        "global": {},
        "ImportTest.test_import_aliases": {
            "name": "test_import_aliases",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "ImportTest.test_import_everything": {
            "name": "test_import_everything",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "ImportTest.test_import_pycurl": {
            "name": "test_import_pycurl",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        }
    },
    "tornado-5.0.2/tornado/test/ioloop_test.py": {
        "FakeTimeSelect.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "_time": [
                    "int"
                ]
            }
        },
        "TestIOLoop,SocketWrapper.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "sockobj": []
            },
            "variables": {
                "closed": [
                    "bool"
                ]
            }
        },
        "TestIOLoop.add_callback": {
            "name": "add_callback",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "callback": [],
                "kwargs": [],
                "args": []
            },
            "variables": {}
        },
        "TestIOLoopAddCallback.add_callback": {
            "name": "add_callback",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "callback": [],
                "kwargs": [],
                "args": []
            },
            "variables": {}
        },
        "TestIOLoopAddCallbackFromSignal.add_callback": {
            "name": "add_callback",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "callback": [],
                "kwargs": [],
                "args": []
            },
            "variables": {}
        },
        "TestIOLoop.callback": {
            "name": "callback",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "called": [
                    "bool"
                ]
            }
        },
        "TestIOLoopFutures.callback": {
            "name": "callback",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "future": []
            },
            "variables": {}
        },
        "TestPeriodicCallback.cb": {
            "name": "cb",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestIOLoop,SocketWrapper.close": {
            "name": "close",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "closed": [
                    "bool"
                ]
            }
        },
        "TestIOLoopAddCallback.context": {
            "name": "context",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {
                "name": []
            },
            "variables": {}
        },
        "TestIOLoopAddCallback.f1": {
            "name": "f1",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestIOLoop.f": {
            "name": "f",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "fd": [],
                "events": []
            },
            "variables": {}
        },
        "TestIOLoopCurrent.f": {
            "name": "f",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestIOLoopRunSync.f": {
            "name": "f",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestIOLoop,SocketWrapper.fileno": {
            "name": "fileno",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "global": {},
        "TestIOLoop.handle_callback_exception": {
            "name": "handle_callback_exception",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "callback": []
            },
            "variables": {}
        },
        "TestIOLoop.handle_connection": {
            "name": "handle_connection",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "fd": [],
                "events": []
            },
            "variables": {}
        },
        "TestIOLoopFutures.handle_exception": {
            "name": "handle_exception",
            "location": -1,
            "return": [
                "bool"
            ],
            "arguments": {
                "typ": [],
                "value": [],
                "traceback": []
            },
            "variables": {}
        },
        "TestIOLoop.handle_read": {
            "name": "handle_read",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "fd": [],
                "events": []
            },
            "variables": {
                "fd": [
                    "client"
                ]
            }
        },
        "TestIOLoop.handler": {
            "name": "handler",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "fd": [],
                "events": []
            },
            "variables": {}
        },
        "FakeTimeIOLoop.initialize": {
            "name": "initialize",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "fts": [
                    "FakeTimeSelect"
                ]
            }
        },
        "FakeTimeSelect.poll": {
            "name": "poll",
            "location": -1,
            "return": [
                "list"
            ],
            "arguments": {
                "timeout": []
            },
            "variables": {}
        },
        "TestIOLoopConfiguration.run_python": {
            "name": "run_python",
            "location": -1,
            "return": [],
            "arguments": {
                "statements": []
            },
            "variables": {
                "statements": [
                    "list[typing.Text]"
                ],
                "args": [
                    "list[typing.Text]"
                ]
            }
        },
        "TestIOLoop.schedule_callback": {
            "name": "schedule_callback",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "called": [
                    "bool"
                ]
            }
        },
        "TestIOLoopAddCallback.setUp": {
            "name": "setUp",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "active_contexts": [
                    "list"
                ]
            }
        },
        "TestIOLoopCurrent.setUp": {
            "name": "setUp",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "io_loop": [
                    "None"
                ]
            }
        },
        "TestIOLoopRunSync.setUp": {
            "name": "setUp",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "io_loop": [
                    "IOLoop"
                ]
            }
        },
        "TestPeriodicCallback.setUp": {
            "name": "setUp",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "io_loop": [
                    "FakeTimeIOLoop"
                ]
            }
        },
        "TestPeriodicCallbackMath.simulate_calls": {
            "name": "simulate_calls",
            "location": -1,
            "return": [
                "list[int]"
            ],
            "arguments": {
                "pc": [],
                "durations": []
            },
            "variables": {
                "calls": [
                    "list",
                    "list[int]"
                ],
                "now": [
                    "int"
                ],
                "pc_": [
                    "int"
                ]
            }
        },
        "FakeTimeIOLoop.sleep": {
            "name": "sleep",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "t": []
            },
            "variables": {}
        },
        "FakeTimeSelect.sleep": {
            "name": "sleep",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "t": []
            },
            "variables": {}
        },
        "TestIOLoopFutures,MyExecutor.submit": {
            "name": "submit",
            "location": -1,
            "return": [],
            "arguments": {
                "func": [],
                "args": []
            },
            "variables": {}
        },
        "TestIOLoopFutures.sync_func": {
            "name": "sync_func",
            "location": -1,
            "return": [],
            "arguments": {
                "self_event": [],
                "other_event": []
            },
            "variables": {}
        },
        "TestIOLoop.t1": {
            "name": "t1",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestIOLoop.t2": {
            "name": "t2",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestIOLoop.target": {
            "name": "target",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestIOLoopFutures.task": {
            "name": "task",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestIOLoopCurrent.tearDown": {
            "name": "tearDown",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "io_loop": [
                    "None"
                ]
            }
        },
        "TestIOLoopRunSync.tearDown": {
            "name": "tearDown",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestPeriodicCallback.tearDown": {
            "name": "tearDown",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestIOLoop.test_add_callback_from_signal": {
            "name": "test_add_callback_from_signal",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestIOLoop.test_add_callback_from_signal_other_thread": {
            "name": "test_add_callback_from_signal_other_thread",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "other_ioloop": [
                    "IOLoop"
                ]
            }
        },
        "TestIOLoop.test_add_callback_return_sequence": {
            "name": "test_add_callback_return_sequence",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "calls": [
                    "int"
                ],
                "test": [
                    "TestIOLoop"
                ]
            }
        },
        "TestIOLoop.test_add_callback_wakeup": {
            "name": "test_add_callback_wakeup",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestIOLoop.test_add_callback_wakeup_other_thread": {
            "name": "test_add_callback_wakeup_other_thread",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestIOLoop.test_add_callback_while_closing": {
            "name": "test_add_callback_while_closing",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "other_ioloop": [
                    "IOLoop"
                ]
            }
        },
        "TestIOLoopFutures.test_add_future_stack_context": {
            "name": "test_add_future_stack_context",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "futures": [
                    "None"
                ],
                "pool": [
                    "ThreadPoolExecutor"
                ]
            }
        },
        "TestIOLoopFutures.test_add_future_threads": {
            "name": "test_add_future_threads",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "futures": [
                    "None"
                ],
                "pool": [
                    "ThreadPoolExecutor"
                ]
            }
        },
        "TestIOLoop.test_add_timeout_return": {
            "name": "test_add_timeout_return",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestIOLoop.test_add_timeout_timedelta": {
            "name": "test_add_timeout_timedelta",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestIOLoopRunSync.test_async_exception": {
            "name": "test_async_exception",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestIOLoopRunSync.test_async_result": {
            "name": "test_async_result",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestIOLoopConfiguration.test_asyncio": {
            "name": "test_asyncio",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestIOLoopConfiguration.test_asyncio_main": {
            "name": "test_asyncio_main",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestPeriodicCallback.test_basic": {
            "name": "test_basic",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "calls": [
                    "list"
                ],
                "pc": [
                    "PeriodicCallback"
                ]
            }
        },
        "TestPeriodicCallbackMath.test_basic": {
            "name": "test_basic",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "pc": [
                    "PeriodicCallback"
                ]
            }
        },
        "TestIOLoop.test_call_at_return": {
            "name": "test_call_at_return",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestIOLoop.test_call_later_return": {
            "name": "test_call_later_return",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestIOLoopCurrentAsync.test_clear_without_current": {
            "name": "test_clear_without_current",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {
                "e": [
                    "ThreadPoolExecutor"
                ]
            }
        },
        "TestPeriodicCallbackMath.test_clock_backwards": {
            "name": "test_clock_backwards",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "pc": [
                    "PeriodicCallback"
                ]
            }
        },
        "TestIOLoop.test_close_file_object": {
            "name": "test_close_file_object",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "socket_wrapper": [
                    "SocketWrapper"
                ],
                "io_loop": [
                    "IOLoop"
                ]
            }
        },
        "TestIOLoopRunSync.test_current": {
            "name": "test_current",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestIOLoopConfiguration.test_default": {
            "name": "test_default",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "asyncio": [
                    "None"
                ]
            }
        },
        "TestIOLoopCurrent.test_default_current": {
            "name": "test_default_current",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "io_loop": [
                    "IOLoop"
                ],
                "io_loop2": [
                    "IOLoop"
                ]
            }
        },
        "TestIOLoop.test_exception_logging": {
            "name": "test_exception_logging",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestIOLoop.test_exception_logging_future": {
            "name": "test_exception_logging_future",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestIOLoop.test_exception_logging_native_coro": {
            "name": "test_exception_logging_native_coro",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestIOLoopConfiguration.test_explicit_select": {
            "name": "test_explicit_select",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestIOLoopCurrent.test_force_current": {
            "name": "test_force_current",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "io_loop": [
                    "IOLoop"
                ]
            }
        },
        "TestIOLoop.test_handle_callback_exception": {
            "name": "test_handle_callback_exception",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestIOLoop.test_handler_callback_file_object": {
            "name": "test_handler_callback_file_object",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "fds": [
                    "list"
                ]
            }
        },
        "TestPeriodicCallback.test_io_loop_set_at_start": {
            "name": "test_io_loop_set_at_start",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "calls": [
                    "list"
                ],
                "io_loop": [
                    "FakeTimeIOLoop"
                ],
                "pc": [
                    "PeriodicCallback"
                ]
            }
        },
        "TestIOLoop.test_mixed_fd_fileobj": {
            "name": "test_mixed_fd_fileobj",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestIOLoop.test_multiple_add": {
            "name": "test_multiple_add",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestIOLoopRunSync.test_native_coroutine": {
            "name": "test_native_coroutine",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestIOLoopCurrent.test_non_current": {
            "name": "test_non_current",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "io_loop": [
                    "IOLoop"
                ]
            }
        },
        "TestPeriodicCallback.test_overrun": {
            "name": "test_overrun",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "sleep_durations": [
                    "list[int]"
                ],
                "expected": [
                    "list[int]"
                ],
                "calls": [
                    "list"
                ],
                "pc": [
                    "PeriodicCallback"
                ]
            }
        },
        "TestPeriodicCallbackMath.test_overrun": {
            "name": "test_overrun",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "call_durations": [
                    "list[int]"
                ],
                "expected": [
                    "list[int]"
                ],
                "pc": [
                    "PeriodicCallback"
                ]
            }
        },
        "TestIOLoopAddCallback.test_pre_wrap": {
            "name": "test_pre_wrap",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestIOLoopAddCallback.test_pre_wrap_with_args": {
            "name": "test_pre_wrap_with_args",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestIOLoop.test_read_while_writeable": {
            "name": "test_read_while_writeable",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestIOLoop.test_reentrant": {
            "name": "test_reentrant",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "returned_from_start": [
                    "list[bool]"
                ],
                "got_exception": [
                    "list[bool]"
                ]
            }
        },
        "TestIOLoop.test_remove_handler_from_handler": {
            "name": "test_remove_handler_from_handler",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "chunks": [
                    "list"
                ]
            }
        },
        "TestIOLoop.test_remove_timeout_after_fire": {
            "name": "test_remove_timeout_after_fire",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestIOLoop.test_remove_timeout_cleanup": {
            "name": "test_remove_timeout_cleanup",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestIOLoop.test_remove_timeout_from_timeout": {
            "name": "test_remove_timeout_from_timeout",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "calls": [
                    "list[bool]"
                ]
            }
        },
        "TestIOLoop.test_remove_without_add": {
            "name": "test_remove_without_add",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestIOLoopFutures.test_run_in_executor_gen": {
            "name": "test_run_in_executor_gen",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "res": [
                    "typing.Generator[list]"
                ]
            }
        },
        "TestIOLoopFutures.test_run_in_executor_native": {
            "name": "test_run_in_executor_native",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "res": [
                    "typing.Generator[list]"
                ]
            }
        },
        "TestIOLoopFutures.test_set_default_executor": {
            "name": "test_set_default_executor",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {
                "count": [
                    "list[int]"
                ],
                "executor": [
                    "MyExecutor"
                ]
            }
        },
        "TestIOLoop.test_spawn_callback": {
            "name": "test_spawn_callback",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestIOLoopRunSync.test_sync_exception": {
            "name": "test_sync_exception",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestIOLoopRunSync.test_sync_result": {
            "name": "test_sync_result",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestIOLoopRunSync.test_timeout": {
            "name": "test_timeout",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestIOLoop.test_timeout_with_arguments": {
            "name": "test_timeout_with_arguments",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "results": [
                    "list"
                ]
            }
        },
        "TestIOLoopConfiguration.test_twisted": {
            "name": "test_twisted",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "FakeTimeSelect.time": {
            "name": "time",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        }
    },
    "tornado-5.0.2/tornado/test/iostream_test.py": {
        "TestIOStream._make_client_iostream": {
            "name": "_make_client_iostream",
            "location": -1,
            "return": [
                "IOStream"
            ],
            "arguments": {
                "connection": [],
                "kwargs": []
            },
            "variables": {}
        },
        "TestIOStreamMixin._make_client_iostream": {
            "name": "_make_client_iostream",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "connection": [],
                "kwargs": []
            },
            "variables": {}
        },
        "TestIOStreamSSL._make_client_iostream": {
            "name": "_make_client_iostream",
            "location": -1,
            "return": [
                "SSLIOStream"
            ],
            "arguments": {
                "connection": [],
                "kwargs": []
            },
            "variables": {}
        },
        "TestIOStreamSSLContext._make_client_iostream": {
            "name": "_make_client_iostream",
            "location": -1,
            "return": [
                "SSLIOStream"
            ],
            "arguments": {
                "connection": [],
                "kwargs": []
            },
            "variables": {}
        },
        "TestIOStreamWebHTTP._make_client_iostream": {
            "name": "_make_client_iostream",
            "location": -1,
            "return": [
                "IOStream"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestIOStreamWebHTTPS._make_client_iostream": {
            "name": "_make_client_iostream",
            "location": -1,
            "return": [
                "SSLIOStream"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestIOStreamWebMixin._make_client_iostream": {
            "name": "_make_client_iostream",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestIOStream._make_server_iostream": {
            "name": "_make_server_iostream",
            "location": -1,
            "return": [
                "IOStream"
            ],
            "arguments": {
                "connection": [],
                "kwargs": []
            },
            "variables": {}
        },
        "TestIOStreamMixin._make_server_iostream": {
            "name": "_make_server_iostream",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "connection": [],
                "kwargs": []
            },
            "variables": {}
        },
        "TestIOStreamSSL._make_server_iostream": {
            "name": "_make_server_iostream",
            "location": -1,
            "return": [
                "SSLIOStream"
            ],
            "arguments": {
                "connection": [],
                "kwargs": []
            },
            "variables": {}
        },
        "TestIOStreamSSLContext._make_server_iostream": {
            "name": "_make_server_iostream",
            "location": -1,
            "return": [
                "SSLIOStream"
            ],
            "arguments": {
                "connection": [],
                "kwargs": []
            },
            "variables": {}
        },
        "_server_ssl_options": {
            "name": "_server_ssl_options",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "TestIOStreamStartTLS.accept": {
            "name": "accept",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "connection": [],
                "address": []
            },
            "variables": {
                "server_stream": [
                    "None",
                    "IOStream"
                ]
            }
        },
        "TestIOStreamMixin.accept_callback": {
            "name": "accept_callback",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "connection": [],
                "address": []
            },
            "variables": {}
        },
        "TestReadWriteMixin.callback1": {
            "name": "callback1",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "data": []
            },
            "variables": {}
        },
        "TestReadWriteMixin.callback2": {
            "name": "callback2",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "data": []
            },
            "variables": {}
        },
        "TestStreamBuffer.check_append_all_then_skip_all": {
            "name": "check_append_all_then_skip_all",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "buf": [],
                "objs": [],
                "input_type": []
            },
            "variables": {
                "expected": [
                    "bytes"
                ]
            }
        },
        "TestStreamBuffer.check_peek": {
            "name": "check_peek",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "buf": [],
                "expected": []
            },
            "variables": {
                "size": [
                    "int"
                ]
            }
        },
        "TestIOStreamStartTLS.client_send_line": {
            "name": "client_send_line",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "line": []
            },
            "variables": {
                "recv_line": [
                    "typing.Generator"
                ]
            }
        },
        "TestIOStreamStartTLS.client_start_tls": {
            "name": "client_start_tls",
            "location": -1,
            "return": [],
            "arguments": {
                "ssl_options": [
                    "None"
                ],
                "server_hostname": [
                    "None"
                ]
            },
            "variables": {
                "client_stream": [
                    "None"
                ],
                "ssl_options": [
                    "None"
                ],
                "server_hostname": [
                    "None"
                ]
            }
        },
        "TestReadWriteMixin.close_callback": {
            "name": "close_callback",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "data": []
            },
            "variables": {}
        },
        "TestReadWriteMixin.closed_callback": {
            "name": "closed_callback",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "chunk": []
            },
            "variables": {}
        },
        "TestIOStreamMixin.connect_callback": {
            "name": "connect_callback",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "WaitForHandshakeTest.connect_to_server": {
            "name": "connect_to_server",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {
                "server_cls": []
            },
            "variables": {
                "server": [
                    "None"
                ],
                "client": [
                    "None",
                    "SSLIOStream"
                ]
            }
        },
        "TestIOStreamWebMixin.connected_callback": {
            "name": "connected_callback",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestIOStreamMixin.consume": {
            "name": "consume",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "nread": [
                    "int"
                ]
            }
        },
        "TestReadWriteMixin.consume": {
            "name": "consume",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "data": [
                    "typing.Generator"
                ],
                "buf": [
                    "bytearray"
                ],
                "n": [
                    "typing.Generator"
                ]
            }
        },
        "TestReadWriteMixin.f": {
            "name": "f",
            "location": -1,
            "return": [
                "typing.Generator[list]"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestIOStreamMixin.fake_read_from_fd": {
            "name": "fake_read_from_fd",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestReadWriteMixin.final_callback": {
            "name": "final_callback",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "data": []
            },
            "variables": {}
        },
        "HelloHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestIOStreamWebMixin.get_app": {
            "name": "get_app",
            "location": -1,
            "return": [
                "Application"
            ],
            "arguments": {},
            "variables": {}
        },
        "global": {},
        "WaitForHandshakeTest,TestServer.handle_connection": {
            "name": "handle_connection",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {
                "stream": []
            },
            "variables": {}
        },
        "WaitForHandshakeTest,TestServer.handle_stream": {
            "name": "handle_stream",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "stream": [],
                "address": []
            },
            "variables": {}
        },
        "WaitForHandshakeTest,TestServer.handshake2_done": {
            "name": "handshake2_done",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "WaitForHandshakeTest,TestServer.handshake_done": {
            "name": "handshake_done",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestIOStreamMixin.main": {
            "name": "main",
            "location": -1,
            "return": [
                "typing.Generator[list]"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestReadWriteMixin.main": {
            "name": "main",
            "location": -1,
            "return": [
                "typing.Generator[list]"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestIOStreamMixin.make_iostream_pair": {
            "name": "make_iostream_pair",
            "location": -1,
            "return": [
                "list[None]"
            ],
            "arguments": {
                "kwargs": []
            },
            "variables": {
                "streams": [
                    "list[None]"
                ]
            }
        },
        "TestPipeIOStream.make_iostream_pair": {
            "name": "make_iostream_pair",
            "location": -1,
            "return": [
                "tuple[PipeIOStream]"
            ],
            "arguments": {
                "kwargs": []
            },
            "variables": {}
        },
        "TestReadWriteMixin.make_iostream_pair": {
            "name": "make_iostream_pair",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "kwargs": []
            },
            "variables": {}
        },
        "TestStreamBuffer.make_streambuffer": {
            "name": "make_streambuffer",
            "location": -1,
            "return": [
                "_StreamBuffer"
            ],
            "arguments": {
                "large_buf_threshold": [
                    "int"
                ]
            },
            "variables": {
                "buf": [
                    "_StreamBuffer"
                ],
                "large_buf_threshold": [
                    "int"
                ],
                "buf_": [
                    "int"
                ]
            }
        },
        "TestIOStreamMixin.produce": {
            "name": "produce",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestReadWriteMixin.produce": {
            "name": "produce",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestReadWriteMixin.rs_task": {
            "name": "rs_task",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestIOStreamStartTLS.server_send_line": {
            "name": "server_send_line",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "line": []
            },
            "variables": {
                "recv_line": [
                    "typing.Generator"
                ]
            }
        },
        "TestIOStreamStartTLS.server_start_tls": {
            "name": "server_start_tls",
            "location": -1,
            "return": [],
            "arguments": {
                "ssl_options": [
                    "None"
                ]
            },
            "variables": {
                "server_stream": [
                    "None"
                ],
                "ssl_options": [
                    "None"
                ]
            }
        },
        "TestIOStreamStartTLS.setUp": {
            "name": "setUp",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "server_stream": [
                    "None"
                ],
                "server_accepted": [
                    "Future"
                ],
                "client_stream": [
                    "IOStream"
                ],
                "e": [
                    "Exception"
                ]
            }
        },
        "TestStreamBuffer.setUp": {
            "name": "setUp",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestReadWriteMixin.sleep_some": {
            "name": "sleep_some",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestReadWriteMixin.streaming_callback": {
            "name": "streaming_callback",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "data": []
            },
            "variables": {}
        },
        "TestIOStreamStartTLS.tearDown": {
            "name": "tearDown",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "server_stream": [
                    "None"
                ],
                "client_stream": [
                    "None"
                ]
            }
        },
        "TestIOStreamMixin.test_async_read_error_logging": {
            "name": "test_async_read_error_logging",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestIOStreamStartTLS.test_check_hostname": {
            "name": "test_check_hostname",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestReadWriteMixin.test_close_buffered_data": {
            "name": "test_close_buffered_data",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestReadWriteMixin.test_close_callback_with_pending_read": {
            "name": "test_close_callback_with_pending_read",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "OK": [
                    "bytes"
                ]
            }
        },
        "TestIOStreamWebMixin.test_connection_closed": {
            "name": "test_connection_closed",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestIOStreamMixin.test_connection_refused": {
            "name": "test_connection_refused",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "stream": [
                    "IOStream"
                ],
                "connect_called": [
                    "bool"
                ],
                "_ERRNO_CONNREFUSED": [
                    "tuple"
                ]
            }
        },
        "TestReadWriteMixin.test_delayed_close_callback": {
            "name": "test_delayed_close_callback",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "chunks": [
                    "list"
                ]
            }
        },
        "TestReadWriteMixin.test_flow_control": {
            "name": "test_flow_control",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "MB": [
                    "int"
                ]
            }
        },
        "TestReadWriteMixin.test_future_close_callback": {
            "name": "test_future_close_callback",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "closed": [
                    "list[bool]"
                ]
            }
        },
        "TestIOStreamWebMixin.test_future_close_while_reading": {
            "name": "test_future_close_while_reading",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestReadWriteMixin.test_future_delayed_close_callback": {
            "name": "test_future_delayed_close_callback",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestIOStreamWebMixin.test_future_interface": {
            "name": "test_future_interface",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {
                "connect_result": [
                    "typing.Generator"
                ],
                "first_line": [
                    "typing.Generator"
                ],
                "content_length": [
                    "int"
                ],
                "body": [
                    "typing.Generator"
                ]
            }
        },
        "TestIOStreamWebMixin.test_future_read_until_close": {
            "name": "test_future_read_until_close",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {
                "body": [
                    "typing.Generator"
                ]
            }
        },
        "TestIOStreamMixin.test_future_write": {
            "name": "test_future_write",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "m": [
                    "int"
                ],
                "n": [
                    "int"
                ],
                "nproducers": [
                    "int"
                ],
                "total_bytes": [
                    "int"
                ]
            }
        },
        "TestIOStreamMixin.test_gaierror": {
            "name": "test_gaierror",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "stream": [
                    "IOStream"
                ],
                "mock": [
                    "None"
                ]
            }
        },
        "TestIOStreamStartTLS.test_handshake_fail": {
            "name": "test_handshake_fail",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestIOStreamMixin.test_inline_read_error": {
            "name": "test_inline_read_error",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestStreamBuffer.test_large": {
            "name": "test_large",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "objs": [
                    "list[bytes]"
                ]
            }
        },
        "TestReadWriteMixin.test_large_read_until": {
            "name": "test_large_read_until",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "NUM_KB": [
                    "int"
                ]
            }
        },
        "TestReadWriteMixin.test_many_mixed_reads": {
            "name": "test_many_mixed_reads",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "nbytes": [
                    "int"
                ]
            }
        },
        "TestPipeIOStream.test_pipe_iostream": {
            "name": "test_pipe_iostream",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestPipeIOStream.test_pipe_iostream_big_write": {
            "name": "test_pipe_iostream_big_write",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "NUM_BYTES": [
                    "int"
                ]
            }
        },
        "TestReadWriteMixin.test_read_bytes_partial": {
            "name": "test_read_bytes_partial",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestIOStreamMixin.test_read_callback_error": {
            "name": "test_read_callback_error",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestReadWriteMixin.test_read_into": {
            "name": "test_read_into",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "buf": [
                    "bytearray"
                ]
            }
        },
        "TestReadWriteMixin.test_read_into_partial": {
            "name": "test_read_into_partial",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "buf": [
                    "bytearray"
                ]
            }
        },
        "TestReadWriteMixin.test_read_into_zero_bytes": {
            "name": "test_read_into_zero_bytes",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "buf": [
                    "bytearray"
                ]
            }
        },
        "TestIOStreamWebMixin.test_read_until_close": {
            "name": "test_read_until_close",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestReadWriteMixin.test_read_until_close_after_close": {
            "name": "test_read_until_close_after_close",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestIOStreamMixin.test_read_until_close_with_error": {
            "name": "test_read_until_close_with_error",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "mock": [
                    "None"
                ]
            }
        },
        "TestReadWriteMixin.test_read_until_max_bytes": {
            "name": "test_read_until_max_bytes",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestReadWriteMixin.test_read_until_max_bytes_ignores_extra": {
            "name": "test_read_until_max_bytes_ignores_extra",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestReadWriteMixin.test_read_until_max_bytes_inline": {
            "name": "test_read_until_max_bytes_inline",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestReadWriteMixin.test_read_until_regex_max_bytes": {
            "name": "test_read_until_regex_max_bytes",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestReadWriteMixin.test_read_until_regex_max_bytes_ignores_extra": {
            "name": "test_read_until_regex_max_bytes_ignores_extra",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestReadWriteMixin.test_read_until_regex_max_bytes_inline": {
            "name": "test_read_until_regex_max_bytes_inline",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestIOStreamWebMixin.test_read_zero_bytes": {
            "name": "test_read_zero_bytes",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestStreamBuffer.test_small": {
            "name": "test_small",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "objs": [
                    "list[bytes]"
                ]
            }
        },
        "TestReadWriteMixin.test_small_read_untils_from_large_buffer": {
            "name": "test_small_read_untils_from_large_buffer",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestReadWriteMixin.test_small_reads_from_large_buffer": {
            "name": "test_small_reads_from_large_buffer",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestIOStreamStartTLS.test_start_tls_smtp": {
            "name": "test_start_tls_smtp",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {
                "client_stream": [
                    "typing.Generator"
                ],
                "server_stream": [
                    "typing.Generator"
                ]
            }
        },
        "TestReadWriteMixin.test_streaming_callback": {
            "name": "test_streaming_callback",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "chunks": [
                    "list"
                ],
                "final_called": [
                    "list"
                ]
            }
        },
        "TestReadWriteMixin.test_streaming_callback_with_data_in_buffer": {
            "name": "test_streaming_callback_with_data_in_buffer",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestReadWriteMixin.test_streaming_read_until_close_after_close": {
            "name": "test_streaming_read_until_close_after_close",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "streaming_data": [
                    "list"
                ]
            }
        },
        "TestReadWriteMixin.test_streaming_until_close": {
            "name": "test_streaming_until_close",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "chunks": [
                    "list"
                ],
                "closed": [
                    "list[bool]"
                ]
            }
        },
        "TestReadWriteMixin.test_streaming_until_close_future": {
            "name": "test_streaming_until_close_future",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "chunks": [
                    "list"
                ]
            }
        },
        "WaitForHandshakeTest.test_wait_for_handshake_already_connected": {
            "name": "test_wait_for_handshake_already_connected",
            "location": -1,
            "return": [
                "typing.Generator",
                "typing.Generator[Future]"
            ],
            "arguments": {},
            "variables": {
                "handshake_future": [
                    "Future"
                ]
            }
        },
        "WaitForHandshakeTest.test_wait_for_handshake_already_waiting_error": {
            "name": "test_wait_for_handshake_already_waiting_error",
            "location": -1,
            "return": [
                "typing.Generator",
                "typing.Generator[Future]"
            ],
            "arguments": {},
            "variables": {
                "test": [
                    "WaitForHandshakeTest"
                ],
                "handshake_future": [
                    "Future"
                ]
            }
        },
        "WaitForHandshakeTest.test_wait_for_handshake_callback": {
            "name": "test_wait_for_handshake_callback",
            "location": -1,
            "return": [
                "typing.Generator",
                "typing.Generator[Future]"
            ],
            "arguments": {},
            "variables": {
                "test": [
                    "WaitForHandshakeTest"
                ],
                "handshake_future": [
                    "Future"
                ]
            }
        },
        "WaitForHandshakeTest.test_wait_for_handshake_future": {
            "name": "test_wait_for_handshake_future",
            "location": -1,
            "return": [
                "typing.Generator",
                "typing.Generator[Future]"
            ],
            "arguments": {},
            "variables": {
                "test": [
                    "WaitForHandshakeTest"
                ],
                "handshake_future": [
                    "Future"
                ]
            }
        },
        "TestReadWriteMixin.test_write_memoryview": {
            "name": "test_write_memoryview",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestIOStreamWebMixin.test_write_while_connecting": {
            "name": "test_write_while_connecting",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "connected": [
                    "list[bool]"
                ],
                "written": [
                    "list[bool]"
                ]
            }
        },
        "TestReadWriteMixin.test_write_zero_bytes": {
            "name": "test_write_zero_bytes",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestStreamBuffer.to_bytes": {
            "name": "to_bytes",
            "location": -1,
            "return": [
                "bytes"
            ],
            "arguments": {
                "b": []
            },
            "variables": {
                "b": [
                    "memoryview"
                ]
            }
        },
        "TestIOStreamWebMixin.write_callback": {
            "name": "write_callback",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestReadWriteMixin.ws_task": {
            "name": "ws_task",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {}
        }
    },
    "tornado-5.0.2/tornado/test/locks_test.py": {
        "ConditionTest.callback": {
            "name": "callback",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "_": []
            },
            "variables": {}
        },
        "LockTests.f": {
            "name": "f",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {
                "idx": []
            },
            "variables": {}
        },
        "SemaphoreContextManagerTest.f": {
            "name": "f",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {
                "index": []
            },
            "variables": {}
        },
        "global": {},
        "ConditionTest.loop_briefly": {
            "name": "loop_briefly",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "ConditionTest.record_done": {
            "name": "record_done",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "future": [],
                "key": []
            },
            "variables": {}
        },
        "ConditionTest.setUp": {
            "name": "setUp",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "history": [
                    "list"
                ]
            }
        },
        "SemaphoreTest.test_acquire": {
            "name": "test_acquire",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "sem": [
                    "Semaphore"
                ]
            }
        },
        "LockTests.test_acquire_fifo": {
            "name": "test_acquire_fifo",
            "location": -1,
            "return": [
                "typing.Generator[list]"
            ],
            "arguments": {},
            "variables": {
                "lock": [
                    "Lock"
                ],
                "N": [
                    "int"
                ],
                "history": [
                    "list"
                ],
                "futures": [
                    "list"
                ]
            }
        },
        "LockTests.test_acquire_fifo_async_with": {
            "name": "test_acquire_fifo_async_with",
            "location": -1,
            "return": [
                "typing.Generator[list]"
            ],
            "arguments": {},
            "variables": {
                "lock": [
                    "Lock"
                ],
                "N": [
                    "int"
                ],
                "history": [
                    "list"
                ],
                "futures": [
                    "list"
                ]
            }
        },
        "LockTests.test_acquire_release": {
            "name": "test_acquire_release",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "lock": [
                    "Lock"
                ]
            }
        },
        "LockTests.test_acquire_timeout": {
            "name": "test_acquire_timeout",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {
                "lock": [
                    "Lock"
                ]
            }
        },
        "SemaphoreTest.test_acquire_timeout": {
            "name": "test_acquire_timeout",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {
                "sem": [
                    "Semaphore"
                ]
            }
        },
        "SemaphoreTest.test_acquire_timeout_preempted": {
            "name": "test_acquire_timeout_preempted",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {
                "sem": [
                    "Semaphore"
                ]
            }
        },
        "SemaphoreContextManagerTest.test_context_manager": {
            "name": "test_context_manager",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "sem": [
                    "Semaphore"
                ],
                "yielded": [
                    "typing.Generator"
                ]
            }
        },
        "SemaphoreContextManagerTest.test_context_manager_async_await": {
            "name": "test_context_manager_async_await",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {
                "sem": [
                    "Semaphore"
                ]
            }
        },
        "SemaphoreContextManagerTest.test_context_manager_contended": {
            "name": "test_context_manager_contended",
            "location": -1,
            "return": [
                "typing.Generator[list]"
            ],
            "arguments": {},
            "variables": {
                "sem": [
                    "Semaphore"
                ],
                "history": [
                    "list"
                ],
                "expected_history": [
                    "list",
                    "list[typing.Text]"
                ]
            }
        },
        "SemaphoreContextManagerTest.test_context_manager_exception": {
            "name": "test_context_manager_exception",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {
                "sem": [
                    "Semaphore"
                ]
            }
        },
        "LockTests.test_context_manager_misuse": {
            "name": "test_context_manager_misuse",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "SemaphoreContextManagerTest.test_context_manager_misuse": {
            "name": "test_context_manager_misuse",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "SemaphoreContextManagerTest.test_context_manager_timeout": {
            "name": "test_context_manager_timeout",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {
                "sem": [
                    "Semaphore"
                ]
            }
        },
        "SemaphoreContextManagerTest.test_context_manager_timeout_error": {
            "name": "test_context_manager_timeout_error",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {
                "sem": [
                    "Semaphore"
                ]
            }
        },
        "EventTest.test_event": {
            "name": "test_event",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "e": [
                    "Event"
                ]
            }
        },
        "EventTest.test_event_set_multiple": {
            "name": "test_event_set_multiple",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "e": [
                    "Event"
                ]
            }
        },
        "EventTest.test_event_timeout": {
            "name": "test_event_timeout",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {
                "e": [
                    "Event"
                ]
            }
        },
        "EventTest.test_event_wait_clear": {
            "name": "test_event_wait_clear",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "e": [
                    "Event"
                ]
            }
        },
        "ConditionTest.test_garbage_collection": {
            "name": "test_garbage_collection",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {
                "c": [
                    "Condition"
                ]
            }
        },
        "SemaphoreTest.test_garbage_collection": {
            "name": "test_garbage_collection",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {
                "sem": [
                    "Semaphore"
                ],
                "futures": [
                    "list"
                ]
            }
        },
        "LockTests.test_multi_release": {
            "name": "test_multi_release",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "lock": [
                    "Lock"
                ]
            }
        },
        "SemaphoreTest.test_negative_value": {
            "name": "test_negative_value",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "ConditionTest.test_nested_notify": {
            "name": "test_nested_notify",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {
                "c": [
                    "Condition"
                ],
                "futures": [
                    "list"
                ]
            }
        },
        "ConditionTest.test_notify": {
            "name": "test_notify",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {
                "c": [
                    "Condition"
                ]
            }
        },
        "ConditionTest.test_notify_1": {
            "name": "test_notify_1",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "c": [
                    "Condition"
                ]
            }
        },
        "ConditionTest.test_notify_all": {
            "name": "test_notify_all",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "c": [
                    "Condition"
                ]
            }
        },
        "ConditionTest.test_notify_all_with_timeout": {
            "name": "test_notify_all_with_timeout",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {
                "c": [
                    "Condition"
                ]
            }
        },
        "ConditionTest.test_notify_n": {
            "name": "test_notify_n",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "c": [
                    "Condition"
                ]
            }
        },
        "ConditionTest.test_notify_n_with_timeout": {
            "name": "test_notify_n_with_timeout",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {
                "c": [
                    "Condition"
                ]
            }
        },
        "BoundedSemaphoreTest.test_release_unacquired": {
            "name": "test_release_unacquired",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "sem": [
                    "BoundedSemaphore"
                ]
            }
        },
        "SemaphoreTest.test_release_unacquired": {
            "name": "test_release_unacquired",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "sem": [
                    "Semaphore"
                ]
            }
        },
        "ConditionTest.test_repr": {
            "name": "test_repr",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "c": [
                    "Condition"
                ]
            }
        },
        "EventTest.test_repr": {
            "name": "test_repr",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "event": [
                    "Event"
                ]
            }
        },
        "LockTests.test_repr": {
            "name": "test_repr",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "lock": [
                    "Lock"
                ]
            }
        },
        "SemaphoreTest.test_repr": {
            "name": "test_repr",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "sem": [
                    "Semaphore"
                ]
            }
        },
        "ConditionTest.test_wait_timeout": {
            "name": "test_wait_timeout",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {
                "c": [
                    "Condition"
                ]
            }
        },
        "ConditionTest.test_wait_timeout_preempted": {
            "name": "test_wait_timeout_preempted",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {
                "c": [
                    "Condition"
                ]
            }
        },
        "LockTests.test_yield_lock": {
            "name": "test_yield_lock",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {}
        },
        "SemaphoreContextManagerTest.test_yield_sem": {
            "name": "test_yield_sem",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {}
        }
    },
    "tornado-5.0.2/tornado/test/log_test.py": {
        "LogFormatterTest.get_output": {
            "name": "get_output",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {
                "f": [
                    "typing.IO"
                ]
            }
        },
        "global": {},
        "ignore_bytes_warning": {
            "name": "ignore_bytes_warning",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {}
        },
        "LoggingOptionTest.logs_present": {
            "name": "logs_present",
            "location": -1,
            "return": [
                "bool"
            ],
            "arguments": {
                "statement": [],
                "args": [
                    "None"
                ]
            },
            "variables": {
                "IMPORT": [
                    "typing.Text"
                ],
                "LOG_INFO": [
                    "typing.Text"
                ],
                "program": [
                    "str"
                ],
                "args": [
                    "None"
                ]
            }
        },
        "LogFormatterTest.make_handler": {
            "name": "make_handler",
            "location": -1,
            "return": [],
            "arguments": {
                "filename": []
            },
            "variables": {}
        },
        "UnicodeLogFormatterTest.make_handler": {
            "name": "make_handler",
            "location": -1,
            "return": [],
            "arguments": {
                "filename": []
            },
            "variables": {}
        },
        "EnablePrettyLoggingTest.setUp": {
            "name": "setUp",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "options": [
                    "OptionParser"
                ],
                "self_": [
                    "bool"
                ]
            }
        },
        "LogFormatterTest.setUp": {
            "name": "setUp",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "formatter": [
                    "LogFormatter"
                ],
                "self_": [
                    "dict[, typing.Text]",
                    "typing.Text",
                    "bool"
                ]
            }
        },
        "LogFormatterTest.tearDown": {
            "name": "tearDown",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "LogFormatterTest.test_basic_logging": {
            "name": "test_basic_logging",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "LogFormatterTest.test_bytes_exception_logging": {
            "name": "test_bytes_exception_logging",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "LogFormatterTest.test_bytes_logging": {
            "name": "test_bytes_logging",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "LoggingOptionTest.test_default": {
            "name": "test_default",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "LoggingOptionTest.test_disable_code_none": {
            "name": "test_disable_code_none",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "LoggingOptionTest.test_disable_code_string": {
            "name": "test_disable_code_string",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "LoggingOptionTest.test_disable_command_line": {
            "name": "test_disable_command_line",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "LoggingOptionTest.test_disable_command_line_case_insensitive": {
            "name": "test_disable_command_line_case_insensitive",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "LoggingOptionTest.test_disable_override": {
            "name": "test_disable_override",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "EnablePrettyLoggingTest.test_log_file": {
            "name": "test_log_file",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "f": [
                    "typing.IO"
                ]
            }
        },
        "EnablePrettyLoggingTest.test_log_file_with_timed_rotating": {
            "name": "test_log_file_with_timed_rotating",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "self_": [
                    "typing.Text"
                ],
                "f": [
                    "typing.IO"
                ]
            }
        },
        "LoggingOptionTest.test_tornado_default": {
            "name": "test_tornado_default",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "UnicodeLogFormatterTest.test_unicode_logging": {
            "name": "test_unicode_logging",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "LogFormatterTest.test_utf8_logging": {
            "name": "test_utf8_logging",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "EnablePrettyLoggingTest.test_wrong_rotate_mode_value": {
            "name": "test_wrong_rotate_mode_value",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "self_": [
                    "typing.Text"
                ]
            }
        }
    },
    "tornado-5.0.2/tornado/test/netutil_test.py": {
        "_failing_getaddrinfo": {
            "name": "_failing_getaddrinfo",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            },
            "variables": {}
        },
        "global": {},
        "_ResolverErrorTestMixin.handler": {
            "name": "handler",
            "location": -1,
            "return": [
                "bool"
            ],
            "arguments": {
                "exc_typ": [],
                "exc_val": [],
                "exc_tb": []
            },
            "variables": {}
        },
        "BlockingResolverErrorTest.setUp": {
            "name": "setUp",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "resolver": [
                    "BlockingResolver"
                ]
            }
        },
        "BlockingResolverTest.setUp": {
            "name": "setUp",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "resolver": [
                    "BlockingResolver"
                ]
            }
        },
        "CaresResolverTest.setUp": {
            "name": "setUp",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "resolver": [
                    "CaresResolver"
                ]
            }
        },
        "OverrideResolverTest.setUp": {
            "name": "setUp",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "mapping": [
                    "dict[tuple[typing.Union[typing.Text,int]], tuple[typing.Union[typing.Text,int]]]"
                ],
                "resolver": [
                    "OverrideResolver"
                ]
            }
        },
        "ThreadedResolverErrorTest.setUp": {
            "name": "setUp",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "resolver": [
                    "BlockingResolver"
                ]
            }
        },
        "ThreadedResolverTest.setUp": {
            "name": "setUp",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "resolver": [
                    "ThreadedResolver"
                ]
            }
        },
        "TwistedResolverTest.setUp": {
            "name": "setUp",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "resolver": [
                    "TwistedResolver"
                ]
            }
        },
        "BlockingResolverErrorTest.tearDown": {
            "name": "tearDown",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "ThreadedResolverErrorTest.tearDown": {
            "name": "tearDown",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "ThreadedResolverTest.tearDown": {
            "name": "tearDown",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "_ResolverErrorTestMixin.test_bad_host": {
            "name": "test_bad_host",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "_ResolverTestMixin.test_future_interface": {
            "name": "test_future_interface",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "addrinfo": [
                    "typing.Generator"
                ]
            }
        },
        "_ResolverErrorTestMixin.test_future_interface_bad_host": {
            "name": "test_future_interface_bad_host",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {}
        },
        "ThreadedResolverImportTest.test_import": {
            "name": "test_import",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "TIMEOUT": [
                    "int"
                ],
                "command": [
                    "list[typing.Text]"
                ],
                "popen": [
                    "Popen"
                ],
                "return_code": [
                    "None"
                ]
            }
        },
        "IsValidIPTest.test_is_valid_ip": {
            "name": "test_is_valid_ip",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "_ResolverTestMixin.test_localhost": {
            "name": "test_localhost",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "OverrideResolverTest.test_resolve_multiaddr": {
            "name": "test_resolve_multiaddr",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestPortAllocation.test_reuse_port": {
            "name": "test_reuse_port",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "sockets": [
                    "list"
                ]
            }
        },
        "TestPortAllocation.test_same_port_allocation": {
            "name": "test_same_port_allocation",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        }
    },
    "tornado-5.0.2/tornado/test/options_test.py": {
        "OptionsTest._sample_options": {
            "name": "_sample_options",
            "location": -1,
            "return": [
                "OptionParser"
            ],
            "arguments": {},
            "variables": {
                "options": [
                    "OptionParser"
                ]
            }
        },
        "OptionsTest.callback": {
            "name": "callback",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "called": [
                    "bool"
                ]
            }
        },
        "global": {},
        "OptionsTest.test_as_dict": {
            "name": "test_as_dict",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "expected": [
                    "dict[typing.Text, int]"
                ]
            }
        },
        "OptionsTest.test_dash_underscore_cli": {
            "name": "test_dash_underscore_cli",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "defined_name": [
                    "typing.Text"
                ],
                "flag": [
                    "typing.Text"
                ],
                "options": [
                    "OptionParser"
                ]
            }
        },
        "OptionsTest.test_dash_underscore_file": {
            "name": "test_dash_underscore_file",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "defined_name": [
                    "typing.Text"
                ],
                "options": [
                    "OptionParser"
                ]
            }
        },
        "OptionsTest.test_dash_underscore_introspection": {
            "name": "test_dash_underscore_introspection",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "options": [
                    "OptionParser"
                ],
                "all_options": [
                    "list[typing.Text]"
                ],
                "buf": [
                    "StringIO"
                ]
            }
        },
        "OptionsTest.test_error_redefine": {
            "name": "test_error_redefine",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "options": [
                    "OptionParser"
                ]
            }
        },
        "OptionsTest.test_error_redefine_underscore": {
            "name": "test_error_redefine_underscore",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "tests": [
                    "list[tuple[typing.Text]]"
                ],
                "a": [
                    "typing.Text"
                ],
                "b": [
                    "typing.Text"
                ],
                "options": [
                    "OptionParser"
                ]
            }
        },
        "OptionsTest.test_getitem": {
            "name": "test_getitem",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "OptionsTest.test_group_dict": {
            "name": "test_group_dict",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "options": [
                    "OptionParser"
                ]
            }
        },
        "OptionsTest.test_help": {
            "name": "test_help",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "options": [
                    "OptionParser"
                ],
                "sys_": [
                    "StringIO"
                ]
            }
        },
        "OptionsTest.test_items": {
            "name": "test_items",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "expected": [
                    "list[tuple[typing.Union[typing.Text,int]]]"
                ],
                "actual": [
                    "list"
                ]
            }
        },
        "OptionsTest.test_iter": {
            "name": "test_iter",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "OptionsTest.test_mock_patch": {
            "name": "test_mock_patch",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "options": [
                    "OptionParser"
                ],
                "options_": [
                    "int"
                ]
            }
        },
        "OptionsTest.test_multiple_int": {
            "name": "test_multiple_int",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "options": [
                    "OptionParser"
                ]
            }
        },
        "OptionsTest.test_multiple_string": {
            "name": "test_multiple_string",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "options": [
                    "OptionParser"
                ]
            }
        },
        "OptionsTest.test_parse_callbacks": {
            "name": "test_parse_callbacks",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "options": [
                    "OptionParser"
                ],
                "called": [
                    "bool"
                ]
            }
        },
        "OptionsTest.test_parse_command_line": {
            "name": "test_parse_command_line",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "options": [
                    "OptionParser"
                ]
            }
        },
        "OptionsTest.test_parse_config_file": {
            "name": "test_parse_config_file",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "options": [
                    "OptionParser"
                ]
            }
        },
        "OptionsTest.test_setattr": {
            "name": "test_setattr",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "options": [
                    "OptionParser"
                ],
                "options_": [
                    "int"
                ]
            }
        },
        "OptionsTest.test_setattr_type_check": {
            "name": "test_setattr_type_check",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "options": [
                    "OptionParser"
                ],
                "options_": [
                    "typing.Text"
                ]
            }
        },
        "OptionsTest.test_setattr_with_callback": {
            "name": "test_setattr_with_callback",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "values": [
                    "list"
                ],
                "options": [
                    "OptionParser"
                ],
                "options_": [
                    "int"
                ]
            }
        },
        "OptionsTest.test_setitem": {
            "name": "test_setitem",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "options": [
                    "OptionParser"
                ]
            }
        },
        "OptionsTest.test_subcommand": {
            "name": "test_subcommand",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "base_options": [
                    "OptionParser"
                ],
                "sub_options": [
                    "OptionParser"
                ],
                "sys_": [
                    "StringIO"
                ]
            }
        },
        "OptionsTest.test_types": {
            "name": "test_types",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "options": [
                    "OptionParser"
                ]
            }
        }
    },
    "tornado-5.0.2/tornado/test/process_test.py": {
        "ProcessTest.fetch": {
            "name": "fetch",
            "location": -1,
            "return": [],
            "arguments": {
                "url": [],
                "fail_ok": [
                    "bool"
                ]
            },
            "variables": {
                "e": [
                    "Exception"
                ],
                "fail_ok": [
                    "bool"
                ]
            }
        },
        "ProcessTest,ProcessHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "ProcessTest.get_app": {
            "name": "get_app",
            "location": -1,
            "return": [
                "Application"
            ],
            "arguments": {},
            "variables": {}
        },
        "ProcessTest.get_url": {
            "name": "get_url",
            "location": -1,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "path": []
            },
            "variables": {}
        },
        "global": {},
        "skip_if_twisted": {
            "name": "skip_if_twisted",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "ProcessTest.tearDown": {
            "name": "tearDown",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "SubprocessTest.test_close_stdin": {
            "name": "test_close_stdin",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "subproc": [
                    "Subprocess"
                ]
            }
        },
        "ProcessTest.test_multi_process": {
            "name": "test_multi_process",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "e": [
                    "Exception"
                ],
                "asyncio": [
                    "None"
                ],
                "server": [
                    "HTTPServer"
                ],
                "client": [
                    "HTTPClient"
                ],
                "pid": [
                    "int"
                ],
                "pid2": [
                    "int"
                ]
            }
        },
        "SubprocessTest.test_sigchild": {
            "name": "test_sigchild",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "subproc": [
                    "Subprocess"
                ]
            }
        },
        "SubprocessTest.test_sigchild_future": {
            "name": "test_sigchild_future",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "subproc": [
                    "Subprocess"
                ],
                "ret": [
                    "typing.Generator"
                ]
            }
        },
        "SubprocessTest.test_sigchild_signal": {
            "name": "test_sigchild_signal",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "subproc": [
                    "Subprocess"
                ]
            }
        },
        "SubprocessTest.test_stderr": {
            "name": "test_stderr",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "subproc": [
                    "Subprocess"
                ]
            }
        },
        "SubprocessTest.test_subprocess": {
            "name": "test_subprocess",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "subproc": [
                    "Subprocess"
                ]
            }
        },
        "SubprocessTest.test_wait_for_exit_raise": {
            "name": "test_wait_for_exit_raise",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {
                "subproc": [
                    "Subprocess"
                ]
            }
        },
        "SubprocessTest.test_wait_for_exit_raise_disabled": {
            "name": "test_wait_for_exit_raise_disabled",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "subproc": [
                    "Subprocess"
                ],
                "ret": [
                    "typing.Generator"
                ]
            }
        }
    },
    "tornado-5.0.2/tornado/test/queues_test.py": {
        "ProducerConsumerTest.consumer": {
            "name": "consumer",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "global": {},
        "ProducerConsumerTest.producer": {
            "name": "producer",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {}
        },
        "QueueGetTest.test_async_for": {
            "name": "test_async_for",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "results": [
                    "typing.Generator"
                ]
            }
        },
        "QueueGetTest.test_blocking_get": {
            "name": "test_blocking_get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "QueueGetTest.test_blocking_get_wait": {
            "name": "test_blocking_get_wait",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "QueuePutTest.test_blocking_put": {
            "name": "test_blocking_put",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "QueuePutTest.test_blocking_put_wait": {
            "name": "test_blocking_put_wait",
            "location": -1,
            "return": [
                "typing.Generator[list]"
            ],
            "arguments": {},
            "variables": {
                "futures": [
                    "list"
                ]
            }
        },
        "QueuePutTest.test_float_maxsize": {
            "name": "test_float_maxsize",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {}
        },
        "QueueGetTest.test_get_clears_timed_out_getters": {
            "name": "test_get_clears_timed_out_getters",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {
                "getters": [
                    "list"
                ]
            }
        },
        "QueueGetTest.test_get_clears_timed_out_putters": {
            "name": "test_get_clears_timed_out_putters",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {
                "putters": [
                    "list"
                ]
            }
        },
        "QueueGetTest.test_get_timeout": {
            "name": "test_get_timeout",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {}
        },
        "QueueGetTest.test_get_timeout_preempted": {
            "name": "test_get_timeout_preempted",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {}
        },
        "QueueGetTest.test_get_with_putters": {
            "name": "test_get_with_putters",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "QueueJoinTest.test_join_empty_queue": {
            "name": "test_join_empty_queue",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {}
        },
        "QueueJoinTest.test_join_timeout": {
            "name": "test_join_timeout",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {}
        },
        "QueueBasicTest.test_maxsize": {
            "name": "test_maxsize",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "QueueGetTest.test_nonblocking_get": {
            "name": "test_nonblocking_get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "QueueGetTest.test_nonblocking_get_exception": {
            "name": "test_nonblocking_get_exception",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "QueuePutTest.test_nonblocking_put_exception": {
            "name": "test_nonblocking_put_exception",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "QueuePutTest.test_nonblocking_put_with_getters": {
            "name": "test_nonblocking_put_with_getters",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {}
        },
        "LifoQueueJoinTest.test_order": {
            "name": "test_order",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "PriorityQueueJoinTest.test_order": {
            "name": "test_order",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "QueueBasicTest.test_order": {
            "name": "test_order",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "i": [
                    "int"
                ],
                "items": [
                    "list"
                ]
            }
        },
        "ProducerConsumerTest.test_producer_consumer": {
            "name": "test_producer_consumer",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {
                "history": [
                    "list"
                ]
            }
        },
        "QueuePutTest.test_put_clears_timed_out_getters": {
            "name": "test_put_clears_timed_out_getters",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {
                "getters": [
                    "list"
                ]
            }
        },
        "QueuePutTest.test_put_clears_timed_out_putters": {
            "name": "test_put_clears_timed_out_putters",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {
                "putters": [
                    "list"
                ]
            }
        },
        "QueuePutTest.test_put_timeout": {
            "name": "test_put_timeout",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {}
        },
        "QueuePutTest.test_put_timeout_preempted": {
            "name": "test_put_timeout_preempted",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {}
        },
        "QueuePutTest.test_put_with_getters": {
            "name": "test_put_with_getters",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {}
        },
        "QueueBasicTest.test_repr_and_str": {
            "name": "test_repr_and_str",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "q_str": [
                    "str"
                ]
            }
        },
        "QueueJoinTest.test_task_done": {
            "name": "test_task_done",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {
                "accumulator": [
                    "int"
                ]
            }
        },
        "QueueJoinTest.test_task_done_delay": {
            "name": "test_task_done_delay",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {}
        },
        "QueueJoinTest.test_task_done_underflow": {
            "name": "test_task_done_underflow",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "QueueJoinTest.worker": {
            "name": "worker",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {
                "item": [
                    "typing.Generator"
                ]
            }
        }
    },
    "tornado-5.0.2/tornado/test/resolve_test_helper.py": {
        "global": {}
    },
    "tornado-5.0.2/tornado/test/routing_test.py": {
        "BasicRouter,MessageDelegate.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "connection": []
            },
            "variables": {}
        },
        "ConnectionDelegate,MessageDelegate.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "connection": []
            },
            "variables": {}
        },
        "CustomRouter.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "routes": [
                    "dict"
                ]
            }
        },
        "HTTPMethodRouter.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "app": []
            },
            "variables": {}
        },
        "_get_named_handler": {
            "name": "_get_named_handler",
            "location": -1,
            "return": [
                "Handler"
            ],
            "arguments": {
                "handler_name": []
            },
            "variables": {}
        },
        "CustomRouter.add_routes": {
            "name": "add_routes",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "routes": []
            },
            "variables": {}
        },
        "BasicRouter.find_handler": {
            "name": "find_handler",
            "location": -1,
            "return": [
                "MessageDelegate"
            ],
            "arguments": {
                "request": [],
                "kwargs": []
            },
            "variables": {}
        },
        "CustomRouter.find_handler": {
            "name": "find_handler",
            "location": -1,
            "return": [],
            "arguments": {
                "request": [],
                "kwargs": []
            },
            "variables": {}
        },
        "HTTPMethodRouter.find_handler": {
            "name": "find_handler",
            "location": -1,
            "return": [],
            "arguments": {
                "request": [],
                "kwargs": []
            },
            "variables": {
                "handler": [
                    "GetResource",
                    "PostResource"
                ]
            }
        },
        "BasicRouter,MessageDelegate.finish": {
            "name": "finish",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "ConnectionDelegate,MessageDelegate.finish": {
            "name": "finish",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "response_body": [
                    "bytes"
                ]
            }
        },
        "GetResource.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "path": []
            },
            "variables": {
                "resources": [
                    "dict"
                ]
            }
        },
        "Handler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "kwargs": [],
                "args": []
            },
            "variables": {}
        },
        "WSGIContainerTestCase,Handler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "kwargs": [],
                "args": []
            },
            "variables": {}
        },
        "BasicRouterTestCase.get_app": {
            "name": "get_app",
            "location": -1,
            "return": [
                "BasicRouter"
            ],
            "arguments": {},
            "variables": {}
        },
        "CustomRouterTestCase.get_app": {
            "name": "get_app",
            "location": -1,
            "return": [
                "CustomRouter"
            ],
            "arguments": {},
            "variables": {
                "router": [
                    "CustomRouter"
                ],
                "app1": [
                    "CustomApplication"
                ],
                "app2": [
                    "CustomApplication"
                ]
            }
        },
        "HTTPMethodRouterTestCase.get_app": {
            "name": "get_app",
            "location": -1,
            "return": [
                "HTTPMethodRouter"
            ],
            "arguments": {},
            "variables": {}
        },
        "RuleRouterTest.get_app": {
            "name": "get_app",
            "location": -1,
            "return": [
                "Application"
            ],
            "arguments": {},
            "variables": {
                "app": [
                    "Application"
                ],
                "router": [
                    "CustomRouter"
                ]
            }
        },
        "WSGIContainerTestCase.get_app": {
            "name": "get_app",
            "location": -1,
            "return": [
                "RuleRouter"
            ],
            "arguments": {},
            "variables": {
                "wsgi_app": [
                    "WSGIContainer"
                ]
            }
        },
        "global": {},
        "PostResource.post": {
            "name": "post",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "path": []
            },
            "variables": {
                "resources": [
                    "dict"
                ]
            }
        },
        "RuleRouterTest.request_callable": {
            "name": "request_callable",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "request": []
            },
            "variables": {}
        },
        "CustomRouter.reverse_url": {
            "name": "reverse_url",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [],
                "args": []
            },
            "variables": {}
        },
        "CustomRouterTestCase,CustomApplication.reverse_url": {
            "name": "reverse_url",
            "location": -1,
            "return": [],
            "arguments": {
                "name": [],
                "args": []
            },
            "variables": {}
        },
        "ConnectionDelegate.start_request": {
            "name": "start_request",
            "location": -1,
            "return": [
                "MessageDelegate"
            ],
            "arguments": {
                "server_conn": [],
                "request_conn": []
            },
            "variables": {}
        },
        "BasicRouterTestCase.test_basic_router": {
            "name": "test_basic_router",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "CustomRouterTestCase.test_custom_router": {
            "name": "test_custom_router",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "WSGIContainerTestCase.test_delegate_not_found": {
            "name": "test_delegate_not_found",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "HTTPMethodRouterTestCase.test_http_method_router": {
            "name": "test_http_method_router",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "RuleRouterTest.test_rule_based_router": {
            "name": "test_rule_based_router",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "WSGIContainerTestCase.test_wsgi_container": {
            "name": "test_wsgi_container",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "WSGIContainerTestCase.wsgi_app": {
            "name": "wsgi_app",
            "location": -1,
            "return": [
                "list[bytes]"
            ],
            "arguments": {
                "environ": [],
                "start_response": []
            },
            "variables": {}
        }
    },
    "tornado-5.0.2/tornado/test/runtests.py": {
        "CountingStderr.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "real": []
            },
            "variables": {
                "byte_count": [
                    "int"
                ]
            }
        },
        "LogCounter.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "kwargs": [],
                "args": []
            },
            "variables": {
                "info_count": [
                    "int"
                ],
                "warning_count": [
                    "int"
                ],
                "error_count": [
                    "int"
                ]
            }
        },
        "TornadoTextTestRunner.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "kwargs": [],
                "args": []
            },
            "variables": {}
        },
        "all": {
            "name": "all",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {
                "TEST_MODULES": [
                    "list[typing.Text]"
                ]
            }
        },
        "configure_ioloop": {
            "name": "configure_ioloop",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "kwargs": [
                    "dict",
                    "dict[typing.Text, ]"
                ]
            }
        },
        "LogCounter.filter": {
            "name": "filter",
            "location": -1,
            "return": [
                "bool"
            ],
            "arguments": {
                "record": []
            },
            "variables": {}
        },
        "CountingStderr.flush": {
            "name": "flush",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "global": {},
        "main": {
            "name": "main",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "sys_": [
                    "CountingStderr"
                ],
                "log_counter": [
                    "LogCounter"
                ],
                "kwargs": [
                    "dict",
                    "dict[typing.Text, bool]"
                ]
            }
        },
        "TornadoTextTestRunner.run": {
            "name": "run",
            "location": -1,
            "return": [],
            "arguments": {
                "test": []
            },
            "variables": {
                "skip_reasons": [
                    "set"
                ]
            }
        },
        "test_runner_factory": {
            "name": "test_runner_factory",
            "location": -1,
            "return": [
                "TornadoTextTestRunner"
            ],
            "arguments": {
                "stderr": []
            },
            "variables": {}
        },
        "CountingStderr.write": {
            "name": "write",
            "location": -1,
            "return": [],
            "arguments": {
                "data": []
            },
            "variables": {}
        }
    },
    "tornado-5.0.2/tornado/test/simple_httpclient_test.py": {
        "SimpleHTTPClientTestMixin.async_body_producer": {
            "name": "async_body_producer",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {
                "write": []
            },
            "variables": {}
        },
        "SimpleHTTPClientTestMixin.body_producer": {
            "name": "body_producer",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "write": []
            },
            "variables": {}
        },
        "SimpleHTTPClientTestCase.create_client": {
            "name": "create_client",
            "location": -1,
            "return": [
                "SimpleAsyncHTTPClient"
            ],
            "arguments": {
                "kwargs": []
            },
            "variables": {}
        },
        "SimpleHTTPSClientTestCase.create_client": {
            "name": "create_client",
            "location": -1,
            "return": [
                "SimpleAsyncHTTPClient"
            ],
            "arguments": {
                "kwargs": []
            },
            "variables": {}
        },
        "ChunkedWithContentLengthTest,ChunkedWithContentLength.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "ContentLengthHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "HangHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "HostEchoHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "MaxBodySizeTest,LargeBody.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "MaxBodySizeTest,SmallBody.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "MaxBufferSizeTest,LargeBody.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "MaxHeaderSizeTest,LargeHeaders.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "MaxHeaderSizeTest,SmallHeaders.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "NoContentHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "NoContentLengthHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "SeeOtherGetHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TriggerHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "ChunkedWithContentLengthTest.get_app": {
            "name": "get_app",
            "location": -1,
            "return": [
                "Application"
            ],
            "arguments": {},
            "variables": {}
        },
        "HTTP100ContinueTestCase.get_app": {
            "name": "get_app",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "HTTP204NoContentTestCase.get_app": {
            "name": "get_app",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "HostnameMappingTestCase.get_app": {
            "name": "get_app",
            "location": -1,
            "return": [
                "Application"
            ],
            "arguments": {},
            "variables": {}
        },
        "MaxBodySizeTest.get_app": {
            "name": "get_app",
            "location": -1,
            "return": [
                "Application"
            ],
            "arguments": {},
            "variables": {}
        },
        "MaxBufferSizeTest.get_app": {
            "name": "get_app",
            "location": -1,
            "return": [
                "Application"
            ],
            "arguments": {},
            "variables": {}
        },
        "MaxHeaderSizeTest.get_app": {
            "name": "get_app",
            "location": -1,
            "return": [
                "Application"
            ],
            "arguments": {},
            "variables": {}
        },
        "ResolveTimeoutTestCase.get_app": {
            "name": "get_app",
            "location": -1,
            "return": [
                "Application"
            ],
            "arguments": {},
            "variables": {}
        },
        "SimpleHTTPClientTestMixin.get_app": {
            "name": "get_app",
            "location": -1,
            "return": [
                "Application"
            ],
            "arguments": {},
            "variables": {}
        },
        "ChunkedWithContentLengthTest.get_http_client": {
            "name": "get_http_client",
            "location": -1,
            "return": [
                "SimpleAsyncHTTPClient"
            ],
            "arguments": {},
            "variables": {}
        },
        "MaxBodySizeTest.get_http_client": {
            "name": "get_http_client",
            "location": -1,
            "return": [
                "SimpleAsyncHTTPClient"
            ],
            "arguments": {},
            "variables": {}
        },
        "MaxBufferSizeTest.get_http_client": {
            "name": "get_http_client",
            "location": -1,
            "return": [
                "SimpleAsyncHTTPClient"
            ],
            "arguments": {},
            "variables": {}
        },
        "MaxHeaderSizeTest.get_http_client": {
            "name": "get_http_client",
            "location": -1,
            "return": [
                "SimpleAsyncHTTPClient"
            ],
            "arguments": {},
            "variables": {}
        },
        "SimpleHTTPClientCommonTestCase.get_http_client": {
            "name": "get_http_client",
            "location": -1,
            "return": [
                "SimpleAsyncHTTPClient"
            ],
            "arguments": {},
            "variables": {
                "client": [
                    "SimpleAsyncHTTPClient"
                ]
            }
        },
        "global": {},
        "HeadHandler.head": {
            "name": "head",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TriggerHandler.initialize": {
            "name": "initialize",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "queue": [],
                "wake_callback": []
            },
            "variables": {}
        },
        "OptionsHandler.options": {
            "name": "options",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "EchoPostHandler.post": {
            "name": "post",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "SeeOtherPostHandler.post": {
            "name": "post",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "redirect_code": [
                    "int"
                ]
            }
        },
        "RespondInPrepareHandler.prepare": {
            "name": "prepare",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "ResolveTimeoutTestCase,BadResolver.resolve": {
            "name": "resolve",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "kwargs": [],
                "args": []
            },
            "variables": {}
        },
        "SimpleHTTPClientTestMixin,TimeoutResolver.resolve": {
            "name": "resolve",
            "location": -1,
            "return": [
                "Future"
            ],
            "arguments": {
                "kwargs": [],
                "args": []
            },
            "variables": {}
        },
        "HTTP100ContinueTestCase.respond_100": {
            "name": "respond_100",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "request": []
            },
            "variables": {}
        },
        "HTTP100ContinueTestCase.respond_200": {
            "name": "respond_200",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "HTTP204NoContentTestCase.respond_204": {
            "name": "respond_204",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "request": []
            },
            "variables": {}
        },
        "CreateAsyncHTTPClientTestCase.setUp": {
            "name": "setUp",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "HostnameMappingTestCase.setUp": {
            "name": "setUp",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "http_client": [
                    "SimpleAsyncHTTPClient"
                ]
            }
        },
        "ResolveTimeoutTestCase.setUp": {
            "name": "setUp",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "http_client": [
                    "SimpleAsyncHTTPClient"
                ]
            }
        },
        "SimpleHTTPClientTestCase.setUp": {
            "name": "setUp",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "SimpleHTTPSClientTestCase.setUp": {
            "name": "setUp",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "SimpleHTTPClientTestMixin.sync_body_producer": {
            "name": "sync_body_producer",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "write": []
            },
            "variables": {}
        },
        "CreateAsyncHTTPClientTestCase.tearDown": {
            "name": "tearDown",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "HTTP100ContinueTestCase.test_100_continue": {
            "name": "test_100_continue",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "SimpleHTTPClientTestMixin.test_100_continue": {
            "name": "test_100_continue",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "SimpleHTTPClientTestMixin.test_100_continue_early_response": {
            "name": "test_100_continue_early_response",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "HTTP204NoContentTestCase.test_204_invalid_content_length": {
            "name": "test_204_invalid_content_length",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "HTTP204NoContentTestCase.test_204_no_content": {
            "name": "test_204_no_content",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "SimpleHTTPClientTestMixin.test_async_body_producer_chunked": {
            "name": "test_async_body_producer_chunked",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "SimpleHTTPClientTestMixin.test_async_body_producer_content_length": {
            "name": "test_async_body_producer_content_length",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "ChunkedWithContentLengthTest.test_chunked_with_content_length": {
            "name": "test_chunked_with_content_length",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "SimpleHTTPClientTestMixin.test_connect_timeout": {
            "name": "test_connect_timeout",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "timeout": [
                    "float"
                ],
                "timeout_min": [
                    "float"
                ],
                "timeout_max": [
                    "float"
                ]
            }
        },
        "SimpleHTTPClientTestMixin.test_connection_limit": {
            "name": "test_connection_limit",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "seen": [
                    "list"
                ]
            }
        },
        "SimpleHTTPClientTestMixin.test_connection_refused": {
            "name": "test_connection_refused",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "contains_errno": [
                    "bool"
                ]
            }
        },
        "SimpleHTTPSClientTestCase.test_error_logging": {
            "name": "test_error_logging",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "expect_log": [
                    "ExpectLog"
                ]
            }
        },
        "SimpleHTTPClientTestMixin.test_gzip": {
            "name": "test_gzip",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "SimpleHTTPClientTestMixin.test_head_request": {
            "name": "test_head_request",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "SimpleHTTPClientTestMixin.test_header_reuse": {
            "name": "test_header_reuse",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "headers": [
                    "HTTPHeaders"
                ]
            }
        },
        "SimpleHTTPClientTestMixin.test_host_header": {
            "name": "test_host_header",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "HostnameMappingTestCase.test_hostname_mapping": {
            "name": "test_hostname_mapping",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "SimpleHTTPClientTestMixin.test_ipv6": {
            "name": "test_ipv6",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "url": [
                    "typing.Text"
                ]
            }
        },
        "MaxBodySizeTest.test_large_body": {
            "name": "test_large_body",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "MaxBufferSizeTest.test_large_body": {
            "name": "test_large_body",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "MaxHeaderSizeTest.test_large_headers": {
            "name": "test_large_headers",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "CreateAsyncHTTPClientTestCase.test_max_clients": {
            "name": "test_max_clients",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "SimpleHTTPClientTestMixin.test_max_redirects": {
            "name": "test_max_redirects",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "SimpleHTTPClientTestMixin.test_native_body_producer_chunked": {
            "name": "test_native_body_producer_chunked",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "SimpleHTTPClientTestMixin.test_native_body_producer_content_length": {
            "name": "test_native_body_producer_content_length",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "SimpleHTTPClientTestMixin.test_no_content": {
            "name": "test_no_content",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "SimpleHTTPClientTestMixin.test_no_content_length": {
            "name": "test_no_content_length",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "SimpleHTTPClientTestMixin.test_options_request": {
            "name": "test_options_request",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "HostnameMappingTestCase.test_port_mapping": {
            "name": "test_port_mapping",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "SimpleHTTPClientTestMixin.test_queue_timeout": {
            "name": "test_queue_timeout",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "SimpleHTTPClientTestMixin.test_redirect_connection_limit": {
            "name": "test_redirect_connection_limit",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "SimpleHTTPClientTestMixin.test_request_timeout": {
            "name": "test_request_timeout",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "timeout": [
                    "float"
                ],
                "timeout_min": [
                    "float"
                ],
                "timeout_max": [
                    "float"
                ]
            }
        },
        "ResolveTimeoutTestCase.test_resolve_timeout": {
            "name": "test_resolve_timeout",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "SimpleHTTPClientTestMixin.test_see_other_redirect": {
            "name": "test_see_other_redirect",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "code": [
                    "int"
                ]
            }
        },
        "SimpleHTTPClientTestMixin.test_singleton": {
            "name": "test_singleton",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "MaxBodySizeTest.test_small_body": {
            "name": "test_small_body",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "MaxHeaderSizeTest.test_small_headers": {
            "name": "test_small_headers",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "SimpleHTTPSClientTestCase.test_ssl_context": {
            "name": "test_ssl_context",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "SimpleHTTPSClientTestCase.test_ssl_context_handshake_fail": {
            "name": "test_ssl_context_handshake_fail",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "SimpleHTTPSClientTestCase.test_ssl_options": {
            "name": "test_ssl_options",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "SimpleHTTPSClientTestCase.test_ssl_options_handshake_fail": {
            "name": "test_ssl_options_handshake_fail",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "SimpleHTTPClientTestMixin.test_streaming_follow_redirects": {
            "name": "test_streaming_follow_redirects",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "headers": [
                    "list"
                ],
                "chunks": [
                    "list"
                ],
                "num_start_lines": [
                    "int"
                ]
            }
        },
        "SimpleHTTPClientTestMixin.test_sync_body_producer_chunked": {
            "name": "test_sync_body_producer_chunked",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "SimpleHTTPClientTestMixin.test_sync_body_producer_content_length": {
            "name": "test_sync_body_producer_content_length",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "SimpleHTTPClientTestMixin.xtest_multiple_content_length_accepted": {
            "name": "xtest_multiple_content_length_accepted",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        }
    },
    "tornado-5.0.2/tornado/test/stack_context_test.py": {
        "TestRequestHandler.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [],
                "request": []
            },
            "variables": {}
        },
        "StackContextTest.check_contexts": {
            "name": "check_contexts",
            "location": -1,
            "return": [
                "list"
            ],
            "arguments": {},
            "variables": {
                "exception_contexts": [
                    "list"
                ]
            }
        },
        "StackContextTest.context": {
            "name": "context",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {
                "name": []
            },
            "variables": {}
        },
        "StackContextTest.f1": {
            "name": "f1",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "c1": [
                    "StackContext"
                ]
            }
        },
        "StackContextTest.f2": {
            "name": "f2",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "c2": [
                    "StackContext"
                ]
            }
        },
        "StackContextTest.f3": {
            "name": "f3",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "c3": [
                    "StackContext"
                ]
            }
        },
        "StackContextTest.f4": {
            "name": "f4",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "StackContextTest.f5": {
            "name": "f5",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "StackContextTest.f": {
            "name": "f",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {
                "callback": [
                    "typing.Generator"
                ]
            }
        },
        "StackContextTest.final_callback": {
            "name": "final_callback",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestRequestHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "HTTPStackContextTest.get_app": {
            "name": "get_app",
            "location": -1,
            "return": [
                "Application"
            ],
            "arguments": {},
            "variables": {}
        },
        "global": {},
        "HTTPStackContextTest.handle_response": {
            "name": "handle_response",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "response": []
            },
            "variables": {}
        },
        "StackContextTest.library_function": {
            "name": "library_function",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "callback": []
            },
            "variables": {}
        },
        "StackContextTest.library_inner_callback": {
            "name": "library_inner_callback",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "callback": []
            },
            "variables": {}
        },
        "StackContextTest.make_wrapped_function": {
            "name": "make_wrapped_function",
            "location": -1,
            "return": [
                "tuple[list[StackContext]]"
            ],
            "arguments": {},
            "variables": {
                "c0": [
                    "StackContext"
                ],
                "c1": [
                    "StackContext"
                ],
                "c2": [
                    "StackContext"
                ]
            }
        },
        "TestRequestHandler.part2": {
            "name": "part2",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestRequestHandler.part3": {
            "name": "part3",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "StackContextTest.setUp": {
            "name": "setUp",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "active_contexts": [
                    "list"
                ]
            }
        },
        "StackContextTest.test_deactivate": {
            "name": "test_deactivate",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "deactivate_callbacks": [
                    "list"
                ]
            }
        },
        "StackContextTest.test_deactivate_order": {
            "name": "test_deactivate_order",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "StackContextTest.test_exit_library_context": {
            "name": "test_exit_library_context",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "StackContextTest.test_isolation_empty": {
            "name": "test_isolation_empty",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "StackContextTest.test_isolation_nonempty": {
            "name": "test_isolation_nonempty",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "StackContextTest.test_run_with_stack_context": {
            "name": "test_run_with_stack_context",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {}
        },
        "HTTPStackContextTest.test_stack_context": {
            "name": "test_stack_context",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "StackContextTest.test_yield_in_with": {
            "name": "test_yield_in_with",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "StackContextTest.test_yield_in_with_exception_stack_context": {
            "name": "test_yield_in_with_exception_stack_context",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "StackContextTest.test_yield_outside_with": {
            "name": "test_yield_outside_with",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {
                "cb": [
                    "typing.Generator"
                ]
            }
        },
        "StackContextTest.test_yield_outside_with_exception_stack_context": {
            "name": "test_yield_outside_with_exception_stack_context",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {
                "cb": [
                    "typing.Generator"
                ]
            }
        },
        "TestRequestHandler.write_error": {
            "name": "write_error",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "status_code": [],
                "kwargs": []
            },
            "variables": {}
        }
    },
    "tornado-5.0.2/tornado/test/tcpclient_test.py": {
        "ConnectorTest,FakeStream.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "closed": [
                    "bool"
                ]
            }
        },
        "TestTCPServer.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "family": []
            },
            "variables": {
                "streams": [
                    "list"
                ],
                "queue": [
                    "Queue"
                ]
            }
        },
        "ConnectorTest.assert_connector_streams_closed": {
            "name": "assert_connector_streams_closed",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "conn": []
            },
            "variables": {}
        },
        "ConnectorTest.assert_pending": {
            "name": "assert_pending",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "keys": []
            },
            "variables": {}
        },
        "ConnectorTest,FakeStream.close": {
            "name": "close",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "closed": [
                    "bool"
                ]
            }
        },
        "ConnectorTest.create_stream": {
            "name": "create_stream",
            "location": -1,
            "return": [
                "tuple[typing.Union[FakeStream,Future]]"
            ],
            "arguments": {
                "af": [],
                "addr": []
            },
            "variables": {
                "stream": [
                    "FakeStream"
                ],
                "future": [
                    "Future"
                ]
            }
        },
        "TCPClientTest.do_test_connect": {
            "name": "do_test_connect",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "family": [],
                "host": [],
                "source_ip": [
                    "None"
                ],
                "source_port": [
                    "None"
                ]
            },
            "variables": {
                "source_ip": [
                    "None"
                ],
                "source_port": [
                    "None"
                ],
                "stream": [
                    "typing.Generator"
                ],
                "server_stream": [
                    "typing.Generator"
                ],
                "data": [
                    "typing.Generator"
                ]
            }
        },
        "global": {},
        "TestTCPServer.handle_stream": {
            "name": "handle_stream",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "stream": [],
                "address": []
            },
            "variables": {}
        },
        "TCPClientTest,TimeoutResolver.resolve": {
            "name": "resolve",
            "location": -1,
            "return": [
                "Future"
            ],
            "arguments": {
                "kwargs": [],
                "args": []
            },
            "variables": {}
        },
        "ConnectorTest.resolve_connect": {
            "name": "resolve_connect",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "af": [],
                "addr": [],
                "success": []
            },
            "variables": {}
        },
        "ConnectorTest.setUp": {
            "name": "setUp",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "connect_futures": [
                    "dict"
                ],
                "streams": [
                    "dict"
                ],
                "AF1": [
                    "int"
                ],
                "AF2": [
                    "int"
                ],
                "addrinfo": [
                    "list[tuple[typing.Union[int,typing.Text]]]"
                ]
            }
        },
        "TCPClientTest.setUp": {
            "name": "setUp",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "server": [
                    "None"
                ],
                "client": [
                    "TCPClient"
                ]
            }
        },
        "TCPClientTest.skipIfLocalhostV4": {
            "name": "skipIfLocalhostV4",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "families": [
                    "set"
                ]
            }
        },
        "ConnectorTest.start_connect": {
            "name": "start_connect",
            "location": -1,
            "return": [
                "tuple[_Connector]"
            ],
            "arguments": {
                "addrinfo": []
            },
            "variables": {
                "conn": [
                    "_Connector"
                ]
            }
        },
        "TCPClientTest.start_server": {
            "name": "start_server",
            "location": -1,
            "return": [],
            "arguments": {
                "family": []
            },
            "variables": {
                "server": [
                    "TestTCPServer"
                ]
            }
        },
        "TestTCPServer.stop": {
            "name": "stop",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TCPClientTest.stop_server": {
            "name": "stop_server",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "server": [
                    "None"
                ]
            }
        },
        "ConnectorTest.tearDown": {
            "name": "tearDown",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TCPClientTest.tearDown": {
            "name": "tearDown",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "ConnectorTest.test_all_fail": {
            "name": "test_all_fail",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "AF1": [
                    "int"
                ],
                "AF2": [
                    "int"
                ]
            }
        },
        "TCPClientTest.test_connect_ipv4_dual": {
            "name": "test_connect_ipv4_dual",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TCPClientTest.test_connect_ipv4_ipv4": {
            "name": "test_connect_ipv4_ipv4",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TCPClientTest.test_connect_ipv6_dual": {
            "name": "test_connect_ipv6_dual",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TCPClientTest.test_connect_ipv6_ipv6": {
            "name": "test_connect_ipv6_ipv6",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TCPClientTest.test_connect_timeout": {
            "name": "test_connect_timeout",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {
                "timeout": [
                    "float"
                ]
            }
        },
        "TCPClientTest.test_connect_unspec_dual": {
            "name": "test_connect_unspec_dual",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TCPClientTest.test_connect_unspec_ipv4": {
            "name": "test_connect_unspec_ipv4",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TCPClientTest.test_connect_unspec_ipv6": {
            "name": "test_connect_unspec_ipv6",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "ConnectorTest.test_immediate_failure": {
            "name": "test_immediate_failure",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "AF1": [
                    "int"
                ]
            }
        },
        "ConnectorTest.test_immediate_success": {
            "name": "test_immediate_success",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "AF1": [
                    "int"
                ]
            }
        },
        "TestConnectorSplit.test_mixed": {
            "name": "test_mixed",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "AF1": [
                    "int"
                ],
                "AF2": [
                    "int"
                ]
            }
        },
        "TestConnectorSplit.test_one_family": {
            "name": "test_one_family",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "AF1": [
                    "int"
                ]
            }
        },
        "ConnectorTest.test_one_family_second_try": {
            "name": "test_one_family_second_try",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "AF1": [
                    "int"
                ]
            }
        },
        "ConnectorTest.test_one_family_second_try_after_connect_timeout": {
            "name": "test_one_family_second_try_after_connect_timeout",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "AF1": [
                    "int"
                ]
            }
        },
        "ConnectorTest.test_one_family_second_try_failure": {
            "name": "test_one_family_second_try_failure",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "AF1": [
                    "int"
                ]
            }
        },
        "ConnectorTest.test_one_family_second_try_failure_before_connect_timeout": {
            "name": "test_one_family_second_try_failure_before_connect_timeout",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "AF1": [
                    "int"
                ]
            }
        },
        "ConnectorTest.test_one_family_second_try_timeout": {
            "name": "test_one_family_second_try_timeout",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "AF1": [
                    "int"
                ]
            }
        },
        "ConnectorTest.test_one_family_success_before_connect_timeout": {
            "name": "test_one_family_success_before_connect_timeout",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "AF1": [
                    "int"
                ]
            }
        },
        "ConnectorTest.test_one_family_timeout_after_connect_timeout": {
            "name": "test_one_family_timeout_after_connect_timeout",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "AF1": [
                    "int"
                ]
            }
        },
        "TCPClientTest.test_refused_ipv4": {
            "name": "test_refused_ipv4",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {}
        },
        "TCPClientTest.test_source_ip_fail": {
            "name": "test_source_ip_fail",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TCPClientTest.test_source_ip_success": {
            "name": "test_source_ip_success",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TCPClientTest.test_source_port_fail": {
            "name": "test_source_port_fail",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "ConnectorTest.test_success_after_timeout": {
            "name": "test_success_after_timeout",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "AF1": [
                    "int"
                ],
                "AF2": [
                    "int"
                ]
            }
        },
        "ConnectorTest.test_two_families_immediate_failure": {
            "name": "test_two_families_immediate_failure",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "AF1": [
                    "int"
                ],
                "AF2": [
                    "int"
                ]
            }
        },
        "ConnectorTest.test_two_families_timeout": {
            "name": "test_two_families_timeout",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "AF1": [
                    "int"
                ],
                "AF2": [
                    "int"
                ]
            }
        },
        "ConnectorTest.test_two_family_success_after_timeout": {
            "name": "test_two_family_success_after_timeout",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "AF1": [
                    "int"
                ],
                "AF2": [
                    "int"
                ]
            }
        },
        "ConnectorTest.test_two_family_timeout_after_connect_timeout": {
            "name": "test_two_family_timeout_after_connect_timeout",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "AF1": [
                    "int"
                ]
            }
        },
        "ConnectorTest.test_two_family_timeout_before_connect_timeout": {
            "name": "test_two_family_timeout_before_connect_timeout",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "AF1": [
                    "int"
                ],
                "AF2": [
                    "int"
                ]
            }
        }
    },
    "tornado-5.0.2/tornado/test/tcpserver_test.py": {
        "TCPServerTest.connect": {
            "name": "connect",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {
                "c": []
            },
            "variables": {}
        },
        "global": {},
        "TCPServerTest,TestServer.handle_stream": {
            "name": "handle_stream",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {
                "stream": [],
                "address": []
            },
            "variables": {}
        },
        "TestMultiprocess.run_subproc": {
            "name": "run_subproc",
            "location": -1,
            "return": [],
            "arguments": {
                "code": []
            },
            "variables": {}
        },
        "TestMultiprocess.test_advanced": {
            "name": "test_advanced",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TCPServerTest.test_handle_stream_coroutine_logging": {
            "name": "test_handle_stream_coroutine_logging",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {
                "server": [
                    "None",
                    "TestServer"
                ],
                "client": [
                    "None",
                    "IOStream"
                ]
            }
        },
        "TCPServerTest.test_handle_stream_native_coroutine": {
            "name": "test_handle_stream_native_coroutine",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {
                "client": [
                    "IOStream"
                ],
                "result": [
                    "typing.Generator"
                ]
            }
        },
        "TestMultiprocess.test_simple": {
            "name": "test_simple",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestMultiprocess.test_single": {
            "name": "test_single",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TCPServerTest.test_stop_in_callback": {
            "name": "test_stop_in_callback",
            "location": -1,
            "return": [
                "typing.Generator[list]"
            ],
            "arguments": {},
            "variables": {
                "server": [
                    "TestServer"
                ],
                "server_addr": [
                    "tuple[typing.Text]"
                ],
                "N": [
                    "int"
                ],
                "clients": [
                    "list[IOStream]"
                ],
                "connected_clients": [
                    "list"
                ],
                "c": [
                    "IOStream"
                ]
            }
        },
        "TCPServerTest.test_stop_twice": {
            "name": "test_stop_twice",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "server": [
                    "TCPServer"
                ]
            }
        }
    },
    "tornado-5.0.2/tornado/test/template_test.py": {
        "global": {},
        "StackTraceTest.load_generate": {
            "name": "load_generate",
            "location": -1,
            "return": [],
            "arguments": {
                "path": [],
                "kwargs": []
            },
            "variables": {}
        },
        "AutoEscapeTest.py_escape": {
            "name": "py_escape",
            "location": -1,
            "return": [
                "str"
            ],
            "arguments": {
                "s": []
            },
            "variables": {}
        },
        "AutoEscapeTest.render": {
            "name": "render",
            "location": -1,
            "return": [],
            "arguments": {
                "name": []
            },
            "variables": {}
        },
        "AutoEscapeTest.setUp": {
            "name": "setUp",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "templates": [
                    "dict[typing.Text, typing.Text]"
                ]
            }
        },
        "TemplateLoaderTest.setUp": {
            "name": "setUp",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "loader": [
                    "Loader"
                ]
            }
        },
        "TemplateTest.test_apply": {
            "name": "test_apply",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "template": [
                    "Template"
                ]
            }
        },
        "TemplateTest.test_break_continue": {
            "name": "test_break_continue",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "template": [
                    "Template"
                ],
                "result": [
                    "bytes"
                ]
            }
        },
        "TemplateTest.test_break_in_apply": {
            "name": "test_break_in_apply",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TemplateTest.test_break_outside_loop": {
            "name": "test_break_outside_loop",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TemplateTest.test_bytes": {
            "name": "test_bytes",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "template": [
                    "Template"
                ]
            }
        },
        "TemplateTest.test_bytes_apply": {
            "name": "test_bytes_apply",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "template": [
                    "Template"
                ]
            }
        },
        "TemplateTest.test_comment": {
            "name": "test_comment",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "template": [
                    "Template"
                ]
            }
        },
        "TemplateTest.test_comment_directive": {
            "name": "test_comment_directive",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "template": [
                    "Template"
                ]
            }
        },
        "AutoEscapeTest.test_custom_escape": {
            "name": "test_custom_escape",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "loader": [
                    "DictLoader"
                ]
            }
        },
        "TemplateTest.test_custom_namespace": {
            "name": "test_custom_namespace",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "loader": [
                    "DictLoader"
                ]
            }
        },
        "ParseErrorDetailTest.test_custom_parse_error": {
            "name": "test_custom_parse_error",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "AutoEscapeTest.test_default_off": {
            "name": "test_default_off",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "loader": [
                    "DictLoader"
                ],
                "name": [
                    "typing.Text"
                ]
            }
        },
        "AutoEscapeTest.test_default_on": {
            "name": "test_default_on",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "loader": [
                    "DictLoader"
                ],
                "name": [
                    "typing.Text"
                ]
            }
        },
        "ParseErrorDetailTest.test_details": {
            "name": "test_details",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "loader": [
                    "DictLoader"
                ]
            }
        },
        "StackTraceTest.test_error_line_number_directive": {
            "name": "test_error_line_number_directive",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "loader": [
                    "DictLoader"
                ]
            }
        },
        "StackTraceTest.test_error_line_number_expression": {
            "name": "test_error_line_number_expression",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "loader": [
                    "DictLoader"
                ]
            }
        },
        "StackTraceTest.test_error_line_number_extends_base_error": {
            "name": "test_error_line_number_extends_base_error",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "loader": [
                    "DictLoader"
                ]
            }
        },
        "StackTraceTest.test_error_line_number_extends_sub_error": {
            "name": "test_error_line_number_extends_sub_error",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "loader": [
                    "DictLoader"
                ]
            }
        },
        "StackTraceTest.test_error_line_number_include": {
            "name": "test_error_line_number_include",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "loader": [
                    "DictLoader"
                ]
            }
        },
        "StackTraceTest.test_error_line_number_module": {
            "name": "test_error_line_number_module",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "loader": [
                    "None",
                    "DictLoader"
                ]
            }
        },
        "TemplateTest.test_escaping": {
            "name": "test_escaping",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TemplateTest.test_expressions": {
            "name": "test_expressions",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "template": [
                    "Template"
                ]
            }
        },
        "AutoEscapeTest.test_extended_block": {
            "name": "test_extended_block",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "loader": [
                    "DictLoader"
                ]
            }
        },
        "TemplateTest.test_extends": {
            "name": "test_extends",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "loader": [
                    "DictLoader"
                ]
            }
        },
        "TemplateTest.test_if": {
            "name": "test_if",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "template": [
                    "Template"
                ]
            }
        },
        "TemplateTest.test_if_empty_body": {
            "name": "test_if_empty_body",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "template": [
                    "Template"
                ]
            }
        },
        "TemplateTest.test_include": {
            "name": "test_include",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "loader": [
                    "DictLoader"
                ]
            }
        },
        "AutoEscapeTest.test_manual_minimize_whitespace": {
            "name": "test_manual_minimize_whitespace",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "loader": [
                    "DictLoader"
                ]
            }
        },
        "StackTraceTest.test_multi_includes": {
            "name": "test_multi_includes",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "loader": [
                    "DictLoader"
                ]
            }
        },
        "TemplateTest.test_no_inherit_future": {
            "name": "test_no_inherit_future",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "template": [
                    "Template"
                ]
            }
        },
        "TemplateTest.test_non_ascii_name": {
            "name": "test_non_ascii_name",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "loader": [
                    "DictLoader"
                ]
            }
        },
        "AutoEscapeTest.test_raw_expression": {
            "name": "test_raw_expression",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "loader": [
                    "DictLoader"
                ]
            }
        },
        "TemplateTest.test_relative_load": {
            "name": "test_relative_load",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "loader": [
                    "DictLoader"
                ]
            }
        },
        "TemplateTest.test_simple": {
            "name": "test_simple",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "template": [
                    "Template"
                ]
            }
        },
        "TemplateTest.test_try": {
            "name": "test_try",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "template": [
                    "Template"
                ]
            }
        },
        "AutoEscapeTest.test_unextended_block": {
            "name": "test_unextended_block",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "loader": [
                    "DictLoader"
                ],
                "name": [
                    "typing.Text"
                ]
            }
        },
        "TemplateTest.test_unicode_apply": {
            "name": "test_unicode_apply",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "template": [
                    "Template"
                ]
            }
        },
        "TemplateTest.test_unicode_literal_expression": {
            "name": "test_unicode_literal_expression",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "template": [
                    "Template"
                ]
            }
        },
        "TemplateTest.test_unicode_template": {
            "name": "test_unicode_template",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "template": [
                    "Template"
                ]
            }
        },
        "TemplateLoaderTest.test_utf8_in_file": {
            "name": "test_utf8_in_file",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "AutoEscapeTest.test_whitespace_by_filename": {
            "name": "test_whitespace_by_filename",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "loader": [
                    "DictLoader"
                ]
            }
        },
        "AutoEscapeTest.test_whitespace_by_loader": {
            "name": "test_whitespace_by_loader",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "templates": [
                    "dict[typing.Text, typing.Text]"
                ],
                "loader": [
                    "DictLoader"
                ]
            }
        },
        "AutoEscapeTest.test_whitespace_directive": {
            "name": "test_whitespace_directive",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "loader": [
                    "DictLoader"
                ]
            }
        },
        "TemplateTest.upper": {
            "name": "upper",
            "location": -1,
            "return": [],
            "arguments": {
                "s": []
            },
            "variables": {}
        }
    },
    "tornado-5.0.2/tornado/test/testing_test.py": {
        "AsyncTestCaseTest.fail": {
            "name": "fail",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "message": []
            },
            "variables": {}
        },
        "AsyncHTTPTestCaseTest.get_app": {
            "name": "get_app",
            "location": -1,
            "return": [
                "Application"
            ],
            "arguments": {},
            "variables": {}
        },
        "GetNewIOLoopTest.get_new_ioloop": {
            "name": "get_new_ioloop",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "global": {},
        "GenTest.setUp": {
            "name": "setUp",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "finished": [
                    "bool"
                ]
            }
        },
        "GetNewIOLoopTest.setUp": {
            "name": "setUp",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "asyncio": [
                    "None"
                ]
            }
        },
        "SetUpTearDownTest,SetUpTearDown.setUp": {
            "name": "setUp",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "AsyncHTTPTestCaseTest.setUpClass": {
            "name": "setUpClass",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            },
            "variables": {}
        },
        "set_environ": {
            "name": "set_environ",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {
                "name": [],
                "value": []
            },
            "variables": {
                "old_value": [
                    "None"
                ]
            }
        },
        "GenTest.tearDown": {
            "name": "tearDown",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "GetNewIOLoopTest.tearDown": {
            "name": "tearDown",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "asyncio": [
                    "None"
                ]
            }
        },
        "SetUpTearDownTest,SetUpTearDown.tearDown": {
            "name": "tearDown",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "AsyncHTTPTestCaseTest.tearDownClass": {
            "name": "tearDownClass",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            },
            "variables": {}
        },
        "GenTest.test": {
            "name": "test",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {}
        },
        "SetUpTearDownTest,InheritBoth.test": {
            "name": "test",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "GenTest.test_async": {
            "name": "test_async",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {
                "finished": [
                    "bool"
                ]
            }
        },
        "AsyncTestCaseTest.test_exception_in_callback": {
            "name": "test_exception_in_callback",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "AsyncHTTPTestCaseTest.test_fetch_full_http_url": {
            "name": "test_fetch_full_http_url",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "path": [
                    "typing.Text"
                ]
            }
        },
        "AsyncHTTPTestCaseTest.test_fetch_full_https_url": {
            "name": "test_fetch_full_https_url",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "path": [
                    "typing.Text"
                ]
            }
        },
        "AsyncHTTPTestCaseTest.test_fetch_segment": {
            "name": "test_fetch_segment",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "path": [
                    "typing.Text"
                ]
            }
        },
        "AsyncTestCaseWrapperTest,Test.test_gen": {
            "name": "test_gen",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {}
        },
        "GenTest.test_long_timeout": {
            "name": "test_long_timeout",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {}
        },
        "GetNewIOLoopTest.test_loop": {
            "name": "test_loop",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "AsyncTestCaseTest.test_multiple_errors": {
            "name": "test_multiple_errors",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "GenTest.test_native_coroutine": {
            "name": "test_native_coroutine",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "GenTest.test_native_coroutine_timeout": {
            "name": "test_native_coroutine_timeout",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "finished": [
                    "bool"
                ]
            }
        },
        "GenTest.test_no_timeout": {
            "name": "test_no_timeout",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "finished": [
                    "bool"
                ]
            }
        },
        "GenTest.test_no_timeout_environment_variable": {
            "name": "test_no_timeout_environment_variable",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "finished": [
                    "bool"
                ]
            }
        },
        "AsyncTestCaseWrapperTest.test_other_return": {
            "name": "test_other_return",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "test": [
                    "Test"
                ]
            }
        },
        "AsyncTestCaseWrapperTest,Test.test_other_return": {
            "name": "test_other_return",
            "location": -1,
            "return": [
                "int"
            ],
            "arguments": {},
            "variables": {}
        },
        "SetUpTearDownTest.test_set_up_tear_down": {
            "name": "test_set_up_tear_down",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "events": [
                    "list"
                ],
                "expected": [
                    "list[typing.Text]"
                ]
            }
        },
        "GenTest.test_short_timeout": {
            "name": "test_short_timeout",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {}
        },
        "AsyncTestCaseTest.test_subsequent_wait_calls": {
            "name": "test_subsequent_wait_calls",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "GenTest.test_sync": {
            "name": "test_sync",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "finished": [
                    "bool"
                ]
            }
        },
        "GenTest.test_timeout": {
            "name": "test_timeout",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "finished": [
                    "bool"
                ]
            }
        },
        "GenTest.test_timeout_environment_variable": {
            "name": "test_timeout_environment_variable",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "finished": [
                    "bool"
                ]
            }
        },
        "AsyncTestCaseWrapperTest.test_undecorated_coroutine": {
            "name": "test_undecorated_coroutine",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "AsyncTestCaseWrapperTest.test_undecorated_generator": {
            "name": "test_undecorated_generator",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "test": [
                    "Test"
                ]
            }
        },
        "AsyncTestCaseWrapperTest.test_undecorated_generator_with_skip": {
            "name": "test_undecorated_generator_with_skip",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "test": [
                    "Test"
                ]
            }
        },
        "AsyncTestCaseTest.test_wait_timeout": {
            "name": "test_wait_timeout",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "GenTest.test_with_args": {
            "name": "test_with_args",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {
                "args": []
            },
            "variables": {}
        },
        "GenTest.test_with_kwargs": {
            "name": "test_with_kwargs",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {
                "kwargs": []
            },
            "variables": {}
        },
        "GenTest.test_with_method_args": {
            "name": "test_with_method_args",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "finished": [
                    "bool"
                ]
            }
        },
        "GenTest.test_with_method_kwargs": {
            "name": "test_with_method_kwargs",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "finished": [
                    "bool"
                ]
            }
        }
    },
    "tornado-5.0.2/tornado/test/twisted_test.py": {
        "CompatibilityTests,Accumulator.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "finished": []
            },
            "variables": {}
        },
        "Reader.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "fd": [],
                "callback": []
            },
            "variables": {}
        },
        "Writer.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "fd": [],
                "callback": []
            },
            "variables": {}
        },
        "ReactorCallFromThreadTest._fnCalledFromThread": {
            "name": "_fnCalledFromThread",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "ReactorCallInThread._fnCalledInThread": {
            "name": "_fnCalledInThread",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "kwargs": [],
                "args": []
            },
            "variables": {}
        },
        "ReactorCallFromThreadTest._newThreadRun": {
            "name": "_newThreadRun",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "ReactorReaderWriterTest._set_nonblocking": {
            "name": "_set_nonblocking",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "fd": []
            },
            "variables": {}
        },
        "ReactorReaderWriterTest._testNoWriter": {
            "name": "_testNoWriter",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "_reader": [
                    "Reader"
                ],
                "_writer": [
                    "Writer"
                ]
            }
        },
        "ReactorReaderWriterTest._testReadWrite": {
            "name": "_testReadWrite",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "shouldWrite": [
                    "bool"
                ],
                "_reader": [
                    "Reader"
                ],
                "_writer": [
                    "Writer"
                ]
            }
        },
        "ReactorCallFromThreadTest._whenRunningCallback": {
            "name": "_whenRunningCallback",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "ReactorCallInThread._whenRunningCallback": {
            "name": "_whenRunningCallback",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "ReactorWhenRunningTest.anotherWhenRunningCallback": {
            "name": "anotherWhenRunningCallback",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "_anotherWhenRunningCalled": [
                    "bool"
                ]
            }
        },
        "TornadoTest.buildReactor": {
            "name": "buildReactor",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "ReactorTwoCallLaterTest.callLaterCallback1": {
            "name": "callLaterCallback1",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "_later1Called": [
                    "bool"
                ]
            }
        },
        "ReactorTwoCallLaterTest.callLaterCallback2": {
            "name": "callLaterCallback2",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "_later2Called": [
                    "bool"
                ]
            }
        },
        "ReactorCallLaterTest.callLaterCallback": {
            "name": "callLaterCallback",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "_laterCalled": [
                    "bool"
                ]
            }
        },
        "CompatibilityTests.callback": {
            "name": "callback",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "response": []
            },
            "variables": {}
        },
        "ReactorReaderWriterTest.checkReadInput": {
            "name": "checkReadInput",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "fd": []
            },
            "variables": {}
        },
        "LayeredTwistedIOLoop.close": {
            "name": "close",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "all_fds": [
                    "bool"
                ]
            },
            "variables": {
                "all_fds": [
                    "bool"
                ]
            }
        },
        "Reader.close": {
            "name": "close",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "Writer.close": {
            "name": "close",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "CompatibilityTests,Accumulator.connectionLost": {
            "name": "connectionLost",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "reason": []
            },
            "variables": {}
        },
        "Reader.connectionLost": {
            "name": "connectionLost",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "reason": []
            },
            "variables": {}
        },
        "Writer.connectionLost": {
            "name": "connectionLost",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "reason": []
            },
            "variables": {}
        },
        "CompatibilityTests,Accumulator.dataReceived": {
            "name": "dataReceived",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "data": []
            },
            "variables": {}
        },
        "Reader.doRead": {
            "name": "doRead",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "Writer.doWrite": {
            "name": "doWrite",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "CompatibilityTests.f": {
            "name": "f",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "client": [
                    "Agent"
                ],
                "response": [
                    "typing.Generator"
                ]
            }
        },
        "LayeredTwistedIOLoop.f": {
            "name": "f",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "Reader.fileno": {
            "name": "fileno",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "Writer.fileno": {
            "name": "fileno",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "TornadoTest.flushWarnings": {
            "name": "flushWarnings",
            "location": -1,
            "return": [
                "list"
            ],
            "arguments": {
                "kwargs": [],
                "args": []
            },
            "variables": {
                "filtered": [
                    "list"
                ]
            }
        },
        "ConvertDeferredTest.fn": {
            "name": "fn",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {}
        },
        "CompatibilityTests,HelloHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "global": {},
        "LayeredTwistedIOLoop.initialize": {
            "name": "initialize",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "kwargs": []
            },
            "variables": {
                "real_io_loop": [
                    "PollIOLoop"
                ]
            }
        },
        "Reader.logPrefix": {
            "name": "logPrefix",
            "location": -1,
            "return": [
                "typing.Text"
            ],
            "arguments": {},
            "variables": {}
        },
        "Writer.logPrefix": {
            "name": "logPrefix",
            "location": -1,
            "return": [
                "typing.Text"
            ],
            "arguments": {},
            "variables": {}
        },
        "make_test_subclass": {
            "name": "make_test_subclass",
            "location": -1,
            "return": [
                "TornadoTest"
            ],
            "arguments": {
                "test_class": []
            },
            "variables": {
                "_reactors": [
                    "list[typing.Text]"
                ]
            }
        },
        "Reader.readConnectionLost": {
            "name": "readConnectionLost",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "reason": []
            },
            "variables": {}
        },
        "CompatibilityTests,HelloResource.render_GET": {
            "name": "render_GET",
            "location": -1,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "request": []
            },
            "variables": {}
        },
        "restore_signal_handlers": {
            "name": "restore_signal_handlers",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "saved": []
            },
            "variables": {}
        },
        "CompatibilityTests.run_ioloop": {
            "name": "run_ioloop",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "CompatibilityTests.run_reactor": {
            "name": "run_reactor",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "save_signal_handlers": {
            "name": "save_signal_handlers",
            "location": -1,
            "return": [
                "dict"
            ],
            "arguments": {},
            "variables": {
                "saved": [
                    "dict"
                ]
            }
        },
        "CompatibilityTests.setUp": {
            "name": "setUp",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "io_loop": [
                    "IOLoop"
                ],
                "reactor": [
                    "TornadoReactor"
                ]
            }
        },
        "ReactorCallFromThreadTest.setUp": {
            "name": "setUp",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "ReactorCallInThread.setUp": {
            "name": "setUp",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "ReactorReaderWriterTest.setUp": {
            "name": "setUp",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "ReactorTestCase.setUp": {
            "name": "setUp",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "_io_loop": [
                    "IOLoop"
                ],
                "_reactor": [
                    "TornadoReactor"
                ]
            }
        },
        "TornadoTest.setUp": {
            "name": "setUp",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "CompatibilityTests.shutdown": {
            "name": "shutdown",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "failure": []
            },
            "variables": {
                "failure": [
                    "None"
                ]
            }
        },
        "CompatibilityTests.start_tornado_server": {
            "name": "start_tornado_server",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "app": [
                    "Application"
                ],
                "server": [
                    "HTTPServer"
                ]
            }
        },
        "CompatibilityTests.start_twisted_server": {
            "name": "start_twisted_server",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "isLeaf": [
                    "bool"
                ],
                "site": [
                    "Site"
                ]
            }
        },
        "LayeredTwistedIOLoop.stop": {
            "name": "stop",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "ReactorReaderWriterTest.stopTest": {
            "name": "stopTest",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "CompatibilityTests.tearDown": {
            "name": "tearDown",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "ReactorCallFromThreadTest.tearDown": {
            "name": "tearDown",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "ReactorReaderWriterTest.tearDown": {
            "name": "tearDown",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "ReactorTestCase.tearDown": {
            "name": "tearDown",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TornadoTest.tearDown": {
            "name": "tearDown",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "ReactorCallFromThreadTest.testCallFromThread": {
            "name": "testCallFromThread",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "ReactorCallInThread.testCallInThread": {
            "name": "testCallInThread",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "ReactorReaderWriterTest.testNoWriter": {
            "name": "testNoWriter",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "ReactorReaderWriterTest.testReadWrite": {
            "name": "testReadWrite",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "CompatibilityTests.testTornadoServerTwistedClientIOLoop": {
            "name": "testTornadoServerTwistedClientIOLoop",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "CompatibilityTests.testTornadoServerTwistedClientReactor": {
            "name": "testTornadoServerTwistedClientReactor",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "CompatibilityTests.testTornadoServerTwistedCoroutineClientIOLoop": {
            "name": "testTornadoServerTwistedCoroutineClientIOLoop",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "CompatibilityTests.testTwistedServerTornadoClientIOLoop": {
            "name": "testTwistedServerTornadoClientIOLoop",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "CompatibilityTests.testTwistedServerTornadoClientReactor": {
            "name": "testTwistedServerTornadoClientReactor",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "ReactorCallLaterTest.test_callLater": {
            "name": "test_callLater",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "_laterCalled": [
                    "bool"
                ],
                "_timeout": [
                    "float"
                ]
            }
        },
        "ReactorTwoCallLaterTest.test_callLater": {
            "name": "test_callLater",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "_later1Called": [
                    "bool"
                ],
                "_later2Called": [
                    "bool"
                ],
                "_timeout1": [
                    "float"
                ],
                "_timeout2": [
                    "float"
                ]
            }
        },
        "ConvertDeferredTest.test_failure": {
            "name": "test_failure",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "ConvertDeferredTest.test_success": {
            "name": "test_success",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "ReactorWhenRunningTest.test_whenRunning": {
            "name": "test_whenRunning",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "_whenRunningCalled": [
                    "bool"
                ],
                "_anotherWhenRunningCalled": [
                    "bool"
                ]
            }
        },
        "CompatibilityTests.tornado_fetch": {
            "name": "tornado_fetch",
            "location": -1,
            "return": [],
            "arguments": {
                "url": [],
                "runner": []
            },
            "variables": {
                "responses": [
                    "list"
                ],
                "client": [
                    "AsyncHTTPClient"
                ]
            }
        },
        "CompatibilityTests.twisted_coroutine_fetch": {
            "name": "twisted_coroutine_fetch",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "url": [],
                "runner": []
            },
            "variables": {
                "body": [
                    "list[None]"
                ]
            }
        },
        "CompatibilityTests.twisted_fetch": {
            "name": "twisted_fetch",
            "location": -1,
            "return": [
                "str"
            ],
            "arguments": {
                "url": [],
                "runner": []
            },
            "variables": {
                "chunks": [
                    "list"
                ],
                "client": [
                    "Agent"
                ]
            }
        },
        "TornadoTest.unbuildReactor": {
            "name": "unbuildReactor",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "reactor": []
            },
            "variables": {}
        },
        "ReactorWhenRunningTest.whenRunningCallback": {
            "name": "whenRunningCallback",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "_whenRunningCalled": [
                    "bool"
                ]
            }
        },
        "ReactorReaderWriterTest.writeOnce": {
            "name": "writeOnce",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "fd": []
            },
            "variables": {
                "shouldWrite": [
                    "bool"
                ]
            }
        }
    },
    "tornado-5.0.2/tornado/test/util.py": {
        "_detect_ipv6": {
            "name": "_detect_ipv6",
            "location": -1,
            "return": [
                "bool"
            ],
            "arguments": {},
            "variables": {
                "sock": [
                    "None"
                ]
            }
        },
        "exec_test": {
            "name": "exec_test",
            "location": -1,
            "return": [
                "dict"
            ],
            "arguments": {
                "caller_globals": [],
                "caller_locals": [],
                "s": []
            },
            "variables": {
                "local_namespace": [
                    "dict"
                ]
            }
        },
        "global": {},
        "refusing_port": {
            "name": "refusing_port",
            "location": -1,
            "return": [
                "tuple"
            ],
            "arguments": {},
            "variables": {}
        },
        "subTest": {
            "name": "subTest",
            "location": -1,
            "return": [],
            "arguments": {
                "test": [],
                "kwargs": [],
                "args": []
            },
            "variables": {}
        }
    },
    "tornado-5.0.2/tornado/test/util_test.py": {
        "RaiseExcInfoTest,TwoArgException.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "a": [],
                "b": []
            },
            "variables": {}
        },
        "ConfigurableTest.checkSubclasses": {
            "name": "checkSubclasses",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "obj": [
                    "TestConfig1",
                    "TestConfig2"
                ]
            }
        },
        "TestConfig3.configurable_base": {
            "name": "configurable_base",
            "location": -1,
            "return": [
                "TestConfig3"
            ],
            "arguments": {
                "cls": []
            },
            "variables": {}
        },
        "TestConfigurable.configurable_base": {
            "name": "configurable_base",
            "location": -1,
            "return": [
                "TestConfigurable"
            ],
            "arguments": {
                "cls": []
            },
            "variables": {}
        },
        "TestConfig3.configurable_default": {
            "name": "configurable_default",
            "location": -1,
            "return": [],
            "arguments": {
                "cls": []
            },
            "variables": {}
        },
        "TestConfigurable.configurable_default": {
            "name": "configurable_default",
            "location": -1,
            "return": [],
            "arguments": {
                "cls": []
            },
            "variables": {}
        },
        "ArgReplacerTest.function": {
            "name": "function",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "x": [],
                "y": [],
                "callback": [
                    "None"
                ],
                "z": [
                    "None"
                ]
            },
            "variables": {}
        },
        "global": {},
        "TestConfig1.initialize": {
            "name": "initialize",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "pos_arg": [
                    "None"
                ],
                "a": [
                    "None"
                ]
            },
            "variables": {
                "a": [
                    "None"
                ],
                "pos_arg": [
                    "None"
                ]
            }
        },
        "TestConfig2.initialize": {
            "name": "initialize",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "pos_arg": [
                    "None"
                ],
                "b": [
                    "None"
                ]
            },
            "variables": {
                "b": [
                    "None"
                ],
                "pos_arg": [
                    "None"
                ]
            }
        },
        "TestConfig3A.initialize": {
            "name": "initialize",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "a": [
                    "None"
                ]
            },
            "variables": {
                "a": [
                    "None"
                ]
            }
        },
        "TestConfig3B.initialize": {
            "name": "initialize",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "b": [
                    "None"
                ]
            },
            "variables": {
                "b": [
                    "None"
                ]
            }
        },
        "ArgReplacerTest.setUp": {
            "name": "setUp",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "replacer": [
                    "ArgReplacer"
                ]
            }
        },
        "ConfigurableTest.setUp": {
            "name": "setUp",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "ConfigurableTest.tearDown": {
            "name": "tearDown",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "IsFinalizingTest.test_basic": {
            "name": "test_basic",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "ConfigurableTest.test_config_args": {
            "name": "test_config_args",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "obj": [
                    "TestConfigurable",
                    "TestConfig1"
                ]
            }
        },
        "ConfigurableTest.test_config_class": {
            "name": "test_config_class",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "obj": [
                    "TestConfigurable"
                ]
            }
        },
        "ConfigurableTest.test_config_class_args": {
            "name": "test_config_class_args",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "obj": [
                    "TestConfigurable",
                    "TestConfig2"
                ]
            }
        },
        "ConfigurableTest.test_config_inner_level": {
            "name": "test_config_inner_level",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "obj": [
                    "TestConfig3",
                    "TestConfigurable"
                ]
            }
        },
        "ConfigurableTest.test_config_multi_level": {
            "name": "test_config_multi_level",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "obj": [
                    "TestConfigurable"
                ]
            }
        },
        "ConfigurableTest.test_default": {
            "name": "test_default",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "obj": [
                    "TestConfigurable"
                ]
            }
        },
        "ImportObjectTest.test_import_member": {
            "name": "test_import_member",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "ImportObjectTest.test_import_member_unicode": {
            "name": "test_import_member_unicode",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "ImportObjectTest.test_import_module": {
            "name": "test_import_module",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "ImportObjectTest.test_import_module_unicode": {
            "name": "test_import_module_unicode",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "ArgReplacerTest.test_keyword": {
            "name": "test_keyword",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "args": [
                    "tuple[int]"
                ]
            }
        },
        "ExecInTest.test_no_inherit_future": {
            "name": "test_no_inherit_future",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "f": [
                    "StringIO"
                ]
            }
        },
        "ArgReplacerTest.test_omitted": {
            "name": "test_omitted",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "args": [
                    "tuple[int]"
                ],
                "kwargs": [
                    "dict"
                ]
            }
        },
        "ArgReplacerTest.test_position": {
            "name": "test_position",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "args": [
                    "tuple[typing.Union[int,typing.Text]]"
                ],
                "kwargs": [
                    "dict"
                ]
            }
        },
        "ReUnescapeTest.test_re_unescape": {
            "name": "test_re_unescape",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "test_strings": [
                    "tuple[typing.Text]"
                ],
                "string": [
                    "typing.Text"
                ]
            }
        },
        "ReUnescapeTest.test_re_unescape_raises_error_on_invalid_input": {
            "name": "test_re_unescape_raises_error_on_invalid_input",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TimedeltaToSecondsTest.test_timedelta_to_seconds": {
            "name": "test_timedelta_to_seconds",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "RaiseExcInfoTest.test_two_arg_exception": {
            "name": "test_two_arg_exception",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "e": [
                    "Exception"
                ]
            }
        },
        "UnicodeLiteralTest.test_unicode_escapes": {
            "name": "test_unicode_escapes",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        }
    },
    "tornado-5.0.2/tornado/test/web_test.py": {
        "CookieTestRequestHandler.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "cookie_secret": [
                    "typing.Text"
                ],
                "key_version": [
                    "None"
                ]
            },
            "variables": {
                "_cookies": [
                    "dict"
                ],
                "key_version": [
                    "None"
                ],
                "cookie_secret": [
                    "typing.Text"
                ],
                "application": [
                    "ObjectDict"
                ]
            }
        },
        "CacheTest._test_etag": {
            "name": "_test_etag",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "computed_etag": [],
                "etags": [],
                "status_code": []
            },
            "variables": {}
        },
        "StaticFileTest._trigger_include_host_check": {
            "name": "_trigger_include_host_check",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "include_host": []
            },
            "variables": {
                "path": [
                    "typing.Text"
                ]
            }
        },
        "GzipTestCase.assert_compressed": {
            "name": "assert_compressed",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "response": []
            },
            "variables": {}
        },
        "BaseStreamingRequestFlowControlTest.body_producer": {
            "name": "body_producer",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {
                "write": []
            },
            "variables": {}
        },
        "TypeCheckHandler.check_type": {
            "name": "check_type",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [],
                "obj": [],
                "expected_type": []
            },
            "variables": {
                "actual_type": [
                    "typing.Type"
                ]
            }
        },
        "CacheTest,EtagHandler.compute_etag": {
            "name": "compute_etag",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "StreamingRequestBodyTest.connect": {
            "name": "connect",
            "location": -1,
            "return": [
                "IOStream"
            ],
            "arguments": {
                "url": [],
                "connection_close": []
            },
            "variables": {
                "stream": [
                    "IOStream"
                ]
            }
        },
        "XSRFTest.cookie_headers": {
            "name": "cookie_headers",
            "location": -1,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "token": [
                    "None"
                ]
            },
            "variables": {
                "token": [
                    "None"
                ]
            }
        },
        "DecoratedStreamingRequestFlowControlTest,DecoratedFlowControlHandler.data_received": {
            "name": "data_received",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {
                "data": []
            },
            "variables": {}
        },
        "StreamingRequestBodyTest,StreamingBodyHandler.data_received": {
            "name": "data_received",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "data": []
            },
            "variables": {}
        },
        "DecodeArgHandler.decode_argument": {
            "name": "decode_argument",
            "location": -1,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "value": [],
                "name": [
                    "None"
                ]
            },
            "variables": {
                "value": [
                    "bytes"
                ]
            }
        },
        "DecodeArgHandler.describe": {
            "name": "describe",
            "location": -1,
            "return": [
                "list[typing.Text]",
                "list[typing.Union[typing.Text,unicode_type]]"
            ],
            "arguments": {
                "s": []
            },
            "variables": {
                "s": [
                    "bytes",
                    "unicode_type"
                ]
            }
        },
        "RequestEncodingTest.fetch_json": {
            "name": "fetch_json",
            "location": -1,
            "return": [],
            "arguments": {
                "path": []
            },
            "variables": {}
        },
        "WSGISafeWebTest.fetch_json": {
            "name": "fetch_json",
            "location": -1,
            "return": [],
            "arguments": {
                "kwargs": [],
                "args": []
            },
            "variables": {}
        },
        "AuthRedirectRequestHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "BuggyLoggingTest,Handler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "CacheTest,EtagHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "computed_etag": []
            },
            "variables": {}
        },
        "ClearAllCookiesTest,Handler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "ClearHeaderTest,Handler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "ClientCloseTest,Handler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "ConnectionCloseHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "CookieTest,GetCookieHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "CookieTest,SetCookieDomainHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "CookieTest,SetCookieExpiresDaysHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "CookieTest,SetCookieFalsyFlags.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "CookieTest,SetCookieHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "CookieTest,SetCookieMaxAgeHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "CookieTest,SetCookieOverwriteHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "CookieTest,SetCookieSpecialCharHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "Custom404Test,Custom404Handler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "CustomStaticFileTest,StaticUrlHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "path": []
            },
            "variables": {}
        },
        "DateHeaderTest,Handler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "DecodeArgHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "arg": []
            },
            "variables": {}
        },
        "DecoratorTest,AddSlashHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "DecoratorTest,RemoveSlashHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "EchoHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "path_args": []
            },
            "variables": {
                "key": [
                    "str"
                ],
                "value": [
                    "bytes",
                    "unicode_type"
                ],
                "arg": [
                    "unicode_type"
                ]
            }
        },
        "EmptyFlushCallbackHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {}
        },
        "ErrorResponseTest,DefaultHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "ErrorResponseTest,FailedWriteErrorHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "ErrorResponseTest,WriteErrorHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "ExceptionHandlerTest,Handler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "FinishExceptionTest,Handler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "FinishInPrepareTest,Handler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "FlowControlHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "GetArgumentErrorTest,Handler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "e": [
                    "Exception"
                ]
            }
        },
        "GetCurrentUserTest,WithUserHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "GetCurrentUserTest,WithUserModuleHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "GetCurrentUserTest,WithoutUserHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "GetCurrentUserTest,WithoutUserModuleHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "GzipTestCase,Handler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "Header204Test,Handler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "Header304Test,Handler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "HeaderInjectionHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "e": [
                    "Exception"
                ]
            }
        },
        "HelloHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "HostMatchingTest,Handler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "IncorrectContentLengthTest,TooHigh.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "e": [
                    "Exception"
                ],
                "test_": [
                    "Exception"
                ]
            }
        },
        "IncorrectContentLengthTest,TooLow.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "e": [
                    "Exception"
                ],
                "test_": [
                    "Exception"
                ]
            }
        },
        "LinkifyHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "MultiHeaderHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "MultipleExceptionTest,Handler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "NamedURLSpecGroupsTest,EchoHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "path": []
            },
            "variables": {}
        },
        "OptionalPathHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "path": []
            },
            "variables": {}
        },
        "PathArgsInPrepareTest,Handler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "path": []
            },
            "variables": {}
        },
        "RaiseWithReasonTest,Handler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "RedirectHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "RequestSummaryTest,Handler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "self_": [
                    "None"
                ]
            }
        },
        "SetLazyPropertiesTest,Handler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "StaticFileTest,OverrideStaticUrlHandler.get": {
            "name": "get",
            "location": -1,
            "return": [],
            "arguments": {
                "path": []
            },
            "variables": {
                "do_include": [
                    "bool"
                ],
                "include_host": [
                    "bool"
                ],
                "protocol_length": [
                    "int"
                ],
                "result": [
                    "bool"
                ]
            }
        },
        "StaticFileTest,StaticUrlHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "path": []
            },
            "variables": {
                "with_v": [
                    "int"
                ]
            }
        },
        "StatusReasonTest,Handler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "StreamingRequestBodyTest,StreamingBodyHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TypeCheckHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "path_component": []
            },
            "variables": {}
        },
        "UIMethodUIModuleTest,Handler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "UIModuleResourceHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "XSRFCookieKwargsTest,Handler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "XSRFTest,Handler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "version": [
                    "int"
                ]
            }
        },
        "CustomStaticFileTest,MyStaticFileHandler.get_absolute_path": {
            "name": "get_absolute_path",
            "location": -1,
            "return": [],
            "arguments": {
                "cls": [],
                "settings": [],
                "path": []
            },
            "variables": {}
        },
        "StaticFileTest.get_and_head": {
            "name": "get_and_head",
            "location": -1,
            "return": [],
            "arguments": {
                "kwargs": [],
                "args": []
            },
            "variables": {
                "content_headers": [
                    "set"
                ]
            }
        },
        "WebTestCase.get_app": {
            "name": "get_app",
            "location": -1,
            "return": [
                "Application"
            ],
            "arguments": {},
            "variables": {
                "app": [
                    "Application"
                ]
            }
        },
        "Custom404Test.get_app_kwargs": {
            "name": "get_app_kwargs",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "CustomStaticFileTest.get_app_kwargs": {
            "name": "get_app_kwargs",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "DefaultHandlerArgumentsTest.get_app_kwargs": {
            "name": "get_app_kwargs",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "DefaultHostMatchingTest.get_app_kwargs": {
            "name": "get_app_kwargs",
            "location": -1,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {},
            "variables": {}
        },
        "ErrorHandlerXSRFTest.get_app_kwargs": {
            "name": "get_app_kwargs",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "GetCurrentUserTest.get_app_kwargs": {
            "name": "get_app_kwargs",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {
                "loader": [
                    "DictLoader"
                ]
            }
        },
        "GzipTestCase.get_app_kwargs": {
            "name": "get_app_kwargs",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "StaticDefaultFilenameTest.get_app_kwargs": {
            "name": "get_app_kwargs",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "StaticFileTest.get_app_kwargs": {
            "name": "get_app_kwargs",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "StaticFileWithPathTest.get_app_kwargs": {
            "name": "get_app_kwargs",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "UIMethodUIModuleTest.get_app_kwargs": {
            "name": "get_app_kwargs",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {
                "loader": [
                    "DictLoader"
                ]
            }
        },
        "WSGISafeWebTest.get_app_kwargs": {
            "name": "get_app_kwargs",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {
                "loader": [
                    "DictLoader"
                ]
            }
        },
        "WebTestCase.get_app_kwargs": {
            "name": "get_app_kwargs",
            "location": -1,
            "return": [
                "dict"
            ],
            "arguments": {},
            "variables": {}
        },
        "XSRFCookieKwargsTest.get_app_kwargs": {
            "name": "get_app_kwargs",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "XSRFTest.get_app_kwargs": {
            "name": "get_app_kwargs",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "CustomStaticFileTest,MyStaticFileHandler.get_content": {
            "name": "get_content",
            "location": -1,
            "return": [
                "bytes"
            ],
            "arguments": {
                "path": [],
                "start": [
                    "None"
                ],
                "end": [
                    "None"
                ]
            },
            "variables": {}
        },
        "CustomStaticFileTest,MyStaticFileHandler.get_content_size": {
            "name": "get_content_size",
            "location": -1,
            "return": [
                "int"
            ],
            "arguments": {},
            "variables": {}
        },
        "CookieTestRequestHandler.get_cookie": {
            "name": "get_cookie",
            "location": -1,
            "return": [],
            "arguments": {
                "name": []
            },
            "variables": {}
        },
        "GetCurrentUserTest,CurrentUserHandler.get_current_user": {
            "name": "get_current_user",
            "location": -1,
            "return": [
                "typing.Text"
            ],
            "arguments": {},
            "variables": {
                "has_loaded_current_user": [
                    "bool"
                ]
            }
        },
        "SetLazyPropertiesTest,Handler.get_current_user": {
            "name": "get_current_user",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "AuthRedirectTest.get_handlers": {
            "name": "get_handlers",
            "location": -1,
            "return": [
                "list[tuple[typing.Union[typing.Text,AuthRedirectRequestHandler]]]"
            ],
            "arguments": {},
            "variables": {}
        },
        "CacheTest.get_handlers": {
            "name": "get_handlers",
            "location": -1,
            "return": [
                "list[tuple[typing.Text]]"
            ],
            "arguments": {},
            "variables": {}
        },
        "ConnectionCloseTest.get_handlers": {
            "name": "get_handlers",
            "location": -1,
            "return": [
                "list[tuple[typing.Union[typing.Text,ConnectionCloseHandler]]]"
            ],
            "arguments": {},
            "variables": {}
        },
        "CookieTest.get_handlers": {
            "name": "get_handlers",
            "location": -1,
            "return": [
                "list[tuple[typing.Text]]"
            ],
            "arguments": {},
            "variables": {}
        },
        "Custom404Test.get_handlers": {
            "name": "get_handlers",
            "location": -1,
            "return": [
                "list[tuple[typing.Text]]"
            ],
            "arguments": {},
            "variables": {}
        },
        "CustomStaticFileTest.get_handlers": {
            "name": "get_handlers",
            "location": -1,
            "return": [
                "list[tuple[typing.Text]]"
            ],
            "arguments": {},
            "variables": {}
        },
        "DecoratedStreamingRequestFlowControlTest.get_handlers": {
            "name": "get_handlers",
            "location": -1,
            "return": [
                "list[tuple[typing.Text]]"
            ],
            "arguments": {},
            "variables": {}
        },
        "DecoratorTest.get_handlers": {
            "name": "get_handlers",
            "location": -1,
            "return": [
                "list[tuple[typing.Text]]"
            ],
            "arguments": {},
            "variables": {}
        },
        "Default404Test.get_handlers": {
            "name": "get_handlers",
            "location": -1,
            "return": [
                "list[tuple[typing.Text]]"
            ],
            "arguments": {},
            "variables": {}
        },
        "DefaultHandlerArgumentsTest.get_handlers": {
            "name": "get_handlers",
            "location": -1,
            "return": [
                "list[tuple[typing.Text]]"
            ],
            "arguments": {},
            "variables": {}
        },
        "DefaultHostMatchingTest.get_handlers": {
            "name": "get_handlers",
            "location": -1,
            "return": [
                "list"
            ],
            "arguments": {},
            "variables": {}
        },
        "ErrorHandlerXSRFTest.get_handlers": {
            "name": "get_handlers",
            "location": -1,
            "return": [
                "list[tuple[typing.Text]]"
            ],
            "arguments": {},
            "variables": {}
        },
        "ErrorResponseTest.get_handlers": {
            "name": "get_handlers",
            "location": -1,
            "return": [
                "list"
            ],
            "arguments": {},
            "variables": {}
        },
        "GetCurrentUserTest.get_handlers": {
            "name": "get_handlers",
            "location": -1,
            "return": [
                "list[tuple[typing.Text]]"
            ],
            "arguments": {},
            "variables": {}
        },
        "HandlerByNameTest.get_handlers": {
            "name": "get_handlers",
            "location": -1,
            "return": [
                "list[tuple[typing.Union[typing.Text,HelloHandler]]]"
            ],
            "arguments": {},
            "variables": {}
        },
        "HostMatchingTest.get_handlers": {
            "name": "get_handlers",
            "location": -1,
            "return": [
                "list[tuple[typing.Union[typing.Text,dict[typing.Text, typing.Text]]]]"
            ],
            "arguments": {},
            "variables": {}
        },
        "IncorrectContentLengthTest.get_handlers": {
            "name": "get_handlers",
            "location": -1,
            "return": [
                "list[tuple[typing.Text]]"
            ],
            "arguments": {},
            "variables": {
                "test": [
                    "IncorrectContentLengthTest"
                ],
                "server_error": [
                    "None"
                ]
            }
        },
        "NamedURLSpecGroupsTest.get_handlers": {
            "name": "get_handlers",
            "location": -1,
            "return": [
                "list[tuple[typing.Union[typing.Text,EchoHandler]]]"
            ],
            "arguments": {},
            "variables": {}
        },
        "NativeStreamingRequestFlowControlTest.get_handlers": {
            "name": "get_handlers",
            "location": -1,
            "return": [
                "list[tuple[typing.Text]]"
            ],
            "arguments": {},
            "variables": {}
        },
        "NonWSGIWebTests.get_handlers": {
            "name": "get_handlers",
            "location": -1,
            "return": [
                "list[typing.Union[tuple[typing.Union[typing.Text,FlowControlHandler]],tuple[typing.Union[typing.Text,EmptyFlushCallbackHandler]]]]"
            ],
            "arguments": {},
            "variables": {}
        },
        "PathArgsInPrepareTest.get_handlers": {
            "name": "get_handlers",
            "location": -1,
            "return": [
                "list[tuple[typing.Text]]"
            ],
            "arguments": {},
            "variables": {}
        },
        "RedirectHandlerTest.get_handlers": {
            "name": "get_handlers",
            "location": -1,
            "return": [
                "list[tuple[typing.Union[typing.Text,dict[typing.Text, typing.Text]]]]"
            ],
            "arguments": {},
            "variables": {}
        },
        "RequestEncodingTest.get_handlers": {
            "name": "get_handlers",
            "location": -1,
            "return": [
                "list[tuple[typing.Union[typing.Text,EchoHandler]]]"
            ],
            "arguments": {},
            "variables": {}
        },
        "SimpleHandlerTestCase.get_handlers": {
            "name": "get_handlers",
            "location": -1,
            "return": [
                "list[tuple[typing.Text]]"
            ],
            "arguments": {},
            "variables": {}
        },
        "StaticDefaultFilenameTest.get_handlers": {
            "name": "get_handlers",
            "location": -1,
            "return": [
                "list"
            ],
            "arguments": {},
            "variables": {}
        },
        "StaticFileTest.get_handlers": {
            "name": "get_handlers",
            "location": -1,
            "return": [
                "list[tuple[typing.Text]]"
            ],
            "arguments": {},
            "variables": {
                "include_host": [
                    "bool"
                ]
            }
        },
        "StaticFileWithPathTest.get_handlers": {
            "name": "get_handlers",
            "location": -1,
            "return": [
                "list[tuple[typing.Union[typing.Text,dict[typing.Text, ]]]]"
            ],
            "arguments": {},
            "variables": {}
        },
        "StreamingRequestBodyTest.get_handlers": {
            "name": "get_handlers",
            "location": -1,
            "return": [
                "list[tuple[typing.Text]]"
            ],
            "arguments": {},
            "variables": {}
        },
        "WSGISafeWebTest.get_handlers": {
            "name": "get_handlers",
            "location": -1,
            "return": [
                "list"
            ],
            "arguments": {},
            "variables": {
                "urls": [
                    "list"
                ]
            }
        },
        "WebTestCase.get_handlers": {
            "name": "get_handlers",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "BaseStreamingRequestFlowControlTest.get_http_client": {
            "name": "get_http_client",
            "location": -1,
            "return": [
                "SimpleAsyncHTTPClient"
            ],
            "arguments": {},
            "variables": {}
        },
        "RaiseWithReasonTest.get_http_client": {
            "name": "get_http_client",
            "location": -1,
            "return": [
                "SimpleAsyncHTTPClient"
            ],
            "arguments": {},
            "variables": {}
        },
        "StatusReasonTest.get_http_client": {
            "name": "get_http_client",
            "location": -1,
            "return": [
                "SimpleAsyncHTTPClient"
            ],
            "arguments": {},
            "variables": {}
        },
        "BaseStreamingRequestFlowControlTest.get_httpserver_options": {
            "name": "get_httpserver_options",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "AuthRedirectRequestHandler.get_login_url": {
            "name": "get_login_url",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "CustomStaticFileTest,MyStaticFileHandler.get_modified_time": {
            "name": "get_modified_time",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "GetCurrentUserTest,CurrentUserModuleHandler.get_template_namespace": {
            "name": "get_template_namespace",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "XSRFTest.get_token": {
            "name": "get_token",
            "location": -1,
            "return": [],
            "arguments": {
                "old_token": [
                    "None"
                ],
                "version": [
                    "None"
                ]
            },
            "variables": {
                "old_token": [
                    "None"
                ],
                "headers": [
                    "None"
                ],
                "version": [
                    "None"
                ]
            }
        },
        "SetLazyPropertiesTest,Handler.get_user_locale": {
            "name": "get_user_locale",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "CustomStaticFileTest,MyStaticFileHandler.get_version": {
            "name": "get_version",
            "location": -1,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "cls": [],
                "settings": [],
                "path": []
            },
            "variables": {}
        },
        "global": {},
        "BaseFlowControlHandler.in_method": {
            "name": "in_method",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {
                "method": []
            },
            "variables": {
                "method": [
                    "None"
                ]
            }
        },
        "AuthRedirectRequestHandler.initialize": {
            "name": "initialize",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "login_url": []
            },
            "variables": {}
        },
        "BaseFlowControlHandler.initialize": {
            "name": "initialize",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "test": []
            },
            "variables": {
                "method": [
                    "None"
                ],
                "methods": [
                    "list"
                ]
            }
        },
        "ConnectionCloseHandler.initialize": {
            "name": "initialize",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "test": []
            },
            "variables": {}
        },
        "HostMatchingTest,Handler.initialize": {
            "name": "initialize",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "reply": []
            },
            "variables": {}
        },
        "StreamingRequestBodyTest,CloseDetectionHandler.initialize": {
            "name": "initialize",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "test": []
            },
            "variables": {}
        },
        "StreamingRequestBodyTest,StreamingBodyHandler.initialize": {
            "name": "initialize",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "test": []
            },
            "variables": {}
        },
        "BuggyLoggingTest,Handler.log_exception": {
            "name": "log_exception",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "typ": [],
                "value": [],
                "tb": []
            },
            "variables": {}
        },
        "ExceptionHandlerTest,Handler.log_exception": {
            "name": "log_exception",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "typ": [],
                "value": [],
                "tb": []
            },
            "variables": {
                "value": [
                    "PermissionError"
                ]
            }
        },
        "MultipleExceptionTest,Handler.log_exception": {
            "name": "log_exception",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "typ": [],
                "value": [],
                "tb": []
            },
            "variables": {}
        },
        "CustomStaticFileTest,MyStaticFileHandler.make_static_url": {
            "name": "make_static_url",
            "location": -1,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "cls": [],
                "settings": [],
                "path": []
            },
            "variables": {}
        },
        "AllHTTPMethodsTest,Handler.method": {
            "name": "method",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "UIMethodUIModuleTest.my_ui_method": {
            "name": "my_ui_method",
            "location": -1,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "handler": [],
                "x": []
            },
            "variables": {}
        },
        "ConnectionCloseHandler.on_connection_close": {
            "name": "on_connection_close",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "ConnectionCloseTest.on_connection_close": {
            "name": "on_connection_close",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "StreamingRequestBodyTest,CloseDetectionHandler.on_connection_close": {
            "name": "on_connection_close",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "ConnectionCloseTest.on_handler_waiting": {
            "name": "on_handler_waiting",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "PatchMethodTest,Handler.other": {
            "name": "other",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "UnimplementedNonStandardMethodsTest,Handler.other": {
            "name": "other",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "CustomStaticFileTest,MyStaticFileHandler.parse_url_path": {
            "name": "parse_url_path",
            "location": -1,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "url_path": []
            },
            "variables": {}
        },
        "SignedValueTest.past": {
            "name": "past",
            "location": -1,
            "return": [
                "int"
            ],
            "arguments": {},
            "variables": {}
        },
        "PatchMethodTest,Handler.patch": {
            "name": "patch",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "BaseFlowControlHandler.post": {
            "name": "post",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {}
        },
        "TypeCheckHandler.post": {
            "name": "post",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "path_component": []
            },
            "variables": {}
        },
        "XSRFTest,Handler.post": {
            "name": "post",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "BaseFlowControlHandler.prepare": {
            "name": "prepare",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {}
        },
        "FinishInPrepareTest,Handler.prepare": {
            "name": "prepare",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "GetArgumentHandler.prepare": {
            "name": "prepare",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "GetArgumentsHandler.prepare": {
            "name": "prepare",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "GetCurrentUserTest,CurrentUserHandler.prepare": {
            "name": "prepare",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "has_loaded_current_user": [
                    "bool"
                ]
            }
        },
        "PathArgsInPrepareTest,Handler.prepare": {
            "name": "prepare",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "SetLazyPropertiesTest,Handler.prepare": {
            "name": "prepare",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "current_user": [
                    "typing.Text"
                ]
            }
        },
        "StreamingRequestBodyTest,EarlyReturnHandler.prepare": {
            "name": "prepare",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "StreamingRequestBodyTest,StreamingBodyHandler.prepare": {
            "name": "prepare",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TypeCheckHandler.prepare": {
            "name": "prepare",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "errors": [
                    "dict"
                ]
            }
        },
        "SignedValueTest.present": {
            "name": "present",
            "location": -1,
            "return": [
                "int"
            ],
            "arguments": {},
            "variables": {}
        },
        "relpath": {
            "name": "relpath",
            "location": -1,
            "return": [],
            "arguments": {
                "a": []
            },
            "variables": {}
        },
        "GetCurrentUserTest,WithUserModule.render": {
            "name": "render",
            "location": -1,
            "return": [
                "str"
            ],
            "arguments": {},
            "variables": {}
        },
        "GetCurrentUserTest,WithoutUserModule.render": {
            "name": "render",
            "location": -1,
            "return": [
                "typing.Text"
            ],
            "arguments": {},
            "variables": {}
        },
        "UIMethodUIModuleTest,MyModule.render": {
            "name": "render",
            "location": -1,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "x": []
            },
            "variables": {}
        },
        "XSRFTest.setUp": {
            "name": "setUp",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "CookieTestRequestHandler.set_cookie": {
            "name": "set_cookie",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [],
                "value": [],
                "expires_days": [
                    "None"
                ]
            },
            "variables": {}
        },
        "FlowControlHandler.step2": {
            "name": "step2",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "FlowControlHandler.step3": {
            "name": "step3",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "GetCurrentUserTest.tearDown": {
            "name": "tearDown",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "UIMethodUIModuleTest.tearDown": {
            "name": "tearDown",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "WSGISafeWebTest.tearDown": {
            "name": "tearDown",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "Header204Test.test_204_headers": {
            "name": "test_204_headers",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "Header304Test.test_304_headers": {
            "name": "test_304_headers",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "DefaultHandlerArgumentsTest.test_403": {
            "name": "test_403",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "Custom404Test.test_404": {
            "name": "test_404",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "Default404Test.test_404": {
            "name": "test_404",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "ErrorHandlerXSRFTest.test_404_xsrf": {
            "name": "test_404_xsrf",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "AuthRedirectTest.test_absolute_auth_redirect": {
            "name": "test_absolute_auth_redirect",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "StaticFileTest.test_absolute_static_url": {
            "name": "test_absolute_static_url",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "StaticFileTest.test_absolute_version_exclusion": {
            "name": "test_absolute_version_exclusion",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "DecoratorTest.test_addslash": {
            "name": "test_addslash",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "SecureCookieV1Test.test_arbitrary_bytes": {
            "name": "test_arbitrary_bytes",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "handler": [
                    "CookieTestRequestHandler"
                ]
            }
        },
        "RedirectHandlerTest.test_basic_redirect": {
            "name": "test_basic_redirect",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "BuggyLoggingTest.test_buggy_log_exception": {
            "name": "test_buggy_log_exception",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "GetArgumentErrorTest.test_catch_error": {
            "name": "test_catch_error",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "ClearAllCookiesTest.test_clear_all_cookies": {
            "name": "test_clear_all_cookies",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "set_cookies": [
                    "list"
                ]
            }
        },
        "ClearHeaderTest.test_clear_header": {
            "name": "test_clear_header",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "ClientCloseTest.test_client_close": {
            "name": "test_client_close",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "StreamingRequestBodyTest.test_close_during_upload": {
            "name": "test_close_during_upload",
            "location": -1,
            "return": [
                "typing.Generator[Future]"
            ],
            "arguments": {},
            "variables": {
                "close_future": [
                    "Future"
                ]
            }
        },
        "ConnectionCloseTest.test_connection_close": {
            "name": "test_connection_close",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "stream": [
                    "IOStream"
                ]
            }
        },
        "IncorrectContentLengthTest.test_content_length_too_high": {
            "name": "test_content_length_too_high",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "IncorrectContentLengthTest.test_content_length_too_low": {
            "name": "test_content_length_too_low",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "CookieTest.test_cookie_special_char": {
            "name": "test_cookie_special_char",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "headers": [
                    "list"
                ],
                "data": [
                    "list[tuple[typing.Text]]"
                ],
                "header": [
                    "typing.Text"
                ],
                "expected": [
                    "typing.Text"
                ]
            }
        },
        "SecureCookieV1Test.test_cookie_tampering_future_timestamp": {
            "name": "test_cookie_tampering_future_timestamp",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "handler": [
                    "CookieTestRequestHandler"
                ]
            }
        },
        "HTTPErrorTest.test_copy": {
            "name": "test_copy",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "e": [
                    "HTTPError"
                ]
            }
        },
        "XSRFTest.test_cross_user": {
            "name": "test_cross_user",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "DateHeaderTest.test_date_header": {
            "name": "test_date_header",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "WSGISafeWebTest.test_decode_argument": {
            "name": "test_decode_argument",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "urls": [
                    "list[typing.Text]"
                ],
                "req_url": [
                    "typing.Text"
                ]
            }
        },
        "WSGISafeWebTest.test_decode_argument_invalid_unicode": {
            "name": "test_decode_argument_invalid_unicode",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "WSGISafeWebTest.test_decode_argument_plus": {
            "name": "test_decode_argument_plus",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "urls": [
                    "list[typing.Text]"
                ],
                "req_url": [
                    "typing.Text"
                ]
            }
        },
        "ErrorResponseTest.test_default": {
            "name": "test_default",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "DefaultHostMatchingTest.test_default_host_matching": {
            "name": "test_default_host_matching",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "self_": [
                    "typing.Text"
                ]
            }
        },
        "XSRFTest.test_distinct_tokens": {
            "name": "test_distinct_tokens",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "NUM_TOKENS": [
                    "int"
                ],
                "tokens": [
                    "set"
                ]
            }
        },
        "StreamingRequestBodyTest.test_early_return": {
            "name": "test_early_return",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "StreamingRequestBodyTest.test_early_return_with_data": {
            "name": "test_early_return_with_data",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "NonWSGIWebTests.test_empty_flush": {
            "name": "test_empty_flush",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "RequestEncodingTest.test_error": {
            "name": "test_error",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "ErrorHandlerXSRFTest.test_error_xsrf": {
            "name": "test_error_xsrf",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "SignedValueTest.test_expired": {
            "name": "test_expired",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "ErrorResponseTest.test_failed_write_error": {
            "name": "test_failed_write_error",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "FinishExceptionTest.test_finish_exception": {
            "name": "test_finish_exception",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "u": [
                    "typing.Text"
                ]
            }
        },
        "FinishInPrepareTest.test_finish_in_prepare": {
            "name": "test_finish_in_prepare",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "NonWSGIWebTests.test_flow_control": {
            "name": "test_flow_control",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "BaseStreamingRequestFlowControlTest.test_flow_control_chunked_body": {
            "name": "test_flow_control_chunked_body",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "chunks": [
                    "list[bytes]"
                ]
            }
        },
        "BaseStreamingRequestFlowControlTest.test_flow_control_compressed_body": {
            "name": "test_flow_control_compressed_body",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "bytesio": [
                    "BytesIO"
                ]
            }
        },
        "BaseStreamingRequestFlowControlTest.test_flow_control_fixed_body": {
            "name": "test_flow_control_fixed_body",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "WSGISafeWebTest.test_get_argument": {
            "name": "test_get_argument",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "WSGISafeWebTest.test_get_body_arguments": {
            "name": "test_get_body_arguments",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "CookieTest.test_get_cookie": {
            "name": "test_get_cookie",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "GetCurrentUserTest.test_get_current_user_from_ui_module_is_lazy": {
            "name": "test_get_current_user_from_ui_module_is_lazy",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "GetCurrentUserTest.test_get_current_user_from_ui_module_works": {
            "name": "test_get_current_user_from_ui_module_works",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "GetCurrentUserTest.test_get_current_user_is_lazy": {
            "name": "test_get_current_user_is_lazy",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "GetCurrentUserTest.test_get_current_user_works": {
            "name": "test_get_current_user_works",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "WSGISafeWebTest.test_get_query_arguments": {
            "name": "test_get_query_arguments",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "RequestEncodingTest.test_group_encoding": {
            "name": "test_group_encoding",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "RequestEncodingTest.test_group_question_mark": {
            "name": "test_group_question_mark",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "GzipTestCase.test_gzip": {
            "name": "test_gzip",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "GzipTestCase.test_gzip_not_requested": {
            "name": "test_gzip_not_requested",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "GzipTestCase.test_gzip_static": {
            "name": "test_gzip_static",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "HandlerByNameTest.test_handler_by_name": {
            "name": "test_handler_by_name",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "WSGISafeWebTest.test_header_injection": {
            "name": "test_header_injection",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "HostMatchingTest.test_host_matching": {
            "name": "test_host_matching",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "ExceptionHandlerTest.test_http_error": {
            "name": "test_http_error",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "RaiseWithReasonTest.test_httperror_str": {
            "name": "test_httperror_str",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "RaiseWithReasonTest.test_httperror_str_from_httputil": {
            "name": "test_httperror_str_from_httputil",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "StaticFileTest.test_include_host_override": {
            "name": "test_include_host_override",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "SecureCookieV2Test.test_key_version_increment_version": {
            "name": "test_key_version_increment_version",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "handler": [
                    "CookieTestRequestHandler"
                ],
                "new_handler": [
                    "CookieTestRequestHandler"
                ]
            }
        },
        "SecureCookieV2Test.test_key_version_invalidate_version": {
            "name": "test_key_version_invalidate_version",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "handler": [
                    "CookieTestRequestHandler"
                ],
                "new_handler": [
                    "CookieTestRequestHandler"
                ]
            }
        },
        "SignedValueTest.test_key_version_retrieval": {
            "name": "test_key_version_retrieval",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "value": [
                    "bytes"
                ]
            }
        },
        "SecureCookieV2Test.test_key_version_roundtrip": {
            "name": "test_key_version_roundtrip",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "handler": [
                    "CookieTestRequestHandler"
                ]
            }
        },
        "SecureCookieV2Test.test_key_version_roundtrip_differing_version": {
            "name": "test_key_version_roundtrip_differing_version",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "handler": [
                    "CookieTestRequestHandler"
                ]
            }
        },
        "SignedValueTest.test_key_versioning_invalid_key": {
            "name": "test_key_versioning_invalid_key",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "value": [
                    "bytes"
                ]
            }
        },
        "SignedValueTest.test_key_versioning_read_write_default_key": {
            "name": "test_key_versioning_read_write_default_key",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "value": [
                    "bytes"
                ]
            }
        },
        "SignedValueTest.test_key_versioning_read_write_non_default_key": {
            "name": "test_key_versioning_read_write_non_default_key",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "value": [
                    "bytes"
                ]
            }
        },
        "ExceptionHandlerTest.test_known_error": {
            "name": "test_known_error",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "SignedValueTest.test_known_values": {
            "name": "test_known_values",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "PathArgsInPrepareTest.test_kw": {
            "name": "test_kw",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "ApplicationTest.test_listen": {
            "name": "test_listen",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "app": [
                    "Application"
                ]
            }
        },
        "RequestSummaryTest.test_missing_remote_ip": {
            "name": "test_missing_remote_ip",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "MultipleExceptionTest.test_multi_exception": {
            "name": "test_multi_exception",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "WSGISafeWebTest.test_multi_header": {
            "name": "test_multi_header",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "CacheTest.test_multiple_strong_etag_match": {
            "name": "test_multiple_strong_etag_match",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "computed_etag": [
                    "typing.Text"
                ],
                "etags": [
                    "typing.Text"
                ]
            }
        },
        "CacheTest.test_multiple_strong_etag_not_match": {
            "name": "test_multiple_strong_etag_not_match",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "computed_etag": [
                    "typing.Text"
                ],
                "etags": [
                    "typing.Text"
                ]
            }
        },
        "CacheTest.test_multiple_weak_etag_match": {
            "name": "test_multiple_weak_etag_match",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "computed_etag": [
                    "typing.Text"
                ],
                "etags": [
                    "typing.Text"
                ]
            }
        },
        "CacheTest.test_multiple_weak_etag_not_match": {
            "name": "test_multiple_weak_etag_not_match",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "computed_etag": [
                    "typing.Text"
                ],
                "etags": [
                    "typing.Text"
                ]
            }
        },
        "SignedValueTest.test_name_swap": {
            "name": "test_name_swap",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "NamedURLSpecGroupsTest.test_named_urlspec_groups": {
            "name": "test_named_urlspec_groups",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "WSGISafeWebTest.test_no_gzip": {
            "name": "test_no_gzip",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "SignedValueTest.test_non_ascii": {
            "name": "test_non_ascii",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "value": [
                    "bytes"
                ]
            }
        },
        "URLSpecReverseTest.test_non_reversible": {
            "name": "test_non_reversible",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "paths": [
                    "list[typing.Text]"
                ],
                "path": [
                    "typing.Text"
                ]
            }
        },
        "WSGISafeWebTest.test_optional_path": {
            "name": "test_optional_path",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "PatchMethodTest.test_other": {
            "name": "test_other",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "PatchMethodTest.test_patch": {
            "name": "test_patch",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "StaticFileTest.test_path_traversal_protection": {
            "name": "test_path_traversal_protection",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "http_client": [
                    "SimpleAsyncHTTPClient"
                ]
            }
        },
        "SignedValueTest.test_payload_tampering": {
            "name": "test_payload_tampering",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "sig": [
                    "typing.Text"
                ]
            }
        },
        "PathArgsInPrepareTest.test_pos": {
            "name": "test_pos",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "RaiseWithReasonTest.test_raise_with_reason": {
            "name": "test_raise_with_reason",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "WSGISafeWebTest.test_redirect": {
            "name": "test_redirect",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "RedirectHandlerTest.test_redirect_pattern": {
            "name": "test_redirect_pattern",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "RedirectHandlerTest.test_redirect_with_appending_argument": {
            "name": "test_redirect_with_appending_argument",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "RedirectHandlerTest.test_redirect_with_argument": {
            "name": "test_redirect_with_argument",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "XSRFTest.test_refresh_token": {
            "name": "test_refresh_token",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "tokens_seen": [
                    "set"
                ]
            }
        },
        "AuthRedirectTest.test_relative_auth_redirect": {
            "name": "test_relative_auth_redirect",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "StaticFileTest.test_relative_version_exclusion": {
            "name": "test_relative_version_exclusion",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "DecoratorTest.test_removeslash": {
            "name": "test_removeslash",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "URLSpecReverseTest.test_reverse": {
            "name": "test_reverse",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "URLSpecReverseTest.test_reverse_arguments": {
            "name": "test_reverse_arguments",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "WSGISafeWebTest.test_reverse_url": {
            "name": "test_reverse_url",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "StaticFileTest.test_root_static_path": {
            "name": "test_root_static_path",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "SecureCookieV1Test.test_round_trip": {
            "name": "test_round_trip",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "handler": [
                    "CookieTestRequestHandler"
                ]
            }
        },
        "SecureCookieV2Test.test_round_trip": {
            "name": "test_round_trip",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "handler": [
                    "CookieTestRequestHandler"
                ]
            }
        },
        "CustomStaticFileTest.test_serve": {
            "name": "test_serve",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "StaticFileWithPathTest.test_serve": {
            "name": "test_serve",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "CookieTest.test_set_cookie": {
            "name": "test_set_cookie",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "CookieTest.test_set_cookie_domain": {
            "name": "test_set_cookie_domain",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "CookieTest.test_set_cookie_expires_days": {
            "name": "test_set_cookie_expires_days",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "CookieTest.test_set_cookie_false_flags": {
            "name": "test_set_cookie_false_flags",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "headers": [
                    "list"
                ]
            }
        },
        "CookieTest.test_set_cookie_max_age": {
            "name": "test_set_cookie_max_age",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "CookieTest.test_set_cookie_overwrite": {
            "name": "test_set_cookie_overwrite",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "SetLazyPropertiesTest.test_set_properties": {
            "name": "test_set_properties",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "SignedValueTest.test_signature_tampering": {
            "name": "test_signature_tampering",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "prefix": [
                    "typing.Text"
                ]
            }
        },
        "RequestEncodingTest.test_slashes": {
            "name": "test_slashes",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "AllHTTPMethodsTest.test_standard_methods": {
            "name": "test_standard_methods",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "method": [
                    "typing.Text"
                ]
            }
        },
        "StaticFileTest.test_static_304_etag_modified_bug": {
            "name": "test_static_304_etag_modified_bug",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "StaticFileTest.test_static_304_if_modified_since": {
            "name": "test_static_304_if_modified_since",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "StaticFileTest.test_static_304_if_none_match": {
            "name": "test_static_304_if_none_match",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "StaticFileTest.test_static_404": {
            "name": "test_static_404",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "StaticFileTest.test_static_compressed_files": {
            "name": "test_static_compressed_files",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "StaticDefaultFilenameTest.test_static_default_filename": {
            "name": "test_static_default_filename",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "StaticDefaultFilenameTest.test_static_default_redirect": {
            "name": "test_static_default_redirect",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "StaticFileTest.test_static_etag": {
            "name": "test_static_etag",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "StaticFileTest.test_static_files": {
            "name": "test_static_files",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "StaticFileTest.test_static_head": {
            "name": "test_static_head",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "StaticFileTest.test_static_head_range": {
            "name": "test_static_head_range",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "StaticFileTest.test_static_if_modified_since_pre_epoch": {
            "name": "test_static_if_modified_since_pre_epoch",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "StaticFileTest.test_static_if_modified_since_time_zone": {
            "name": "test_static_if_modified_since_time_zone",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "StaticFileTest.test_static_invalid_range": {
            "name": "test_static_invalid_range",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "StaticFileTest.test_static_range_if_none_match": {
            "name": "test_static_range_if_none_match",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "StaticFileTest.test_static_unsatisfiable_range_invalid_start": {
            "name": "test_static_unsatisfiable_range_invalid_start",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "StaticFileTest.test_static_unsatisfiable_range_zero_suffix": {
            "name": "test_static_unsatisfiable_range_zero_suffix",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "CustomStaticFileTest.test_static_url": {
            "name": "test_static_url",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "StaticFileTest.test_static_url": {
            "name": "test_static_url",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "StaticFileTest.test_static_with_range": {
            "name": "test_static_with_range",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "StaticFileTest.test_static_with_range_end_edge": {
            "name": "test_static_with_range_end_edge",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "StaticFileTest.test_static_with_range_full_file": {
            "name": "test_static_with_range_full_file",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "f": [
                    "typing.IO"
                ]
            }
        },
        "StaticFileTest.test_static_with_range_full_past_end": {
            "name": "test_static_with_range_full_past_end",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "f": [
                    "typing.IO"
                ]
            }
        },
        "StaticFileTest.test_static_with_range_neg_end": {
            "name": "test_static_with_range_neg_end",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "StaticFileTest.test_static_with_range_partial_past_end": {
            "name": "test_static_with_range_partial_past_end",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "f": [
                    "typing.IO"
                ]
            }
        },
        "StatusReasonTest.test_status": {
            "name": "test_status",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "StreamingRequestBodyTest.test_streaming_body": {
            "name": "test_streaming_body",
            "location": -1,
            "return": [
                "typing.Generator[Future]"
            ],
            "arguments": {},
            "variables": {
                "prepared": [
                    "Future"
                ],
                "data": [
                    "Future",
                    "typing.Generator[Future]"
                ],
                "finished": [
                    "Future"
                ]
            }
        },
        "CacheTest.test_strong_etag_match": {
            "name": "test_strong_etag_match",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "computed_etag": [
                    "typing.Text"
                ],
                "etags": [
                    "typing.Text"
                ]
            }
        },
        "CacheTest.test_strong_etag_not_match": {
            "name": "test_strong_etag_not_match",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "computed_etag": [
                    "typing.Text"
                ],
                "etags": [
                    "typing.Text"
                ]
            }
        },
        "WSGISafeWebTest.test_types": {
            "name": "test_types",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "UIMethodUIModuleTest.test_ui_method": {
            "name": "test_ui_method",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "WSGISafeWebTest.test_uimodule_resources": {
            "name": "test_uimodule_resources",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "WSGISafeWebTest.test_uimodule_unescaped": {
            "name": "test_uimodule_unescaped",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "UnimplementedNonStandardMethodsTest.test_unimplemented_other": {
            "name": "test_unimplemented_other",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "UnimplementedNonStandardMethodsTest.test_unimplemented_patch": {
            "name": "test_unimplemented_patch",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "UnimplementedHTTPMethodsTest.test_unimplemented_standard_methods": {
            "name": "test_unimplemented_standard_methods",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "method": [
                    "typing.Text"
                ]
            }
        },
        "ExceptionHandlerTest.test_unknown_error": {
            "name": "test_unknown_error",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "GzipTestCase.test_vary_already_present": {
            "name": "test_vary_already_present",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "GzipTestCase.test_vary_already_present_multiple": {
            "name": "test_vary_already_present_multiple",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "XSRFTest.test_versioning": {
            "name": "test_versioning",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "CacheTest.test_weak_etag_match": {
            "name": "test_weak_etag_match",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "computed_etag": [
                    "typing.Text"
                ],
                "etags": [
                    "typing.Text"
                ]
            }
        },
        "CacheTest.test_weak_etag_not_match": {
            "name": "test_weak_etag_not_match",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "computed_etag": [
                    "typing.Text"
                ],
                "etags": [
                    "typing.Text"
                ]
            }
        },
        "WSGISafeWebTest.test_web_redirect": {
            "name": "test_web_redirect",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "WSGISafeWebTest.test_web_redirect_double_slash": {
            "name": "test_web_redirect_double_slash",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "CacheTest.test_wildcard_etag": {
            "name": "test_wildcard_etag",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "computed_etag": [
                    "typing.Text"
                ],
                "etags": [
                    "typing.Text"
                ]
            }
        },
        "ErrorResponseTest.test_write_error": {
            "name": "test_write_error",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "XSRFTest.test_xsrf_fail_argument_invalid_format": {
            "name": "test_xsrf_fail_argument_invalid_format",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "XSRFTest.test_xsrf_fail_body_no_cookie": {
            "name": "test_xsrf_fail_body_no_cookie",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "XSRFTest.test_xsrf_fail_cookie_invalid_format": {
            "name": "test_xsrf_fail_cookie_invalid_format",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "XSRFTest.test_xsrf_fail_cookie_no_body": {
            "name": "test_xsrf_fail_cookie_no_body",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "XSRFTest.test_xsrf_fail_no_token": {
            "name": "test_xsrf_fail_no_token",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "XSRFCookieKwargsTest.test_xsrf_httponly": {
            "name": "test_xsrf_httponly",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "XSRFTest.test_xsrf_success_header": {
            "name": "test_xsrf_success_header",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "XSRFTest.test_xsrf_success_non_hex_token": {
            "name": "test_xsrf_success_non_hex_token",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "XSRFTest.test_xsrf_success_post_body": {
            "name": "test_xsrf_success_post_body",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "XSRFTest.test_xsrf_success_query_string": {
            "name": "test_xsrf_success_query_string",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "XSRFTest.test_xsrf_success_short_token": {
            "name": "test_xsrf_success_short_token",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "SignedValueTest.validate": {
            "name": "validate",
            "location": -1,
            "return": [
                "bool"
            ],
            "arguments": {
                "prefix": []
            },
            "variables": {}
        },
        "CustomStaticFileTest,MyStaticFileHandler.validate_absolute_path": {
            "name": "validate_absolute_path",
            "location": -1,
            "return": [],
            "arguments": {
                "root": [],
                "absolute_path": []
            },
            "variables": {}
        },
        "UIMethodUIModuleTest,Handler.value": {
            "name": "value",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "ErrorResponseTest,FailedWriteErrorHandler.write_error": {
            "name": "write_error",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "status_code": [],
                "kwargs": []
            },
            "variables": {}
        },
        "ErrorResponseTest,WriteErrorHandler.write_error": {
            "name": "write_error",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "status_code": [],
                "kwargs": []
            },
            "variables": {}
        },
        "ExceptionHandlerTest,Handler.write_error": {
            "name": "write_error",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "status_code": [],
                "kwargs": []
            },
            "variables": {
                "value": [
                    "PermissionError"
                ]
            }
        },
        "wsgi_safe": {
            "name": "wsgi_safe",
            "location": -1,
            "return": [],
            "arguments": {
                "cls": []
            },
            "variables": {
                "wsgi_safe_tests": [
                    "list"
                ]
            }
        }
    },
    "tornado-5.0.2/tornado/test/websocket_test.py": {
        "WebSocketBaseTestCase.close": {
            "name": "close",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {
                "ws": []
            },
            "variables": {}
        },
        "NonWebSocketHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "ClientPeriodicPingTest.get_app": {
            "name": "get_app",
            "location": -1,
            "return": [
                "Application"
            ],
            "arguments": {},
            "variables": {
                "close_future": [
                    "Future"
                ]
            }
        },
        "CompressionTestMixin.get_app": {
            "name": "get_app",
            "location": -1,
            "return": [
                "Application"
            ],
            "arguments": {},
            "variables": {
                "close_future": [
                    "Future"
                ]
            }
        },
        "MaxMessageSizeTest.get_app": {
            "name": "get_app",
            "location": -1,
            "return": [
                "Application"
            ],
            "arguments": {},
            "variables": {
                "close_future": [
                    "Future"
                ]
            }
        },
        "ServerPeriodicPingTest.get_app": {
            "name": "get_app",
            "location": -1,
            "return": [
                "Application"
            ],
            "arguments": {},
            "variables": {
                "close_future": [
                    "Future"
                ]
            }
        },
        "WebSocketNativeCoroutineTest.get_app": {
            "name": "get_app",
            "location": -1,
            "return": [
                "Application"
            ],
            "arguments": {},
            "variables": {
                "close_future": [
                    "Future"
                ]
            }
        },
        "WebSocketTest.get_app": {
            "name": "get_app",
            "location": -1,
            "return": [
                "Application"
            ],
            "arguments": {},
            "variables": {
                "close_future": [
                    "Future"
                ]
            }
        },
        "ClientOnlyCompressionTest.get_client_compression_options": {
            "name": "get_client_compression_options",
            "location": -1,
            "return": [
                "dict"
            ],
            "arguments": {},
            "variables": {}
        },
        "CompressionTestMixin.get_client_compression_options": {
            "name": "get_client_compression_options",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "DefaultCompressionTest.get_client_compression_options": {
            "name": "get_client_compression_options",
            "location": -1,
            "return": [
                "dict"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestWebSocketHandler.get_compression_options": {
            "name": "get_compression_options",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "WebSocketTest.get_http_client": {
            "name": "get_http_client",
            "location": -1,
            "return": [
                "SimpleAsyncHTTPClient"
            ],
            "arguments": {},
            "variables": {}
        },
        "CompressionTestMixin.get_server_compression_options": {
            "name": "get_server_compression_options",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "DefaultCompressionTest.get_server_compression_options": {
            "name": "get_server_compression_options",
            "location": -1,
            "return": [
                "dict"
            ],
            "arguments": {},
            "variables": {}
        },
        "ServerOnlyCompressionTest.get_server_compression_options": {
            "name": "get_server_compression_options",
            "location": -1,
            "return": [
                "dict"
            ],
            "arguments": {},
            "variables": {}
        },
        "global": {},
        "CoroutineOnMessageHandler.initialize": {
            "name": "initialize",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "close_future": [],
                "compression_options": [
                    "None"
                ]
            },
            "variables": {
                "compression_options": [
                    "None"
                ],
                "sleeping": [
                    "int"
                ]
            }
        },
        "TestWebSocketHandler.initialize": {
            "name": "initialize",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "close_future": [],
                "compression_options": [
                    "None"
                ]
            },
            "variables": {
                "compression_options": [
                    "None"
                ]
            }
        },
        "CythonMaskFunctionTest.mask": {
            "name": "mask",
            "location": -1,
            "return": [],
            "arguments": {
                "mask": [],
                "data": []
            },
            "variables": {
                "speedups": [
                    "None"
                ]
            }
        },
        "PythonMaskFunctionTest.mask": {
            "name": "mask",
            "location": -1,
            "return": [],
            "arguments": {
                "mask": [],
                "data": []
            },
            "variables": {}
        },
        "TestWebSocketHandler.on_close": {
            "name": "on_close",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "AsyncPrepareHandler.on_message": {
            "name": "on_message",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "message": []
            },
            "variables": {}
        },
        "CoroutineOnMessageHandler.on_message": {
            "name": "on_message",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {
                "message": []
            },
            "variables": {
                "sleeping": [
                    "int"
                ]
            }
        },
        "EchoHandler.on_message": {
            "name": "on_message",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {
                "message": []
            },
            "variables": {}
        },
        "ErrorInOnMessageHandler.on_message": {
            "name": "on_message",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "message": []
            },
            "variables": {}
        },
        "RenderMessageHandler.on_message": {
            "name": "on_message",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "message": []
            },
            "variables": {}
        },
        "ClientPeriodicPingTest,PingHandler.on_ping": {
            "name": "on_ping",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "data": []
            },
            "variables": {}
        },
        "ServerPeriodicPingTest,PingHandler.on_pong": {
            "name": "on_pong",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "data": []
            },
            "variables": {}
        },
        "CloseReasonHandler.open": {
            "name": "open",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "on_close_called": [
                    "bool"
                ]
            }
        },
        "HeaderHandler.open": {
            "name": "open",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "methods_to_test": [
                    "list"
                ]
            }
        },
        "PathArgsHandler.open": {
            "name": "open",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "arg": []
            },
            "variables": {}
        },
        "AsyncPrepareHandler.prepare": {
            "name": "prepare",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {}
        },
        "HeaderEchoHandler.prepare": {
            "name": "prepare",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "HeaderEchoHandler.set_default_headers": {
            "name": "set_default_headers",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "WebSocketTest.tearDown": {
            "name": "tearDown",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "WebSocketTest.test_async_prepare": {
            "name": "test_async_prepare",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "ws": [
                    "typing.Generator"
                ],
                "res": [
                    "typing.Generator"
                ]
            }
        },
        "WebSocketTest.test_bad_websocket_version": {
            "name": "test_bad_websocket_version",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "WebSocketTest.test_binary_message": {
            "name": "test_binary_message",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {
                "ws": [
                    "typing.Generator"
                ],
                "response": [
                    "typing.Generator"
                ]
            }
        },
        "WebSocketTest.test_check_origin_invalid": {
            "name": "test_check_origin_invalid",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {
                "url": [
                    "typing.Text"
                ],
                "headers": [
                    "dict[typing.Text, typing.Text]"
                ]
            }
        },
        "WebSocketTest.test_check_origin_invalid_partial_url": {
            "name": "test_check_origin_invalid_partial_url",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {
                "url": [
                    "typing.Text"
                ],
                "headers": [
                    "dict[typing.Text, typing.Text]"
                ]
            }
        },
        "WebSocketTest.test_check_origin_invalid_subdomains": {
            "name": "test_check_origin_invalid_subdomains",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {
                "url": [
                    "typing.Text"
                ],
                "headers": [
                    "dict[typing.Text, typing.Text]"
                ]
            }
        },
        "WebSocketTest.test_check_origin_valid_no_path": {
            "name": "test_check_origin_valid_no_path",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {
                "url": [
                    "typing.Text"
                ],
                "headers": [
                    "dict[typing.Text, typing.Text]"
                ],
                "ws": [
                    "typing.Generator"
                ],
                "response": [
                    "typing.Generator"
                ]
            }
        },
        "WebSocketTest.test_check_origin_valid_with_path": {
            "name": "test_check_origin_valid_with_path",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {
                "url": [
                    "typing.Text"
                ],
                "headers": [
                    "dict[typing.Text, typing.Text]"
                ],
                "ws": [
                    "typing.Generator"
                ],
                "response": [
                    "typing.Generator"
                ]
            }
        },
        "WebSocketTest.test_client_close_reason": {
            "name": "test_client_close_reason",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "ws": [
                    "typing.Generator"
                ]
            }
        },
        "ClientPeriodicPingTest.test_client_ping": {
            "name": "test_client_ping",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {
                "ws": [
                    "typing.Generator"
                ],
                "response": [
                    "typing.Generator"
                ]
            }
        },
        "WebSocketTest.test_coroutine": {
            "name": "test_coroutine",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {
                "ws": [
                    "typing.Generator"
                ],
                "res": [
                    "typing.Generator"
                ]
            }
        },
        "WebSocketTest.test_error_in_on_message": {
            "name": "test_error_in_on_message",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {
                "ws": [
                    "typing.Generator"
                ],
                "response": [
                    "typing.Generator"
                ]
            }
        },
        "WebSocketTest.test_http_request": {
            "name": "test_http_request",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "MaxMessageSizeTest.test_large_message": {
            "name": "test_large_message",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "ws": [
                    "typing.Generator"
                ],
                "msg": [
                    "typing.Text"
                ],
                "resp": [
                    "typing.Generator"
                ]
            }
        },
        "MaskFunctionMixin.test_mask": {
            "name": "test_mask",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "CompressionTestMixin.test_message_sizes": {
            "name": "test_message_sizes",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {
                "ws": [
                    "typing.Generator"
                ],
                "response": [
                    "typing.Generator"
                ]
            }
        },
        "WebSocketTest.test_missing_websocket_key": {
            "name": "test_missing_websocket_key",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "WebSocketNativeCoroutineTest.test_native_coroutine": {
            "name": "test_native_coroutine",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {
                "ws": [
                    "typing.Generator"
                ],
                "res": [
                    "typing.Generator"
                ]
            }
        },
        "WebSocketTest.test_path_args": {
            "name": "test_path_args",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "ws": [
                    "typing.Generator"
                ],
                "res": [
                    "typing.Generator"
                ]
            }
        },
        "WebSocketTest.test_render_message": {
            "name": "test_render_message",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {
                "ws": [
                    "typing.Generator"
                ],
                "response": [
                    "typing.Generator"
                ]
            }
        },
        "WebSocketTest.test_server_close_reason": {
            "name": "test_server_close_reason",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "ws": [
                    "typing.Generator"
                ],
                "msg": [
                    "typing.Generator"
                ]
            }
        },
        "ServerPeriodicPingTest.test_server_ping": {
            "name": "test_server_ping",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {
                "ws": [
                    "typing.Generator"
                ],
                "response": [
                    "typing.Generator"
                ]
            }
        },
        "WebSocketTest.test_unicode_message": {
            "name": "test_unicode_message",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {
                "ws": [
                    "typing.Generator"
                ],
                "response": [
                    "typing.Generator"
                ]
            }
        },
        "WebSocketTest.test_websocket_callbacks": {
            "name": "test_websocket_callbacks",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "WebSocketTest.test_websocket_close_buffered_data": {
            "name": "test_websocket_close_buffered_data",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {
                "ws": [
                    "typing.Generator"
                ]
            }
        },
        "WebSocketTest.test_websocket_gen": {
            "name": "test_websocket_gen",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {
                "ws": [
                    "typing.Generator"
                ],
                "response": [
                    "typing.Generator"
                ]
            }
        },
        "WebSocketTest.test_websocket_header_echo": {
            "name": "test_websocket_header_echo",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {
                "ws": [
                    "typing.Generator"
                ]
            }
        },
        "WebSocketTest.test_websocket_headers": {
            "name": "test_websocket_headers",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {
                "ws": [
                    "typing.Generator"
                ],
                "response": [
                    "typing.Generator"
                ]
            }
        },
        "WebSocketTest.test_websocket_http_fail": {
            "name": "test_websocket_http_fail",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {}
        },
        "WebSocketTest.test_websocket_http_success": {
            "name": "test_websocket_http_success",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {}
        },
        "WebSocketTest.test_websocket_network_fail": {
            "name": "test_websocket_network_fail",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {}
        },
        "WebSocketTest.test_write_after_close": {
            "name": "test_write_after_close",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "ws": [
                    "typing.Generator"
                ],
                "msg": [
                    "typing.Generator"
                ]
            }
        },
        "DefaultCompressionTest.verify_wire_bytes": {
            "name": "verify_wire_bytes",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "bytes_in": [],
                "bytes_out": []
            },
            "variables": {}
        },
        "UncompressedTestMixin.verify_wire_bytes": {
            "name": "verify_wire_bytes",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "bytes_in": [],
                "bytes_out": []
            },
            "variables": {}
        },
        "WebSocketBaseTestCase.ws_connect": {
            "name": "ws_connect",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [],
                "kwargs": []
            },
            "variables": {
                "ws": [
                    "typing.Generator"
                ]
            }
        }
    },
    "tornado-5.0.2/tornado/test/windows_test.py": {
        "global": {},
        "WindowsTest.test_set_close_exec": {
            "name": "test_set_close_exec",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        }
    },
    "tornado-5.0.2/tornado/test/wsgi_test.py": {
        "WSGIApplicationTest,HelloHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "WSGIApplicationTest,PathQuotingHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "path": []
            },
            "variables": {}
        },
        "WSGIAdapterWrappedTest.get_app": {
            "name": "get_app",
            "location": -1,
            "return": [
                "WSGIContainer"
            ],
            "arguments": {},
            "variables": {
                "app": [
                    "Application"
                ]
            }
        },
        "WSGIApplicationTest.get_app": {
            "name": "get_app",
            "location": -1,
            "return": [
                "WSGIContainer"
            ],
            "arguments": {},
            "variables": {}
        },
        "WSGIApplicationWrappedTest.get_app": {
            "name": "get_app",
            "location": -1,
            "return": [
                "WSGIContainer"
            ],
            "arguments": {},
            "variables": {
                "app": [
                    "WSGIApplication"
                ]
            }
        },
        "WSGIConnectionTest.get_app": {
            "name": "get_app",
            "location": -1,
            "return": [
                "WSGIContainer"
            ],
            "arguments": {},
            "variables": {}
        },
        "WSGIContainerTest.get_app": {
            "name": "get_app",
            "location": -1,
            "return": [
                "WSGIContainer"
            ],
            "arguments": {},
            "variables": {}
        },
        "global": {},
        "WSGIApplicationTest.test_path_quoting": {
            "name": "test_path_quoting",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "WSGIApplicationTest.test_simple": {
            "name": "test_simple",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "WSGIContainerTest.test_simple": {
            "name": "test_simple",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "WSGIApplicationTest.test_types": {
            "name": "test_types",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "headers": [
                    "dict[typing.Text, typing.Text]"
                ]
            }
        },
        "wrap_web_tests_adapter": {
            "name": "wrap_web_tests_adapter",
            "location": -1,
            "return": [
                "dict[, WSGIAdapterWrappedTest]"
            ],
            "arguments": {},
            "variables": {
                "result": [
                    "dict",
                    "dict[, WSGIAdapterWrappedTest]"
                ]
            }
        },
        "wrap_web_tests_application": {
            "name": "wrap_web_tests_application",
            "location": -1,
            "return": [
                "dict[, WSGIApplicationWrappedTest]"
            ],
            "arguments": {},
            "variables": {
                "result": [
                    "dict",
                    "dict[, WSGIApplicationWrappedTest]"
                ]
            }
        },
        "WSGIContainerTest.wsgi_app": {
            "name": "wsgi_app",
            "location": -1,
            "return": [
                "list[bytes]"
            ],
            "arguments": {
                "environ": [],
                "start_response": []
            },
            "variables": {
                "status": [
                    "typing.Text"
                ],
                "response_headers": [
                    "list[tuple[typing.Text]]"
                ]
            }
        }
    },
    "tornado-5.0.2/tornado/util.py": {
        "ObjectDict.__getattr__": {
            "name": "__getattr__",
            "location": -1,
            "return": [],
            "arguments": {
                "name": []
            },
            "variables": {}
        },
        "ArgReplacer.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "func": [],
                "name": []
            },
            "variables": {
                "arg_pos": [
                    "None"
                ]
            }
        },
        "GzipDecompressor.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "Configurable.__new__": {
            "name": "__new__",
            "location": -1,
            "return": [],
            "arguments": {
                "cls": [],
                "kwargs": [],
                "args": []
            },
            "variables": {
                "cls": [
                    "base"
                ],
                "init_kwargs": [
                    "dict"
                ]
            }
        },
        "ObjectDict.__setattr__": {
            "name": "__setattr__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [],
                "value": []
            },
            "variables": {
                "self": [
                    "ObjectDict"
                ]
            }
        },
        "_get_emulated_is_finalizing": {
            "name": "_get_emulated_is_finalizing",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {
                "L": [
                    "list"
                ]
            }
        },
        "ArgReplacer._getargnames": {
            "name": "_getargnames",
            "location": -1,
            "return": [],
            "arguments": {
                "func": []
            },
            "variables": {}
        },
        "_re_unescape_replacement": {
            "name": "_re_unescape_replacement",
            "location": -1,
            "return": [],
            "arguments": {
                "match": []
            },
            "variables": {
                "_alphanum": [
                    "set[typing.Text]"
                ]
            }
        },
        "Configurable._restore_configuration": {
            "name": "_restore_configuration",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "saved": []
            },
            "variables": {}
        },
        "Configurable._save_configuration": {
            "name": "_save_configuration",
            "location": -1,
            "return": [
                "tuple"
            ],
            "arguments": {
                "cls": []
            },
            "variables": {}
        },
        "_websocket_mask_python": {
            "name": "_websocket_mask_python",
            "location": -1,
            "return": [],
            "arguments": {
                "mask": [],
                "data": []
            },
            "variables": {
                "PY3": [
                    "bool"
                ]
            }
        },
        "cast": {
            "name": "cast",
            "location": -1,
            "return": [],
            "arguments": {
                "typ": [],
                "x": []
            },
            "variables": {}
        },
        "Configurable.configurable_base": {
            "name": "configurable_base",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            },
            "variables": {}
        },
        "Configurable.configurable_default": {
            "name": "configurable_default",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            },
            "variables": {}
        },
        "Configurable.configure": {
            "name": "configure",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "impl": [],
                "kwargs": []
            },
            "variables": {
                "unicode_type": [
                    "str"
                ]
            }
        },
        "Configurable.configured_class": {
            "name": "configured_class",
            "location": -1,
            "return": [],
            "arguments": {
                "cls": []
            },
            "variables": {}
        },
        "GzipDecompressor.decompress": {
            "name": "decompress",
            "location": -1,
            "return": [],
            "arguments": {
                "value": [],
                "max_length": [
                    "None"
                ]
            },
            "variables": {
                "max_length": [
                    "None"
                ]
            }
        },
        "doctests": {
            "name": "doctests",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "errno_from_exception": {
            "name": "errno_from_exception",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "e": []
            },
            "variables": {}
        },
        "exec_in": {
            "name": "exec_in",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "code": [],
                "glob": [],
                "loc": [
                    "None"
                ]
            },
            "variables": {
                "code": [
                    "basestring_type"
                ],
                "loc": [
                    "None"
                ]
            }
        },
        "GzipDecompressor.flush": {
            "name": "flush",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "ArgReplacer.get_old_value": {
            "name": "get_old_value",
            "location": -1,
            "return": [],
            "arguments": {
                "args": [],
                "kwargs": [],
                "default": [
                    "None"
                ]
            },
            "variables": {
                "default": [
                    "None"
                ]
            }
        },
        "global": {},
        "import_object": {
            "name": "import_object",
            "location": -1,
            "return": [],
            "arguments": {
                "name": []
            },
            "variables": {}
        },
        "Configurable.initialize": {
            "name": "initialize",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "is_finalizing": {
            "name": "is_finalizing",
            "location": -1,
            "return": [
                "bool"
            ],
            "arguments": {},
            "variables": {}
        },
        "raise_exc_info": {
            "name": "raise_exc_info",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "exc_info": []
            },
            "variables": {}
        },
        "re_unescape": {
            "name": "re_unescape",
            "location": -1,
            "return": [],
            "arguments": {
                "s": []
            },
            "variables": {}
        },
        "ArgReplacer.replace": {
            "name": "replace",
            "location": -1,
            "return": [
                "tuple[list]"
            ],
            "arguments": {
                "new_value": [],
                "args": [],
                "kwargs": []
            },
            "variables": {
                "args": [
                    "list"
                ]
            }
        },
        "timedelta_to_seconds": {
            "name": "timedelta_to_seconds",
            "location": -1,
            "return": [
                "float"
            ],
            "arguments": {
                "td": []
            },
            "variables": {}
        },
        "GzipDecompressor.unconsumed_tail": {
            "name": "unconsumed_tail",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        }
    },
    "tornado-5.0.2/tornado/websocket.py": {
        "WebSocketClientConnection.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "request": [],
                "on_message_callback": [
                    "None"
                ],
                "compression_options": [
                    "None"
                ],
                "ping_interval": [
                    "None"
                ],
                "ping_timeout": [
                    "None"
                ],
                "max_message_size": [
                    "None"
                ]
            },
            "variables": {
                "compression_options": [
                    "None"
                ],
                "connect_future": [
                    "Future"
                ],
                "protocol": [
                    "None"
                ],
                "read_future": [
                    "None"
                ],
                "on_message_callback": [
                    "None"
                ],
                "_on_message_callback": [
                    "None"
                ],
                "close_code": [
                    "None"
                ],
                "close_reason": [
                    "None"
                ],
                "ping_interval": [
                    "None"
                ],
                "ping_timeout": [
                    "None"
                ],
                "max_message_size": [
                    "None"
                ],
                "scheme": [
                    "typing.Text"
                ],
                "tcp_client": [
                    "TCPClient"
                ]
            }
        },
        "WebSocketHandler.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "application": [],
                "request": [],
                "kwargs": []
            },
            "variables": {
                "ws_connection": [
                    "None"
                ],
                "close_code": [
                    "None"
                ],
                "close_reason": [
                    "None"
                ],
                "stream": [
                    "None"
                ],
                "_on_close_called": [
                    "bool"
                ]
            }
        },
        "WebSocketProtocol.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "handler": []
            },
            "variables": {
                "client_terminated": [
                    "bool"
                ],
                "server_terminated": [
                    "bool"
                ]
            }
        },
        "WebSocketProtocol13.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "handler": [],
                "mask_outgoing": [
                    "bool"
                ],
                "compression_options": [
                    "None"
                ]
            },
            "variables": {
                "mask_outgoing": [
                    "bool"
                ],
                "_final_frame": [
                    "bool"
                ],
                "_frame_opcode": [
                    "None"
                ],
                "_masked_frame": [
                    "None"
                ],
                "_frame_mask": [
                    "None"
                ],
                "_frame_length": [
                    "None"
                ],
                "_fragmented_message_buffer": [
                    "None"
                ],
                "_fragmented_message_opcode": [
                    "None"
                ],
                "_waiting": [
                    "None"
                ],
                "compression_options": [
                    "None"
                ],
                "_compression_options": [
                    "None"
                ],
                "_decompressor": [
                    "None"
                ],
                "_compressor": [
                    "None"
                ],
                "_frame_compressed": [
                    "None"
                ],
                "_message_bytes_in": [
                    "int"
                ],
                "_message_bytes_out": [
                    "int"
                ],
                "_wire_bytes_in": [
                    "int"
                ],
                "_wire_bytes_out": [
                    "int"
                ],
                "ping_callback": [
                    "None"
                ],
                "last_ping": [
                    "int"
                ],
                "last_pong": [
                    "int"
                ]
            }
        },
        "_PerMessageDeflateCompressor.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "persistent": [],
                "max_wbits": [],
                "compression_options": []
            },
            "variables": {
                "max_wbits": [
                    "None"
                ],
                "_mem_level": [
                    "int"
                ],
                "_compressor": [
                    "None"
                ]
            }
        },
        "_PerMessageDeflateDecompressor.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "persistent": [],
                "max_wbits": [],
                "compression_options": [
                    "None"
                ]
            },
            "variables": {
                "max_wbits": [
                    "None"
                ],
                "_decompressor": [
                    "None"
                ]
            }
        },
        "WebSocketProtocol._abort": {
            "name": "_abort",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "client_terminated": [
                    "bool"
                ],
                "server_terminated": [
                    "bool"
                ]
            }
        },
        "WebSocketProtocol13._accept_connection": {
            "name": "_accept_connection",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "subprotocols": [
                    "list"
                ]
            }
        },
        "WebSocketHandler._attach_stream": {
            "name": "_attach_stream",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "method": [
                    "typing.Text"
                ]
            }
        },
        "WebSocketHandler._break_cycles": {
            "name": "_break_cycles",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "WebSocketProtocol13._challenge_response": {
            "name": "_challenge_response",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "_PerMessageDeflateCompressor._create_compressor": {
            "name": "_create_compressor",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "WebSocketProtocol13._create_compressors": {
            "name": "_create_compressors",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "side": [],
                "agreed_parameters": [],
                "compression_options": [
                    "None"
                ]
            },
            "variables": {
                "allowed_keys": [
                    "set[typing.Text]"
                ],
                "other_side": [
                    "typing.Text"
                ],
                "compression_options": [
                    "None"
                ],
                "_compressor": [
                    "_PerMessageDeflateCompressor"
                ],
                "_decompressor": [
                    "_PerMessageDeflateDecompressor"
                ]
            }
        },
        "_PerMessageDeflateDecompressor._create_decompressor": {
            "name": "_create_decompressor",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "WebSocketProtocol13._get_compressor_options": {
            "name": "_get_compressor_options",
            "location": -1,
            "return": [],
            "arguments": {
                "side": [],
                "agreed_parameters": [],
                "compression_options": [
                    "None"
                ]
            },
            "variables": {
                "wbits_header": [
                    "None"
                ],
                "compression_options": [
                    "None"
                ]
            }
        },
        "WebSocketProtocol13._handle_message": {
            "name": "_handle_message",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "opcode": [],
                "data": []
            },
            "variables": {
                "client_terminated": [
                    "bool"
                ]
            }
        },
        "WebSocketProtocol13._handle_websocket_headers": {
            "name": "_handle_websocket_headers",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "fields": [
                    "tuple[typing.Text]"
                ]
            }
        },
        "WebSocketProtocol13._on_frame_data": {
            "name": "_on_frame_data",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "data": []
            },
            "variables": {
                "handled_future": [
                    "None"
                ],
                "_fragmented_message_buffer": [
                    "None"
                ]
            }
        },
        "WebSocketProtocol13._on_frame_length_16": {
            "name": "_on_frame_length_16",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "data": []
            },
            "variables": {}
        },
        "WebSocketProtocol13._on_frame_length_64": {
            "name": "_on_frame_length_64",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "data": []
            },
            "variables": {}
        },
        "WebSocketProtocol13._on_frame_start": {
            "name": "_on_frame_start",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "data": []
            },
            "variables": {
                "_frame_compressed": [
                    "bool"
                ],
                "_masked_frame": [
                    "bool"
                ]
            }
        },
        "WebSocketClientConnection._on_http_response": {
            "name": "_on_http_response",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "response": []
            },
            "variables": {}
        },
        "WebSocketProtocol13._on_masked_frame_data": {
            "name": "_on_masked_frame_data",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "data": []
            },
            "variables": {}
        },
        "WebSocketProtocol13._on_masking_key": {
            "name": "_on_masking_key",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "data": []
            },
            "variables": {}
        },
        "WebSocketProtocol13._parse_extensions_header": {
            "name": "_parse_extensions_header",
            "location": -1,
            "return": [
                "list"
            ],
            "arguments": {
                "headers": []
            },
            "variables": {}
        },
        "WebSocketProtocol13._process_server_headers": {
            "name": "_process_server_headers",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "key": [],
                "headers": []
            },
            "variables": {}
        },
        "_raise_not_supported_for_websockets": {
            "name": "_raise_not_supported_for_websockets",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "kwargs": [],
                "args": []
            },
            "variables": {}
        },
        "WebSocketProtocol13._read_frame_data": {
            "name": "_read_frame_data",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "masked": []
            },
            "variables": {
                "_fragmented_message_buffer": [
                    "None"
                ]
            }
        },
        "WebSocketProtocol13._receive_frame": {
            "name": "_receive_frame",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "WebSocketProtocol._run_callback": {
            "name": "_run_callback",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "callback": [],
                "kwargs": [],
                "args": []
            },
            "variables": {
                "result": [
                    "None"
                ]
            }
        },
        "WebSocketProtocol13._write_frame": {
            "name": "_write_frame",
            "location": -1,
            "return": [],
            "arguments": {
                "fin": [],
                "opcode": [],
                "data": [],
                "flags": [
                    "int"
                ]
            },
            "variables": {
                "finbit": [
                    "int"
                ],
                "flags": [
                    "int"
                ],
                "data_len": [
                    "int"
                ],
                "mask_bit": [
                    "int"
                ]
            }
        },
        "WebSocketProtocol13.accept_connection": {
            "name": "accept_connection",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "log_msg": [
                    "typing.Text"
                ]
            }
        },
        "WebSocketHandler.check_origin": {
            "name": "check_origin",
            "location": -1,
            "return": [
                "bool"
            ],
            "arguments": {
                "origin": []
            },
            "variables": {}
        },
        "WebSocketClientConnection.close": {
            "name": "close",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "code": [
                    "None"
                ],
                "reason": [
                    "None"
                ]
            },
            "variables": {
                "protocol": [
                    "None"
                ],
                "code": [
                    "None"
                ],
                "reason": [
                    "None"
                ]
            }
        },
        "WebSocketHandler.close": {
            "name": "close",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "code": [
                    "None"
                ],
                "reason": [
                    "None"
                ]
            },
            "variables": {
                "ws_connection": [
                    "None"
                ],
                "code": [
                    "None"
                ],
                "reason": [
                    "None"
                ]
            }
        },
        "WebSocketProtocol13.close": {
            "name": "close",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "code": [
                    "None"
                ],
                "reason": [
                    "None"
                ]
            },
            "variables": {
                "server_terminated": [
                    "bool"
                ],
                "code": [
                    "None",
                    "int"
                ],
                "reason": [
                    "None"
                ],
                "close_data": [
                    "bytes"
                ],
                "_waiting": [
                    "None"
                ]
            }
        },
        "_PerMessageDeflateCompressor.compress": {
            "name": "compress",
            "location": -1,
            "return": [],
            "arguments": {
                "data": []
            },
            "variables": {}
        },
        "WebSocketProtocol13.compute_accept_value": {
            "name": "compute_accept_value",
            "location": -1,
            "return": [],
            "arguments": {
                "key": []
            },
            "variables": {}
        },
        "_PerMessageDeflateDecompressor.decompress": {
            "name": "decompress",
            "location": -1,
            "return": [],
            "arguments": {
                "data": []
            },
            "variables": {}
        },
        "WebSocketHandler.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "kwargs": [],
                "args": []
            },
            "variables": {
                "log_msg": [
                    "typing.Text"
                ]
            }
        },
        "WebSocketHandler.get_compression_options": {
            "name": "get_compression_options",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "WebSocketClientConnection.get_websocket_protocol": {
            "name": "get_websocket_protocol",
            "location": -1,
            "return": [
                "WebSocketProtocol13"
            ],
            "arguments": {},
            "variables": {}
        },
        "WebSocketHandler.get_websocket_protocol": {
            "name": "get_websocket_protocol",
            "location": -1,
            "return": [
                "WebSocketProtocol13"
            ],
            "arguments": {},
            "variables": {}
        },
        "global": {},
        "WebSocketClientConnection.headers_received": {
            "name": "headers_received",
            "location": -1,
            "return": [],
            "arguments": {
                "start_line": [],
                "headers": []
            },
            "variables": {
                "_timeout": [
                    "None"
                ],
                "final_callback": [
                    "None"
                ]
            }
        },
        "WebSocketHandler.max_message_size": {
            "name": "max_message_size",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "WebSocketHandler.on_close": {
            "name": "on_close",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "WebSocketClientConnection.on_connection_close": {
            "name": "on_connection_close",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "WebSocketHandler.on_connection_close": {
            "name": "on_connection_close",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "ws_connection": [
                    "None"
                ],
                "_on_close_called": [
                    "bool"
                ]
            }
        },
        "WebSocketProtocol.on_connection_close": {
            "name": "on_connection_close",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "WebSocketClientConnection.on_message": {
            "name": "on_message",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "message": []
            },
            "variables": {
                "read_future": [
                    "None"
                ]
            }
        },
        "WebSocketHandler.on_message": {
            "name": "on_message",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "message": []
            },
            "variables": {}
        },
        "WebSocketClientConnection.on_ping": {
            "name": "on_ping",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "data": []
            },
            "variables": {}
        },
        "WebSocketHandler.on_ping": {
            "name": "on_ping",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "data": []
            },
            "variables": {}
        },
        "WebSocketClientConnection.on_pong": {
            "name": "on_pong",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "data": []
            },
            "variables": {}
        },
        "WebSocketHandler.on_pong": {
            "name": "on_pong",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "data": []
            },
            "variables": {}
        },
        "WebSocketHandler.open": {
            "name": "open",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "kwargs": [],
                "args": []
            },
            "variables": {}
        },
        "WebSocketProtocol13.periodic_ping": {
            "name": "periodic_ping",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "WebSocketHandler.ping": {
            "name": "ping",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "data": []
            },
            "variables": {
                "ws_connection": [
                    "None"
                ]
            }
        },
        "WebSocketHandler.ping_interval": {
            "name": "ping_interval",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "WebSocketProtocol13.ping_interval": {
            "name": "ping_interval",
            "location": -1,
            "return": [
                "int"
            ],
            "arguments": {},
            "variables": {
                "interval": [
                    "None"
                ]
            }
        },
        "WebSocketHandler.ping_timeout": {
            "name": "ping_timeout",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "WebSocketProtocol13.ping_timeout": {
            "name": "ping_timeout",
            "location": -1,
            "return": [
                "int"
            ],
            "arguments": {},
            "variables": {
                "timeout": [
                    "None"
                ]
            }
        },
        "WebSocketClientConnection.read_message": {
            "name": "read_message",
            "location": -1,
            "return": [
                "Future"
            ],
            "arguments": {
                "callback": [
                    "None"
                ]
            },
            "variables": {
                "future": [
                    "Future"
                ],
                "read_future": [
                    "Future"
                ],
                "callback": [
                    "None"
                ]
            }
        },
        "WebSocketHandler.select_subprotocol": {
            "name": "select_subprotocol",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "subprotocols": []
            },
            "variables": {}
        },
        "WebSocketHandler.send_error": {
            "name": "send_error",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "kwargs": [],
                "args": []
            },
            "variables": {
                "stream": [
                    "None"
                ]
            }
        },
        "WebSocketHandler.set_nodelay": {
            "name": "set_nodelay",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "value": []
            },
            "variables": {}
        },
        "WebSocketProtocol13.start_pinging": {
            "name": "start_pinging",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "ping_callback": [
                    "PeriodicCallback"
                ]
            }
        },
        "websocket_connect": {
            "name": "websocket_connect",
            "location": -1,
            "return": [],
            "arguments": {
                "url": [],
                "callback": [
                    "None"
                ],
                "connect_timeout": [
                    "None"
                ],
                "on_message_callback": [
                    "None"
                ],
                "compression_options": [
                    "None"
                ],
                "ping_interval": [
                    "None"
                ],
                "ping_timeout": [
                    "None"
                ],
                "max_message_size": [
                    "None"
                ]
            },
            "variables": {
                "url": [
                    "httpclient_@_HTTPRequest"
                ],
                "request": [
                    "httpclient_@_HTTPRequest"
                ],
                "connect_timeout": [
                    "None"
                ],
                "on_message_callback": [
                    "None"
                ],
                "compression_options": [
                    "None"
                ],
                "ping_interval": [
                    "None"
                ],
                "ping_timeout": [
                    "None"
                ],
                "max_message_size": [
                    "None"
                ],
                "conn": [
                    "WebSocketClientConnection"
                ],
                "callback": [
                    "None"
                ]
            }
        },
        "WebSocketProtocol13.wrapper": {
            "name": "wrapper",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {}
        },
        "WebSocketClientConnection.write_message": {
            "name": "write_message",
            "location": -1,
            "return": [],
            "arguments": {
                "message": [],
                "binary": [
                    "bool"
                ]
            },
            "variables": {
                "binary": [
                    "bool"
                ]
            }
        },
        "WebSocketHandler.write_message": {
            "name": "write_message",
            "location": -1,
            "return": [],
            "arguments": {
                "message": [],
                "binary": [
                    "bool"
                ]
            },
            "variables": {
                "ws_connection": [
                    "None"
                ],
                "message": [
                    "dict"
                ],
                "binary": [
                    "bool"
                ]
            }
        },
        "WebSocketProtocol13.write_message": {
            "name": "write_message",
            "location": -1,
            "return": [],
            "arguments": {
                "message": [],
                "binary": [
                    "bool"
                ]
            },
            "variables": {
                "binary": [
                    "bool"
                ],
                "opcode": [
                    "int"
                ],
                "flags": [
                    "int"
                ]
            }
        },
        "WebSocketProtocol13.write_ping": {
            "name": "write_ping",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "data": []
            },
            "variables": {}
        }
    },
    "tornado-5.0.2/tornado/wsgi.py": {
        "WSGIAdapter.__call__": {
            "name": "__call__",
            "location": -1,
            "return": [],
            "arguments": {
                "environ": [],
                "start_response": []
            },
            "variables": {
                "body": [
                    "bytes"
                ],
                "connection": [
                    "_WSGIConnection"
                ]
            }
        },
        "WSGIApplication.__call__": {
            "name": "__call__",
            "location": -1,
            "return": [],
            "arguments": {
                "environ": [],
                "start_response": []
            },
            "variables": {}
        },
        "WSGIContainer.__call__": {
            "name": "__call__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "request": []
            },
            "variables": {
                "data": [
                    "dict"
                ],
                "response": [
                    "list"
                ],
                "body": [
                    "bytes"
                ],
                "status_code": [
                    "int"
                ],
                "header_set": [
                    "set"
                ]
            }
        },
        "WSGIAdapter.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "application": []
            },
            "variables": {
                "application": [
                    "WSGIApplication",
                    "typing.Callable"
                ]
            }
        },
        "WSGIContainer.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "wsgi_application": []
            },
            "variables": {}
        },
        "_WSGIConnection.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "method": [],
                "start_response": [],
                "context": []
            },
            "variables": {
                "_write_buffer": [
                    "list"
                ],
                "_finished": [
                    "bool"
                ],
                "_expected_content_remaining": [
                    "None"
                ],
                "_error": [
                    "None"
                ]
            }
        },
        "_WSGIRequestContext.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "remote_ip": [],
                "protocol": []
            },
            "variables": {}
        },
        "_WSGIRequestContext.__str__": {
            "name": "__str__",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "WSGIContainer._log": {
            "name": "_log",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "status_code": [],
                "request": []
            },
            "variables": {
                "request_time": [
                    "float"
                ]
            }
        },
        "WSGIContainer.environ": {
            "name": "environ",
            "location": -1,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,tuple[int],BytesIO,bool]]"
            ],
            "arguments": {
                "request": []
            },
            "variables": {
                "port": [
                    "int"
                ],
                "environ": [
                    "dict[typing.Text, typing.Union[typing.Text,tuple[int],BytesIO,bool]]"
                ]
            }
        },
        "_WSGIConnection.finish": {
            "name": "finish",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "_finished": [
                    "bool"
                ]
            }
        },
        "from_wsgi_str": {
            "name": "from_wsgi_str",
            "location": -1,
            "return": [],
            "arguments": {
                "s": []
            },
            "variables": {}
        },
        "global": {},
        "_WSGIConnection.set_close_callback": {
            "name": "set_close_callback",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "callback": []
            },
            "variables": {}
        },
        "WSGIContainer.start_response": {
            "name": "start_response",
            "location": -1,
            "return": [],
            "arguments": {
                "status": [],
                "response_headers": [],
                "exc_info": [
                    "None"
                ]
            },
            "variables": {}
        },
        "to_wsgi_str": {
            "name": "to_wsgi_str",
            "location": -1,
            "return": [],
            "arguments": {
                "s": []
            },
            "variables": {}
        },
        "_WSGIConnection.write": {
            "name": "write",
            "location": -1,
            "return": [
                "Future"
            ],
            "arguments": {
                "chunk": [],
                "callback": [
                    "None"
                ]
            },
            "variables": {
                "_expected_content_remaining": [
                    "int",
                    "None"
                ],
                "callback": [
                    "None"
                ],
                "_dummy_future": [
                    "Future"
                ]
            }
        },
        "_WSGIConnection.write_headers": {
            "name": "write_headers",
            "location": -1,
            "return": [
                "Future"
            ],
            "arguments": {
                "start_line": [],
                "headers": [],
                "chunk": [
                    "None"
                ],
                "callback": [
                    "None"
                ]
            },
            "variables": {
                "_expected_content_remaining": [
                    "int",
                    "None"
                ],
                "chunk": [
                    "None"
                ],
                "callback": [
                    "None"
                ],
                "_dummy_future": [
                    "Future"
                ]
            }
        }
    }
}