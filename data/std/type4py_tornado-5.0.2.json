{
    "tornado-5.0.2/setup.py": {
        "custom_build_ext.run": {
            "name": "run",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "e": [
                    "int",
                    "Tuple[int, int]",
                    "str",
                    "deque[str]"
                ]
            }
        },
        "custom_build_ext.build_extension": {
            "name": "build_extension",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "ext": [
                    "dict",
                    "Iterable[Tuple[str, str]]",
                    "Dict[str, Any]",
                    "str",
                    "list",
                    "Iterable[str]",
                    "Set[str]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "e": [
                    "int",
                    "Tuple[int, int]",
                    "str",
                    "deque[str]"
                ],
                "name": [
                    "str",
                    "Generator[str, None, None]"
                ]
            }
        },
        "global": {
            "install_requires": [
                "list",
                "List[str]"
            ],
            "kwargs": [
                "dict",
                "Dict[str, List[Any]]"
            ],
            "python_requires": [
                "int",
                "dict",
                "List[int]",
                "List[List[int]]",
                "str"
            ],
            "setuptools": [
                "list",
                "set",
                "Dict[str, Optional[bool]]",
                "Dict[str, Union[None, Any, Any]]",
                "Type[Optional[Any]]"
            ],
            "version": [
                "str"
            ]
        }
    },
    "tornado-5.0.2/demos/appengine/blog.py": {
        "wrapper": {
            "name": "wrapper",
            "location": 42,
            "return": [
                "List[str]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [
                    "str",
                    "float"
                ]
            },
            "variables": {}
        },
        "administrator": {
            "name": "administrator",
            "location": 39,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "method": [
                    "Callable",
                    "Callable[..., Optional[Any]]",
                    "List[str]",
                    "list",
                    "str"
                ]
            },
            "variables": {}
        },
        "BaseHandler.get_current_user": {
            "name": "get_current_user",
            "location": 60,
            "return": [
                "Iterable[str]",
                "set"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "administrator": [
                    "str",
                    "int",
                    "Mapping"
                ],
                "user": [
                    "list",
                    "int",
                    "Dict[str, Optional[str]]",
                    "Dict[str, object]",
                    "Dict[str, Any]",
                    "Tuple[str, str, str, str, str, str, str, str, str, str, str, str, str]"
                ]
            }
        },
        "BaseHandler.get_login_url": {
            "name": "get_login_url",
            "location": 66,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "BaseHandler.get_template_namespace": {
            "name": "get_template_namespace",
            "location": 69,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "ns": [
                    "Tuple[Any, Any, Any]",
                    "dict",
                    "str",
                    "Dict[str, dict]",
                    "defaultdict",
                    "Dict[str, Any]",
                    "Dict[str, str]"
                ]
            }
        },
        "HomeHandler.get": {
            "name": "get",
            "location": 77,
            "return": [
                "Iterator[object]",
                "bool",
                "Union[tuple, list]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "entries": [
                    "Set[str]",
                    "int",
                    "Dict[str, Dict[str, Any]]",
                    "Optional[Match[str]]"
                ]
            }
        },
        "EntryHandler.get": {
            "name": "get",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "slug": [
                    "str",
                    "bytes"
                ]
            },
            "variables": {
                "entry": [
                    "Dict[str, str]",
                    "Dict[Any, str]",
                    "dict",
                    "Dict[str, bool]"
                ]
            }
        },
        "ArchiveHandler.get": {
            "name": "get",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "entries": [
                    "str",
                    "int",
                    "Type[Tuple[int, int]]",
                    "Dict[str, Dict[str, Any]]"
                ]
            }
        },
        "FeedHandler.get": {
            "name": "get",
            "location": 101,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "entries": [
                    "Set[str]",
                    "int",
                    "Dict[str, Dict[str, Any]]",
                    "Optional[Match[str]]"
                ]
            }
        },
        "ComposeHandler.get": {
            "name": "get",
            "location": 109,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "entry": [
                    "Dict[str, str]",
                    "dict",
                    "str",
                    "Dict[str, int]"
                ],
                "key": [
                    "set",
                    "str",
                    "Dict[str, Any]",
                    "Set[str]",
                    "List[str]"
                ]
            }
        },
        "ComposeHandler.post": {
            "name": "post",
            "location": 115,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "body_source": [
                    "str",
                    "Optional[float]"
                ],
                "entry": [
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "str",
                    "List[Dict[str, Any]]"
                ],
                "existing": [
                    "int",
                    "list",
                    "str"
                ],
                "html": [
                    "dict"
                ],
                "key": [
                    "tuple",
                    "int",
                    "Dict[str, Any]",
                    "str",
                    "Tuple[str]"
                ],
                "slug": [
                    "str"
                ],
                "title": [
                    "str"
                ]
            }
        },
        "EntryModule.render": {
            "name": "render",
            "location": 148,
            "return": [
                "str"
            ],
            "arguments": {
                "args": [],
                "entry": [
                    "List[str]",
                    "str"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "global": {
            "application": [
                "str",
                "List[str]",
                "int",
                "Dict[str, List[Any]]",
                "Tuple[str, str, str, str, str, str, str, str]"
            ],
            "settings": []
        }
    },
    "tornado-5.0.2/demos/benchmark/benchmark.py": {
        "handle_sigchld": {
            "name": "handle_sigchld",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "frame": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "kwargs": [],
                "sig": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            },
            "variables": {}
        },
        "main": {
            "name": "main",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": []
            },
            "variables": {}
        },
        "run": {
            "name": "run",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": []
            },
            "variables": {
                "app": [],
                "args": [
                    "List[str]",
                    "List[bytes]"
                ],
                "io_loop": [
                    "list"
                ],
                "port": [
                    "int",
                    "List[Dict[str, Any]]",
                    "Dict[str, Union[Any, Any, Any]]",
                    "str",
                    "Dict[str, Any]",
                    "list"
                ]
            }
        },
        "RootHandler.get": {
            "name": "get",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "RootHandler._log": {
            "name": "_log",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "global": {
            "xrange": [
                "Type[range]",
                "int"
            ]
        }
    },
    "tornado-5.0.2/demos/benchmark/chunk_benchmark.py": {
        "callback": {
            "name": "callback",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "response": [
                    "int",
                    "dict",
                    "List['PlotInfo']",
                    "Callable"
                ]
            },
            "variables": {}
        },
        "main": {
            "name": "main",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": []
            },
            "variables": {
                "app": [
                    "str"
                ],
                "curl_client": [],
                "simple_client": []
            }
        },
        "ChunkHandler.get": {
            "name": "get",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "global": {
            "xrange": [
                "Type[range]",
                "int"
            ]
        }
    },
    "tornado-5.0.2/demos/benchmark/gen_benchmark.py": {
        "e2": {
            "name": "e2",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "callback": [
                    "dict",
                    "bool",
                    "int"
                ],
                "kwargs": []
            },
            "variables": {}
        },
        "e1": {
            "name": "e1",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": []
            },
            "variables": {}
        },
        "c2": {
            "name": "c2",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": []
            },
            "variables": {}
        },
        "c1": {
            "name": "c1",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": []
            },
            "variables": {}
        },
        "main": {
            "name": "main",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": []
            },
            "variables": {
                "results": [
                    "str",
                    "List[str]",
                    "Iterator[str]",
                    "Set[str]",
                    "Dict[str, str]",
                    "dict"
                ],
                "t": [
                    "List[str]",
                    "str",
                    "Tuple[Optional[str]]"
                ]
            }
        },
        "global": {}
    },
    "tornado-5.0.2/demos/benchmark/stack_context_benchmark.py": {
        "main": {
            "name": "main",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": []
            },
            "variables": {
                "base_cmd": [
                    "str"
                ],
                "cmds": [
                    "str",
                    "List[str]",
                    "int",
                    "Dict[str, List[Any]]",
                    "Tuple[str, str, str, str, str, str, str, str]"
                ]
            }
        },
        "Benchmark.enter_exit": {
            "name": "enter_exit",
            "location": 13,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "args": [],
                "count": [
                    "int",
                    "Callable",
                    "str"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Benchmark.call_wrapped": {
            "name": "call_wrapped",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "count": [
                    "Callable",
                    "int",
                    "float"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "queue": [
                    "float",
                    "Pattern[str]"
                ]
            }
        },
        "Benchmark.call_wrapped_inner": {
            "name": "call_wrapped_inner",
            "location": 34,
            "return": [],
            "arguments": {
                "args": [],
                "count": [
                    "dict",
                    "List[float]",
                    "str",
                    "Dict[str, Any]",
                    "list"
                ],
                "kwargs": [],
                "queue": [
                    "dict",
                    "List[float]",
                    "str",
                    "Dict[str, Any]",
                    "list"
                ],
                "self": []
            },
            "variables": {}
        },
        "StackBenchmark.make_context": {
            "name": "make_context",
            "location": 43,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "StackBenchmark.__context": {
            "name": "__context",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "ExceptionBenchmark.make_context": {
            "name": "make_context",
            "location": 52,
            "return": [
                "str",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "ExceptionBenchmark.__handle_exception": {
            "name": "__handle_exception",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "tb": [
                    "str",
                    "list",
                    "List[int]"
                ],
                "typ": [
                    "str",
                    "list",
                    "List[int]"
                ],
                "value": [
                    "str",
                    "list",
                    "List[int]"
                ]
            },
            "variables": {}
        },
        "global": {}
    },
    "tornado-5.0.2/demos/benchmark/template_benchmark.py": {
        "render": {
            "name": "render",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": []
            },
            "variables": {}
        },
        "main": {
            "name": "main",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": []
            },
            "variables": {
                "results": [
                    "list",
                    "List[str]",
                    "Set[str]",
                    "int",
                    "dict",
                    "str"
                ],
                "t": [
                    "str",
                    "int",
                    "string.Template",
                    "Type[List[Any]]",
                    "bool"
                ]
            }
        },
        "global": {
            "context": [
                "int",
                "dict",
                "List[int]",
                "List[List[int]]",
                "str"
            ],
            "tmpl": [
                "int",
                "List[int]",
                "Optional[Match[str]]",
                "bool",
                "bytes",
                "Tuple[str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str]"
            ]
        }
    },
    "tornado-5.0.2/demos/blog/blog.py": {
        "main": {
            "name": "main",
            "location": 234,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": []
            },
            "variables": {
                "http_server": [
                    "list",
                    "int",
                    "str"
                ]
            }
        },
        "Application.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "db": [
                    "str",
                    "Optional[str]"
                ],
                "handlers": [],
                "settings": [
                    "str",
                    "dict",
                    "list"
                ]
            }
        },
        "Application.maybe_create_tables": {
            "name": "maybe_create_tables",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "BaseHandler.db": {
            "name": "db",
            "location": 90,
            "return": [
                "Callable[[list], None]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "BaseHandler.get_current_user": {
            "name": "get_current_user",
            "location": 93,
            "return": [
                "Optional[str]",
                "str",
                "Optional[float]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "user_id": [
                    "str",
                    "int",
                    "Tuple[str]",
                    "list",
                    "Dict[str, str]",
                    "List[str]"
                ]
            }
        },
        "BaseHandler.any_author_exists": {
            "name": "any_author_exists",
            "location": 99,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "HomeHandler.get": {
            "name": "get",
            "location": 104,
            "return": [
                "Iterator[object]",
                "bool",
                "Union[tuple, list]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "entries": [
                    "int",
                    "Dict[str, int]",
                    "str"
                ]
            }
        },
        "EntryHandler.get": {
            "name": "get",
            "location": 114,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "slug": [
                    "int",
                    "Dict[str, bool]",
                    "str"
                ]
            },
            "variables": {
                "entry": [
                    "str",
                    "Dict[str, str]",
                    "Dict[str, Union[Any, Any]]"
                ]
            }
        },
        "ArchiveHandler.get": {
            "name": "get",
            "location": 122,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "entries": [
                    "int",
                    "Dict[str, int]",
                    "str"
                ]
            }
        },
        "FeedHandler.get": {
            "name": "get",
            "location": 129,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "entries": [
                    "int",
                    "Dict[str, int]",
                    "str"
                ]
            }
        },
        "ComposeHandler.get": {
            "name": "get",
            "location": 138,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "entry": [
                    "int",
                    "Dict[Optional[str], str]",
                    "dict"
                ],
                "id": [
                    "int",
                    "Generator[Any, None, None]",
                    "Callable(id)[[object], int]",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "ComposeHandler.post": {
            "name": "post",
            "location": 146,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "e": [
                    "str",
                    "int"
                ],
                "entry": [
                    "str",
                    "int",
                    "float",
                    "defaultdict",
                    "Dict[int, str]"
                ],
                "html": [
                    "List[Dict[str, Any]]",
                    "frozenset[str]"
                ],
                "id": [
                    "int",
                    "str"
                ],
                "slug": [
                    "str"
                ],
                "text": [
                    "str"
                ],
                "title": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "AuthCreateHandler.get": {
            "name": "get",
            "location": 179,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "AuthCreateHandler.post": {
            "name": "post",
            "location": 183,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "author_id": [
                    "str"
                ],
                "hashed_password": [
                    "str",
                    "Type[str]",
                    "List[str]"
                ]
            }
        },
        "AuthLoginHandler.get": {
            "name": "get",
            "location": 199,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "AuthLoginHandler.post": {
            "name": "post",
            "location": 207,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "author": [
                    "Dict[str, Union[Any, Any, Any]]",
                    "str",
                    "Dict[str, Union[Any, Any]]",
                    "Dict[str, Dict[str, Any]]"
                ],
                "hashed_password": [
                    "Type[str]",
                    "int"
                ]
            }
        },
        "AuthLogoutHandler.get": {
            "name": "get",
            "location": 224,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "EntryModule.render": {
            "name": "render",
            "location": 230,
            "return": [
                "str"
            ],
            "arguments": {
                "args": [],
                "entry": [
                    "List[str]",
                    "str"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "global": {
            "executor": []
        }
    },
    "tornado-5.0.2/demos/chat/chatdemo.py": {
        "main": {
            "name": "main",
            "location": 113,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": []
            },
            "variables": {
                "app": []
            }
        },
        "MessageBuffer.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "cache": [
                    "List[int]",
                    "List[str]",
                    "str",
                    "Set[str]"
                ],
                "cache_size": [
                    "int",
                    "str",
                    "List[str]",
                    "List[Dict[str, str]]",
                    "float"
                ],
                "waiters": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ]
            }
        },
        "MessageBuffer.wait_for_messages": {
            "name": "wait_for_messages",
            "location": 38,
            "return": [
                "int",
                "bool"
            ],
            "arguments": {
                "args": [],
                "cursor": [
                    "str",
                    "Optional[int]",
                    "IO",
                    "bool",
                    "int"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "new_count": [
                    "dict",
                    "List[str]",
                    "List[List[str]]",
                    "str",
                    "int"
                ],
                "result_future": [
                    "list"
                ]
            }
        },
        "MessageBuffer.cancel_wait": {
            "name": "cancel_wait",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "future": [
                    "str"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "MessageBuffer.new_messages": {
            "name": "new_messages",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "messages": [
                    "Dict[str, float]",
                    "bytes"
                ],
                "self": []
            },
            "variables": {
                "cache": [
                    "list",
                    "str",
                    "List[str]",
                    "int"
                ],
                "waiters": [
                    "int",
                    "dict",
                    "str"
                ]
            }
        },
        "MainHandler.get": {
            "name": "get",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "MessageNewHandler.post": {
            "name": "post",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "message": [
                    "str",
                    "int",
                    "List[Tuple[str, str, str, str, str]]"
                ]
            }
        },
        "MessageUpdatesHandler.post": {
            "name": "post",
            "location": 99,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "cursor": [
                    "slice",
                    "int",
                    "bytes",
                    "Optional[int]",
                    "Dict[str, Any]"
                ],
                "future": [
                    "List[str]",
                    "str",
                    "Tuple[Literal, Literal, Literal]"
                ],
                "messages": [
                    "int",
                    "Dict[str, int]",
                    "str",
                    "bool",
                    "float"
                ]
            }
        },
        "MessageUpdatesHandler.on_connection_close": {
            "name": "on_connection_close",
            "location": 109,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "global": {
            "global_message_buffer": [
                "asyncio.Future"
            ]
        }
    },
    "tornado-5.0.2/demos/facebook/facebook.py": {
        "main": {
            "name": "main",
            "location": 113,
            "return": [
                "bytes"
            ],
            "arguments": {
                "args": [],
                "kwargs": []
            },
            "variables": {
                "http_server": [
                    "list",
                    "int",
                    "str"
                ]
            }
        },
        "Application.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "handlers": [],
                "settings": [
                    "str",
                    "int"
                ]
            }
        },
        "BaseHandler.get_current_user": {
            "name": "get_current_user",
            "location": 55,
            "return": [
                "Optional[str]",
                "bool",
                "Optional[int]",
                "Optional[Dict]",
                "Optional[Literal[\"only_clustered\", \"include_clustered\"]]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "user_json": [
                    "dict",
                    "Dict[str, str]",
                    "str",
                    "Dict[int, str]",
                    "int"
                ]
            }
        },
        "MainHandler.get": {
            "name": "get",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "MainHandler._on_stream": {
            "name": "_on_stream",
            "location": 69,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "stream": [
                    "Optional[IO[bytes]]",
                    "List[str]",
                    "str",
                    "Optional[IO[str]]",
                    "int"
                ]
            },
            "variables": {}
        },
        "AuthLoginHandler.get": {
            "name": "get",
            "location": 79,
            "return": [
                "Iterator[object]",
                "bool",
                "Union[tuple, list]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "my_url": [
                    "str",
                    "bytes"
                ]
            }
        },
        "AuthLoginHandler._on_auth": {
            "name": "_on_auth",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "user": [
                    "Optional[str]"
                ]
            },
            "variables": {}
        },
        "AuthLogoutHandler.get": {
            "name": "get",
            "location": 103,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "PostModule.render": {
            "name": "render",
            "location": 109,
            "return": [
                "int",
                "dict",
                "float",
                "Dict[int, dict]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "post": [
                    "dict"
                ],
                "self": []
            },
            "variables": {}
        },
        "global": {}
    },
    "tornado-5.0.2/demos/file_upload/file_receiver.py": {
        "make_app": {
            "name": "make_app",
            "location": 51,
            "return": [
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "args": [],
                "kwargs": []
            },
            "variables": {}
        },
        "POSTHandler.post": {
            "name": "post",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "body": [
                    "str",
                    "list"
                ],
                "content_type": [
                    "str",
                    "list",
                    "List[str]",
                    "Tuple[str, str, str, str, str, str, str, str, str, str]",
                    "List[Dict[str, str]]"
                ],
                "filename": [
                    "List[str]",
                    "list"
                ]
            }
        },
        "PUTHandler.initialize": {
            "name": "initialize",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "bytes_read": [
                    "float",
                    "int",
                    "Dict[Optional[str], str]",
                    "Dict[str, Union[Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any]]"
                ]
            }
        },
        "PUTHandler.data_received": {
            "name": "data_received",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "chunk": [
                    "List[int]",
                    "list",
                    "bool",
                    "List[float]",
                    "str",
                    "int"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "PUTHandler.put": {
            "name": "put",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "filename": [
                    "str"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "filename": [
                    "str",
                    "Optional[List[str]]"
                ],
                "mtype": [
                    "str",
                    "int",
                    "Dict[str, str]",
                    "Set[str]"
                ]
            }
        },
        "global": {
            "app": []
        }
    },
    "tornado-5.0.2/demos/file_upload/file_uploader.py": {
        "multipart_producer": {
            "name": "multipart_producer",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "boundary": [
                    "bool",
                    "Union[Dict, List]",
                    "str",
                    "Callable"
                ],
                "filenames": [
                    "bool",
                    "str",
                    "Iterable[str]",
                    "Mapping[str, Any]",
                    "List[int]",
                    "int"
                ],
                "kwargs": [],
                "write": [
                    "str",
                    "dict",
                    "bool",
                    "bytes",
                    "BinaryIO",
                    "Optional[str]"
                ]
            },
            "variables": {
                "boundary_bytes": [
                    "int",
                    "str"
                ],
                "buf": [
                    "str",
                    "Dict[bytes, bytes]",
                    "Tuple[List[Any], List[Any], List[Any]]",
                    "bytes",
                    "set"
                ],
                "chunk": [
                    "str",
                    "int",
                    "Dict[int, List[int]]",
                    "bool",
                    "Set[int]"
                ],
                "filename_bytes": [
                    "int"
                ],
                "mtype": [
                    "int",
                    "List[int]",
                    "float"
                ]
            }
        },
        "post": {
            "name": "post",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "filenames": [
                    "str"
                ],
                "kwargs": []
            },
            "variables": {
                "boundary": [
                    "float",
                    "str",
                    "urllib.requesOpenerDirector",
                    "Dict[str, Union[Any, Any]]"
                ],
                "client": [
                    "str",
                    "Dict[bytes, Any]"
                ],
                "headers": [],
                "producer": [
                    "str",
                    "Dict[str, Union[Any, int, str]]"
                ],
                "response": []
            }
        },
        "raw_producer": {
            "name": "raw_producer",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "filename": [
                    "str"
                ],
                "kwargs": [],
                "write": [
                    "int",
                    "str",
                    "bool"
                ]
            },
            "variables": {
                "chunk": [
                    "str",
                    "int",
                    "Dict[int, List[int]]",
                    "bool",
                    "Set[int]"
                ]
            }
        },
        "put": {
            "name": "put",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "filenames": [
                    "str",
                    "IO",
                    "bool"
                ],
                "kwargs": []
            },
            "variables": {
                "client": [
                    "Generator[Any, None, None]",
                    "str",
                    "Dict[bytes, Any]",
                    "dict",
                    "Dict[str, Dict[str, Any]]"
                ],
                "headers": [
                    "Dict[str, str]",
                    "str",
                    "Dict[str, Any]",
                    "List[list]",
                    "tuple"
                ],
                "mtype": [
                    "Dict[str, str]",
                    "str"
                ],
                "producer": [
                    "str",
                    "dict",
                    "frozenset[int]",
                    "Dict[str, str]",
                    "Set[str]"
                ],
                "response": [
                    "str",
                    "Dict[str, Any]"
                ],
                "url_path": [
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "global": {
            "filenames": [
                "Dict[str, Any]",
                "dict",
                "list",
                "Dict[str, List[Any]]"
            ],
            "method": [
                "str",
                "List[str]"
            ]
        }
    },
    "tornado-5.0.2/demos/helloworld/helloworld.py": {
        "main": {
            "name": "main",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": []
            },
            "variables": {
                "application": [],
                "http_server": [
                    "list",
                    "int",
                    "str"
                ]
            }
        },
        "MainHandler.get": {
            "name": "get",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "global": {}
    },
    "tornado-5.0.2/demos/s3server/s3server.py": {
        "start": {
            "name": "start",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "bucket_depth": [
                    "IO",
                    "str"
                ],
                "kwargs": [],
                "port": [
                    "str"
                ],
                "root_directory": [
                    "IO",
                    "str"
                ]
            },
            "variables": {
                "application": [
                    "str",
                    "bool",
                    "datetime.datetime"
                ],
                "http_server": [
                    "Tuple[str, int]",
                    "int"
                ]
            }
        },
        "S3Application.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "bucket_depth": [
                    "str",
                    "int",
                    "Dict[int, int]",
                    "bool"
                ],
                "kwargs": [],
                "root_directory": [
                    "str",
                    "Sequence[str]",
                    "int"
                ],
                "self": []
            },
            "variables": {
                "bucket_depth": [
                    "bytes",
                    "str",
                    "float",
                    "Type[Callable[..., Any]]"
                ],
                "directory": [
                    "str"
                ]
            }
        },
        "BaseRequestHandler.render_xml": {
            "name": "render_xml",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "value": [
                    "dict",
                    "str",
                    "list",
                    "float"
                ]
            },
            "variables": {
                "name": [
                    "str",
                    "List[str]",
                    "Dict[int, str]"
                ],
                "parts": [
                    "list",
                    "bytes"
                ]
            }
        },
        "BaseRequestHandler._render_parts": {
            "name": "_render_parts",
            "location": 94,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "parts": [
                    "str",
                    "Union[list, str]",
                    "Union[str, list]",
                    "bool"
                ],
                "self": [],
                "value": [
                    "str",
                    "List[str]",
                    "int",
                    "Set[str]",
                    "Dict[str, Any]"
                ]
            },
            "variables": {
                "subvalue": [
                    "str",
                    "Generator[int, None, None]",
                    "list",
                    "int"
                ]
            }
        },
        "BaseRequestHandler._object_path": {
            "name": "_object_path",
            "location": 112,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "args": [],
                "bucket": [
                    "str"
                ],
                "kwargs": [],
                "object_name": [
                    "str"
                ],
                "self": []
            },
            "variables": {
                "hash": [
                    "property",
                    "str",
                    "List[int]",
                    "datetime.timedelta",
                    "List[str]"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "RootHandler.get": {
            "name": "get",
            "location": 125,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "buckets": [
                    "Dict[str, bool]",
                    "Pattern[str]",
                    "datetime.datetime.time",
                    "str",
                    "list",
                    "datetime.datetime.datetime",
                    "datetime.datetime"
                ],
                "info": [
                    "list",
                    "List[Union[Any, Any, Any]]",
                    "List[Union[Any, Any, Any, Any]]",
                    "str",
                    "List[Optional[Any]]",
                    "List[\"User\"]",
                    "Dict[str, str]",
                    "Dict[str, int]"
                ],
                "names": [
                    "str",
                    "Union[str]",
                    "Pattern[str]",
                    "Match[str]"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "BucketHandler.get": {
            "name": "get",
            "location": 142,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "bucket_name": [
                    "str",
                    "bytes"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "c": [
                    "Tuple[int, int, int]",
                    "datetime.datetime",
                    "float",
                    "Union[Literal, Literal]",
                    "Type[Dict[str, Any]]"
                ],
                "contents": [
                    "Dict[str, int]",
                    "str",
                    "int",
                    "List[str]",
                    "Tuple[int]",
                    "Dict[str, Any]",
                    "list",
                    "Dict[str, str]",
                    "List[Dict[str, Any]]"
                ],
                "info": [
                    "int",
                    "Dict[str, str]",
                    "str"
                ],
                "marker": [
                    "str",
                    "List[Tuple[Any, Any]]",
                    "dict"
                ],
                "max_keys": [
                    "int",
                    "str",
                    "set",
                    "list"
                ],
                "object_names": [
                    "str",
                    "List[str]",
                    "list"
                ],
                "object_path": [
                    "str",
                    "deque[str]"
                ],
                "path": [
                    "str"
                ],
                "prefix": [
                    "dict"
                ],
                "skip": [
                    "list",
                    "Set[str]",
                    "List[int]",
                    "List[Tuple[str, Any, Any]]",
                    "List[str]",
                    "Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]"
                ],
                "start_pos": [
                    "int",
                    "Type[tuple]",
                    "list",
                    "float"
                ],
                "terse": [
                    "int",
                    "list"
                ],
                "truncated": [
                    "bool",
                    "str",
                    "Dict[str, Union[Any, Any]]",
                    "list"
                ]
            }
        },
        "BucketHandler.put": {
            "name": "put",
            "location": 196,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "bucket_name": [
                    "str",
                    "bytes"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "path": [
                    "str"
                ]
            }
        },
        "BucketHandler.delete": {
            "name": "delete",
            "location": 205,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "bucket_name": [
                    "str",
                    "bytes"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "path": [
                    "str"
                ]
            }
        },
        "ObjectHandler.get": {
            "name": "get",
            "location": 219,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "bucket": [
                    "str"
                ],
                "kwargs": [],
                "object_name": [
                    "str"
                ],
                "self": []
            },
            "variables": {
                "info": [
                    "Optional[str]",
                    "str",
                    "Optional[int]",
                    "Optional[List[str]]",
                    "Optional[datetime.date.time]"
                ],
                "object_file": [
                    "str"
                ],
                "object_name": [
                    "str",
                    "ClassVar[str]"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "ObjectHandler.put": {
            "name": "put",
            "location": 235,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "bucket": [
                    "str"
                ],
                "kwargs": [],
                "object_name": [
                    "str",
                    "Optional[str]"
                ],
                "self": []
            },
            "variables": {
                "bucket_dir": [
                    "str"
                ],
                "directory": [
                    "str"
                ],
                "object_file": [
                    "str",
                    "dict"
                ],
                "object_name": [
                    "str",
                    "ClassVar[str]"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "ObjectHandler.delete": {
            "name": "delete",
            "location": 253,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "bucket": [
                    "str"
                ],
                "kwargs": [],
                "object_name": [
                    "str",
                    "Optional[str]"
                ],
                "self": []
            },
            "variables": {
                "object_name": [
                    "str",
                    "ClassVar[str]"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "global": {
            "long": [
                "Type[int]",
                "bool",
                "int",
                "float",
                "str",
                "Type[range]"
            ]
        }
    },
    "tornado-5.0.2/demos/tcpecho/client.py": {
        "send_message": {
            "name": "send_message",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": []
            },
            "variables": {
                "reply": [
                    "list",
                    "int",
                    "bool",
                    "str"
                ],
                "stream": [
                    "str"
                ]
            }
        },
        "global": {}
    },
    "tornado-5.0.2/demos/tcpecho/server.py": {
        "EchoServer.handle_stream": {
            "name": "handle_stream",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "address": [
                    "logging.Logger",
                    "str"
                ],
                "args": [],
                "kwargs": [],
                "self": [],
                "stream": [
                    "str",
                    "IO[Any]",
                    "BinaryIO",
                    "bool"
                ]
            },
            "variables": {
                "data": [
                    "str",
                    "Tuple[int]"
                ]
            }
        },
        "global": {
            "logger": [
                "logging.Logger"
            ],
            "server": [
                "dict",
                "str",
                "Tuple[str, str]",
                "Dict[str, dict]",
                "bool",
                "List[Tuple[Any, Any]]",
                "bytes"
            ]
        }
    },
    "tornado-5.0.2/demos/twitter/twitterdemo.py": {
        "main": {
            "name": "main",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": []
            },
            "variables": {
                "app": []
            }
        },
        "BaseHandler.get_current_user": {
            "name": "get_current_user",
            "location": 46,
            "return": [
                "Optional[str]",
                "Optional[int]",
                "bool",
                "Optional[Dict]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "user_json": [
                    "list",
                    "Dict[str, str]",
                    "dict"
                ]
            }
        },
        "MainHandler.get": {
            "name": "get",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "timeline": [
                    "str",
                    "bool",
                    "int",
                    "List[int]"
                ]
            }
        },
        "LoginHandler.get": {
            "name": "get",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "user": [
                    "str",
                    "Dict[str, str]",
                    "Dict[str, Union[Any, Any, Any, Any]]",
                    "Dict[int, str]",
                    "Dict[str, Union[Any, Any, Any]]"
                ]
            }
        },
        "LogoutHandler.get": {
            "name": "get",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "global": {}
    },
    "tornado-5.0.2/demos/websocket/chatdemo.py": {
        "main": {
            "name": "main",
            "location": 99,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": []
            },
            "variables": {
                "app": []
            }
        },
        "Application.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "handlers": [
                    "Anaconda3.Lib.site-packages.conda.gateways.logging.StdStreamHandler",
                    "Optional[logging.Handler]",
                    "Optional[str]",
                    "logging.handlers.TimedRotatingFileHandler",
                    "logging.StreamHandler"
                ],
                "settings": [
                    "str",
                    "dict",
                    "list"
                ]
            }
        },
        "MainHandler.get": {
            "name": "get",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "ChatSocketHandler.get_compression_options": {
            "name": "get_compression_options",
            "location": 60,
            "return": [
                "list",
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "ChatSocketHandler.open": {
            "name": "open",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "ChatSocketHandler.on_close": {
            "name": "on_close",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "ChatSocketHandler.update_cache": {
            "name": "update_cache",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "chat": [
                    "Dict[str, Any]",
                    "Type[T]"
                ],
                "cls": [
                    "list",
                    "Callable",
                    "List[str]",
                    "Dict[str, bool]",
                    "Sequence[Any]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "cache": [
                    "list",
                    "List[List[Any]]"
                ]
            }
        },
        "ChatSocketHandler.send_updates": {
            "name": "send_updates",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "chat": [
                    "str",
                    "Union[int, float]",
                    "Callable"
                ],
                "cls": [
                    "logging.Logger",
                    "int",
                    "Exception",
                    "str",
                    "bool"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "ChatSocketHandler.on_message": {
            "name": "on_message",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "message": [
                    "str",
                    "TextIO",
                    "bool"
                ],
                "self": []
            },
            "variables": {
                "chat": [
                    "str",
                    "Tuple[str]"
                ],
                "parsed": [
                    "Dict[bytes, bytes]",
                    "str"
                ]
            }
        },
        "global": {}
    },
    "tornado-5.0.2/demos/webspider/webspider.py": {
        "get_links_from_url": {
            "name": "get_links_from_url",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "url": [
                    "str",
                    "Dict[str, Any]"
                ]
            },
            "variables": {
                "html": [
                    "Dict[str, Any]",
                    "urllib.requesRequest"
                ],
                "response": [
                    "urllib.requesRequest"
                ],
                "urls": [
                    "str"
                ]
            }
        },
        "remove_fragment": {
            "name": "remove_fragment",
            "location": 42,
            "return": [
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "url": [
                    "str",
                    "Optional[str]"
                ]
            },
            "variables": {
                "frag": [
                    "str",
                    "Dict[str, Dict[str, Any]]",
                    "Set[str]",
                    "list",
                    "dict",
                    "List[str]"
                ],
                "pure_url": [
                    "List[str]",
                    "str"
                ]
            }
        },
        "get_links": {
            "name": "get_links",
            "location": 47,
            "return": [
                "str"
            ],
            "arguments": {
                "args": [],
                "html": [
                    "Optional[str]",
                    "List[str]"
                ],
                "kwargs": []
            },
            "variables": {
                "url_seeker": [
                    "List[str]",
                    "list",
                    "List[Tuple[str, Any, Any]]",
                    "Type[Callable[[str], str]]",
                    "str",
                    "dict",
                    "Tuple[Literal, Literal]"
                ]
            }
        },
        "fetch_url": {
            "name": "fetch_url",
            "location": 70,
            "return": [
                "Union[tuple, list]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "args": [],
                "kwargs": []
            },
            "variables": {
                "current_url": [
                    "str"
                ],
                "urls": [
                    "str",
                    "int",
                    "bytes",
                    "Dict[str, Any]"
                ]
            }
        },
        "worker": {
            "name": "worker",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": []
            },
            "variables": {}
        },
        "main": {
            "name": "main",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": []
            },
            "variables": {
                "fetched": [
                    "int",
                    "list",
                    "set",
                    "str",
                    "Pattern[str]"
                ],
                "fetching": [
                    "int",
                    "dict",
                    "List[int]",
                    "List[List[int]]",
                    "str",
                    "datetime.timedelta"
                ],
                "q": [
                    "list",
                    "List[bool]",
                    "bool",
                    "dict"
                ],
                "start": [
                    "float",
                    "int",
                    "List[List[int]]"
                ]
            }
        },
        "URLSeeker.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "urls": [
                    "str",
                    "list",
                    "Dict[Any, Tuple[Any, Any, Any]]",
                    "Dict[str, str]"
                ]
            }
        },
        "URLSeeker.handle_starttag": {
            "name": "handle_starttag",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "attrs": [
                    "str",
                    "bool",
                    "Hashable"
                ],
                "kwargs": [],
                "self": [],
                "tag": [
                    "str",
                    "bool",
                    "Dict[str, Any]"
                ]
            },
            "variables": {
                "href": [
                    "dict",
                    "Dict[str, str]",
                    "Dict[Optional[str], Any]",
                    "Dict[Any, Union[Any, Any, Any]]"
                ]
            }
        },
        "global": {
            "base_url": [
                "str",
                "Tuple[str, str, str, str, str]",
                "Union[Literal, str]"
            ],
            "concurrency": [
                "int",
                "dict",
                "List[int]",
                "List[List[int]]",
                "str",
                "datetime.timedelta"
            ],
            "io_loop": [
                "str",
                "List[str]",
                "List[List[Any]]"
            ]
        }
    },
    "tornado-5.0.2/docs/conf.py": {
        "global": {
            "autoclass_content": [
                "str",
                "bool",
                "bytearray"
            ],
            "autodoc_docstring_signature": [
                "str",
                "bool",
                "int"
            ],
            "autodoc_inherit_docstrings": [
                "str",
                "List[str]",
                "int",
                "Dict[str, List[Any]]",
                "Tuple[str, str, str, str, str, str, str, str]"
            ],
            "autodoc_member_order": [
                "str",
                "List[str]",
                "int",
                "Dict[str, List[Any]]",
                "Tuple[str, str, str, str, str, str, str, str]"
            ],
            "copyright": [
                "str",
                "List[str]",
                "int",
                "Dict[str, List[Any]]",
                "Tuple[str, str, str, str, str, str, str, str]"
            ],
            "coverage_ignore_classes": [
                "bool",
                "str",
                "int",
                "Tuple[str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str]",
                "Dict[str, str]",
                "List[str]",
                "Set[str]"
            ],
            "coverage_ignore_functions": [
                "int",
                "str",
                "List[str]",
                "bool"
            ],
            "coverage_ignore_modules": [
                "List[str]",
                "list",
                "tuple",
                "bool"
            ],
            "coverage_skip_undoc_in_source": [
                "str",
                "int"
            ],
            "default_role": [
                "str",
                "int",
                "List[Tuple[str, int]]"
            ],
            "extensions": [
                "str",
                "List[str]",
                "int",
                "Dict[str, List[Any]]",
                "Tuple[str, str, str, str, str, str, str, str]"
            ],
            "html_favicon": [
                "str",
                "List[str]",
                "int",
                "Dict[str, List[Any]]",
                "Tuple[str, str, str, str, str, str, str, str]"
            ],
            "html_theme": [
                "str",
                "List[str]",
                "int",
                "Dict[str, List[Any]]",
                "Tuple[str, str, str, str, str, str, str, str]"
            ],
            "html_theme_path": [
                "List[str]",
                "str",
                "list"
            ],
            "intersphinx_mapping": [
                "Dict[str, Tuple[str, None]]",
                "Dict[str, str]",
                "Dict[str, None]",
                "Dict[str, Tuple[str, Any]]",
                "Dict[str, bool]",
                "Type[Dict[str, Any]]"
            ],
            "latex_documents": [
                "str",
                "List[str]",
                "int",
                "Dict[str, List[Any]]",
                "Tuple[str, str, str, str, str, str, str, str]"
            ],
            "master_doc": [
                "str",
                "List[str]",
                "int",
                "Dict[str, List[Any]]",
                "Tuple[str, str, str, str, str, str, str, str]"
            ],
            "on_rtd": [
                "int",
                "dict",
                "List[int]",
                "List[List[int]]",
                "str"
            ],
            "primary_domain": [
                "str"
            ],
            "project": [
                "str"
            ],
            "release": [
                "str",
                "List[str]",
                "int",
                "Dict[str, List[Any]]",
                "Tuple[str, str, str, str, str, str, str, str]"
            ],
            "version": [
                "str",
                "int"
            ]
        }
    },
    "tornado-5.0.2/maint/circlerefs/circlerefs.py": {
        "inner": {
            "name": "inner",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "level": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            },
            "variables": {
                "candidate": [
                    "list",
                    "List[str]",
                    "List[int]",
                    "Dict[str, Union[int, str]]"
                ],
                "item_id": [
                    "str",
                    "Set[int]",
                    "Optional[str]"
                ]
            }
        },
        "find_circular_references": {
            "name": "find_circular_references",
            "location": 18,
            "return": [
                "str",
                "int",
                "Optional[bytearray]",
                "float"
            ],
            "arguments": {
                "args": [],
                "garbage": [
                    "int",
                    "T",
                    "str"
                ],
                "kwargs": []
            },
            "variables": {
                "found": [
                    "str",
                    "List[str]",
                    "int",
                    "Dict[str, List[Any]]",
                    "Tuple[str, str, str, str, str, str, str, str]"
                ],
                "garbage": [
                    "int",
                    "list",
                    "dict",
                    "range",
                    "str",
                    "Dict[str, Set]"
                ],
                "garbage_ids": [
                    "str",
                    "Tuple[int, str]"
                ],
                "inner": [
                    "str",
                    "Type[Optional[Any]]",
                    "dict",
                    "list"
                ],
                "stack": [
                    "str",
                    "List[str]",
                    "int",
                    "Dict[str, List[Any]]",
                    "Tuple[str, str, str, str, str, str, str, str]"
                ],
                "stack_ids": [
                    "list",
                    "Dict[str, str]",
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "visited_ids": [
                    "list",
                    "Dict[str, str]",
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": []
            },
            "variables": {
                "client": [],
                "resp": [
                    "dict",
                    "Optional[Dict]",
                    "deque",
                    "str"
                ]
            }
        },
        "CollectHandler.get": {
            "name": "get",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "DummyHandler.get": {
            "name": "get",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "DummyAsyncHandler.get": {
            "name": "get",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "global": {
            "application": [
                "int",
                "dict",
                "List[int]",
                "List[List[int]]",
                "str"
            ]
        }
    },
    "tornado-5.0.2/maint/scripts/test_resolvers.py": {
        "main": {
            "name": "main",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": []
            },
            "variables": {
                "addrinfo": [
                    "str"
                ],
                "args": [
                    "List[str]",
                    "list"
                ],
                "family": [
                    "int",
                    "str"
                ],
                "resolvers": [
                    "list"
                ]
            }
        },
        "global": {
            "pycares": [
                "list",
                "set",
                "Dict[str, Optional[bool]]",
                "Dict[str, Union[None, Any, Any]]",
                "Type[Optional[Any]]"
            ],
            "twisted": [
                "Optional[str]",
                "int",
                "str"
            ]
        }
    },
    "tornado-5.0.2/maint/scripts/custom_fixers/fix_future_imports.py": {
        "is_docstring": {
            "name": "is_docstring",
            "location": 10,
            "return": [
                "int",
                "List[int]",
                "Union[List[str], List[Any]]",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "stmt": [
                    "Optional[int]",
                    "Optional[float]",
                    "str"
                ]
            },
            "variables": {}
        },
        "FixFutureImports.start_tree": {
            "name": "start_tree",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "filename": [
                    "str",
                    "Dict[str, Any]",
                    "List[dict]",
                    "Exception"
                ],
                "kwargs": [],
                "self": [],
                "tree": [
                    "str",
                    "Dict[str, Any]",
                    "List[dict]",
                    "Exception"
                ]
            },
            "variables": {
                "found_future_import": [
                    "Sequence[Sequence[str]]",
                    "Tuple[bytes, bytes]",
                    "TextIO",
                    "List[Dict[str, Any]]",
                    "float",
                    "str",
                    "\"ks.Series\""
                ]
            }
        },
        "FixFutureImports.new_future_import": {
            "name": "new_future_import",
            "location": 22,
            "return": [
                "int",
                "Sequence[str]",
                "Iterable[str]",
                "Callable"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "old": [
                    "str",
                    "Optional[str]",
                    "Optional[Exception]",
                    "Optional[Any]",
                    "Dict[str, 'LabwareDefinition']",
                    "Optional[int]",
                    "bool"
                ],
                "self": []
            },
            "variables": {
                "new": [
                    "List[str]",
                    "str",
                    "Dict[str, Tuple]",
                    "dict"
                ],
                "prefix": [
                    "str",
                    "Dict[str, List[str]]",
                    "List[str]",
                    "dict",
                    "Dict[str, Type[Any]]",
                    "Dict[Any, Tuple[Any, Any]]"
                ]
            }
        },
        "FixFutureImports.transform": {
            "name": "transform",
            "location": 31,
            "return": [
                "Set[str]",
                "str",
                "Sequence[str]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "node": [
                    "str",
                    "int",
                    "dict"
                ],
                "results": [
                    "str",
                    "int",
                    "bytes",
                    "bool"
                ],
                "self": []
            },
            "variables": {
                "found_future_import": [
                    "List[Dict]",
                    "Optional[Callable[[dict], None]]",
                    "List[List[int]]",
                    "bool",
                    "Dict[str, str]",
                    "dict",
                    "float",
                    "str",
                    "tuple"
                ]
            }
        },
        "FixFutureImports.finish_tree": {
            "name": "finish_tree",
            "location": 35,
            "return": [
                "Set[VT]",
                "Iterator[Dict[str, str]]"
            ],
            "arguments": {
                "args": [],
                "filename": [
                    "Dict[str, Any]"
                ],
                "kwargs": [],
                "self": [],
                "tree": []
            },
            "variables": {
                "first_stmt": [],
                "newline": [
                    "str",
                    "Type[str]",
                    "int",
                    "Dict[str, str]",
                    "list"
                ],
                "pos": [
                    "int",
                    "Counter",
                    "nucypher.blockchain.eth.token.Stake",
                    "Dict[Union[bool, str], Any]"
                ],
                "prefix": [
                    "str",
                    "Type[str]",
                    "int",
                    "Dict[str, str]",
                    "Set[bytes]"
                ]
            }
        },
        "global": {}
    },
    "tornado-5.0.2/maint/scripts/custom_fixers/fix_unicode_literal.py": {
        "FixUnicodeLiteral.transform": {
            "name": "transform",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "node": [
                    "str",
                    "int",
                    "Optional[List[Any]]",
                    "float",
                    "Optional[str]"
                ],
                "results": [
                    "str",
                    "int",
                    "dict"
                ],
                "self": []
            },
            "variables": {
                "arg": [
                    "Set[str]",
                    "Set[int]",
                    "Dict[str, str]",
                    "set",
                    "List[str]"
                ]
            }
        },
        "global": {}
    },
    "tornado-5.0.2/maint/test/appengine/common/cgi_runtests.py": {
        "all": {
            "name": "all",
            "location": 42,
            "return": [
                "bool",
                "Tuple[int, int, int]"
            ],
            "arguments": {
                "args": [],
                "kwargs": []
            },
            "variables": {}
        },
        "main": {
            "name": "main",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": []
            },
            "variables": {}
        },
        "global": {
            "TEST_MODULES": [
                "List[str]",
                "str"
            ]
        }
    },
    "tornado-5.0.2/maint/test/appengine/common/runtests.py": {
        "global": {
            "err": [
                "int",
                "str",
                "List[List[int]]"
            ],
            "port": [
                "str",
                "subprocess.Popen[Any]",
                "subprocess.CompletedProcess[str]",
                "subprocess.CompletedProcess[bytes]"
            ],
            "proc": [
                "int",
                "bytes"
            ],
            "res": [
                "str",
                "Pattern[str]",
                "list"
            ],
            "resp": [
                "Set[str]",
                "Type[Callable[..., Any]]",
                "str",
                "Dict[str, dict]",
                "Dict[str, str]",
                "dict"
            ],
            "tornado_root": [
                "str",
                "List[str]"
            ],
            "xrange": [
                "int",
                "dict",
                "List[int]",
                "List[List[int]]",
                "str"
            ]
        }
    },
    "tornado-5.0.2/maint/test/cython/cythonapp_test.py": {
        "CythonCoroutineTest.test_native_coroutine": {
            "name": "test_native_coroutine",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "x": [
                    "dict"
                ]
            }
        },
        "CythonCoroutineTest.test_decorated_coroutine": {
            "name": "test_decorated_coroutine",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "x": [
                    "dict"
                ]
            }
        },
        "CythonArgReplacerTest.test_arg_replacer_function": {
            "name": "test_arg_replacer_function",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "args": [
                    "list",
                    "List[bytes]"
                ],
                "kwargs": [
                    "list",
                    "Type[Tuple[Any, Any]]"
                ],
                "replacer": [
                    "dss.util.UrlBuilder"
                ]
            }
        },
        "CythonArgReplacerTest.test_arg_replacer_method": {
            "name": "test_arg_replacer_method",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "args": [
                    "list",
                    "List[bytes]"
                ],
                "kwargs": [
                    "list",
                    "Type[Tuple[Any, Any]]"
                ],
                "replacer": [
                    "dict"
                ]
            }
        },
        "global": {}
    },
    "tornado-5.0.2/maint/test/cython/setup.py": {
        "global": {
            "Cython": [
                "str",
                "Callable",
                "int",
                "Optional[str]",
                "bool"
            ],
            "ext_modules": [
                "List[str]",
                "list",
                "str"
            ]
        }
    },
    "tornado-5.0.2/maint/test/redbot/red_test.py": {
        "HelloHandler.get": {
            "name": "get",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "RedirectHandler.get": {
            "name": "get",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "path": [
                    "int",
                    "str",
                    "List[str]",
                    "bool"
                ],
                "self": []
            },
            "variables": {}
        },
        "PostHandler.post": {
            "name": "post",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "ChunkedHandler.get": {
            "name": "get",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "CacheHandler.get": {
            "name": "get",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "computed_etag": [
                    "str",
                    "bool"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "CacheHandler.compute_etag": {
            "name": "compute_etag",
            "location": 46,
            "return": [
                "str",
                "float",
                "deque"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TestMixin.get_handlers": {
            "name": "get_handlers",
            "location": 51,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TestMixin.get_app_kwargs": {
            "name": "get_app_kwargs",
            "location": 60,
            "return": [
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TestMixin.get_allowed_warnings": {
            "name": "get_allowed_warnings",
            "location": 63,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TestMixin.get_allowed_errors": {
            "name": "get_allowed_errors",
            "location": 73,
            "return": [
                "int",
                "Tuple[int, int]",
                "str",
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TestMixin.check_url": {
            "name": "check_url",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "allowed_errors": [
                    "bool",
                    "Optional[str]",
                    "List[str]",
                    "str"
                ],
                "allowed_warnings": [
                    "bytes",
                    "Optional[bool]",
                    "Callable[[str], str]",
                    "Optional[str]",
                    "Optional[Tuple[int, int]]"
                ],
                "args": [],
                "body": [
                    "str",
                    "dict",
                    "bool",
                    "Dict[str, Any]"
                ],
                "expected_status": [
                    "int",
                    "str",
                    "Optional[int]"
                ],
                "headers": [
                    "str",
                    "dict",
                    "bool",
                    "Dict[str, Any]"
                ],
                "kwargs": [],
                "method": [
                    "str",
                    "dict",
                    "bool",
                    "Dict[str, Any]"
                ],
                "path": [
                    "str",
                    "bool",
                    "List[str]",
                    "Set[str]",
                    "Optional[str]"
                ],
                "self": []
            },
            "variables": {
                "allowed_errors": [
                    "str",
                    "List[str]",
                    "int",
                    "Dict[str, Tuple[str, str]]"
                ],
                "allowed_warnings": [
                    "List[Tuple]",
                    "Set[str]",
                    "float"
                ],
                "errors": [
                    "list"
                ],
                "logger": [
                    "logging.Logger"
                ],
                "red": [
                    "int",
                    "Dict[str, Dict[str, Any]]",
                    "Dict[str, Any]"
                ],
                "url": [
                    "str"
                ],
                "warnings": [
                    "list"
                ]
            }
        },
        "TestMixin.work": {
            "name": "work",
            "location": 119,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TestMixin.run_redbot": {
            "name": "run_redbot",
            "location": 115,
            "return": [
                "str",
                "int",
                "bool",
                "list"
            ],
            "arguments": {
                "args": [],
                "body": [
                    "str",
                    "Optional[str]",
                    "dict",
                    "bool",
                    "int"
                ],
                "headers": [
                    "str",
                    "Optional[str]",
                    "dict",
                    "bool",
                    "int"
                ],
                "kwargs": [],
                "method": [
                    "str",
                    "Optional[str]",
                    "dict",
                    "bool",
                    "int"
                ],
                "self": [],
                "url": [
                    "str",
                    "Optional[str]",
                    "dict",
                    "bool",
                    "int"
                ]
            },
            "variables": {
                "red": [
                    "str",
                    "List[str]",
                    "int",
                    "Dict[str, List[Any]]",
                    "Tuple[str, str, str, str, str, str, str, str]"
                ],
                "thread": [
                    "threading.Thread"
                ]
            }
        },
        "TestMixin.test_hello": {
            "name": "test_hello",
            "location": 130,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TestMixin.test_static": {
            "name": "test_static",
            "location": 133,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TestMixin.test_static_versioned_url": {
            "name": "test_static_versioned_url",
            "location": 141,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TestMixin.test_redirect": {
            "name": "test_redirect",
            "location": 145,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TestMixin.test_permanent_redirect": {
            "name": "test_permanent_redirect",
            "location": 148,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TestMixin.test_404": {
            "name": "test_404",
            "location": 151,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TestMixin.test_post": {
            "name": "test_post",
            "location": 154,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "body": [
                    "str",
                    "int",
                    "Tuple[int]",
                    "Tuple[int, int, int, int]",
                    "bytes"
                ]
            }
        },
        "TestMixin.test_chunked": {
            "name": "test_chunked",
            "location": 164,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TestMixin.test_strong_etag_match": {
            "name": "test_strong_etag_match",
            "location": 167,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "computed_etag": [
                    "str"
                ],
                "etags": [
                    "str"
                ]
            }
        },
        "TestMixin.test_multiple_strong_etag_match": {
            "name": "test_multiple_strong_etag_match",
            "location": 175,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "computed_etag": [
                    "str"
                ],
                "etags": [
                    "str"
                ]
            }
        },
        "TestMixin.test_strong_etag_not_match": {
            "name": "test_strong_etag_not_match",
            "location": 183,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "computed_etag": [
                    "str"
                ],
                "etags": [
                    "str"
                ]
            }
        },
        "TestMixin.test_multiple_strong_etag_not_match": {
            "name": "test_multiple_strong_etag_not_match",
            "location": 191,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "computed_etag": [
                    "str"
                ],
                "etags": [
                    "str"
                ]
            }
        },
        "TestMixin.test_wildcard_etag": {
            "name": "test_wildcard_etag",
            "location": 199,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "computed_etag": [
                    "str",
                    "List[Tuple[str, str]]"
                ],
                "etags": [
                    "str",
                    "range"
                ]
            }
        },
        "TestMixin.test_weak_etag_match": {
            "name": "test_weak_etag_match",
            "location": 208,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "computed_etag": [
                    "str"
                ],
                "etags": [
                    "str"
                ]
            }
        },
        "TestMixin.test_multiple_weak_etag_match": {
            "name": "test_multiple_weak_etag_match",
            "location": 216,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "computed_etag": [
                    "str"
                ],
                "etags": [
                    "str"
                ]
            }
        },
        "TestMixin.test_weak_etag_not_match": {
            "name": "test_weak_etag_not_match",
            "location": 224,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "computed_etag": [
                    "str"
                ],
                "etags": [
                    "str"
                ]
            }
        },
        "TestMixin.test_multiple_weak_etag_not_match": {
            "name": "test_multiple_weak_etag_not_match",
            "location": 232,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "computed_etag": [
                    "str"
                ],
                "etags": [
                    "str"
                ]
            }
        },
        "DefaultHTTPTest.get_app": {
            "name": "get_app",
            "location": 242,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "GzipHTTPTest.get_app": {
            "name": "get_app",
            "location": 247,
            "return": [
                "str",
                "dict",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "GzipHTTPTest.get_allowed_errors": {
            "name": "get_allowed_errors",
            "location": 250,
            "return": [
                "Dict[str, Any]",
                "Optional[int]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "global": {}
    },
    "tornado-5.0.2/maint/test/websocket/client.py": {
        "run_tests": {
            "name": "run_tests",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": []
            },
            "variables": {
                "control_ws": [
                    "str",
                    "List[int]",
                    "int"
                ],
                "message": [
                    "str"
                ],
                "msg": [
                    "str",
                    "Union[List[str], str]",
                    "List[Tuple[str, str]]"
                ],
                "num_tests": [
                    "int",
                    "Tuple[int, Any]",
                    "Tuple[Literal, Literal, Literal]"
                ],
                "test_ws": [
                    "str",
                    "Dict[str, Any]",
                    "Dict[str, Union[dict, Any]]"
                ],
                "update_ws": [
                    "str",
                    "list",
                    "dict"
                ],
                "url": [
                    "str",
                    "List[str]",
                    "list"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": []
            },
            "variables": {}
        },
        "global": {}
    },
    "tornado-5.0.2/maint/test/websocket/server.py": {
        "EchoHandler.on_message": {
            "name": "on_message",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "message": [
                    "bytes",
                    "Callable[[bytes], bytes]",
                    "str"
                ],
                "self": []
            },
            "variables": {}
        },
        "EchoHandler.get_compression_options": {
            "name": "get_compression_options",
            "location": 13,
            "return": [
                "list",
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "global": {
            "app": []
        }
    },
    "tornado-5.0.2/maint/vm/windows/bootstrap.py": {
        "download_to_cache": {
            "name": "download_to_cache",
            "location": 44,
            "return": [
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "local_name": [
                    "str",
                    "Optional[str]"
                ],
                "url": [
                    "str"
                ]
            },
            "variables": {
                "data": [
                    "Dict[str, Union[Any, Any]]",
                    "Type[List[Any]]",
                    "bytes",
                    "str",
                    "list"
                ],
                "filename": [
                    "str"
                ],
                "local_name": [
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "int",
                    "List[str]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": []
            },
            "variables": {
                "filename": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "global": {
            "EASY_INSTALL": [
                "str",
                "float",
                "Dict[str, str]",
                "Optional[str]"
            ],
            "PYTHON_VERSIONS": [
                "Tuple[int]",
                "int",
                "str"
            ],
            "PY_PACKAGES": [
                "str"
            ],
            "SCRIPTS_DIR": [
                "str"
            ],
            "TMPDIR": [
                "str"
            ]
        }
    },
    "tornado-5.0.2/tornado/auth.py": {
        "_auth_future_to_callback": {
            "name": "_auth_future_to_callback",
            "location": 101,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "callback": [
                    "bool",
                    "bytes",
                    "Sequence[float]",
                    "float",
                    "Tuple[int, int]"
                ],
                "future": [
                    "int",
                    "concurrenfutures.Future",
                    "Dict[str, Any]"
                ],
                "kwargs": []
            },
            "variables": {
                "result": [
                    "dict",
                    "str"
                ]
            }
        },
        "handle_exception": {
            "name": "handle_exception",
            "location": 127,
            "return": [
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "tb": [
                    "str",
                    "Dict[str, Any]",
                    "float",
                    "Union[bytes, str]"
                ],
                "typ": [
                    "str",
                    "Dict[str, Any]",
                    "float",
                    "Union[bytes, str]"
                ],
                "value": [
                    "str",
                    "Dict[str, Any]",
                    "float",
                    "Union[bytes, str]"
                ]
            },
            "variables": {}
        },
        "wrapper": {
            "name": "wrapper",
            "location": 120,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": []
            },
            "variables": {
                "args": [
                    "tuple"
                ],
                "callback": [
                    "str",
                    "List[str]",
                    "int",
                    "Dict[str, List[Any]]",
                    "Tuple[str, str, str, str, str, str, str, str]"
                ],
                "future": [
                    "str",
                    "List[str]",
                    "int",
                    "Dict[str, List[Any]]",
                    "Tuple[str, str, str, str, str, str, str, str]"
                ],
                "kwargs": [
                    "List[str]",
                    "dict",
                    "tuple"
                ]
            }
        },
        "_auth_return_future": {
            "name": "_auth_return_future",
            "location": 110,
            "return": [
                "str",
                "List[dict]",
                "int"
            ],
            "arguments": {
                "args": [],
                "f": [
                    "Callable",
                    "Sequence[Sequence[str]]",
                    "Iterable[str]"
                ],
                "kwargs": []
            },
            "variables": {
                "replacer": [
                    "str",
                    "List[str]",
                    "int",
                    "Dict[str, List[Any]]",
                    "Tuple[str, str, str, str, str, str, str, str]"
                ]
            }
        },
        "_oauth_signature": {
            "name": "_oauth_signature",
            "location": 1094,
            "return": [
                "int",
                "str",
                "bytes",
                "bool"
            ],
            "arguments": {
                "args": [],
                "consumer_token": [
                    "str",
                    "float",
                    "Pattern[str]",
                    "List[int]",
                    "int",
                    "List[Pattern[str]]"
                ],
                "kwargs": [],
                "method": [
                    "str",
                    "Dict[str, Any]",
                    "Tuple[str, str]"
                ],
                "parameters": [
                    "Dict[str, Any]",
                    "List[str]",
                    "Dict[str, Union[int, str]]",
                    "str",
                    "Dict[str, bool]",
                    "Dict[str, int]"
                ],
                "token": [
                    "Dict[str, Any]",
                    "List[str]",
                    "Dict[str, int]",
                    "str",
                    "Dict[str, Optional[int]]",
                    "Dict[str, List[str]]"
                ],
                "url": [
                    "Dict[str, List[Any]]",
                    "bool",
                    "str"
                ]
            },
            "variables": {
                "base_elems": [
                    "list",
                    "List[str]",
                    "str",
                    "dict"
                ],
                "base_string": [
                    "str",
                    "List[str]",
                    "dict",
                    "Dict[str, str]",
                    "list",
                    "Optional[str]",
                    "Pattern"
                ],
                "hash": [
                    "Dict[str, bool]",
                    "Dict[str, str]",
                    "str",
                    "Dict[str, Literal[False]]",
                    "dict",
                    "Dict[str, int]"
                ],
                "key": [
                    "str"
                ],
                "key_elems": [
                    "List[List[int]]",
                    "list",
                    "str"
                ],
                "netloc": [
                    "str",
                    "List[str]",
                    "Final[Dict[str, Any]]",
                    "Tuple[str, str]"
                ],
                "normalized_url": [
                    "str",
                    "list",
                    "Dict[str, str]"
                ],
                "parts": [
                    "str",
                    "List[str]",
                    "Dict[str, str]"
                ],
                "path": [
                    "str",
                    "List[str]",
                    "list"
                ],
                "scheme": [
                    "str",
                    "List[str]",
                    "Final[Dict[str, Any]]",
                    "Tuple[str, str]"
                ]
            }
        },
        "_oauth10a_signature": {
            "name": "_oauth10a_signature",
            "location": 1118,
            "return": [
                "bytes",
                "bytearray",
                "List[int]",
                "List[dict]",
                "bool"
            ],
            "arguments": {
                "args": [],
                "consumer_token": [
                    "List[int]",
                    "list",
                    "Type[Tuple[str, Any]]",
                    "Dict[str, Any]",
                    "str"
                ],
                "kwargs": [],
                "method": [
                    "str",
                    "Dict[str, Any]",
                    "Dict[str, str]"
                ],
                "parameters": [
                    "Dict[str, Any]",
                    "Dict[int, str]",
                    "dict",
                    "List[Tuple[str, Any]]",
                    "List[int]",
                    "str",
                    "Dict[str, str]"
                ],
                "token": [
                    "List[str]",
                    "list",
                    "Dict[str, Any]",
                    "List[Union[Any, Any]]",
                    "str"
                ],
                "url": [
                    "str",
                    "Tuple[str, str]",
                    "Tuple[Any, Any]",
                    "frozenset[Any]"
                ]
            },
            "variables": {
                "base_elems": [
                    "list",
                    "List[str]",
                    "str",
                    "dict"
                ],
                "base_string": [
                    "str",
                    "List[str]",
                    "dict",
                    "Dict[str, str]",
                    "list",
                    "Optional[str]",
                    "Pattern"
                ],
                "hash": [
                    "Dict[str, bool]",
                    "Dict[str, str]",
                    "str",
                    "Dict[str, Literal[False]]",
                    "dict",
                    "Dict[str, int]"
                ],
                "key": [
                    "str"
                ],
                "key_elems": [
                    "list",
                    "List[Tuple[int, int]]"
                ],
                "netloc": [
                    "str",
                    "List[str]",
                    "Final[Dict[str, Any]]",
                    "Tuple[str, str]"
                ],
                "normalized_url": [
                    "str",
                    "list",
                    "Dict[str, str]"
                ],
                "parts": [
                    "str",
                    "List[str]",
                    "Dict[str, str]"
                ],
                "path": [
                    "str",
                    "List[str]",
                    "list"
                ],
                "scheme": [
                    "str",
                    "List[str]",
                    "Final[Dict[str, Any]]",
                    "Tuple[str, str]"
                ]
            }
        },
        "_oauth_escape": {
            "name": "_oauth_escape",
            "location": 1142,
            "return": [
                "Optional[int]",
                "str",
                "Optional[bool]",
                "Dict[str, int]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "val": [
                    "str",
                    "int",
                    "List[str]",
                    "bool"
                ]
            },
            "variables": {
                "val": [
                    "str",
                    "int",
                    "hmac.HMAC"
                ]
            }
        },
        "_oauth_parse_response": {
            "name": "_oauth_parse_response",
            "location": 1148,
            "return": [
                "bool",
                "dict",
                "List[List[str]]",
                "Iterable[str]",
                "Optional[str]"
            ],
            "arguments": {
                "args": [],
                "body": [
                    "dict",
                    "Dict[str, object]",
                    "str",
                    "Optional[str]",
                    "Mapping[str, Any]"
                ],
                "kwargs": []
            },
            "variables": {
                "body": [
                    "str",
                    "List[Union[Any, Any, Any, Any]]",
                    "Iterator[str]",
                    "Tuple[Type[str], Type[bytes]]"
                ],
                "p": [
                    "Dict[str, str]",
                    "str",
                    "dict",
                    "functools.partial[Any]",
                    "urllib.parse.ParseResult"
                ],
                "special": [
                    "Dict[str, str]"
                ],
                "token": [
                    "str",
                    "dict",
                    "Dict[object, Dict[str, Any]]",
                    "Dict[Any, Dict[str, Any]]",
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "Type[int]"
                ]
            }
        },
        "OpenIdMixin.authenticate_redirect": {
            "name": "authenticate_redirect",
            "location": 147,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "ax_attrs": [
                    "List[str]",
                    "denite.util.UserContext",
                    "str",
                    "Callable[[Any], bool]",
                    "list"
                ],
                "callback": [
                    "bool",
                    "str"
                ],
                "callback_uri": [
                    "int",
                    "str",
                    "bool"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "args": [
                    "int",
                    "dict",
                    "str",
                    "List[str]",
                    "Iterator[Any]"
                ],
                "callback_uri": [
                    "hashlib._BlakeHash"
                ]
            }
        },
        "OpenIdMixin.get_authenticated_user": {
            "name": "get_authenticated_user",
            "location": 172,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "callback": [
                    "str"
                ],
                "http_client": [
                    "tornado.httpclienAsyncHTTPClient",
                    "str"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "args": [
                    "Dict[Any, List[Any]]",
                    "OrderedDict[str, Any]",
                    "dict"
                ],
                "http_client": [
                    "dict"
                ],
                "url": [
                    "str",
                    "dict",
                    "List[Dict[str, str]]"
                ]
            }
        },
        "OpenIdMixin._openid_args": {
            "name": "_openid_args",
            "location": 193,
            "return": [
                "List[str]",
                "Iterable[str]",
                "Optional[Iterable[str]]",
                "Callable[[None], None]",
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "args": [],
                "ax_attrs": [
                    "List[int]",
                    "float",
                    "list",
                    "str"
                ],
                "callback_uri": [
                    "Dict[int, dict]"
                ],
                "kwargs": [],
                "oauth_scope": [
                    "Dict[int, dict]",
                    "Sequence[int]",
                    "Dict[str, Any]"
                ],
                "self": []
            },
            "variables": {
                "args": [
                    "List[str]"
                ],
                "ax_attrs": [
                    "Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]",
                    "Set[str]",
                    "List[int]",
                    "Callable(len)[[Sized], int]"
                ],
                "known_attrs": [
                    "dict",
                    "List[str]",
                    "Dict[str, Tuple[Any, Any]]",
                    "bool",
                    "Set[str]"
                ],
                "required": [
                    "list",
                    "List[str]"
                ],
                "url": [
                    "str",
                    "Type[str]"
                ]
            }
        },
        "OpenIdMixin.get_ax_arg": {
            "name": "get_ax_arg",
            "location": 256,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[List[str]]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "uri": [
                    "str",
                    "List[str]",
                    "dict",
                    "bool"
                ]
            },
            "variables": {
                "ax_name": [
                    "str",
                    "Optional[str]"
                ],
                "part": [
                    "str",
                    "list",
                    "List[str]"
                ],
                "prefix": [
                    "list",
                    "str",
                    "List[str]"
                ]
            }
        },
        "OpenIdMixin._on_authentication_verified": {
            "name": "_on_authentication_verified",
            "location": 241,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "args": [],
                "future": [
                    "float",
                    "Callable[[Any], bool]",
                    "str",
                    "List[Dict[str, Any]]",
                    "int",
                    "OrderedDict"
                ],
                "kwargs": [],
                "response": [
                    "List[str]",
                    "float"
                ],
                "self": []
            },
            "variables": {
                "ax_ns": [
                    "str",
                    "int",
                    "Dict[str, Any]"
                ],
                "claimed_id": [
                    "int",
                    "Optional[int]",
                    "str",
                    "uuid.UUID"
                ],
                "email": [
                    "str",
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ],
                "first_name": [
                    "str",
                    "List[str]",
                    "Dict[str, str]"
                ],
                "last_name": [
                    "str",
                    "List[str]",
                    "Dict[str, str]"
                ],
                "locale": [
                    "str"
                ],
                "name": [
                    "str",
                    "Any[Any]"
                ],
                "name_parts": [
                    "str",
                    "Optional[str]",
                    "list"
                ],
                "user": [
                    "Optional[str]",
                    "Dict[object, Dict[str, Any]]",
                    "Dict[str, None]",
                    "dict",
                    "Dict[str, str]"
                ],
                "username": [
                    "str",
                    "int",
                    "Dict[str, str]"
                ]
            }
        },
        "OpenIdMixin.get_auth_http_client": {
            "name": "get_auth_http_client",
            "location": 301,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "OAuthMixin.authorize_redirect": {
            "name": "authorize_redirect",
            "location": 327,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "callback": [
                    "Callable"
                ],
                "callback_uri": [
                    "str",
                    "float"
                ],
                "extra_params": [
                    "Callable"
                ],
                "http_client": [
                    "tornado.httpclienAsyncHTTPClient",
                    "str"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "http_client": [
                    "dict"
                ]
            }
        },
        "OAuthMixin.get_authenticated_user": {
            "name": "get_authenticated_user",
            "location": 374,
            "return": [
                "Iterator[object]",
                "Union[tuple, list]"
            ],
            "arguments": {
                "args": [],
                "callback": [
                    "float",
                    "str"
                ],
                "http_client": [
                    "tornado.httpclienAsyncHTTPClient",
                    "str"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "cookie_key": [
                    "int",
                    "str",
                    "List[str]",
                    "Dict[Tuple[str, int], Tuple[Any, Any]]"
                ],
                "cookie_secret": [
                    "int",
                    "hashlib._Hash"
                ],
                "future": [
                    "str",
                    "Final",
                    "Tuple[int]"
                ],
                "http_client": [
                    "dict"
                ],
                "oauth_verifier": [
                    "Union[List[str], str]"
                ],
                "request_cookie": [
                    "List[str]",
                    "bytes",
                    "starfish.util.synthesize.SyntheticData"
                ],
                "request_key": [
                    "Optional[str]",
                    "Dict[str, bytes]",
                    "Dict[str, Any]",
                    "Dict[bytes, bytes]"
                ],
                "token": [
                    "str",
                    "List[Dict[str, Any]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "OAuthMixin._oauth_request_token_url": {
            "name": "_oauth_request_token_url",
            "location": 408,
            "return": [
                "str"
            ],
            "arguments": {
                "args": [],
                "callback_uri": [
                    "str",
                    "dict",
                    "Tuple[int, int]",
                    "bool"
                ],
                "extra_params": [
                    "Dict[str, Any]",
                    "Optional[Dict]",
                    "dict",
                    "Union[bool, int, str]",
                    "List[str]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "args": [
                    "str",
                    "List[str]",
                    "dict",
                    "list"
                ],
                "consumer_token": [
                    "str",
                    "dict",
                    "TypeError"
                ],
                "signature": [
                    "List[str]"
                ],
                "url": [
                    "str",
                    "ChainMap[str, str]",
                    "dict"
                ]
            }
        },
        "OAuthMixin._on_request_token": {
            "name": "_on_request_token",
            "location": 433,
            "return": [
                "Iterable[Mapping[str, Any]]",
                "Optional[bool]",
                "str",
                "Iterator[Any]"
            ],
            "arguments": {
                "args": [],
                "authorize_url": [
                    "str",
                    "Dict[str, Any]",
                    "Mapping",
                    "type",
                    "bool",
                    "Iterable[str]",
                    "Dict[int, Tuple[int, int]]"
                ],
                "callback": [
                    "Optional[str]",
                    "Optional[bool]"
                ],
                "callback_uri": [
                    "Optional[str]",
                    "bool"
                ],
                "kwargs": [],
                "response": [
                    "Optional[str]",
                    "tornado.httputil.HTTPConnection"
                ],
                "self": []
            },
            "variables": {
                "args": [
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, List[str]]",
                    "Dict[str, Union[Any, Any]]"
                ],
                "data": [],
                "request_token": []
            }
        },
        "OAuthMixin._oauth_access_token_url": {
            "name": "_oauth_access_token_url",
            "location": 452,
            "return": [
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "request_token": [
                    "str"
                ],
                "self": []
            },
            "variables": {
                "args": [
                    "str",
                    "dict",
                    "list",
                    "MutableSequence[str]"
                ],
                "consumer_token": [
                    "str",
                    "List[dict]",
                    "List[Tuple[str, Any]]"
                ],
                "signature": [
                    "Set[str]",
                    "dict"
                ],
                "url": [
                    "dict",
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "OAuthMixin._on_access_token": {
            "name": "_on_access_token",
            "location": 476,
            "return": [
                "list",
                "str",
                "float"
            ],
            "arguments": {
                "args": [],
                "future": [
                    "Mapping[str, Any]",
                    "str",
                    "Dict[str, Any]"
                ],
                "kwargs": [],
                "response": [
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]",
                    "int"
                ],
                "self": []
            },
            "variables": {
                "access_token": [
                    "list"
                ]
            }
        },
        "OAuthMixin._oauth_consumer_token": {
            "name": "_oauth_consumer_token",
            "location": 485,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "OAuthMixin._oauth_get_user_future": {
            "name": "_oauth_get_user_future",
            "location": 493,
            "return": [
                ""
            ],
            "arguments": {
                "access_token": [
                    "Optional[str]",
                    "str",
                    "List[str]"
                ],
                "args": [],
                "callback": [
                    "Optional[str]",
                    "str",
                    "List[str]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "OAuthMixin._oauth_get_user": {
            "name": "_oauth_get_user",
            "location": 512,
            "return": [
                ""
            ],
            "arguments": {
                "access_token": [
                    "Dict[str, Any]",
                    "Optional[str]",
                    "list",
                    "str"
                ],
                "args": [],
                "callback": [
                    "Dict[str, Any]",
                    "Optional[str]",
                    "list",
                    "str"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "OAuthMixin._on_oauth_get_user": {
            "name": "_on_oauth_get_user",
            "location": 515,
            "return": [
                "Iterator[object]",
                "dict",
                "Tuple[int, str]",
                "Union[tuple, list]"
            ],
            "arguments": {
                "access_token": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Optional[Dict[str, Any]]"
                ],
                "args": [],
                "future": [
                    "str",
                    "List[str]"
                ],
                "kwargs": [],
                "self": [],
                "user_future": [
                    "str",
                    "Optional[str]",
                    "Optional[int]"
                ]
            },
            "variables": {
                "user": [
                    "Dict[str, int]",
                    "Dict[str, str]",
                    "str",
                    "Dict[str, Tuple[int, int, int]]",
                    "Dict[str, Tuple[float, float]]",
                    "Dict[str, Tuple[int, int]]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "OAuthMixin._oauth_request_parameters": {
            "name": "_oauth_request_parameters",
            "location": 526,
            "return": [
                "str",
                "MutableMapping[str, Any]",
                "int"
            ],
            "arguments": {
                "access_token": [
                    "str"
                ],
                "args": [],
                "kwargs": [],
                "method": [
                    "str"
                ],
                "parameters": [
                    "Dict[str, Any]",
                    "str",
                    "dict",
                    "Dict[str, str]"
                ],
                "self": [],
                "url": [
                    "str"
                ]
            },
            "variables": {
                "args": [
                    "List[str]",
                    "Set[str]"
                ],
                "base_args": [
                    "bytes",
                    "Dict[str, bool]",
                    "str",
                    "int",
                    "Dict[str, Union[Any, Any, Any, Any, Any]]",
                    "list",
                    "OrderedDict[str, Any]"
                ],
                "consumer_token": [
                    "dict",
                    "str",
                    "List[str]",
                    "int",
                    "OrderedDict[str, Any]",
                    "list"
                ],
                "signature": [
                    "str",
                    "Optional[str]",
                    "tuple"
                ]
            }
        },
        "OAuthMixin.get_auth_http_client": {
            "name": "get_auth_http_client",
            "location": 554,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "OAuth2Mixin.authorize_redirect": {
            "name": "authorize_redirect",
            "location": 575,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "callback": [
                    "str"
                ],
                "client_id": [
                    "str",
                    "Tuple[str]"
                ],
                "client_secret": [
                    "str"
                ],
                "extra_params": [
                    "Dict[str, Any]",
                    "str",
                    "Dict[str, str]",
                    "dict",
                    "Dict[Any, str]"
                ],
                "kwargs": [],
                "redirect_uri": [
                    "str",
                    "Tuple[str]"
                ],
                "response_type": [
                    "str",
                    "Tuple[str]"
                ],
                "scope": [
                    "str",
                    "Optional[str]"
                ],
                "self": []
            },
            "variables": {
                "args": [
                    "List[str]",
                    "List[int]"
                ]
            }
        },
        "OAuth2Mixin._oauth_request_token_url": {
            "name": "_oauth_request_token_url",
            "location": 605,
            "return": [
                "str"
            ],
            "arguments": {
                "args": [],
                "client_id": [
                    "str",
                    "Dict[str, str]",
                    "dict",
                    "List[Dict[str, Any]]"
                ],
                "client_secret": [
                    "str",
                    "Dict[str, str]",
                    "dict",
                    "List[Dict[str, Any]]"
                ],
                "code": [
                    "str",
                    "Dict[str, str]",
                    "dict",
                    "List[Dict[str, Any]]"
                ],
                "extra_params": [
                    "Dict[str, Any]",
                    "dict",
                    "str",
                    "Dict[Any, str]",
                    "Dict[str, str]",
                    "Dict[str, dict]"
                ],
                "kwargs": [],
                "redirect_uri": [
                    "str",
                    "Dict[str, str]",
                    "dict",
                    "List[Dict[str, Any]]"
                ],
                "self": []
            },
            "variables": {
                "args": [
                    "list",
                    "Dict[int, Any]",
                    "List[Tuple[int, int]]",
                    "Type[Tuple[Any, Any]]",
                    "asyncio.futures.Future[Any]"
                ],
                "url": [
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "OAuth2Mixin.oauth2_request": {
            "name": "oauth2_request",
            "location": 620,
            "return": [
                ""
            ],
            "arguments": {
                "access_token": [
                    "str",
                    "List[str]",
                    "Iterable[Any]",
                    "Iterable[str]"
                ],
                "args": [],
                "callback": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Optional[str]"
                ],
                "kwargs": [],
                "post_args": [
                    "str"
                ],
                "self": [],
                "url": [
                    "str"
                ]
            },
            "variables": {
                "all_args": [
                    "Dict[str, Any]",
                    "List[str]",
                    "Dict[Any, Tuple[str, Any]]",
                    "list"
                ],
                "callback": [
                    "str",
                    "list"
                ],
                "http": [
                    "str"
                ]
            }
        },
        "OAuth2Mixin._on_oauth2_request": {
            "name": "_on_oauth2_request",
            "location": 667,
            "return": [
                "str",
                "Iterable[Mapping[str, Any]]",
                "Optional[bool]",
                "Iterator[Any]"
            ],
            "arguments": {
                "args": [],
                "future": [
                    "dict",
                    "bool",
                    "cdp.util.T_JSON_DICT"
                ],
                "kwargs": [],
                "response": [
                    "dict",
                    "bool",
                    "str"
                ],
                "self": []
            },
            "variables": {}
        },
        "OAuth2Mixin.get_auth_http_client": {
            "name": "get_auth_http_client",
            "location": 675,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TwitterMixin.authenticate_redirect": {
            "name": "authenticate_redirect",
            "location": 727,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "callback": [
                    "str",
                    "Dict[int, dict]"
                ],
                "callback_uri": [
                    "str",
                    "Dict[int, dict]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "http": [
                    "str",
                    "int"
                ]
            }
        },
        "TwitterMixin.twitter_request": {
            "name": "twitter_request",
            "location": 745,
            "return": [
                ""
            ],
            "arguments": {
                "access_token": [
                    "str"
                ],
                "args": [],
                "callback": [
                    "int",
                    "str",
                    "Optional[Dict[str, Any]]",
                    "List[str]"
                ],
                "kwargs": [],
                "path": [
                    "str"
                ],
                "post_args": [
                    "Optional[Dict[str, Any]]",
                    "str",
                    "dict",
                    "T",
                    "int"
                ],
                "self": []
            },
            "variables": {
                "all_args": [
                    "dict",
                    "Set[str]"
                ],
                "http": [
                    "str"
                ],
                "http_callback": [
                    "str",
                    "dict",
                    "frozenset[int]",
                    "Dict[str, str]"
                ],
                "method": [
                    "str",
                    "Dict[str, List[str]]",
                    "Dict[str, Set[str]]",
                    "List[str]",
                    "List[Tuple[str, Any]]",
                    "Type[Dict[str, str]]",
                    "Dict[bytes, Any]",
                    "Pattern[str]"
                ],
                "oauth": [
                    "dict",
                    "List[str]",
                    "Pattern[Any]"
                ],
                "url": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "TwitterMixin._on_twitter_request": {
            "name": "_on_twitter_request",
            "location": 810,
            "return": [
                "str",
                "Iterable[Mapping[str, Any]]",
                "Optional[bool]",
                "Iterator[Any]"
            ],
            "arguments": {
                "args": [],
                "future": [
                    "dict",
                    "bool",
                    "cdp.util.T_JSON_DICT"
                ],
                "kwargs": [],
                "response": [
                    "dict",
                    "bool",
                    "str"
                ],
                "self": []
            },
            "variables": {}
        },
        "TwitterMixin._oauth_consumer_token": {
            "name": "_oauth_consumer_token",
            "location": 818,
            "return": [
                "str",
                "Optional[List[Any]]",
                "BinaryIO",
                "dict",
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TwitterMixin._oauth_get_user_future": {
            "name": "_oauth_get_user_future",
            "location": 826,
            "return": [
                ""
            ],
            "arguments": {
                "access_token": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Callable[[], str]",
                    "dict"
                ],
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "user": [
                    "str",
                    "List[str]",
                    "Dict[str, str]"
                ]
            }
        },
        "GoogleOAuth2Mixin.get_authenticated_user": {
            "name": "get_authenticated_user",
            "location": 860,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "callback": [
                    "str",
                    "Optional[str]",
                    "BaseException"
                ],
                "code": [
                    "str"
                ],
                "kwargs": [],
                "redirect_uri": [
                    "str"
                ],
                "self": []
            },
            "variables": {
                "body": [
                    "Dict[str, int]",
                    "bytes",
                    "hashlib._Hash",
                    "str",
                    "Dict[int, str]",
                    "int"
                ],
                "http": [
                    "str"
                ]
            }
        },
        "GoogleOAuth2Mixin._on_access_token": {
            "name": "_on_access_token",
            "location": 915,
            "return": [
                "list",
                "str",
                "float"
            ],
            "arguments": {
                "args": [],
                "future": [
                    "dict",
                    "Dict[str, Any]",
                    "Type['Declared']",
                    "str",
                    "Dict[str, Union[str, Set]]"
                ],
                "kwargs": [],
                "response": [
                    "Dict[str, Any]",
                    "dict",
                    "bool"
                ],
                "self": []
            },
            "variables": {
                "args": [
                    "dict",
                    "Dict[int, Any]",
                    "venv.Lib.site-packages.sqlalchemy.util._OrderedDict",
                    "Dict[str, Any]",
                    "Type[Dict[str, Any]]"
                ]
            }
        },
        "FacebookGraphMixin.get_authenticated_user": {
            "name": "get_authenticated_user",
            "location": 933,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "callback": [
                    "str"
                ],
                "client_id": [
                    "str",
                    "Dict[str, str]"
                ],
                "client_secret": [
                    "str",
                    "Dict[str, str]"
                ],
                "code": [
                    "str"
                ],
                "extra_fields": [
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "str",
                    "Dict[int, Any]",
                    "Type[Dict[str, Any]]"
                ],
                "kwargs": [],
                "redirect_uri": [
                    "str",
                    "Dict[str, str]"
                ],
                "self": []
            },
            "variables": {
                "args": [
                    "dict",
                    "List[str]",
                    "Sequence"
                ],
                "fields": [
                    "dict",
                    "Set[str]"
                ],
                "http": [
                    "str",
                    "dict"
                ]
            }
        },
        "FacebookGraphMixin._on_access_token": {
            "name": "_on_access_token",
            "location": 994,
            "return": [
                "list",
                "str",
                "float"
            ],
            "arguments": {
                "args": [],
                "client_id": [
                    "str",
                    "bool"
                ],
                "client_secret": [
                    "str",
                    "Dict[str, object]",
                    "List[str]",
                    "Type['Declared']"
                ],
                "fields": [
                    "str",
                    "Dict[str, object]",
                    "List[str]",
                    "Type['Declared']"
                ],
                "future": [
                    "str",
                    "dict",
                    "Optional[str]"
                ],
                "kwargs": [],
                "redirect_uri": [
                    "str",
                    "bool"
                ],
                "response": [
                    "str",
                    "Union[int, str]"
                ],
                "self": []
            },
            "variables": {
                "args": [
                    "Dict[str, Any]",
                    "Set[str]",
                    "List[int]"
                ],
                "session": [
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "dict",
                    "Type[dict]",
                    "Dict[str, int]",
                    "Dict[str, Union[Any, str]]"
                ]
            }
        },
        "FacebookGraphMixin._on_get_user_info": {
            "name": "_on_get_user_info",
            "location": 1017,
            "return": [
                "concurrenfutures.Future",
                "int",
                "str"
            ],
            "arguments": {
                "args": [],
                "fields": [
                    "bool",
                    "Callable",
                    "Optional[str]",
                    "List[str]"
                ],
                "future": [
                    "Optional[int]",
                    "Optional[str]"
                ],
                "kwargs": [],
                "self": [],
                "session": [
                    "str"
                ],
                "user": [
                    "bool",
                    "str"
                ]
            },
            "variables": {
                "fieldmap": [
                    "Dict[str, str]",
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "FacebookGraphMixin.facebook_request": {
            "name": "facebook_request",
            "location": 1035,
            "return": [
                ""
            ],
            "arguments": {
                "access_token": [
                    "Optional[Dict[str, Any]]",
                    "str"
                ],
                "args": [],
                "callback": [
                    "str",
                    "int",
                    "Optional[str]",
                    "Dict[str, str]"
                ],
                "kwargs": [],
                "path": [
                    "str"
                ],
                "post_args": [
                    "Optional[Dict[str, Any]]",
                    "str"
                ],
                "self": []
            },
            "variables": {
                "oauth_future": [
                    "str"
                ],
                "url": [
                    "str",
                    "Final"
                ]
            }
        },
        "global": {
            "long": [
                "str",
                "List[str]",
                "int",
                "Dict[str, List[Any]]",
                "Tuple[str, str, str, str, str, str, str, str]"
            ]
        }
    },
    "tornado-5.0.2/tornado/autoreload.py": {
        "start": {
            "name": "start",
            "location": 112,
            "return": [
                "Union[tuple, list]",
                "Dict[str, Any]",
                "List[int]",
                "str"
            ],
            "arguments": {
                "args": [],
                "check_time": [
                    "int",
                    "list",
                    "Iterable[str]",
                    "Iterable[Union[int, str]]",
                    "float"
                ],
                "kwargs": []
            },
            "variables": {
                "callback": [
                    "List[Union[Any, Any]]"
                ],
                "io_loop": [
                    "int",
                    "str"
                ],
                "modify_times": [
                    "int",
                    "float"
                ],
                "scheduler": [
                    "Dict[str, None]",
                    "Dict[str, Union[Any, str]]",
                    "Dict[str, Tuple[float, float, float]]",
                    "bool",
                    "float",
                    "int"
                ]
            }
        },
        "wait": {
            "name": "wait",
            "location": 130,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": []
            },
            "variables": {
                "io_loop": []
            }
        },
        "watch": {
            "name": "watch",
            "location": 142,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "filename": [
                    "str",
                    "set",
                    "Set[str]",
                    "Tuple[Any, Any]"
                ],
                "kwargs": []
            },
            "variables": {}
        },
        "add_reload_hook": {
            "name": "add_reload_hook",
            "location": 150,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "fn": [
                    "Callable[[], None]",
                    "str",
                    "list",
                    "tuple"
                ],
                "kwargs": []
            },
            "variables": {}
        },
        "_reload_on_update": {
            "name": "_reload_on_update",
            "location": 161,
            "return": [
                "Callable",
                "mypy.types.Instance"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "modify_times": [
                    "Dict[str, float]",
                    "str",
                    "IO[str]",
                    "bytes",
                    "Dict[str, str]",
                    "Optional[int]",
                    "int"
                ]
            },
            "variables": {
                "path": [
                    "Optional[MutableMapping[str, Any]]"
                ]
            }
        },
        "_check_file": {
            "name": "_check_file",
            "location": 187,
            "return": [
                "Iterator[object]",
                "Tuple[int, str]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "modify_times": [
                    "Dict[str, float]",
                    "str",
                    "Optional[str]",
                    "Optional[Callable]",
                    "bool"
                ],
                "path": [
                    "str",
                    "Optional[str]",
                    "int"
                ]
            },
            "variables": {
                "modified": [
                    "str",
                    "int",
                    "List[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "_reload": {
            "name": "_reload",
            "location": 200,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": []
            },
            "variables": {
                "_reload_attempted": [
                    "bool",
                    "str"
                ],
                "argv": [
                    "list",
                    "List[\"Rule\"]",
                    "List[str]",
                    "DefaultDict[Any, int]",
                    "functools.partial[Any]"
                ],
                "path_prefix": [
                    "str"
                ],
                "spec": [
                    "Optional[str]",
                    "dict",
                    "Dict[str, Any]",
                    "int",
                    "List[str]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 259,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": []
            },
            "variables": {
                "__file__": [
                    "list",
                    "List[str]"
                ],
                "argv": [
                    "list",
                    "int",
                    "List[Tuple[str, Any, Any]]",
                    "Type[List[Any]]"
                ],
                "loader": [
                    "list",
                    "str"
                ],
                "mode": [
                    "str",
                    "int",
                    "property",
                    "ClassVar[Dict[str, int]]"
                ],
                "module": [
                    "list",
                    "List[str]"
                ],
                "original_argv": [
                    "list",
                    "Pattern[str]",
                    "List[int]"
                ],
                "script": [
                    "int",
                    "Tuple[int, int, int]"
                ]
            }
        },
        "global": {
            "_USAGE": [
                "str",
                "Tuple[str, str, str, str, str, str, str]"
            ],
            "_has_execv": [
                "int",
                "dict",
                "List[int]",
                "List[List[int]]",
                "Callable(functools.wraps)[[Named(wrapped, Callable[..., Any]), Named(assigned, Sequence[str], default), Named(updated, Sequence[str], default)], Callable[Any, Any]]",
                "str"
            ],
            "_io_loops": [
                "weakref.WeakKeyDictionary[Any, Any]",
                "list"
            ],
            "_reload_attempted": [
                "bool",
                "str"
            ],
            "_reload_hooks": [
                "list",
                "List[Callable[Any, Any]]",
                "Counter[Any]",
                "List[str]",
                "str"
            ],
            "_watched_files": [
                "set"
            ],
            "signal": [
                "int",
                "dict",
                "List[int]",
                "List[List[int]]",
                "Callable(functools.wraps)[[Named(wrapped, Callable[..., Any]), Named(assigned, Sequence[str], default), Named(updated, Sequence[str], default)], Callable[Any, Any]]",
                "str"
            ]
        }
    },
    "tornado-5.0.2/tornado/concurrent.py": {
        "is_future": {
            "name": "is_future",
            "location": 378,
            "return": [
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "x": [
                    "float",
                    "int",
                    "T"
                ]
            },
            "variables": {}
        },
        "wrapper": {
            "name": "wrapper",
            "location": 497,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": []
            },
            "variables": {
                "args": [
                    "str",
                    "property",
                    "tuple",
                    "list",
                    "Dict[str, Any]",
                    "List[str]",
                    "Type[tuple]"
                ],
                "callback": [
                    "str",
                    "List[str]",
                    "int",
                    "Dict[str, List[Any]]",
                    "Tuple[str, str, str, str, str, str, str, str]"
                ],
                "exc_info": [
                    "str",
                    "List[str]",
                    "Dict[str, Any]",
                    "Optional[\"ShippingInfo\"]",
                    "Dict[str, Dict[str, Any]]"
                ],
                "future": [
                    "asyncio.locks.Semaphore",
                    "int",
                    "DefaultDict[str, Set[str]]",
                    "property",
                    "list",
                    "List[Tuple[int, int, int, int, int, int]]"
                ],
                "kwargs": [
                    "dict",
                    "Mapping",
                    "Mapping[str, Any]",
                    "Dict[str, int]",
                    "Dict[str, Any]",
                    "Mapping[Any, Any]",
                    "Dict[str, Literal]"
                ],
                "result": [
                    "list",
                    "Generator[Any, None, None]",
                    "List[None]",
                    "int",
                    "Dict[str, str]",
                    "str"
                ]
            }
        },
        "run_on_executor_decorator": {
            "name": "run_on_executor_decorator",
            "location": 425,
            "return": [
                "str",
                "int",
                "bool",
                "asyncio.events.AbstractEventLoop",
                "list"
            ],
            "arguments": {
                "args": [],
                "fn": [
                    "str",
                    "bool"
                ],
                "kwargs": []
            },
            "variables": {
                "executor": [
                    "str",
                    "List[str]",
                    "int",
                    "Dict[str, List[Any]]",
                    "Tuple[str, str, str, str, str, str, str, str]"
                ]
            }
        },
        "run_on_executor": {
            "name": "run_on_executor",
            "location": 398,
            "return": [
                "int",
                "Iterable",
                "Optional[str]",
                "Tuple[str, int]",
                "float"
            ],
            "arguments": {
                "args": [],
                "kwargs": []
            },
            "variables": {}
        },
        "handle_error": {
            "name": "handle_error",
            "location": 503,
            "return": [
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "tb": [
                    "dict",
                    "bool",
                    "int",
                    "Union[bytes, str]",
                    "str"
                ],
                "typ": [
                    "dict",
                    "bool",
                    "int",
                    "Union[bytes, str]",
                    "str"
                ],
                "value": [
                    "Callable[..., T]",
                    "Callable[..., None]",
                    "Type",
                    "Dict[str, Any]"
                ]
            },
            "variables": {}
        },
        "run_callback": {
            "name": "run_callback",
            "location": 530,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "future": [
                    "List[str]",
                    "list"
                ],
                "kwargs": []
            },
            "variables": {
                "result": [
                    "MutableMapping[Any, Any]",
                    "List[str]",
                    "dict",
                    "bool"
                ]
            }
        },
        "return_future": {
            "name": "return_future",
            "location": 450,
            "return": [
                "float",
                "int",
                "Tuple[int, int]",
                "str"
            ],
            "arguments": {
                "args": [],
                "f": [
                    "Type[T]",
                    "T",
                    "dict",
                    "Iterable",
                    "str"
                ],
                "kwargs": []
            },
            "variables": {
                "replacer": [
                    "str",
                    "List[str]",
                    "int",
                    "Dict[str, List[Any]]",
                    "Tuple[str, str, str, str, str, str, str, str]"
                ]
            }
        },
        "copy": {
            "name": "copy",
            "location": 553,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "args": [],
                "future": [
                    "str",
                    "Iterator",
                    "Callable",
                    "Iterator[T]",
                    "bool"
                ],
                "kwargs": []
            },
            "variables": {}
        },
        "chain_future": {
            "name": "chain_future",
            "location": 541,
            "return": [
                ""
            ],
            "arguments": {
                "a": [
                    "int",
                    "bool",
                    "Union[int, float]",
                    "list"
                ],
                "args": [],
                "b": [
                    "int",
                    "Mapping",
                    "List[str]"
                ],
                "kwargs": []
            },
            "variables": {}
        },
        "future_set_result_unless_cancelled": {
            "name": "future_set_result_unless_cancelled",
            "location": 572,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "future": [
                    "str",
                    "bool",
                    "int",
                    "Collection[str]",
                    "Union[str, 'Type']",
                    "Dict[str, Any]",
                    "float"
                ],
                "kwargs": [],
                "value": [
                    "dict",
                    "int",
                    "Sequence[Any]",
                    "Callable",
                    "Dict[str, Callable]"
                ]
            },
            "variables": {}
        },
        "future_set_exc_info": {
            "name": "future_set_exc_info",
            "location": 584,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "exc_info": [
                    "bool",
                    "Optional[Mapping[str, Any]]",
                    "List[str]",
                    "str"
                ],
                "future": [
                    "str",
                    "denite.util.UserContext",
                    "Type[Exception]",
                    "List[Dict]"
                ],
                "kwargs": []
            },
            "variables": {}
        },
        "future_add_done_callback": {
            "name": "future_add_done_callback",
            "location": 600,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "callback": [
                    "bool",
                    "Iterator",
                    "Dict[str, Any]",
                    "str"
                ],
                "future": [
                    "allennlp.common.util.JsonDict"
                ],
                "kwargs": []
            },
            "variables": {}
        },
        "_TracebackLogger.__init__": {
            "name": "__init__",
            "location": 122,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "exc_info": [
                    "dict",
                    "Dict[str, Tuple[Any, Any, Any]]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "exc_info": [
                    "str",
                    "List[Dict[str, str]]"
                ],
                "formatted_tb": [
                    "str",
                    "Dict[str, Any]",
                    "Type",
                    "int"
                ]
            }
        },
        "_TracebackLogger.activate": {
            "name": "activate",
            "location": 126,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "exc_info": [
                    "Union[None, Dict[str, Any], tuple]",
                    "Optional[Literal]",
                    "Union[Literal, Literal]"
                ],
                "formatted_tb": [
                    "str"
                ]
            }
        },
        "_TracebackLogger.clear": {
            "name": "clear",
            "location": 132,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "exc_info": [
                    "dict",
                    "str",
                    "Union[None, dict]",
                    "Dict[str, Tuple[Any, Any, Any]]"
                ],
                "formatted_tb": [
                    "str",
                    "Dict[str, Any]",
                    "Type",
                    "int"
                ]
            }
        },
        "_TracebackLogger.__del__": {
            "name": "__del__",
            "location": 136,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "is_finalizing": [
                    "str",
                    "int"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Future.__init__": {
            "name": "__init__",
            "location": 190,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_callbacks": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ],
                "_done": [
                    "int",
                    "float",
                    "str",
                    "property",
                    "list"
                ],
                "_exc_info": [
                    "dict",
                    "str",
                    "Union[None, dict]",
                    "Dict[str, Tuple[Any, Any, Any]]"
                ],
                "_log_traceback": [
                    "str"
                ],
                "_result": [
                    "dict",
                    "list",
                    "Collection[Any]",
                    "Mapping"
                ],
                "_tb_logger": [
                    "Dict[str, Any]",
                    "Final"
                ]
            }
        },
        "Future.__await__": {
            "name": "__await__",
            "location": 209,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "args": [
                    "tuple"
                ],
                "e": [
                    "int",
                    "Tuple[Any, Any]",
                    "Dict[str, str]",
                    "str"
                ],
                "result": [
                    "platform.Any",
                    "Tuple[Literal, Literal, Literal]",
                    "Dict[str, Any]",
                    "str",
                    "Tuple[Any, Any]"
                ]
            }
        },
        "Future.cancel": {
            "name": "cancel",
            "location": 217,
            "return": [
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Future.cancelled": {
            "name": "cancelled",
            "location": 225,
            "return": [
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Future.running": {
            "name": "running",
            "location": 233,
            "return": [
                "float",
                "bool",
                "int",
                "Awaitable[Any]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Future.done": {
            "name": "done",
            "location": 237,
            "return": [
                "str",
                "Dict[str, Any]",
                "util.IDM",
                "float",
                "Callable"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Future._clear_tb_log": {
            "name": "_clear_tb_log",
            "location": 241,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_log_traceback": [
                    "str"
                ],
                "_tb_logger": [
                    "Dict[str, int]"
                ]
            }
        },
        "Future.result": {
            "name": "result",
            "location": 247,
            "return": [
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "timeout": [
                    "int",
                    "str",
                    "List[str]"
                ]
            },
            "variables": {
                "self": [
                    "List[str]",
                    "str",
                    "Dict[str, List[float]]",
                    "dict",
                    "Dict[str, str]"
                ]
            }
        },
        "Future.exception": {
            "name": "exception",
            "location": 266,
            "return": [
                "Optional[str]",
                "Optional[bool]",
                "Optional[int]",
                "str",
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "timeout": [
                    "float",
                    "Optional[float]",
                    "int",
                    "Optional[int]",
                    "bool"
                ]
            },
            "variables": {}
        },
        "Future.add_done_callback": {
            "name": "add_done_callback",
            "location": 281,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "fn": [
                    "Callable[[T, T], bool]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Future.set_result": {
            "name": "set_result",
            "location": 295,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "result": [
                    "Counter",
                    "bool",
                    "int",
                    "str",
                    "Dict[str, Any]"
                ],
                "self": []
            },
            "variables": {
                "_result": [
                    "dict",
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "Future.set_exception": {
            "name": "set_exception",
            "location": 304,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "exception": [
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "Mapping[str, Any]",
                    "str",
                    "cdp.util.T_JSON_DICT"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Future.exc_info": {
            "name": "exc_info",
            "location": 311,
            "return": [
                "str",
                "dict",
                "int"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Future.set_exc_info": {
            "name": "set_exc_info",
            "location": 319,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "exc_info": [
                    "bool",
                    "str",
                    "Callable[[], bool]",
                    "Optional[str]",
                    "int",
                    "Dict[str, str]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_exc_info": [
                    "int",
                    "Dict[str, int]",
                    "Dict[str, List[Any]]",
                    "Dict[str, Union[None, Any, int, str]]"
                ],
                "_log_traceback": [
                    "Dict[str, Any]",
                    "list"
                ],
                "_tb_logger": []
            }
        },
        "Future._check_done": {
            "name": "_check_done",
            "location": 340,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Future._set_done": {
            "name": "_set_done",
            "location": 344,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_callbacks": [
                    "Set[str]",
                    "List[str]",
                    "Dict[str, Any]",
                    "Dict[str, dict]"
                ],
                "_done": [
                    "int",
                    "bool",
                    "List[int]",
                    "frozenset[str]"
                ],
                "loop": []
            }
        },
        "Future.__del__": {
            "name": "__del__",
            "location": 357,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "args": [],
                "is_finalizing": [
                    "int",
                    "float",
                    "bool",
                    "Optional[int]",
                    "str"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "tb": [
                    "list",
                    "Dict[str, Type[Any]]",
                    "str",
                    "Iterator[str]",
                    "MutableMapping[Any, Any]",
                    "dict",
                    "List[List[float]]",
                    "Dict[str, List[Any]]"
                ]
            }
        },
        "DummyExecutor.submit": {
            "name": "submit",
            "location": 383,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "fn": [
                    "int",
                    "str",
                    "bool",
                    "float",
                    "Dict[str, Any]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "future": [
                    "int",
                    "list"
                ]
            }
        },
        "DummyExecutor.shutdown": {
            "name": "shutdown",
            "location": 391,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "wait": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            },
            "variables": {}
        },
        "global": {
            "FUTURES": [
                "Type[int]",
                "int",
                "tuple",
                "float",
                "List[str]",
                "Dict[str, str]"
            ],
            "Future": [
                "Tuple[Hashable]",
                "Union[Type[Exception], Tuple[Any, ...]]",
                "asyncio.Future",
                "Iterator[Tuple[Any, Any]]"
            ],
            "_GC_CYCLE_FINALIZERS": [
                "int",
                "dict",
                "List[int]",
                "List[List[int]]",
                "Callable(functools.wraps)[[Named(wrapped, Callable[..., Any]), Named(assigned, Sequence[str], default), Named(updated, Sequence[str], default)], Callable[Any, Any]]",
                "str"
            ],
            "_NO_RESULT": [
                "Tuple[Any, Any, Any, Any, Any, Any, Any]",
                "Type[Optional[str]]",
                "str",
                "List[str]",
                "dict"
            ],
            "asyncio": [
                "str",
                "int",
                "Optional[str]",
                "List[None]"
            ],
            "dummy_executor": [
                "str",
                "List[str]",
                "int",
                "Dict[str, List[Any]]",
                "Tuple[str, str, str, str, str, str, str, str]"
            ],
            "futures": [
                "int",
                "Union[Type[Exception], Tuple[Any, ...]]",
                "bytes",
                "bool"
            ],
            "typing": [
                "str",
                "int",
                "property"
            ]
        }
    },
    "tornado-5.0.2/tornado/curl_httpclient.py": {
        "CurlAsyncHTTPClient.initialize": {
            "name": "initialize",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "defaults": [
                    "bool",
                    "int",
                    "str",
                    "Dict[str, Any]"
                ],
                "kwargs": [],
                "max_clients": [
                    "int",
                    "Optional[int]",
                    "str"
                ],
                "self": []
            },
            "variables": {
                "_curls": [
                    "int",
                    "Dict[str, Any]",
                    "str",
                    "bytes"
                ],
                "_fds": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ],
                "_force_timeout_callback": [
                    "int",
                    "float"
                ],
                "_free_list": [
                    "int",
                    "str",
                    "list"
                ],
                "_multi": [
                    "int",
                    "List[int]",
                    "List[Tuple[str, str, str]]",
                    "float"
                ],
                "_requests": [
                    "list",
                    "str",
                    "Dict[str, Any]",
                    "int",
                    "Dict[int, Dict[str, float]]",
                    "tuple"
                ],
                "_timeout": [
                    "int"
                ],
                "dummy_curl_handle": [
                    "pycurl.Curl"
                ]
            }
        },
        "CurlAsyncHTTPClient.close": {
            "name": "close",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_force_timeout_callback": [
                    "int",
                    "float",
                    "str"
                ],
                "_multi": [
                    "int",
                    "List[str]",
                    "str",
                    "float",
                    "Set[str]",
                    "bool"
                ]
            }
        },
        "CurlAsyncHTTPClient.fetch_impl": {
            "name": "fetch_impl",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "callback": [
                    "dict",
                    "int"
                ],
                "kwargs": [],
                "request": [
                    "dict",
                    "int"
                ],
                "self": []
            },
            "variables": {}
        },
        "CurlAsyncHTTPClient._handle_socket": {
            "name": "_handle_socket",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "data": [
                    "bytes",
                    "str",
                    "bool",
                    "Optional[IO[bytes]]",
                    "Dict[str, Any]",
                    "dict",
                    "List[str]"
                ],
                "event": [
                    "int",
                    "Callable",
                    "Iterable[Callable]"
                ],
                "fd": [
                    "int"
                ],
                "kwargs": [],
                "multi": [
                    "bytes",
                    "str",
                    "bool",
                    "Optional[IO[bytes]]",
                    "Dict[str, Any]",
                    "dict",
                    "List[str]"
                ],
                "self": []
            },
            "variables": {
                "event_map": [
                    "str"
                ],
                "ioloop_event": [
                    "str"
                ]
            }
        },
        "CurlAsyncHTTPClient._set_timeout": {
            "name": "_set_timeout",
            "location": 117,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "msecs": [
                    "int",
                    "Callable[[Any], int]",
                    "str"
                ],
                "self": []
            },
            "variables": {
                "_timeout": [
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "CurlAsyncHTTPClient._handle_events": {
            "name": "_handle_events",
            "location": 124,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "events": [
                    "int",
                    "List[List[int]]",
                    "Dict[str, Union[int, bool]]",
                    "bool",
                    "Dict[str, Any]"
                ],
                "fd": [
                    "int",
                    "List[List[int]]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "action": [
                    "str",
                    "Dict[str, Tuple[Any, Any]]",
                    "pytb.io.Tee"
                ],
                "num_handles": [
                    "int"
                ],
                "ret": [
                    "str",
                    "Type[property]",
                    "tuple"
                ]
            }
        },
        "CurlAsyncHTTPClient._handle_timeout": {
            "name": "_handle_timeout",
            "location": 142,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_timeout": [
                    "int"
                ],
                "new_timeout": [
                    "int",
                    "Dict[str, Type[Any]]",
                    "str",
                    "List[float]",
                    "List[str]"
                ],
                "num_handles": [
                    "int",
                    "Dict[float, float]"
                ],
                "ret": [
                    "property",
                    "int",
                    "str",
                    "list",
                    "functools.partial[Any]"
                ]
            }
        },
        "CurlAsyncHTTPClient._handle_force_timeout": {
            "name": "_handle_force_timeout",
            "location": 173,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "num_handles": [
                    "int"
                ],
                "ret": [
                    "str",
                    "int",
                    "property",
                    "Tuple[int, int]"
                ]
            }
        },
        "CurlAsyncHTTPClient._finish_pending_requests": {
            "name": "_finish_pending_requests",
            "location": 187,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "err_list": [
                    "list",
                    "List[Tuple[int, int]]"
                ],
                "num_q": [
                    "int",
                    "float",
                    "Union[int, Tuple[int, int]]",
                    "bool"
                ],
                "ok_list": [
                    "list",
                    "List[Tuple[int, int]]"
                ]
            }
        },
        "CurlAsyncHTTPClient._process_queue": {
            "name": "_process_queue",
            "location": 201,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "callback": [
                    "str",
                    "Dict[str, Union[Any, int, str]]",
                    "Dict[str, Union[dict, Any, Any, Any]]"
                ],
                "curl": [
                    "dict"
                ],
                "info": [
                    "list",
                    "dict",
                    "Dict[str, Any]"
                ],
                "request": [
                    "Optional[Dict[str, Any]]",
                    "gobbli.io.TaskIO",
                    "Optional[str]",
                    "str"
                ],
                "started": [
                    "bool",
                    "str",
                    "int",
                    "List[Tuple[Any, Any]]"
                ]
            }
        },
        "CurlAsyncHTTPClient._finish": {
            "name": "_finish",
            "location": 240,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "curl": [
                    "Optional[\"Node\"]",
                    "Optional[\"TreeNode\"]",
                    "pycurl.Curl"
                ],
                "curl_error": [
                    "int",
                    "str",
                    "float"
                ],
                "curl_message": [
                    "int",
                    "str",
                    "float"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "buffer": [
                    "classmethod",
                    "str",
                    "Union[dict, Dict[str, Any]]"
                ],
                "code": [
                    "str",
                    "Dict[int, str]",
                    "logging.Logger",
                    "int"
                ],
                "effective_url": [
                    "str"
                ],
                "error": [
                    "Dict[str, List[Any]]",
                    "str",
                    "Dict[str, Literal]",
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ],
                "info": [
                    "dict",
                    "logging.Logger",
                    "Dict[str, list]",
                    "str",
                    "List[Tuple[None, Any, str]]"
                ],
                "time_info": [
                    "str",
                    "Dict[Any, str]",
                    "Dict[str, Union[Any, Any]]",
                    "Optional[str]",
                    "Dict[str, str]",
                    "Tuple[str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str]"
                ]
            }
        },
        "CurlAsyncHTTPClient.handle_callback_exception": {
            "name": "handle_callback_exception",
            "location": 279,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "callback": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "CurlAsyncHTTPClient._curl_create": {
            "name": "_curl_create",
            "location": 282,
            "return": [
                "List[List[str]]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "curl": [
                    "str",
                    "Tuple[int, int]",
                    "Dict[str, Union[float, str]]"
                ]
            }
        },
        "CurlAsyncHTTPClient.write_function": {
            "name": "write_function",
            "location": 318,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "chunk": [
                    "bool",
                    "str",
                    "dict",
                    "int"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "CurlAsyncHTTPClient.ioctl": {
            "name": "ioctl",
            "location": 432,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "cmd": [
                    "int",
                    "Callable",
                    "str"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "CurlAsyncHTTPClient._curl_setup_request": {
            "name": "_curl_setup_request",
            "location": 292,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "buffer": [
                    "io.BytesIO",
                    "tornado.httputil.HTTPHeaders",
                    "dict",
                    "Tuple[bytes]",
                    "Optional[IO[bytes]]",
                    "bool"
                ],
                "curl": [
                    "pycurl.Curl",
                    "bytes",
                    "Tuple[str, int]"
                ],
                "headers": [
                    "io.BytesIO",
                    "tornado.httputil.HTTPHeaders",
                    "dict",
                    "Tuple[bytes]",
                    "Optional[IO[bytes]]",
                    "bool"
                ],
                "kwargs": [],
                "request": [
                    "dict"
                ],
                "self": []
            },
            "variables": {
                "body_expected": [
                    "str",
                    "int",
                    "List[str]",
                    "frozenset[str]",
                    "Tuple[int, int]"
                ],
                "body_present": [
                    "str",
                    "Dict[str, List[str]]",
                    "bool",
                    "Optional[Dict]",
                    "bytes",
                    "Union[None, str, bytes]"
                ],
                "credentials": [
                    "str",
                    "List[str]",
                    "int",
                    "Dict[str, List[Any]]",
                    "Tuple[str, str, str, str, str, str, str, str]"
                ],
                "curl_options": [
                    "List[str]",
                    "List[Tuple[str, str]]",
                    "List[Union[Any, Any, Any]]",
                    "list",
                    "functools.partial[click.decorators._IdentityFunction]",
                    "List[int]",
                    "List[Dict[str, Any]]",
                    "Dict[int, str]"
                ],
                "custom_methods": [
                    "List[str]",
                    "int",
                    "Final",
                    "Tuple[str, str, str, str]",
                    "Dict[str, str]",
                    "Tuple[str]",
                    "staticmethod",
                    "FrozenSet[str]"
                ],
                "request_buffer": [
                    "bytes",
                    "Dict[str, Union[Any, Any, Any, Any]]"
                ],
                "userpwd": [
                    "Pattern[str]",
                    "list",
                    "List[Tuple[str, Any]]"
                ],
                "write_function": [
                    "str",
                    "Set[str]",
                    "list",
                    "Type[Callable[..., float]]",
                    "functools.partial[Any]"
                ]
            }
        },
        "CurlAsyncHTTPClient._curl_header_callback": {
            "name": "_curl_header_callback",
            "location": 482,
            "return": [
                "Iterator[Dict[str, str]]",
                "str",
                "Iterator[Any]"
            ],
            "arguments": {
                "args": [],
                "header_callback": [
                    "Optional[bool]",
                    "Dict[str, Any]",
                    "int",
                    "Optional[str]",
                    "Optional[Type[Any]]"
                ],
                "header_line": [
                    "Dict[str, Any]",
                    "str"
                ],
                "headers": [
                    "str",
                    "tornado.httputil.HTTPHeaders",
                    "Optional[dict]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "__": [
                    "str",
                    "List[str]",
                    "int",
                    "Pattern[str]"
                ],
                "header_line": [
                    "str",
                    "list",
                    "Dict[bytes, Optional[bytes]]",
                    "Dict[str, str]"
                ],
                "reason": [
                    "str",
                    "List[str]",
                    "int",
                    "Pattern[str]"
                ]
            }
        },
        "CurlAsyncHTTPClient._curl_debug": {
            "name": "_curl_debug",
            "location": 500,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "debug_msg": [
                    "str",
                    "Exception",
                    "int"
                ],
                "debug_type": [
                    "int",
                    "str",
                    "dict",
                    "Type"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "debug_msg": [
                    "bool",
                    "int",
                    "List[str]",
                    "str"
                ],
                "debug_types": [
                    "Dict[str, Type[Any]]",
                    "Dict[int, str]",
                    "str"
                ]
            }
        },
        "CurlError.__init__": {
            "name": "__init__",
            "location": 514,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "errno": [
                    "int",
                    "bool",
                    "float"
                ],
                "kwargs": [],
                "message": [
                    "str",
                    "bool"
                ],
                "self": []
            },
            "variables": {
                "errno": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ]
            }
        },
        "global": {
            "curl_log": [
                "logging.Logger",
                "List[Tuple[Any, int]]",
                "Union[Literal, str]",
                "dict",
                "ValueError",
                "rotkehlchen.logging.RotkehlchenLogsAdapter"
            ]
        }
    },
    "tornado-5.0.2/tornado/escape.py": {
        "xhtml_escape": {
            "name": "xhtml_escape",
            "location": 50,
            "return": [
                "float",
                "Optional[int]",
                "bool",
                "int"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "value": [
                    "Union[str, bytes]",
                    "str",
                    "Pattern[str]",
                    "bytes",
                    "int",
                    "property",
                    "Dict[int, str]"
                ]
            },
            "variables": {}
        },
        "xhtml_unescape": {
            "name": "xhtml_unescape",
            "location": 65,
            "return": [
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "value": [
                    "Optional[int]",
                    "Union[str, bytes]",
                    "str",
                    "bool",
                    "Optional[bool]",
                    "int"
                ]
            },
            "variables": {}
        },
        "json_encode": {
            "name": "json_encode",
            "location": 73,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "dict",
                "Callable[[Mapping], T]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "value": [
                    "str",
                    "SupportsBytes",
                    "Sequence[str]",
                    "bool",
                    "complex"
                ]
            },
            "variables": {}
        },
        "json_decode": {
            "name": "json_decode",
            "location": 84,
            "return": [
                "Dict[str, int]",
                "float",
                "int",
                "str",
                "dict",
                "Generator"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "value": [
                    "Union[str, bytes]",
                    "str",
                    "Iterable",
                    "list",
                    "Union[str, Sequence[str]]",
                    "List[Tuple[int, int]]"
                ]
            },
            "variables": {}
        },
        "squeeze": {
            "name": "squeeze",
            "location": 89,
            "return": [
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "value": [
                    "str",
                    "int",
                    "float",
                    "Optional[float]"
                ]
            },
            "variables": {}
        },
        "url_escape": {
            "name": "url_escape",
            "location": 94,
            "return": [
                "str",
                "dict",
                "Dict[Tuple[str, str], Tuple[float, float]]",
                "int"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "plus": [
                    "float",
                    "int",
                    "List[Tuple[int, float]]",
                    "str"
                ],
                "value": [
                    "Union[str, bytes]",
                    "str",
                    "int",
                    "bytes",
                    "float"
                ]
            },
            "variables": {
                "quote": [
                    "list",
                    "Tuple[int, int]",
                    "int"
                ]
            }
        },
        "url_unescape": {
            "name": "url_unescape",
            "location": 138,
            "return": [
                "int",
                "Iterable[int]",
                "IO[str]",
                "str",
                "Dict[str, int]"
            ],
            "arguments": {
                "args": [],
                "encoding": [
                    "Optional[str]",
                    "List[str]",
                    "bool",
                    "Optional[bool]",
                    "str"
                ],
                "kwargs": [],
                "plus": [
                    "float",
                    "int",
                    "List[Tuple[int, float]]",
                    "str"
                ],
                "value": [
                    "bytes",
                    "str",
                    "int"
                ]
            },
            "variables": {
                "unquote": [
                    "str",
                    "dict"
                ],
                "value": [
                    "str",
                    "bytes"
                ]
            }
        },
        "parse_qs_bytes": {
            "name": "parse_qs_bytes",
            "location": 165,
            "return": [
                "str",
                "bool",
                "tuple",
                "Tuple[str, str, str]",
                "int",
                "Dict[str, bool]"
            ],
            "arguments": {
                "args": [],
                "keep_blank_values": [
                    "str",
                    "dict",
                    "Dict[str, Tuple[Any, Any]]",
                    "Mapping[str, Any]",
                    "Dict[str, Any]",
                    "int"
                ],
                "kwargs": [],
                "qs": [
                    "str",
                    "dict",
                    "Dict[str, Tuple[Any, Any]]",
                    "Mapping[str, Any]",
                    "Dict[str, Any]",
                    "int"
                ],
                "strict_parsing": [
                    "str",
                    "dict",
                    "Dict[str, Tuple[Any, Any]]",
                    "Mapping[str, Any]",
                    "Dict[str, Any]",
                    "int"
                ]
            },
            "variables": {
                "encoded": [
                    "int",
                    "list",
                    "Pattern[str]",
                    "Dict[str, str]",
                    "dict",
                    "str",
                    "Union[int, str]"
                ],
                "result": [
                    "dict",
                    "KeysView[str]",
                    "list",
                    "Dict[str, Any]",
                    "set"
                ]
            }
        },
        "utf8": {
            "name": "utf8",
            "location": 186,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "value": [
                    "Union[None, str, bytes]",
                    "T",
                    "str",
                    "Optional[int]"
                ]
            },
            "variables": {}
        },
        "to_unicode": {
            "name": "to_unicode",
            "location": 205,
            "return": [
                "str",
                "bool",
                "int",
                "float"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "value": [
                    "Union[None, str, bytes]",
                    "dict",
                    "bytes",
                    "str"
                ]
            },
            "variables": {}
        },
        "to_basestring": {
            "name": "to_basestring",
            "location": 234,
            "return": [
                "str",
                "bool",
                "int",
                "float"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "value": [
                    "Union[None, str, bytes]",
                    "dict",
                    "bytes",
                    "str"
                ]
            },
            "variables": {}
        },
        "recursive_unicode": {
            "name": "recursive_unicode",
            "location": 252,
            "return": [
                "dict",
                "Dict[str, Any]",
                "str",
                "int"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "obj": [
                    "dict",
                    "Mapping[str, Any]",
                    "Hashable"
                ]
            },
            "variables": {}
        },
        "make_link": {
            "name": "make_link",
            "location": 315,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "m": [
                    "str",
                    "int",
                    "List[str]",
                    "Optional[str]"
                ]
            },
            "variables": {
                "amp": [
                    "list",
                    "List[str]"
                ],
                "before_clip": [
                    "str",
                    "int",
                    "List[str]"
                ],
                "href": [
                    "str",
                    "Dict[str, str]",
                    "list"
                ],
                "max_len": [
                    "int",
                    "List[str]",
                    "str"
                ],
                "params": [
                    "List[int]",
                    "str",
                    "Tuple[int, int]"
                ],
                "parts": [
                    "str"
                ],
                "proto": [
                    "float",
                    "Type[str]",
                    "list",
                    "Set[Type[Any]]"
                ],
                "proto_len": [
                    "List[str]",
                    "str",
                    "list",
                    "bytes",
                    "set"
                ],
                "url": [
                    "str",
                    "list",
                    "Dict[int, str]",
                    "Dict[int, List[str]]"
                ]
            }
        },
        "linkify": {
            "name": "linkify",
            "location": 281,
            "return": [
                "str",
                "Iterable[int]",
                "bool",
                "int"
            ],
            "arguments": {
                "args": [],
                "extra_params": [
                    "str",
                    "Set[str]",
                    "List[str]",
                    "bool"
                ],
                "kwargs": [],
                "permitted_protocols": [
                    "str",
                    "Set[str]",
                    "List[str]",
                    "bool"
                ],
                "require_protocol": [
                    "str",
                    "Set[str]",
                    "List[str]",
                    "bool"
                ],
                "shorten": [
                    "str",
                    "Set[str]",
                    "List[str]",
                    "bool"
                ],
                "text": [
                    "Union[str, bytes]",
                    "str",
                    "bool"
                ]
            },
            "variables": {
                "extra_params": [
                    "str",
                    "List[str]",
                    "int",
                    "Dict[str, List[Any]]",
                    "Tuple[str, str, str, str, str, str, str, str]"
                ],
                "text": [
                    "str"
                ]
            }
        },
        "_convert_entity": {
            "name": "_convert_entity",
            "location": 377,
            "return": [
                "float",
                "Callable[[None], bool]",
                "List[str]",
                "int"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "m": [
                    "Match",
                    "int",
                    "List[int]"
                ]
            },
            "variables": {}
        },
        "_build_unicode_map": {
            "name": "_build_unicode_map",
            "location": 392,
            "return": [
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": []
            },
            "variables": {
                "unicode_map": [
                    "str",
                    "Set[str]",
                    "List[str]",
                    "dict",
                    "Dict[str, str]"
                ]
            }
        },
        "global": {
            "_BASESTRING_TYPES": [
                "tuple",
                "str"
            ],
            "_HTML_UNICODE_MAP": [
                "str",
                "List[str]",
                "int",
                "Dict[str, List[Any]]",
                "Tuple[str, str, str, str, str, str, str, str]"
            ],
            "_TO_UNICODE_TYPES": [
                "str",
                "int",
                "tuple"
            ],
            "_URL_RE": [
                "Pattern[str]",
                "Pattern[bytes]"
            ],
            "_UTF8_TYPES": [
                "tuple",
                "str"
            ],
            "_XHTML_ESCAPE_DICT": [
                "Dict[str, str]",
                "Pattern[str]"
            ],
            "_XHTML_ESCAPE_RE": [
                "Pattern[str]"
            ],
            "_unicode": [
                "int",
                "dict",
                "List[int]",
                "List[List[int]]",
                "str"
            ],
            "native_str": [
                "str",
                "Type[Optional[str]]",
                "property"
            ],
            "parse_qs_bytes": [
                "int",
                "str",
                "float"
            ],
            "unichr": [
                "int",
                "List[int]",
                "str",
                "float",
                "Type[range]"
            ]
        }
    },
    "tornado-5.0.2/tornado/gen.py": {
        "isawaitable": {
            "name": "isawaitable",
            "location": 141,
            "return": [
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            },
            "variables": {}
        },
        "_value_from_stopiteration": {
            "name": "_value_from_stopiteration",
            "location": 170,
            "return": [
                "Optional[str]",
                "Optional[bytes]",
                "Optional[dict]",
                "Union[str, None]"
            ],
            "arguments": {
                "args": [],
                "e": [
                    "OrderedDict",
                    "denite.util.UserContext",
                    "Dict[str, Any]",
                    "abc.Mapping",
                    "Dict[str, Set[str]]"
                ],
                "kwargs": []
            },
            "variables": {}
        },
        "_create_future": {
            "name": "_create_future",
            "location": 185,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "args": [],
                "kwargs": []
            },
            "variables": {
                "filename": [
                    "str"
                ],
                "future": [
                    "str",
                    "int",
                    "List[str]",
                    "list"
                ],
                "source_traceback": [
                    "str",
                    "Set[str]",
                    "List[str]"
                ]
            }
        },
        "final_callback": {
            "name": "final_callback",
            "location": 223,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "future": [
                    "Type",
                    "List[str]"
                ],
                "kwargs": []
            },
            "variables": {}
        },
        "wrapper": {
            "name": "wrapper",
            "location": 1234,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": []
            },
            "variables": {}
        },
        "engine": {
            "name": "engine",
            "location": 200,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ],
                "kwargs": []
            },
            "variables": {
                "func": [
                    "Type[Callable[..., Any]]",
                    "int",
                    "Callable",
                    "Callable(Any)[[Iterable[object]], bool]",
                    "list",
                    "property",
                    "Callable[..., float]"
                ]
            }
        },
        "coroutine": {
            "name": "coroutine",
            "location": 235,
            "return": [
                "str",
                "Optional[int]",
                "bool"
            ],
            "arguments": {
                "args": [],
                "func": [
                    "Callable[..., None]",
                    "float"
                ],
                "kwargs": [],
                "replace_callback": [
                    "Callable[..., None]",
                    "float"
                ]
            },
            "variables": {}
        },
        "_make_coroutine_wrapper": {
            "name": "_make_coroutine_wrapper",
            "location": 273,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ],
                "kwargs": [],
                "replace_callback": [
                    "Callable",
                    "Callable[..., None]"
                ]
            },
            "variables": {
                "__tornado_coroutine__": [
                    "str",
                    "bool"
                ],
                "__wrapped__": [
                    "int",
                    "dict",
                    "List[int]",
                    "List[List[int]]",
                    "Callable(functools.wraps)[[Named(wrapped, Callable[..., Any]), Named(assigned, Sequence[str], default), Named(updated, Sequence[str], default)], Callable[Any, Any]]",
                    "str"
                ],
                "func": [
                    "Type[Callable[..., Any]]",
                    "int",
                    "Callable",
                    "Callable(Any)[[Iterable[object]], bool]",
                    "list",
                    "property",
                    "Callable[..., float]"
                ],
                "wrapped": [
                    "int",
                    "dict",
                    "List[int]",
                    "List[List[int]]",
                    "Callable(functools.wraps)[[Named(wrapped, Callable[..., Any]), Named(assigned, Sequence[str], default), Named(updated, Sequence[str], default)], Callable[Any, Any]]",
                    "str"
                ]
            }
        },
        "is_coroutine_function": {
            "name": "is_coroutine_function",
            "location": 358,
            "return": [
                "bool"
            ],
            "arguments": {
                "args": [],
                "func": [
                    "Callable",
                    "bool"
                ],
                "kwargs": []
            },
            "variables": {}
        },
        "handle_exception": {
            "name": "handle_exception",
            "location": 627,
            "return": [
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "tb": [
                    "str",
                    "Dict[str, Any]",
                    "float",
                    "Union[bytes, str]"
                ],
                "typ": [
                    "str",
                    "Dict[str, Any]",
                    "float",
                    "Union[bytes, str]"
                ],
                "value": [
                    "str",
                    "Dict[str, Any]",
                    "float",
                    "Union[bytes, str]"
                ]
            },
            "variables": {}
        },
        "set_result": {
            "name": "set_result",
            "location": 633,
            "return": [
                "str",
                "int",
                "List[Tuple[bytes, bytes]]",
                "Type",
                "Set[str]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "result": [
                    "int",
                    "Optional[Set[str]]",
                    "list",
                    "bool"
                ]
            },
            "variables": {}
        },
        "Task": {
            "name": "Task",
            "location": 613,
            "return": [
                "str",
                "int",
                "Generator",
                "bool"
            ],
            "arguments": {
                "args": [],
                "func": [
                    "Dict[str, Any]",
                    "tuple",
                    "Callable",
                    "str",
                    "list",
                    "dict"
                ],
                "kwargs": []
            },
            "variables": {
                "future": [
                    "str",
                    "List[str]",
                    "int",
                    "Dict[str, List[Any]]",
                    "Tuple[str, str, str, str, str, str, str, str]"
                ]
            }
        },
        "_contains_yieldpoint": {
            "name": "_contains_yieldpoint",
            "location": 675,
            "return": [
                "bool",
                "int",
                "str",
                "tuple",
                "List[str]",
                "List[Tuple]",
                "list"
            ],
            "arguments": {
                "args": [],
                "children": [
                    "deoplete.util.UserContext",
                    "Dict[str, Any]",
                    "dict",
                    "list"
                ],
                "kwargs": []
            },
            "variables": {}
        },
        "multi": {
            "name": "multi",
            "location": 688,
            "return": [],
            "arguments": {
                "args": [],
                "children": [
                    "int",
                    "str",
                    "bool",
                    "dict"
                ],
                "kwargs": [],
                "quiet_exceptions": [
                    "Type",
                    "dict",
                    "int"
                ]
            },
            "variables": {}
        },
        "callback": {
            "name": "callback",
            "location": 843,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "f": [
                    "Callable",
                    "int",
                    "Dict[str, str]"
                ],
                "kwargs": []
            },
            "variables": {
                "result_list": [
                    "list",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "multi_future": {
            "name": "multi_future",
            "location": 813,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "children": [
                    "Exception",
                    "str",
                    "int",
                    "List[str]",
                    "bool"
                ],
                "kwargs": [],
                "quiet_exceptions": [
                    "Exception",
                    "str",
                    "int",
                    "List[str]",
                    "bool"
                ]
            },
            "variables": {
                "children": [
                    "str",
                    "List[str]",
                    "int",
                    "Dict[str, List[Any]]",
                    "Tuple[str, str, str, str, str, str, str, str]"
                ],
                "future": [
                    "str",
                    "List[str]",
                    "int",
                    "Dict[str, List[Any]]",
                    "Tuple[str, str, str, str, str, str, str, str]"
                ],
                "keys": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "listening": [
                    "set",
                    "List[str]",
                    "str",
                    "Dict[str, str]",
                    "Set[str]"
                ],
                "unfinished_children": [
                    "str",
                    "List[str]",
                    "int",
                    "Dict[str, List[Any]]",
                    "Tuple[str, str, str, str, str, str, str, str]"
                ]
            }
        },
        "maybe_future": {
            "name": "maybe_future",
            "location": 872,
            "return": [
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "x": [
                    "bool",
                    "int",
                    "Union[str, type]",
                    "Iterable[T_co]"
                ]
            },
            "variables": {
                "fut": [
                    "str",
                    "int",
                    "Dict[str, List[str]]"
                ]
            }
        },
        "error_callback": {
            "name": "error_callback",
            "location": 934,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "future": [
                    "nutrition.recipe.types.Ingredient",
                    "asyncio.AbstractEventLoop"
                ],
                "kwargs": []
            },
            "variables": {}
        },
        "timeout_callback": {
            "name": "timeout_callback",
            "location": 942,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": []
            },
            "variables": {}
        },
        "with_timeout": {
            "name": "with_timeout",
            "location": 893,
            "return": [
                "bool",
                "Match",
                "\"Parameter\"",
                "Tuple[int, Dict[str, Any]]",
                "Dict[str, Set[str]]"
            ],
            "arguments": {
                "args": [],
                "future": [
                    "Awaitable",
                    "int",
                    "dict",
                    "fklearn.types.PerturbFnType"
                ],
                "kwargs": [],
                "quiet_exceptions": [
                    "int",
                    "bool",
                    "Optional[int]",
                    "Container[\"Taxon\"]",
                    "str"
                ],
                "timeout": [
                    "int",
                    "float"
                ]
            },
            "variables": {
                "future": [
                    "Callable",
                    "Sized"
                ],
                "io_loop": [
                    "int",
                    "Type[tuple]",
                    "Dict[str, Any]",
                    "List[float]"
                ],
                "result": [
                    "list",
                    "Generator[Any, None, None]",
                    "List[None]",
                    "int",
                    "Dict[str, str]",
                    "str"
                ],
                "timeout_handle": [
                    "int",
                    "Tuple[Any, Any]"
                ]
            }
        },
        "sleep": {
            "name": "sleep",
            "location": 963,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "args": [],
                "duration": [
                    "float",
                    "list"
                ],
                "kwargs": []
            },
            "variables": {
                "f": [
                    "int",
                    "str",
                    "list",
                    "Type[Iterator[int]]"
                ]
            }
        },
        "_argument_adapter": {
            "name": "_argument_adapter",
            "location": 1227,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "callback": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "kwargs": []
            },
            "variables": {}
        },
        "_wrap_awaitable": {
            "name": "_wrap_awaitable",
            "location": 1251,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "x": [
                    "float",
                    "bytes"
                ]
            },
            "variables": {
                "_i": [
                    "int",
                    "float",
                    "set",
                    "Counter[Any]"
                ],
                "_m": [
                    "str",
                    "Pattern[str]",
                    "int",
                    "Dict[str, str]",
                    "List[List[Any]]"
                ],
                "_r": [
                    "int",
                    "str"
                ],
                "_s": [
                    "int",
                    "Tuple[Type[int], Type[float], Type[complex]]",
                    "Tuple[Any, Any]",
                    "list",
                    "str"
                ],
                "_x": [
                    "float",
                    "int",
                    "Dict[str, int]",
                    "dict",
                    "List[bytes]"
                ],
                "_y": [
                    "list",
                    "int",
                    "float",
                    "List[int]",
                    "Pattern[str]",
                    "List[str]"
                ]
            }
        },
        "convert_yielded": {
            "name": "convert_yielded",
            "location": 1303,
            "return": [
                "str",
                "List[str]",
                "int",
                "bytes"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "yielded": [
                    "dict",
                    "Union[float, int]",
                    "types.ServiceT",
                    "Optional[\"Outcome\"]"
                ]
            },
            "variables": {}
        },
        "Return.__init__": {
            "name": "__init__",
            "location": 387,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "value": [
                    "Callable",
                    "IO[Any]",
                    "int",
                    "T"
                ]
            },
            "variables": {
                "args": [
                    "List[str]",
                    "str",
                    "tuple"
                ],
                "value": [
                    "str",
                    "List[str]",
                    "Generator[int, None, None]",
                    "int"
                ]
            }
        },
        "WaitIterator.__init__": {
            "name": "__init__",
            "location": 447,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_finished": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ],
                "_running_future": [
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "Dict[Any, str]",
                    "OrderedDict[str, Any]",
                    "DefaultDict[Any, List[Any]]",
                    "Dict[str, Union[None, int, str]]"
                ],
                "_unfinished": [
                    "Counter[Any]",
                    "str",
                    "float",
                    "Tuple[int]",
                    "List[List[Any]]"
                ],
                "current_future": [
                    "int",
                    "Iterable['cirq.Qid']",
                    "Union[Callable, None]",
                    "denite.util.Nvim"
                ],
                "current_index": [
                    "int",
                    "Iterable['cirq.Qid']",
                    "Union[Callable, None]",
                    "denite.util.Nvim"
                ],
                "futures": [
                    "list",
                    "List[Tuple[Any, Any]]",
                    "List[str]",
                    "List[Tuple[str, str, str]]"
                ]
            }
        },
        "WaitIterator.done": {
            "name": "done",
            "location": 466,
            "return": [
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "current_future": [
                    "int",
                    "Iterable['cirq.Qid']",
                    "Union[Callable, None]",
                    "denite.util.Nvim"
                ],
                "current_index": [
                    "int",
                    "Iterable['cirq.Qid']",
                    "Union[Callable, None]",
                    "denite.util.Nvim"
                ]
            }
        },
        "WaitIterator.next": {
            "name": "next",
            "location": 474,
            "return": [
                "bool",
                "int",
                "Optional[bool]",
                "Optional[int]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_running_future": [
                    "int",
                    "Dict[str, int]"
                ]
            }
        },
        "WaitIterator._done_callback": {
            "name": "_done_callback",
            "location": 487,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "done": [
                    "T",
                    "List[Type]",
                    "int",
                    "Callable"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "WaitIterator._return_result": {
            "name": "_return_result",
            "location": 493,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "done": [
                    "str",
                    "bytes"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "current_future": [
                    "Iterator[Any]",
                    "Iterable[Any]",
                    "Sized",
                    "...",
                    "Callable[..., asyncio.coroutine]",
                    "Callable"
                ],
                "current_index": [
                    "Callable[[], Any]",
                    "List[str]",
                    "tuple",
                    "Deque"
                ]
            }
        },
        "WaitIterator.__aiter__": {
            "name": "__aiter__",
            "location": 502,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "WaitIterator.__anext__": {
            "name": "__anext__",
            "location": 505,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "YieldPoint.start": {
            "name": "start",
            "location": 518,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "runner": [
                    "int",
                    "Dict[str, str]",
                    "Callable",
                    "List[types.ServiceT]",
                    "bool",
                    "str",
                    "Optional"
                ],
                "self": []
            },
            "variables": {}
        },
        "YieldPoint.is_ready": {
            "name": "is_ready",
            "location": 525,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "YieldPoint.get_result": {
            "name": "get_result",
            "location": 532,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Callback.__init__": {
            "name": "__init__",
            "location": 556,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "key": [
                    "str",
                    "int",
                    "List[str]",
                    "bytes"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "key": [
                    "str",
                    "bytes"
                ]
            }
        },
        "Callback.start": {
            "name": "start",
            "location": 559,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "runner": [
                    "int",
                    "dict",
                    "str"
                ],
                "self": []
            },
            "variables": {
                "runner": [
                    "float",
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "Callback.is_ready": {
            "name": "is_ready",
            "location": 563,
            "return": [
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Callback.get_result": {
            "name": "get_result",
            "location": 566,
            "return": [
                "str",
                "List[Dict[str, Any]]",
                "dict",
                "Callable"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Wait.__init__": {
            "name": "__init__",
            "location": 576,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "key": [
                    "str",
                    "int",
                    "List[str]",
                    "bytes"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "key": [
                    "str",
                    "bytes"
                ]
            }
        },
        "Wait.start": {
            "name": "start",
            "location": 579,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "runner": [
                    "int",
                    "Tuple[str, str]",
                    "str",
                    "list",
                    "types.ServiceT"
                ],
                "self": []
            },
            "variables": {
                "runner": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ]
            }
        },
        "Wait.is_ready": {
            "name": "is_ready",
            "location": 582,
            "return": [
                "Optional[List[str]]",
                "str",
                "Optional[str]",
                "bool",
                "dict"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Wait.get_result": {
            "name": "get_result",
            "location": 585,
            "return": [
                "str",
                "Callable[[Dict], Any]",
                "bytes",
                "tuple"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "WaitAll.__init__": {
            "name": "__init__",
            "location": 600,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "keys": [
                    "str",
                    "int",
                    "List[str]",
                    "bytes"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "keys": [
                    "str",
                    "bytes"
                ]
            }
        },
        "WaitAll.start": {
            "name": "start",
            "location": 603,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "runner": [
                    "int",
                    "Tuple[str, str]",
                    "str",
                    "list",
                    "types.ServiceT"
                ],
                "self": []
            },
            "variables": {
                "runner": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ]
            }
        },
        "WaitAll.is_ready": {
            "name": "is_ready",
            "location": 606,
            "return": [
                "bool",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "WaitAll.get_result": {
            "name": "get_result",
            "location": 609,
            "return": [
                "bool",
                "types.ValueType",
                "Optional[str]",
                "int",
                "Tuple[int, str]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "YieldFuture.__init__": {
            "name": "__init__",
            "location": 643,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "future": [
                    "int",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "future": [
                    "int",
                    "List[str]",
                    "list",
                    "List[float]"
                ],
                "io_loop": [
                    "int",
                    "List[str]",
                    "\"Point\"",
                    "float",
                    "str",
                    "Type[int]"
                ]
            }
        },
        "YieldFuture.start": {
            "name": "start",
            "location": 652,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "runner": [
                    "Optional[List[str]]",
                    "List[Dict]",
                    "dict",
                    "Dict[str, Any]"
                ],
                "self": []
            },
            "variables": {
                "key": [
                    "str"
                ],
                "result_fn": [
                    "str"
                ],
                "runner": [
                    "Dict[Any, int]"
                ]
            }
        },
        "YieldFuture.is_ready": {
            "name": "is_ready",
            "location": 662,
            "return": [
                "bool",
                "str",
                "Optional[str]",
                "Set[str]",
                "Callable[[KT], VT]",
                "Sequence"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "YieldFuture.get_result": {
            "name": "get_result",
            "location": 668,
            "return": [
                "List[Callable]",
                "bool",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "MultiYieldPoint.__init__": {
            "name": "__init__",
            "location": 766,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "children": [
                    "Iterable",
                    "str",
                    "List[Dict[str, Any]]"
                ],
                "kwargs": [],
                "quiet_exceptions": [
                    "bool",
                    "str",
                    "static_frame.core.util.DepthLevelSpecifier",
                    "List[bytes]",
                    "int",
                    "Optional[List[Any]]"
                ],
                "self": []
            },
            "variables": {
                "children": [
                    "list",
                    "List[int]",
                    "itertools.cycle[Any]",
                    "Any[Any]",
                    "List[str]",
                    "Callable[[], Any]",
                    "List[float]"
                ],
                "i": [
                    "int",
                    "Dict[str, int]"
                ],
                "keys": [
                    "str",
                    "dict",
                    "List[str]",
                    "int",
                    "Tuple[Literal, Literal]",
                    "set"
                ],
                "quiet_exceptions": [
                    "functools.partial[Any]",
                    "set",
                    "str",
                    "cincoconfig.abc.Field",
                    "dict",
                    "Callable[[], Any]",
                    "Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]"
                ],
                "unfinished_children": [
                    "int",
                    "float"
                ]
            }
        },
        "MultiYieldPoint.start": {
            "name": "start",
            "location": 782,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "runner": [
                    "int",
                    "float",
                    "Optional[int]"
                ],
                "self": []
            },
            "variables": {}
        },
        "MultiYieldPoint.is_ready": {
            "name": "is_ready",
            "location": 786,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "finished": [
                    "List[tuple]",
                    "List[str]",
                    "List[Union[Any, Any]]",
                    "Tuple[int, int]"
                ]
            }
        },
        "MultiYieldPoint.get_result": {
            "name": "get_result",
            "location": 792,
            "return": [
                "int",
                "str",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "exc_info": [
                    "Dict[str, None]",
                    "Optional[str]",
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Union[dict, os._Environ[Any]]"
                ],
                "result_list": [
                    "list",
                    "dict",
                    "Set[str]"
                ]
            }
        },
        "_NullFuture.result": {
            "name": "result",
            "location": 989,
            "return": [
                "Optional[str]",
                "Optional[int]",
                "bool",
                "List[str]",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "_NullFuture.done": {
            "name": "done",
            "location": 992,
            "return": [
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Runner.__init__": {
            "name": "__init__",
            "location": 1027,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "first_yielded": [
                    "str",
                    "Optional[str]",
                    "Optional[int]",
                    "Dict[str, Any]",
                    "bool",
                    "int"
                ],
                "gen": [
                    "int",
                    "str",
                    "Optional[bool]",
                    "Optional[Mapping[int, complex]]",
                    "Sequence[int]"
                ],
                "kwargs": [],
                "result_future": [
                    "str",
                    "Optional[str]",
                    "Optional[int]",
                    "Dict[str, Any]",
                    "bool",
                    "int"
                ],
                "self": []
            },
            "variables": {
                "finished": [
                    "int",
                    "float"
                ],
                "first_yielded": [
                    "str",
                    "bool",
                    "int",
                    "Tuple[Any, Dict[str, Any]]"
                ],
                "future": [
                    "int",
                    "List[str]",
                    "list",
                    "List[float]"
                ],
                "gen": [
                    "Type[Dict[str, Any]]",
                    "Type[Dict[Any, Any]]",
                    "Dict[str, List]",
                    "bool"
                ],
                "had_exception": [
                    "int",
                    "List[List[Any]]",
                    "Dict[str, Any]",
                    "Tuple[int, int]"
                ],
                "io_loop": [
                    "int",
                    "List[str]",
                    "\"Point\"",
                    "float",
                    "str",
                    "Type[int]"
                ],
                "pending_callbacks": [
                    "bool",
                    "int"
                ],
                "result_future": [
                    "int",
                    "memoryview",
                    "galaxy.api.types.Authentication",
                    "Exception"
                ],
                "results": [
                    "dict",
                    "list",
                    "Collection[Any]",
                    "Mapping"
                ],
                "running": [
                    "Optional[BaseException]",
                    "str",
                    "int",
                    "bool"
                ],
                "stack_context_deactivate": [
                    "str"
                ],
                "yield_point": [
                    "bool",
                    "int"
                ]
            }
        },
        "Runner.register_callback": {
            "name": "register_callback",
            "location": 1048,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "key": [
                    "str",
                    "bytes",
                    "KT"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "pending_callbacks": [
                    "str",
                    "Tuple[str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str]",
                    "Dict[str, Tuple[str, str]]",
                    "dict",
                    "List[Union[int, Any, Any]]",
                    "Tuple[Any, Any]",
                    "Dict[str, str]"
                ],
                "results": [
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "Runner.is_ready": {
            "name": "is_ready",
            "location": 1058,
            "return": [
                "bool"
            ],
            "arguments": {
                "args": [],
                "key": [
                    "str",
                    "Optional[int]",
                    "bytes",
                    "dict",
                    "Callable",
                    "Optional[str]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Runner.set_result": {
            "name": "set_result",
            "location": 1064,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "key": [
                    "int",
                    "Tuple[float, float]",
                    "tuple",
                    "str",
                    "Container[str]",
                    "Tuple[str, str]"
                ],
                "kwargs": [],
                "result": [
                    "int",
                    "Tuple[float, float]",
                    "tuple",
                    "str",
                    "Container[str]",
                    "Tuple[str, str]"
                ],
                "self": []
            },
            "variables": {
                "yield_point": [
                    "int",
                    "float"
                ]
            }
        },
        "Runner.pop_result": {
            "name": "pop_result",
            "location": 1076,
            "return": [
                "Dict[str, Any]",
                "str",
                "Dict[str, str]",
                "Sequence[str]",
                "Mapping"
            ],
            "arguments": {
                "args": [],
                "key": [
                    "Iterable[Hashable]",
                    "str",
                    "Optional[int]",
                    "Iterator[str]",
                    "int"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Runner.run": {
            "name": "run",
            "location": 1081,
            "return": [
                "Callable"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "exc_info": [
                    "Union[dict, Dict[str, Any]]",
                    "Dict[str, None]",
                    "str",
                    "Optional[Dict[str, str]]",
                    "Union[dict, Dict[str, str]]",
                    "Union[dict, os._Environ[Any]]"
                ],
                "finished": [
                    "str",
                    "int",
                    "List[str]"
                ],
                "future": [
                    "Type[str]",
                    "list",
                    "Tuple[Any, Any]",
                    "Generator[int, None, None]"
                ],
                "had_exception": [
                    "int",
                    "str",
                    "list",
                    "Dict[int, Any]",
                    "List[int]",
                    "float"
                ],
                "orig_stack_contexts": [],
                "result_future": [
                    "Type[int]",
                    "Type[bytes]",
                    "list"
                ],
                "running": [
                    "int",
                    "str"
                ],
                "value": [
                    "defaultdict",
                    "Type[str]",
                    "functools.partial[Any]"
                ],
                "yielded": [
                    "int",
                    "Counter[Any]",
                    "Counter[str]",
                    "Tuple[int, int, int]",
                    "list"
                ]
            }
        },
        "Runner.start_yield_point": {
            "name": "start_yield_point",
            "location": 1160,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "future": [
                    "bool",
                    "types.SimpleNamespace",
                    "List[str]",
                    "Dict[str, Dict[str, Any]]",
                    "str",
                    "int"
                ],
                "yield_point": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ]
            }
        },
        "Runner.cb": {
            "name": "cb",
            "location": 1178,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Runner.inner": {
            "name": "inner",
            "location": 1196,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "f": [
                    "str",
                    "dict",
                    "T",
                    "float"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "f": [
                    "abc.Hashable",
                    "int",
                    "List[str]",
                    "Dict[str, str]"
                ]
            }
        },
        "Runner.handle_yield": {
            "name": "handle_yield",
            "location": 1149,
            "return": [
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "yielded": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            },
            "variables": {
                "future": [
                    "Optional[float]",
                    "int",
                    "str",
                    "asyncio.Future",
                    "types.FrameType",
                    "Tuple[int, int]"
                ],
                "stack_context_deactivate": [
                    "str",
                    "List[str]",
                    "int",
                    "Dict[str, List[Any]]",
                    "Tuple[str, str, str, str, str, str, str, str]"
                ],
                "yielded": [
                    "str",
                    "List[str]",
                    "int",
                    "Dict[str, List[Any]]",
                    "Tuple[str, str, str, str, str, str, str, str]"
                ]
            }
        },
        "Runner.result_callback": {
            "name": "result_callback",
            "location": 1205,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "args": [],
                "key": [
                    "str"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Runner.handle_exception": {
            "name": "handle_exception",
            "location": 1209,
            "return": [
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "tb": [
                    "str",
                    "Dict[str, Any]",
                    "float",
                    "Union[bytes, str]"
                ],
                "typ": [
                    "str",
                    "Dict[str, Any]",
                    "float",
                    "Union[bytes, str]"
                ],
                "value": [
                    "str",
                    "Dict[str, Any]",
                    "float",
                    "Union[bytes, str]"
                ]
            },
            "variables": {
                "future": [
                    "Set[str]",
                    "List[str]",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "Runner._deactivate_stack_context": {
            "name": "_deactivate_stack_context",
            "location": 1218,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "stack_context_deactivate": [
                    "int",
                    "Optional[int]",
                    "Union[None, float, int]",
                    "list"
                ]
            }
        },
        "global": {
            "Arguments": [
                "dict",
                "str",
                "bool",
                "Dict[str, Union[Any, Any]]",
                "int"
            ],
            "Multi": [
                "str",
                "List[str]",
                "int",
                "Dict[str, List[Any]]",
                "Tuple[str, str, str, str, str, str, str, str]"
            ],
            "__doc__": [
                "str",
                "List[str]",
                "int",
                "Dict[str, List[Any]]",
                "Tuple[str, str, str, str, str, str, str, str]"
            ],
            "_null_future": [
                "List[str]",
                "int",
                "str",
                "list"
            ],
            "_wrap_awaitable": [
                "int",
                "dict",
                "List[int]",
                "List[List[int]]",
                "Callable(functools.wraps)[[Named(wrapped, Callable[..., Any]), Named(assigned, Sequence[str], default), Named(updated, Sequence[str], default)], Callable[Any, Any]]",
                "str"
            ],
            "convert_yielded": [
                "str",
                "bool",
                "float",
                "list",
                "Type[Callable[..., Any]]"
            ],
            "moment": [
                "str",
                "float"
            ],
            "singledispatch": [
                "Optional[str]",
                "int",
                "str"
            ]
        }
    },
    "tornado-5.0.2/tornado/http1connection.py": {
        "_QuietException.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "_ExceptionLoggingContext.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "logger": [
                    "str",
                    "List[str]",
                    "Tuple[Tuple[str, ...]]"
                ],
                "self": []
            },
            "variables": {
                "logger": []
            }
        },
        "_ExceptionLoggingContext.__enter__": {
            "name": "__enter__",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "_ExceptionLoggingContext.__exit__": {
            "name": "__exit__",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "tb": [
                    "int",
                    "str",
                    "Tuple[str, str, str]",
                    "Optional[Union[int, float]]",
                    "float",
                    "bytes",
                    "Tuple[str]",
                    "Tuple[str, str]"
                ],
                "typ": [
                    "int",
                    "str",
                    "Tuple[str, str, str]",
                    "Optional[Union[int, float]]",
                    "float",
                    "bytes",
                    "Tuple[str]",
                    "Tuple[str, str]"
                ],
                "value": [
                    "Optional[str]",
                    "T",
                    "str"
                ]
            },
            "variables": {}
        },
        "HTTP1ConnectionParameters.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "body_timeout": [
                    "int",
                    "float",
                    "List[Dict]",
                    "dict",
                    "bool"
                ],
                "chunk_size": [
                    "int",
                    "str",
                    "Tuple[int, int, int]",
                    "Optional[int]"
                ],
                "decompress": [
                    "int",
                    "bool",
                    "Optional[List[str]]",
                    "str"
                ],
                "header_timeout": [
                    "int",
                    "float",
                    "List[Dict]",
                    "dict",
                    "bool"
                ],
                "kwargs": [],
                "max_body_size": [
                    "int",
                    "List[int]",
                    "bool",
                    "str",
                    "float"
                ],
                "max_header_size": [
                    "int",
                    "float",
                    "str"
                ],
                "no_keep_alive": [
                    "int",
                    "bool",
                    "Optional[List[str]]",
                    "str"
                ],
                "self": []
            },
            "variables": {
                "body_timeout": [
                    "int"
                ],
                "chunk_size": [
                    "int",
                    "Dict[str, int]",
                    "List[int]"
                ],
                "decompress": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ],
                "header_timeout": [
                    "int",
                    "float"
                ],
                "max_body_size": [
                    "int",
                    "Tuple[int, Any]"
                ],
                "max_header_size": [
                    "int"
                ],
                "no_keep_alive": [
                    "float",
                    "bytes",
                    "str",
                    "int"
                ]
            }
        },
        "HTTP1Connection.__init__": {
            "name": "__init__",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "context": [
                    "bool",
                    "float",
                    "List[Callable]",
                    "str"
                ],
                "is_client": [
                    "bool",
                    "float",
                    "List[Callable]",
                    "str"
                ],
                "kwargs": [],
                "params": [
                    "IO",
                    "Optional[str]",
                    "List[Dict[str, Any]]",
                    "Optional[bool]",
                    "Dict[str, Any]",
                    "str"
                ],
                "self": [],
                "stream": [
                    "int",
                    "str",
                    "bool"
                ]
            },
            "variables": {
                "_body_timeout": [
                    "float",
                    "int",
                    "List[int]"
                ],
                "_chunking_output": [
                    "str",
                    "List[str]"
                ],
                "_disconnect_on_finish": [
                    "List[str]",
                    "str",
                    "Set[str]",
                    "int"
                ],
                "_expected_content_remaining": [
                    "dict",
                    "static_frame.core.util.PathSpecifier",
                    "bool",
                    "Union[str, Dict[str, Any]]",
                    "Dict[str, Any]"
                ],
                "_finish_future": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ],
                "_max_body_size": [
                    "int",
                    "Dict[str, Any]"
                ],
                "_pending_write": [
                    "bool",
                    "int"
                ],
                "_read_finished": [
                    "Dict[str, str]",
                    "List[str]",
                    "List[Tuple[int, int]]",
                    "str",
                    "Tuple[float, int]",
                    "int"
                ],
                "_request_headers": [
                    "int",
                    "List[str]"
                ],
                "_request_start_line": [
                    "int",
                    "str"
                ],
                "_response_start_line": [
                    "Optional[int]",
                    "int",
                    "str",
                    "static_frame.core.util.DepthLevelSpecifier",
                    "list"
                ],
                "_write_finished": [
                    "List[str]",
                    "str",
                    "Set[str]",
                    "int"
                ],
                "context": [
                    "int",
                    "bytes"
                ],
                "is_client": [
                    "bool",
                    "Optional[str]",
                    "Optional[Callable[[], Any]]"
                ],
                "no_keep_alive": [
                    "int",
                    "str",
                    "float",
                    "\"Point\"",
                    "bytes"
                ],
                "params": [
                    "opsi.util.cv.maMat"
                ],
                "stream": [
                    "int"
                ]
            }
        },
        "HTTP1Connection.read_response": {
            "name": "read_response",
            "location": 138,
            "return": [
                "dict",
                "str",
                "Callable",
                "Callable[[None, None], bool]"
            ],
            "arguments": {
                "args": [],
                "delegate": [
                    "bytes",
                    "str"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "delegate": []
            }
        },
        "HTTP1Connection._read_message": {
            "name": "_read_message",
            "location": 154,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "delegate": [
                    "Union[int, str]",
                    "int"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_disconnect_on_finish": [
                    "str",
                    "Dict[str, bool]",
                    "float",
                    "int",
                    "bool",
                    "Dict[Any, Dict[str, str]]"
                ],
                "_read_finished": [
                    "List[List[str]]",
                    "Dict[int, str]",
                    "Tuple[Literal, Literal]",
                    "Tuple[str, str]",
                    "Tuple[str, str, str, str, str]"
                ],
                "_request_headers": [
                    "int",
                    "List[str]",
                    "str"
                ],
                "_request_start_line": [
                    "int",
                    "bytes",
                    "float"
                ],
                "_response_start_line": [
                    "int",
                    "str",
                    "List[int]"
                ],
                "body_future": [
                    "str",
                    "bytes",
                    "dict",
                    "Optional[str]"
                ],
                "code": [
                    "str",
                    "list",
                    "int",
                    "Generator[Any, None, None]",
                    "Dict[int, Tuple[str, str]]"
                ],
                "header_data": [
                    "starfish.util.synthesize.SyntheticData",
                    "Dict[str, str]"
                ],
                "header_future": [
                    "int",
                    "str"
                ],
                "headers": [
                    "str",
                    "Dict[str, str]",
                    "tuple"
                ],
                "need_delegate_close": [
                    "str",
                    "int"
                ],
                "skip_body": [
                    "str",
                    "List[str]",
                    "List[Union[Any, Any]]"
                ],
                "start_line": [
                    "dict"
                ]
            }
        },
        "HTTP1Connection._clear_callbacks": {
            "name": "_clear_callbacks",
            "location": 265,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_close_callback": [
                    "bool",
                    "int"
                ],
                "_write_callback": [
                    "bool",
                    "int"
                ],
                "_write_future": [
                    "bool",
                    "int"
                ]
            }
        },
        "HTTP1Connection.set_close_callback": {
            "name": "set_close_callback",
            "location": 277,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "callback": [
                    "str",
                    "Iterable[str]",
                    "bool"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_close_callback": [
                    "int",
                    "float",
                    "str",
                    "Tuple[bytes, bytes]"
                ]
            }
        },
        "HTTP1Connection._on_connection_close": {
            "name": "_on_connection_close",
            "location": 285,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_close_callback": [
                    "Set[str]",
                    "Dict[Optional[str], str]",
                    "Type[Optional[Any]]",
                    "DefaultDict[Any, Set[Any]]",
                    "List[None]"
                ],
                "callback": [
                    "int",
                    "Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]",
                    "bool",
                    "Type[str]"
                ]
            }
        },
        "HTTP1Connection.close": {
            "name": "close",
            "location": 297,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "HTTP1Connection.detach": {
            "name": "detach",
            "location": 304,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "stream": [
                    "int",
                    "str",
                    "bool",
                    "tuple",
                    "Iterable[int]"
                ]
            }
        },
        "HTTP1Connection.set_body_timeout": {
            "name": "set_body_timeout",
            "location": 319,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "timeout": [
                    "str",
                    "bytes"
                ]
            },
            "variables": {
                "_body_timeout": [
                    "int",
                    "List[int]",
                    "float",
                    "str"
                ]
            }
        },
        "HTTP1Connection.set_max_body_size": {
            "name": "set_max_body_size",
            "location": 326,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "max_body_size": [
                    "str",
                    "int",
                    "Callable[..., None]",
                    "List[int]",
                    "List[str]"
                ],
                "self": []
            },
            "variables": {
                "_max_body_size": [
                    "int",
                    "Tuple[int, Any]"
                ]
            }
        },
        "HTTP1Connection.write_headers": {
            "name": "write_headers",
            "location": 333,
            "return": [
                "str",
                "dict",
                "Callable",
                "Callable[[None, None], bool]"
            ],
            "arguments": {
                "args": [],
                "callback": [
                    "Optional[str]",
                    "bool"
                ],
                "chunk": [
                    "str",
                    "List[List[int]]",
                    "Set[str]",
                    "bytes",
                    "dict",
                    "Dict[str, Any]",
                    "list",
                    "Iterable[Iterable[str]]"
                ],
                "headers": [
                    "dict",
                    "Optional[Dict[str, str]]",
                    "Mapping"
                ],
                "kwargs": [],
                "self": [],
                "start_line": [
                    "str",
                    "Dict[int, str]"
                ]
            },
            "variables": {
                "_chunking_output": [
                    "str"
                ],
                "_expected_content_remaining": [
                    "Pattern[str]",
                    "Tuple[Literal, Literal, List[str]]",
                    "int",
                    "Final"
                ],
                "_pending_write": [
                    "str",
                    "int"
                ],
                "_request_start_line": [
                    "int",
                    "bytes",
                    "List[int]"
                ],
                "_response_start_line": [
                    "int",
                    "str",
                    "List[int]"
                ],
                "_write_callback": [
                    "int",
                    "float",
                    "str",
                    "Tuple[bytes, bytes]"
                ],
                "_write_future": [
                    "str",
                    "float",
                    "Tuple[int]",
                    "List[List[Any]]"
                ],
                "data": [
                    "str",
                    "bytes",
                    "List[str]",
                    "frozenset[str]"
                ],
                "future": [
                    "int",
                    "Generator[Literal, None, None]",
                    "list",
                    "dict"
                ],
                "header_lines": [
                    "List[str]",
                    "Dict[str, Any]",
                    "list",
                    "str",
                    "Dict[str, Union[Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any]]",
                    "MutableMapping[str, Any]",
                    "Dict[str, str]",
                    "set",
                    "dict"
                ],
                "lines": [
                    "List[str]",
                    "str",
                    "list"
                ]
            }
        },
        "HTTP1Connection._format_chunk": {
            "name": "_format_chunk",
            "location": 408,
            "return": [
                "int",
                "List[int]",
                "str"
            ],
            "arguments": {
                "args": [],
                "chunk": [
                    "int",
                    "tuple",
                    "list",
                    "Dict[int, str]",
                    "str",
                    "bytes"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "HTTP1Connection.write": {
            "name": "write",
            "location": 423,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "callback": [
                    "List[str]",
                    "bool"
                ],
                "chunk": [
                    "str",
                    "IO[Any]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_pending_write": [
                    "str",
                    "int"
                ],
                "_write_callback": [
                    "int",
                    "float",
                    "str",
                    "Tuple[bytes, bytes]"
                ],
                "_write_future": [
                    "str",
                    "int",
                    "Dict[str, str]"
                ],
                "future": [
                    "list",
                    "Tuple[Type[tuple], Type[list]]",
                    "dict",
                    "str",
                    "Type[Optional[Any]]"
                ]
            }
        },
        "HTTP1Connection.finish": {
            "name": "finish",
            "location": 444,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_disconnect_on_finish": [
                    "str",
                    "bool"
                ],
                "_pending_write": [
                    "str",
                    "int"
                ],
                "_write_finished": [
                    "str",
                    "bool"
                ]
            }
        },
        "HTTP1Connection._on_write_complete": {
            "name": "_on_write_complete",
            "location": 473,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "future": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_write_callback": [
                    "Set[str]",
                    "Dict[Optional[str], str]",
                    "Type[Optional[Any]]",
                    "DefaultDict[Any, Set[Any]]",
                    "List[None]"
                ],
                "_write_future": [
                    "List[Tuple[str, str]]"
                ],
                "callback": [
                    "Tuple[Literal, Literal]",
                    "dict",
                    "str",
                    "Pattern[str]",
                    "List[str]"
                ],
                "exc": [
                    "int",
                    "dict",
                    "List[str]"
                ],
                "future": [
                    "str"
                ]
            }
        },
        "HTTP1Connection._can_keep_alive": {
            "name": "_can_keep_alive",
            "location": 486,
            "return": [
                "bool"
            ],
            "arguments": {
                "args": [],
                "headers": [
                    "dict",
                    "str"
                ],
                "kwargs": [],
                "self": [],
                "start_line": [
                    "int"
                ]
            },
            "variables": {
                "connection_header": [
                    "str",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "HTTP1Connection._finish_request": {
            "name": "_finish_request",
            "location": 502,
            "return": [
                "concurrenfutures.Future",
                "Iterable[Type]",
                "str"
            ],
            "arguments": {
                "args": [],
                "future": [
                    "Any",
                    "Optional[Exception]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "HTTP1Connection._parse_headers": {
            "name": "_parse_headers",
            "location": 513,
            "return": [
                "Dict[str, Tuple[Any, Any]]",
                "Callable[[], None]",
                "str",
                "bool",
                "Optional[str]",
                "dict"
            ],
            "arguments": {
                "args": [],
                "data": [
                    "Optional[str]",
                    "dict",
                    "Dict[str, Any]",
                    "bytes",
                    "str",
                    "Optional[MutableMapping]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "data": [
                    "str"
                ],
                "eol": [
                    "str",
                    "float"
                ],
                "headers": [
                    "dict"
                ],
                "start_line": [
                    "int"
                ]
            }
        },
        "HTTP1Connection._read_body": {
            "name": "_read_body",
            "location": 530,
            "return": [
                "int",
                "Dict[str, Any]",
                "str",
                "dict"
            ],
            "arguments": {
                "args": [],
                "code": [
                    "str",
                    "List[str]"
                ],
                "delegate": [
                    "str",
                    "int",
                    "List[Dict[str, Any]]"
                ],
                "headers": [
                    "str",
                    "Optional[int]",
                    "Dict[str, str]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "content_length": [
                    "int",
                    "str"
                ],
                "pieces": [
                    "str",
                    "Optional[str]",
                    "dict"
                ]
            }
        },
        "HTTP1Connection._read_fixed_body": {
            "name": "_read_fixed_body",
            "location": 580,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "content_length": [
                    "bytes",
                    "IO[str]",
                    "Set[str]",
                    "List[bytes]"
                ],
                "delegate": [
                    "str",
                    "dict",
                    "Set[str]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "body": [
                    "int"
                ],
                "ret": [
                    "Pattern[str]",
                    "list"
                ]
            }
        },
        "HTTP1Connection._read_chunked_body": {
            "name": "_read_chunked_body",
            "location": 592,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "args": [],
                "delegate": [
                    "str",
                    "Pattern",
                    "int"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "bytes_to_read": [
                    "int",
                    "bytes",
                    "Dict[str, Any]"
                ],
                "chunk": [
                    "str",
                    "int",
                    "List[int]",
                    "bytes",
                    "list"
                ],
                "chunk_len": [
                    "int",
                    "str",
                    "List[str]"
                ],
                "crlf": [
                    "int",
                    "Type[int]"
                ],
                "ret": [
                    "list",
                    "Counter[Any]",
                    "str",
                    "int"
                ],
                "total_size": [
                    "int",
                    "List[int]",
                    "str",
                    "list"
                ]
            }
        },
        "HTTP1Connection._read_body_until_close": {
            "name": "_read_body_until_close",
            "location": 621,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "delegate": [
                    "str",
                    "bool",
                    "dict",
                    "Optional[str]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "body": [
                    "str",
                    "int",
                    "Counter[str]",
                    "List[str]",
                    "bytes",
                    "Final"
                ]
            }
        },
        "_GzipMessageDelegate.__init__": {
            "name": "__init__",
            "location": 631,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "chunk_size": [
                    "int",
                    "bool",
                    "Optional[int]"
                ],
                "delegate": [
                    "int",
                    "str",
                    "List[int]",
                    "float"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_chunk_size": [
                    "int",
                    "Dict[str, int]",
                    "List[int]"
                ],
                "_decompressor": [
                    "\"Frame\"",
                    "str",
                    "Dict[str, Any]"
                ],
                "_delegate": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ]
            }
        },
        "_GzipMessageDelegate.headers_received": {
            "name": "headers_received",
            "location": 636,
            "return": [
                "Dict[str, Any]",
                "int",
                "str",
                "Optional[\"permissions_doc\"]",
                "Dict[str, str]"
            ],
            "arguments": {
                "args": [],
                "headers": [
                    "Dict[str, List[str]]"
                ],
                "kwargs": [],
                "self": [],
                "start_line": [
                    "int",
                    "str",
                    "dict"
                ]
            },
            "variables": {
                "_decompressor": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ]
            }
        },
        "_GzipMessageDelegate.data_received": {
            "name": "data_received",
            "location": 648,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "chunk": [
                    "str",
                    "bool",
                    "IO[str]",
                    "dict"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "compressed_data": [
                    "str",
                    "dict",
                    "List[str]",
                    "Dict[str, Any]",
                    "Dict[str, Union[float, str]]",
                    "Dict[Union[int, str], Union[int, str]]"
                ],
                "decompressed": [
                    "int",
                    "str",
                    "Dict[str, Any]",
                    "Dict[str, int]",
                    "Final"
                ],
                "ret": [
                    "List[float]",
                    "List[int]",
                    "int",
                    "dict",
                    "str"
                ]
            }
        },
        "_GzipMessageDelegate.finish": {
            "name": "finish",
            "location": 664,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "tail": [
                    "str",
                    "int",
                    "Tuple[int, int, int]",
                    "Pattern[str]"
                ]
            }
        },
        "_GzipMessageDelegate.on_connection_close": {
            "name": "on_connection_close",
            "location": 676,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "HTTP1ServerConnection.__init__": {
            "name": "__init__",
            "location": 682,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "context": [
                    "int",
                    "bool",
                    "float"
                ],
                "kwargs": [],
                "params": [
                    "Optional[str]",
                    "Optional[int]",
                    "int",
                    "Optional[Callable]",
                    "Optional[Hashable]",
                    "List[str]"
                ],
                "self": [],
                "stream": [
                    "int",
                    "bool",
                    "float"
                ]
            },
            "variables": {
                "_serving_future": [
                    "bool",
                    "int"
                ],
                "context": [
                    "int",
                    "bytes"
                ],
                "params": [
                    "Tuple[int, int, int, int, int, int, int, int, int, int]",
                    "List[None]"
                ],
                "stream": [
                    "str",
                    "int"
                ]
            }
        },
        "HTTP1ServerConnection.close": {
            "name": "close",
            "location": 697,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "HTTP1ServerConnection.start_serving": {
            "name": "start_serving",
            "location": 710,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "delegate": [
                    "str",
                    "dict"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_serving_future": [
                    "str",
                    "int",
                    "Optional[Match[str]]"
                ]
            }
        },
        "HTTP1ServerConnection._server_request_loop": {
            "name": "_server_request_loop",
            "location": 722,
            "return": [
                "Iterable[Type]",
                "int"
            ],
            "arguments": {
                "args": [],
                "delegate": [
                    "bytes",
                    "denite.util.UserContext",
                    "dict"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "conn": [
                    "str",
                    "Optional[List[Any]]",
                    "Tuple[Literal, Literal]",
                    "Tuple[int, int, int, int]",
                    "int",
                    "list"
                ],
                "request_delegate": [],
                "ret": [
                    "int",
                    "Tuple[str, str]",
                    "Tuple[str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str]",
                    "list"
                ]
            }
        },
        "global": {}
    },
    "tornado-5.0.2/tornado/httpclient.py": {
        "main": {
            "name": "main",
            "location": 667,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": []
            },
            "variables": {
                "args": [
                    "List[str]",
                    "list"
                ],
                "client": [
                    "Generator[Any, None, None]",
                    "str",
                    "Dict[bytes, Any]",
                    "dict"
                ],
                "response": [
                    "str",
                    "int",
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "HTTPClient.__init__": {
            "name": "__init__",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "async_client_class": [
                    "str",
                    "dict"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_async_client": [
                    "Generator[Any, None, None]",
                    "str",
                    "dict",
                    "bool",
                    "Dict[str, Dict[str, Any]]"
                ],
                "_closed": [
                    "bool",
                    "str",
                    "Tuple[str, str]",
                    "int"
                ],
                "_io_loop": [
                    "int",
                    "List[int]",
                    "str"
                ],
                "async_client_class": [
                    "dict",
                    "Dict[str, Union[Any, Any]]"
                ]
            }
        },
        "HTTPClient.__del__": {
            "name": "__del__",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "HTTPClient.close": {
            "name": "close",
            "location": 100,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_closed": [
                    "dict",
                    "int",
                    "str"
                ]
            }
        },
        "HTTPClient.fetch": {
            "name": "fetch",
            "location": 107,
            "return": [
                "bytes",
                "dict"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "request": [
                    "dict",
                    "Exception"
                ],
                "self": []
            },
            "variables": {
                "response": [
                    "int"
                ]
            }
        },
        "AsyncHTTPClient.configurable_base": {
            "name": "configurable_base",
            "location": 161,
            "return": [
                "int"
            ],
            "arguments": {
                "args": [],
                "cls": [
                    "bool",
                    "List[int]",
                    "str",
                    "Callable[[Any], T]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "AsyncHTTPClient.configurable_default": {
            "name": "configurable_default",
            "location": 165,
            "return": [
                "bool",
                "str",
                "Iterable[bytes]"
            ],
            "arguments": {
                "args": [],
                "cls": [
                    "bool",
                    "str",
                    "Type",
                    "List[dict]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "AsyncHTTPClient._async_clients": {
            "name": "_async_clients",
            "location": 170,
            "return": [],
            "arguments": {
                "args": [],
                "cls": [
                    "dict",
                    "Mapping[str, Any]",
                    "str",
                    "Optional[str]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "attr_name": [
                    "frozenset[Union[Any, Any]]",
                    "str",
                    "List[str]",
                    "Set[str]"
                ]
            }
        },
        "AsyncHTTPClient.__new__": {
            "name": "__new__",
            "location": 176,
            "return": [
                "int",
                "deoplete.util.UserContext",
                "str"
            ],
            "arguments": {
                "args": [],
                "cls": [
                    "dict",
                    "int"
                ],
                "force_instance": [
                    "bool",
                    "int",
                    "Type",
                    "Type[T]",
                    "str",
                    "Callable[[None], None]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_instance_cache": [
                    "int",
                    "dict",
                    "List[int]",
                    "List[List[int]]",
                    "Callable(functools.wraps)[[Named(wrapped, Callable[..., Any]), Named(assigned, Sequence[str], default), Named(updated, Sequence[str], default)], Callable[Any, Any]]",
                    "str"
                ],
                "instance": [
                    "dict",
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ],
                "instance_cache": [
                    "int"
                ],
                "io_loop": [
                    "int",
                    "list"
                ]
            }
        },
        "AsyncHTTPClient.initialize": {
            "name": "initialize",
            "location": 194,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "defaults": [
                    "dict",
                    "Union[str]",
                    "str",
                    "Optional[Union[str, bool]]",
                    "Type"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_closed": [
                    "dict",
                    "Set[str]"
                ],
                "defaults": [
                    "int"
                ],
                "io_loop": [
                    "int",
                    "List[str]",
                    "\"Point\"",
                    "float",
                    "str",
                    "Type[int]"
                ]
            }
        },
        "AsyncHTTPClient.close": {
            "name": "close",
            "location": 201,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_closed": [
                    "dict",
                    "int",
                    "str"
                ]
            }
        },
        "AsyncHTTPClient.handle_future": {
            "name": "handle_future",
            "location": 258,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "future": [
                    "int",
                    "float",
                    "dict",
                    "Union[int, tornado.ioloop._Selectable]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "exc": [
                    "str",
                    "int"
                ],
                "response": [
                    "Dict[str, str]"
                ]
            }
        },
        "AsyncHTTPClient.handle_response": {
            "name": "handle_response",
            "location": 271,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "response": [
                    "Dict[str, Any]",
                    "bool",
                    "dict",
                    "str",
                    "Dict[str, float]"
                ],
                "self": []
            },
            "variables": {}
        },
        "AsyncHTTPClient.fetch": {
            "name": "fetch",
            "location": 222,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "callback": [
                    "bool",
                    "List[Tuple[str, int]]",
                    "Counter"
                ],
                "kwargs": [],
                "raise_error": [
                    "bool",
                    "List[Tuple[str, int]]",
                    "Counter"
                ],
                "request": [],
                "self": []
            },
            "variables": {
                "callback": [
                    "str",
                    "List[str]",
                    "int",
                    "Dict[str, List[Any]]",
                    "Tuple[str, str, str, str, str, str, str, str]"
                ],
                "future": [
                    "str",
                    "List[str]",
                    "int",
                    "Dict[str, List[Any]]",
                    "Tuple[str, str, str, str, str, str, str, str]"
                ],
                "headers": [
                    "Mapping[str, str]",
                    "List[Tuple[str, str, str]]",
                    "list",
                    "Callable[[str], Tuple[str, str]]",
                    "property"
                ],
                "request": [
                    "str",
                    "dict",
                    "Callable",
                    "List[str]"
                ]
            }
        },
        "AsyncHTTPClient.fetch_impl": {
            "name": "fetch_impl",
            "location": 279,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "callback": [
                    "bool"
                ],
                "kwargs": [],
                "request": [
                    "bool"
                ],
                "self": []
            },
            "variables": {}
        },
        "AsyncHTTPClient.configure": {
            "name": "configure",
            "location": 283,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "cls": [
                    "str",
                    "int",
                    "Dict[str, object]",
                    "Dict[str, Any]"
                ],
                "impl": [
                    "str",
                    "int",
                    "Dict[str, object]",
                    "Dict[str, Any]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "HTTPRequest.__init__": {
            "name": "__init__",
            "location": 321,
            "return": [
                ""
            ],
            "arguments": {
                "allow_ipv6": [
                    "str",
                    "int",
                    "bool"
                ],
                "allow_nonstandard_methods": [
                    "str",
                    "int",
                    "bool"
                ],
                "args": [],
                "auth_mode": [
                    "str",
                    "bool",
                    "int",
                    "Optional[int]"
                ],
                "auth_password": [
                    "str",
                    "int",
                    "bool"
                ],
                "auth_username": [
                    "str",
                    "int",
                    "bool"
                ],
                "body": [
                    "str",
                    "int",
                    "bool"
                ],
                "body_producer": [
                    "str",
                    "int",
                    "bool"
                ],
                "ca_certs": [
                    "str",
                    "int",
                    "bool"
                ],
                "client_cert": [
                    "str",
                    "int",
                    "bool"
                ],
                "client_key": [
                    "Dict[str, str]",
                    "Union[str, List[str]]",
                    "Dict[str, type]",
                    "Mapping[str, Any]",
                    "str"
                ],
                "connect_timeout": [
                    "str",
                    "bool",
                    "int",
                    "Set[str]"
                ],
                "decompress_response": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "Optional[Mapping[str, Any]]"
                ],
                "expect_100_continue": [
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "bool",
                    "Dict[str, str]"
                ],
                "follow_redirects": [
                    "str",
                    "int",
                    "bool"
                ],
                "header_callback": [
                    "str",
                    "int",
                    "bool"
                ],
                "headers": [
                    "str",
                    "dict"
                ],
                "if_modified_since": [
                    "str",
                    "Optional[str]"
                ],
                "kwargs": [],
                "max_redirects": [
                    "int",
                    "Callable[[int], int]"
                ],
                "method": [
                    "str",
                    "int",
                    "bool"
                ],
                "network_interface": [
                    "str",
                    "int",
                    "bool"
                ],
                "prepare_curl_callback": [
                    "str",
                    "int",
                    "bool"
                ],
                "proxy_auth_mode": [
                    "bool",
                    "str",
                    "int",
                    "Optional[bytes]",
                    "Optional[str]"
                ],
                "proxy_host": [
                    "str",
                    "int",
                    "bool"
                ],
                "proxy_password": [
                    "str",
                    "int",
                    "bool"
                ],
                "proxy_port": [
                    "str",
                    "bool",
                    "int"
                ],
                "proxy_username": [
                    "str",
                    "int",
                    "bool"
                ],
                "request_timeout": [
                    "str",
                    "float",
                    "int"
                ],
                "self": [],
                "ssl_options": [
                    "str",
                    "Callable[..., T]",
                    "Optional[str]"
                ],
                "streaming_callback": [
                    "int",
                    "Dict[Any, str]",
                    "Dict[str, str]",
                    "str"
                ],
                "url": [
                    "str",
                    "int",
                    "bool"
                ],
                "use_gzip": [
                    "str",
                    "dict",
                    "Set[str]",
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ],
                "user_agent": [
                    "str",
                    "bool",
                    "int",
                    "float"
                ],
                "validate_cert": [
                    "str",
                    "int"
                ]
            },
            "variables": {
                "allow_ipv6": [
                    "list",
                    "List[str]",
                    "Iterable[str]",
                    "List[Dict[str, Any]]",
                    "int"
                ],
                "allow_nonstandard_methods": [
                    "int",
                    "str",
                    "bool",
                    "list",
                    "Optional[int]"
                ],
                "auth_mode": [
                    "List[str]"
                ],
                "auth_password": [
                    "Dict[int, List[int]]",
                    "List[Dict[str, float]]",
                    "Dict[int, dict]",
                    "List[Dict[str, Any]]",
                    "int"
                ],
                "auth_username": [
                    "str",
                    "int",
                    "float",
                    "bytes",
                    "util.IDM"
                ],
                "body": [
                    "dict",
                    "list",
                    "List[str]",
                    "int",
                    "str"
                ],
                "body_producer": [
                    "str",
                    "int",
                    "Set[str]",
                    "dict",
                    "util.IDM"
                ],
                "ca_certs": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ],
                "client_cert": [
                    "str"
                ],
                "client_key": [
                    "str",
                    "int"
                ],
                "connect_timeout": [
                    "int"
                ],
                "decompress_response": [
                    "Dict[Any, str]",
                    "Dict[str, Any]",
                    "Final",
                    "dict"
                ],
                "expect_100_continue": [
                    "str",
                    "bytes"
                ],
                "follow_redirects": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ],
                "header_callback": [
                    "int",
                    "Set[str]",
                    "List[str]",
                    "str",
                    "DefaultDict[Any, List[Any]]"
                ],
                "headers": [
                    "bytes",
                    "str",
                    "list"
                ],
                "max_redirects": [
                    "int"
                ],
                "method": [
                    "str",
                    "List[str]"
                ],
                "network_interface": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ],
                "prepare_curl_callback": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ],
                "proxy_auth_mode": [
                    "str",
                    "Optional[str]",
                    "defaultdict"
                ],
                "proxy_host": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ],
                "proxy_password": [
                    "str",
                    "list"
                ],
                "proxy_port": [
                    "\"FrameManager\"",
                    "int"
                ],
                "proxy_username": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ],
                "request_timeout": [
                    "int"
                ],
                "ssl_options": [
                    "Dict[str, Dict[str, Any]]",
                    "Dict[str, dict]",
                    "functools.partial[None]",
                    "Dict[str, Any]",
                    "Dict[str, Dict[str, str]]"
                ],
                "start_time": [
                    "float",
                    "List[int]",
                    "list"
                ],
                "streaming_callback": [
                    "int",
                    "dict",
                    "List[List[Any]]",
                    "bytes",
                    "list"
                ],
                "url": [
                    "str",
                    "Dict[str, str]"
                ],
                "user_agent": [
                    "str"
                ],
                "validate_cert": [
                    "int",
                    "str",
                    "Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]",
                    "bool"
                ]
            }
        },
        "HTTPRequest.headers": {
            "name": "headers",
            "location": 492,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "value": [
                    "T",
                    "Union[None, int, float]",
                    "Optional[Union[str, Any]]",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "Optional[T]",
                    "str",
                    "bytes"
                ]
            },
            "variables": {
                "_headers": [
                    "str",
                    "bytes",
                    "Dict[str, str]",
                    "list",
                    "dict"
                ]
            }
        },
        "HTTPRequest.body": {
            "name": "body",
            "location": 503,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "value": [
                    "str",
                    "int",
                    "Union[str, bytes]",
                    "bytes",
                    "float"
                ]
            },
            "variables": {
                "_body": [
                    "list",
                    "Tuple[Any, tuple, Tuple[Any, ...]]",
                    "Dict[str, str]",
                    "Type[Sequence[Any]]",
                    "dict",
                    "Dict[int, Any]",
                    "KeysView[Any]"
                ]
            }
        },
        "HTTPRequest.body_producer": {
            "name": "body_producer",
            "location": 511,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "value": [
                    "str"
                ]
            },
            "variables": {
                "_body_producer": [
                    "int",
                    "Dict[str, List[float]]"
                ]
            }
        },
        "HTTPRequest.streaming_callback": {
            "name": "streaming_callback",
            "location": 519,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "value": [
                    "str"
                ]
            },
            "variables": {
                "_streaming_callback": [
                    "bytes",
                    "Union[Literal, str]",
                    "str",
                    "allennlp.common.util.JsonDict"
                ]
            }
        },
        "HTTPRequest.header_callback": {
            "name": "header_callback",
            "location": 527,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "value": [
                    "str",
                    "Type",
                    "int"
                ]
            },
            "variables": {
                "_header_callback": [
                    "str",
                    "Dict[str, str]",
                    "Dict[str, Dict[str, Any]]",
                    "int"
                ]
            }
        },
        "HTTPRequest.prepare_curl_callback": {
            "name": "prepare_curl_callback",
            "location": 535,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "value": [
                    "str",
                    "Type",
                    "Callable",
                    "bool",
                    "bytes"
                ]
            },
            "variables": {
                "_prepare_curl_callback": [
                    "str"
                ]
            }
        },
        "HTTPResponse.__init__": {
            "name": "__init__",
            "location": 569,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "buffer": [
                    "bool",
                    "str",
                    "T",
                    "List[List[Any]]"
                ],
                "code": [
                    "str",
                    "int"
                ],
                "effective_url": [
                    "Optional[str]",
                    "str",
                    "tornado.httputil.HTTPHeaders",
                    "dict",
                    "Optional[List[str]]",
                    "BaseException",
                    "Dict[str, Optional[str]]"
                ],
                "error": [
                    "BaseException",
                    "str",
                    "dict",
                    "Optional[str]"
                ],
                "headers": [
                    "tornado.httputil.HTTPHeaders",
                    "str",
                    "Optional[Type[Any]]",
                    "Optional[dict]",
                    "Sequence[Hashable]",
                    "Optional[str]",
                    "Optional[Mapping]",
                    "Optional[Dict[str, Any]]",
                    "BaseException"
                ],
                "kwargs": [],
                "reason": [
                    "str",
                    "int"
                ],
                "request": [
                    "dict",
                    "str",
                    "int"
                ],
                "request_time": [
                    "int",
                    "bool",
                    "List[int]",
                    "Optional[int]",
                    "str"
                ],
                "self": [],
                "time_info": [
                    "str",
                    "Optional[float]",
                    "Optional[str]",
                    "bytes"
                ]
            },
            "variables": {
                "_body": [
                    "str",
                    "int",
                    "Dict[str, Any]"
                ],
                "buffer": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ],
                "code": [
                    "str",
                    "int",
                    "List[Tuple[str, str]]",
                    "Dict[int, str]"
                ],
                "effective_url": [
                    "str",
                    "Optional[str]"
                ],
                "error": [
                    "Type[dict]",
                    "Optional[str]",
                    "dict",
                    "int",
                    "list",
                    "OrderedDict[str, Any]",
                    "TypeError"
                ],
                "headers": [
                    "Optional[Dict[str, Any]]",
                    "Optional[dict]",
                    "Optional[Dict]"
                ],
                "reason": [
                    "int",
                    "str",
                    "dict",
                    "Dict[str, str]",
                    "Set[str]",
                    "List[int]",
                    "Tuple[Literal, Literal]"
                ],
                "request": [],
                "request_time": [
                    "int",
                    "Optional[int]"
                ],
                "time_info": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "HTTPResponse.body": {
            "name": "body",
            "location": 600,
            "return": [
                "bool",
                "Optional[bool]",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_body": [
                    "Type[str]",
                    "str",
                    "Tuple[str]",
                    "Dict[str, str]"
                ]
            }
        },
        "HTTPResponse.rethrow": {
            "name": "rethrow",
            "location": 608,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "HTTPResponse.__repr__": {
            "name": "__repr__",
            "location": 613,
            "return": [
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "args": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "HTTPError.__init__": {
            "name": "__init__",
            "location": 632,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "code": [
                    "dict",
                    "str",
                    "bytes"
                ],
                "kwargs": [],
                "message": [
                    "str",
                    "dict",
                    "Optional[str]"
                ],
                "response": [
                    "str",
                    "Dict[str, Any]",
                    "bool"
                ],
                "self": []
            },
            "variables": {
                "code": [
                    "Dict[str, str]",
                    "List[str]",
                    "Dict[str, Any]",
                    "Dict[int, str]"
                ],
                "message": [
                    "str",
                    "Set[int]",
                    "list"
                ],
                "response": [
                    "Dict[str, Any]"
                ]
            }
        },
        "HTTPError.__str__": {
            "name": "__str__",
            "location": 638,
            "return": [
                "str",
                "Iterable[int]",
                "int",
                "Callable",
                "dict"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "_RequestProxy.__init__": {
            "name": "__init__",
            "location": 653,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "defaults": [
                    "int",
                    "Tuple[int, int]",
                    "Optional[str]",
                    "List[str]",
                    "str"
                ],
                "kwargs": [],
                "request": [
                    "int",
                    "Tuple[int, int]",
                    "Optional[str]",
                    "List[str]",
                    "str"
                ],
                "self": []
            },
            "variables": {
                "defaults": [
                    "str",
                    "int",
                    "Optional[List[str]]",
                    "List[Tuple[str, bool, str]]",
                    "bool"
                ],
                "request": [
                    "list",
                    "str",
                    "Dict[str, Any]",
                    "int",
                    "Dict[int, Dict[str, float]]",
                    "tuple"
                ]
            }
        },
        "_RequestProxy.__getattr__": {
            "name": "__getattr__",
            "location": 657,
            "return": [
                "Optional[str]",
                "Optional[Dict[str, Any]]",
                "int",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "name": [
                    "str",
                    "bool",
                    "Dict[str, str]"
                ],
                "self": []
            },
            "variables": {
                "request_attr": [
                    "Dict[str, None]",
                    "Dict[Any, float]",
                    "str",
                    "Dict[str, Type[Any]]",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "global": {}
    },
    "tornado-5.0.2/tornado/httpserver.py": {
        "HTTPServer.__init__": {
            "name": "__init__",
            "location": 140,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "HTTPServer.initialize": {
            "name": "initialize",
            "location": 148,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "body_timeout": [
                    "int"
                ],
                "chunk_size": [
                    "int"
                ],
                "decompress_request": [
                    "int"
                ],
                "idle_connection_timeout": [
                    "int"
                ],
                "kwargs": [],
                "max_body_size": [
                    "int"
                ],
                "max_buffer_size": [
                    "int",
                    "float",
                    "bool",
                    "Optional[Union[int, float]]",
                    "Optional[int]"
                ],
                "max_header_size": [
                    "int"
                ],
                "no_keep_alive": [
                    "int"
                ],
                "protocol": [
                    "int",
                    "str",
                    "bool",
                    "Optional[str]",
                    "Tuple[int, int]",
                    "Dict[str, str]"
                ],
                "request_callback": [
                    "Dict[str, str]",
                    "str"
                ],
                "self": [],
                "ssl_options": [
                    "int",
                    "float",
                    "bool",
                    "Optional[Union[int, float]]",
                    "Optional[int]"
                ],
                "trusted_downstream": [
                    "int",
                    "str",
                    "bool",
                    "Optional[str]",
                    "Tuple[int, int]",
                    "Dict[str, str]"
                ],
                "xheaders": [
                    "int",
                    "str",
                    "bool",
                    "Optional[str]",
                    "Tuple[int, int]",
                    "Dict[str, str]"
                ]
            },
            "variables": {
                "_connections": [
                    "str",
                    "int",
                    "Optional[float]",
                    "bool"
                ],
                "conn_params": [
                    "int",
                    "str"
                ],
                "protocol": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ],
                "request_callback": [
                    "str",
                    "int",
                    "Tuple[Literal, Literal]",
                    "dict"
                ],
                "trusted_downstream": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ],
                "xheaders": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ]
            }
        },
        "HTTPServer.configurable_base": {
            "name": "configurable_base",
            "location": 173,
            "return": [
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "args": [],
                "cls": [
                    "bool",
                    "List[int]",
                    "str",
                    "Callable[[Any], T]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "HTTPServer.configurable_default": {
            "name": "configurable_default",
            "location": 177,
            "return": [
                "float",
                "bool",
                "int"
            ],
            "arguments": {
                "args": [],
                "cls": [
                    "bool",
                    "str",
                    "Type",
                    "List[dict]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "HTTPServer.close_all_connections": {
            "name": "close_all_connections",
            "location": 181,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "conn": [
                    "int",
                    "str",
                    "Type[object]",
                    "Set[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "HTTPServer.handle_stream": {
            "name": "handle_stream",
            "location": 187,
            "return": [
                ""
            ],
            "arguments": {
                "address": [
                    "str"
                ],
                "args": [],
                "kwargs": [],
                "self": [],
                "stream": [
                    "str",
                    "Tuple[int, int]"
                ]
            },
            "variables": {
                "conn": [],
                "context": [
                    "dict"
                ]
            }
        },
        "HTTPServer.start_request": {
            "name": "start_request",
            "location": 196,
            "return": [
                "int",
                "str",
                "Callable"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "request_conn": [
                    "Optional[str]",
                    "Callable"
                ],
                "self": [],
                "server_conn": [
                    "List[Dict[str, Any]]",
                    "Callable",
                    "dict"
                ]
            },
            "variables": {
                "delegate": [
                    "dict",
                    "DefaultDict[Any, Optional[float]]",
                    "str"
                ]
            }
        },
        "HTTPServer.on_close": {
            "name": "on_close",
            "location": 207,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "server_conn": [
                    "int",
                    "Callable",
                    "str"
                ]
            },
            "variables": {}
        },
        "_CallableAdapter.__init__": {
            "name": "__init__",
            "location": 212,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "request_callback": [
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ],
                "request_conn": [
                    "bytes",
                    "str",
                    "Dict[str, str]",
                    "int",
                    "Optional[str]"
                ],
                "self": []
            },
            "variables": {
                "_chunks": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ],
                "connection": [
                    "int",
                    "float",
                    "List[float]"
                ],
                "delegate": [
                    "\"Frame\"",
                    "str",
                    "Dict[str, Any]"
                ],
                "request": [
                    "str",
                    "Dict[str, str]"
                ],
                "request_callback": [
                    "str",
                    "int",
                    "Tuple[Literal, Literal]",
                    "dict"
                ]
            }
        },
        "_CallableAdapter.headers_received": {
            "name": "headers_received",
            "location": 219,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "headers": [
                    "int",
                    "List[str]"
                ],
                "kwargs": [],
                "self": [],
                "start_line": [
                    "int",
                    "List[str]"
                ]
            },
            "variables": {
                "request": []
            }
        },
        "_CallableAdapter.data_received": {
            "name": "data_received",
            "location": 224,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "chunk": [
                    "int",
                    "str"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "_CallableAdapter.finish": {
            "name": "finish",
            "location": 227,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "_CallableAdapter.on_connection_close": {
            "name": "on_connection_close",
            "location": 232,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_chunks": [
                    "\"Frame\"",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "_HTTPRequestContext.__init__": {
            "name": "__init__",
            "location": 237,
            "return": [
                ""
            ],
            "arguments": {
                "address": [
                    "int",
                    "Optional[str]"
                ],
                "args": [],
                "kwargs": [],
                "protocol": [
                    "int",
                    "bool",
                    "float"
                ],
                "self": [],
                "stream": [
                    "bytes",
                    "str",
                    "Dict[str, Any]"
                ],
                "trusted_downstream": [
                    "List[int]",
                    "list",
                    "float",
                    "str"
                ]
            },
            "variables": {
                "_orig_protocol": [
                    "int",
                    "str",
                    "Tuple[int, int, int, int]",
                    "dict",
                    "List[str]",
                    "Tuple[Any, int]"
                ],
                "_orig_remote_ip": [
                    "str",
                    "Optional[float]",
                    "int",
                    "float",
                    "tuple",
                    "Type[List[Any]]",
                    "list"
                ],
                "address": [
                    "str",
                    "int"
                ],
                "address_family": [
                    "TextIO",
                    "str",
                    "int"
                ],
                "protocol": [
                    "str",
                    "int",
                    "bool"
                ],
                "remote_ip": [
                    "int",
                    "str",
                    "Final"
                ],
                "trusted_downstream": [
                    "List[str]",
                    "str",
                    "int"
                ]
            }
        },
        "_HTTPRequestContext.__str__": {
            "name": "__str__",
            "location": 263,
            "return": [
                "str",
                "bytes",
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "_HTTPRequestContext._apply_xheaders": {
            "name": "_apply_xheaders",
            "location": 274,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "headers": [
                    "Mapping",
                    "str"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "ip": [
                    "str",
                    "Dict[str, str]",
                    "Dict[str, bool]",
                    "Dict[int, Any]"
                ],
                "proto_header": [
                    "str",
                    "Dict[str, str]",
                    "Dict[str, Union[Any, Any]]"
                ],
                "protocol": [
                    "Dict[str, Union[Any, Any]]",
                    "Dict[str, Union[float, str]]"
                ],
                "remote_ip": [
                    "str",
                    "dict",
                    "Dict[str, str]",
                    "Dict[str, int]",
                    "Dict[str, Any]",
                    "List[str]",
                    "Dict[str, Union[Any, Any]]"
                ]
            }
        },
        "_HTTPRequestContext._unapply_xheaders": {
            "name": "_unapply_xheaders",
            "location": 296,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "protocol": [
                    "str",
                    "Set[str]",
                    "List[int]",
                    "int"
                ],
                "remote_ip": [
                    "int",
                    "str",
                    "Tuple[int, int, int, int]",
                    "dict",
                    "List[str]",
                    "Tuple[Any, int]"
                ]
            }
        },
        "_ProxyAdapter.__init__": {
            "name": "__init__",
            "location": 307,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "delegate": [
                    "str",
                    "List[str]",
                    "int",
                    "float"
                ],
                "kwargs": [],
                "request_conn": [
                    "str",
                    "Dict[str, str]",
                    "bytes"
                ],
                "self": []
            },
            "variables": {
                "connection": [
                    "int",
                    "float",
                    "List[float]"
                ],
                "delegate": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ]
            }
        },
        "_ProxyAdapter.headers_received": {
            "name": "headers_received",
            "location": 311,
            "return": [
                "Dict[str, Any]",
                "int",
                "str",
                "Optional[\"permissions_doc\"]",
                "Dict[str, str]"
            ],
            "arguments": {
                "args": [],
                "headers": [
                    "str",
                    "Dict[str, bytes]",
                    "Dict[str, str]",
                    "List[\"libkol.types.ItemQuantity\"]",
                    "dict"
                ],
                "kwargs": [],
                "self": [],
                "start_line": [
                    "int",
                    "str",
                    "dict"
                ]
            },
            "variables": {}
        },
        "_ProxyAdapter.data_received": {
            "name": "data_received",
            "location": 315,
            "return": [
                "Optional[float]",
                "IO[bytes]",
                "bool",
                "str",
                "dict",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "args": [],
                "chunk": [
                    "str",
                    "int",
                    "bytes",
                    "set"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "_ProxyAdapter.finish": {
            "name": "finish",
            "location": 318,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "_ProxyAdapter.on_connection_close": {
            "name": "on_connection_close",
            "location": 322,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "_ProxyAdapter._cleanup": {
            "name": "_cleanup",
            "location": 326,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "global": {
            "HTTPRequest": [
                "str",
                "int",
                "Type[Dict[str, Any]]",
                "bool"
            ]
        }
    },
    "tornado-5.0.2/tornado/httputil.py": {
        "url_concat": {
            "name": "url_concat",
            "location": 590,
            "return": [
                "str",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "url": [
                    "str"
                ]
            },
            "variables": {
                "err": [
                    "Type[complex]",
                    "Dict[Any, str]",
                    "str",
                    "Dict[str, str]",
                    "int"
                ],
                "final_query": [
                    "dict",
                    "Dict[str, Dict[str, Any]]",
                    "List[str]",
                    "Type[Dict[str, Any]]",
                    "Dict[str, dict]"
                ],
                "parsed_query": [
                    "Dict[str, str]",
                    "dict",
                    "ChainMap[str, str]",
                    "Dict[str, Any]"
                ],
                "parsed_url": [
                    "str",
                    "urllib.parse.ParseResult"
                ],
                "url": [
                    "str",
                    "urllib.parse.ParseResult"
                ]
            }
        },
        "_parse_request_range": {
            "name": "_parse_request_range",
            "location": 641,
            "return": [
                "bool",
                "type",
                "Optional[Iterable]",
                "dict",
                "Optional[T]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "range_header": [
                    "str",
                    "T",
                    "Optional[dict]",
                    "Optional[BaseException]",
                    "bytes",
                    "bool"
                ]
            },
            "variables": {
                "_": [
                    "Tuple[str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str]",
                    "int",
                    "float",
                    "bytes",
                    "datetime.datetime",
                    "datetime.timedelta"
                ],
                "end": [
                    "int",
                    "List[Optional[str]]",
                    "List[str]",
                    "bool",
                    "str"
                ],
                "end_b": [
                    "int",
                    "float",
                    "time.struct_time"
                ],
                "start": [
                    "int",
                    "List[None]"
                ],
                "start_b": [
                    "int",
                    "Tuple[int, int]",
                    "List[Tuple[str, str]]",
                    "str",
                    "List[str]",
                    "bytes"
                ],
                "unit": [
                    "Tuple[str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str]",
                    "list",
                    "str"
                ],
                "value": [
                    "str",
                    "List[None]",
                    "int",
                    "re.RegexFlag"
                ]
            }
        },
        "_get_content_range": {
            "name": "_get_content_range",
            "location": 690,
            "return": [
                "str"
            ],
            "arguments": {
                "args": [],
                "end": [
                    "int",
                    "Optional[int]",
                    "str",
                    "datetime.datetime",
                    "float",
                    "set"
                ],
                "kwargs": [],
                "start": [
                    "Optional[int]",
                    "int",
                    "datetime.datetime"
                ],
                "total": [
                    "int",
                    "Optional[int]",
                    "str",
                    "datetime.datetime",
                    "float",
                    "set"
                ]
            },
            "variables": {
                "end": [
                    "int",
                    "datetime.timedelta",
                    "tuple",
                    "dict",
                    "list"
                ],
                "start": [
                    "int",
                    "Optional[int]",
                    "Tuple[int, int, int]",
                    "List[str]",
                    "float"
                ]
            }
        },
        "_int_or_none": {
            "name": "_int_or_none",
            "location": 705,
            "return": [
                "Optional[str]",
                "Optional[int]",
                "Optional[float]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "val": [
                    "str",
                    "List[str]",
                    "bool"
                ]
            },
            "variables": {
                "val": [
                    "Pattern[str]",
                    "str"
                ]
            }
        },
        "parse_body_arguments": {
            "name": "parse_body_arguments",
            "location": 712,
            "return": [
                "str",
                "Iterable[Mapping[str, Any]]",
                "Optional[bool]"
            ],
            "arguments": {
                "args": [],
                "arguments": [
                    "Dict[str, List[bytes]]",
                    "Optional[str]",
                    "Iterable[str]",
                    "Dict[str, Any]",
                    "MutableMapping"
                ],
                "body": [
                    "bytes",
                    "Tuple[List[Any], Tuple[str, str], Optional[Any]]",
                    "Dict[str, Any]",
                    "str"
                ],
                "content_type": [
                    "str"
                ],
                "files": [
                    "dict",
                    "str",
                    "Dict[str, str]",
                    "Optional[Dict[str, Any]]"
                ],
                "headers": [
                    "str"
                ],
                "kwargs": []
            },
            "variables": {
                "fields": [
                    "str",
                    "Dict[str, str]",
                    "List[str]",
                    "Set[str]",
                    "Tuple[str, str, str, str]"
                ],
                "k": [
                    "Pattern[str]"
                ],
                "sep": [
                    "Pattern[str]"
                ],
                "uri_arguments": [
                    "dict",
                    "str",
                    "int"
                ],
                "v": [
                    "Pattern",
                    "int",
                    "tuple",
                    "str",
                    "Dict[str, str]",
                    "OrderedDict[str, int]",
                    "Pattern[str]"
                ]
            }
        },
        "parse_multipart_form_data": {
            "name": "parse_multipart_form_data",
            "location": 748,
            "return": [
                "Iterable[Hashable]",
                "Union[tuple, list]",
                "str"
            ],
            "arguments": {
                "args": [],
                "arguments": [
                    "Dict[str, List[bytes]]",
                    "Dict[str, Any]",
                    "dict"
                ],
                "boundary": [
                    "bytes",
                    "str",
                    "Dict[str, Any]",
                    "apistar.http.Path",
                    "int"
                ],
                "data": [
                    "bytes",
                    "Dict[str, Any]",
                    "str",
                    "Mapping[str, str]",
                    "int"
                ],
                "files": [
                    "Optional[Dict]",
                    "dict",
                    "MutableMapping",
                    "List[str]",
                    "Dict[str, Any]"
                ],
                "kwargs": []
            },
            "variables": {
                "boundary": [
                    "str"
                ],
                "ctype": [
                    "Dict[str, Any]",
                    "list",
                    "dict"
                ],
                "disp_header": [
                    "Dict[str, str]",
                    "str",
                    "dict"
                ],
                "disp_params": [
                    "Dict[str, str]",
                    "dict"
                ],
                "disposition": [
                    "Optional[int]",
                    "Dict[bytes, str]"
                ],
                "eoh": [
                    "str",
                    "list",
                    "int",
                    "Dict[str, str]",
                    "List[Dict[str, str]]",
                    "List[str]"
                ],
                "final_boundary_index": [
                    "str"
                ],
                "headers": [
                    "urllib.parse.ParseResult"
                ],
                "name": [
                    "str",
                    "property"
                ],
                "parts": [
                    "str"
                ],
                "value": [
                    "str",
                    "dict",
                    "List[Dict[str, str]]",
                    "Generator[dict, None, None]",
                    "list",
                    "set"
                ]
            }
        },
        "format_timestamp": {
            "name": "format_timestamp",
            "location": 794,
            "return": [
                "dict",
                "Callable",
                "Tuple[str]",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "ts": [
                    "set",
                    "float",
                    "datetime.datetime"
                ]
            },
            "variables": {
                "ts": [
                    "time.struct_time",
                    "Anaconda3.Lib.site-packages.astropy.time.core.Time",
                    "float",
                    "str",
                    "List[None]",
                    "int"
                ]
            }
        },
        "parse_request_start_line": {
            "name": "parse_request_start_line",
            "location": 819,
            "return": [
                "str",
                "Dict[str, Tuple[Any, Any]]",
                "int",
                "dict",
                "Dict[str, Type[Any]]",
                "bool",
                "Optional[dict]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "line": [
                    "str"
                ]
            },
            "variables": {
                "method": [
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "Pattern[str]"
                ],
                "path": [
                    "str",
                    "Pattern[str]"
                ],
                "version": [
                    "str"
                ]
            }
        },
        "parse_response_start_line": {
            "name": "parse_response_start_line",
            "location": 843,
            "return": [
                "Union[float, str]",
                "float",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "line": [
                    "str",
                    "Union[Literal, str]"
                ]
            },
            "variables": {
                "line": [
                    "str",
                    "List[str]",
                    "Final",
                    "int"
                ],
                "match": [
                    "Pattern[str]"
                ]
            }
        },
        "_parseparam": {
            "name": "_parseparam",
            "location": 865,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "s": [
                    "int",
                    "str",
                    "dict"
                ]
            },
            "variables": {
                "end": [
                    "int",
                    "float",
                    "Tuple[Literal, Literal]",
                    "str",
                    "property"
                ],
                "f": [
                    "float",
                    "str",
                    "dict"
                ],
                "s": [
                    "int",
                    "Set[str]",
                    "Generator[int, None, None]",
                    "List[int]"
                ]
            }
        },
        "_parse_header": {
            "name": "_parse_header",
            "location": 878,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "line": [
                    "str",
                    "dict",
                    "Iterator[str]"
                ]
            },
            "variables": {
                "i": [
                    "int",
                    "str",
                    "float",
                    "Callable(chr)[[int], str]"
                ],
                "key": [
                    "list",
                    "str",
                    "certificate_engine.ssl.key.Key",
                    "dict",
                    "int"
                ],
                "name": [
                    "str"
                ],
                "parts": [
                    "List[str]",
                    "str",
                    "list"
                ],
                "pdict": [
                    "bool",
                    "str",
                    "dict",
                    "Dict[str, Dict[int, str]]",
                    "List[Dict[str, Any]]",
                    "List[Tuple[Any, Any]]",
                    "float",
                    "Dict[str, Type[Any]]",
                    "int"
                ],
                "value": [
                    "int",
                    "List[int]",
                    "Set[int]",
                    "str",
                    "List[str]"
                ]
            }
        },
        "_encode_header": {
            "name": "_encode_header",
            "location": 901,
            "return": [
                "str",
                "dict",
                "List[str]",
                "Dict[str, str]",
                "Callable"
            ],
            "arguments": {
                "args": [],
                "key": [
                    "str",
                    "bytes"
                ],
                "kwargs": [],
                "pdict": [
                    "Dict[str, str]",
                    "dict",
                    "List[Dict[str, Any]]",
                    "str",
                    "Dict[str, Callable]",
                    "List[str]",
                    "bool"
                ]
            },
            "variables": {
                "out": [
                    "list",
                    "str",
                    "int",
                    "Dict[str, None]"
                ]
            }
        },
        "doctests": {
            "name": "doctests",
            "location": 921,
            "return": [
                "bool",
                "int",
                "Optional[float]",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": []
            },
            "variables": {}
        },
        "split_host_and_port": {
            "name": "split_host_and_port",
            "location": 926,
            "return": [
                "Callable[[T], bool]",
                "str",
                "List[Tuple]",
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "netloc": [
                    "str"
                ]
            },
            "variables": {
                "host": [
                    "str",
                    "list",
                    "Optional[int]"
                ],
                "match": [
                    "Pattern[str]"
                ],
                "port": [
                    "Type[range]",
                    "Dict[str,str]",
                    "List[int]",
                    "Tuple[str, str, str, str, str, str, str, str, str, str]",
                    "int",
                    "str",
                    "Pattern[str]"
                ]
            }
        },
        "qs_to_qsl": {
            "name": "qs_to_qsl",
            "location": 943,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "qs": [
                    "Dict[str, str]",
                    "Dict[str, object]",
                    "Dict[str, Any]",
                    "Dict[str, Dict[str, int]]",
                    "Optional[Dict[str, Any]]"
                ]
            },
            "variables": {}
        },
        "_unquote_cookie": {
            "name": "_unquote_cookie",
            "location": 958,
            "return": [
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "str": [
                    "str",
                    "List[str]",
                    "Optional[str]"
                ]
            },
            "variables": {
                "i": [
                    "str",
                    "int",
                    "DefaultDict[Any, DefaultDict[Any, Any]]",
                    "List[int]"
                ],
                "j": [
                    "list",
                    "int",
                    "Pattern[str]",
                    "frozenset[Any]"
                ],
                "k": [
                    "str",
                    "Dict[str, str]",
                    "int"
                ],
                "n": [
                    "str",
                    "int"
                ],
                "o_match": [
                    "Pattern[str]"
                ],
                "q_match": [
                    "Pattern[str]"
                ],
                "res": [
                    "list",
                    "str",
                    "List[str]"
                ],
                "str": [
                    "List[str]",
                    "Final",
                    "str",
                    "List[Union[Any, str]]",
                    "Set[str]"
                ]
            }
        },
        "parse_cookie": {
            "name": "parse_cookie",
            "location": 1008,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "cookie": [
                    "str"
                ],
                "kwargs": []
            },
            "variables": {
                "cookiedict": [
                    "float",
                    "str"
                ],
                "key": [
                    "str",
                    "Tuple[str, str, str, str, str, str, str, str, str, str]",
                    "List[int]"
                ],
                "val": [
                    "str",
                    "bytes"
                ]
            }
        },
        "_NormalizedHeaderCache.__init__": {
            "name": "__init__",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "size": [
                    "int",
                    "bytes"
                ]
            },
            "variables": {
                "queue": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ],
                "size": [
                    "int",
                    "float",
                    "time.struct_time"
                ]
            }
        },
        "_NormalizedHeaderCache.__missing__": {
            "name": "__missing__",
            "location": 89,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "key": [
                    "str"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "normalized": [
                    "str"
                ],
                "old_key": [
                    "str",
                    "Dict[int, int]",
                    "Union[str, int]",
                    "Type[Dict[str, str]]",
                    "Dict[int, str]",
                    "bytes",
                    "Type[List[Any]]"
                ]
            }
        },
        "HTTPHeaders.__init__": {
            "name": "__init__",
            "location": 133,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_as_list": [
                    "str",
                    "int",
                    "List[str]",
                    "float"
                ],
                "_dict": [
                    "Dict[str, dict]",
                    "List[str]",
                    "str",
                    "float",
                    "Set[str]",
                    "DefaultDict[Any, List[Any]]",
                    "int"
                ],
                "_last_key": [
                    "str",
                    "dict"
                ]
            }
        },
        "HTTPHeaders.add": {
            "name": "add",
            "location": 148,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "name": [
                    "str",
                    "Dict[str, str]"
                ],
                "self": [],
                "value": [
                    "str",
                    "Sequence[str]",
                    "AnyStr",
                    "Union[List[str], str]"
                ]
            },
            "variables": {
                "_last_key": [
                    "List[str]",
                    "str",
                    "Dict[Any, str]",
                    "Tuple[str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str]",
                    "Dict[str, str]",
                    "Dict[int, str]",
                    "Dict[str, Union[Any, Any]]"
                ],
                "norm_name": [
                    "dict",
                    "Set[str]"
                ]
            }
        },
        "HTTPHeaders.get_list": {
            "name": "get_list",
            "location": 160,
            "return": [
                "str",
                "Optional[str]",
                "Optional[dict]",
                "int"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "name": [
                    "str"
                ],
                "self": []
            },
            "variables": {
                "norm_name": [
                    "Dict[str, str]",
                    "dict",
                    "Dict[int, str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "HTTPHeaders.get_all": {
            "name": "get_all",
            "location": 165,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "HTTPHeaders.parse_line": {
            "name": "parse_line",
            "location": 176,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "line": [
                    "str",
                    "int"
                ],
                "self": []
            },
            "variables": {
                "name": [
                    "str",
                    "list"
                ],
                "new_part": [
                    "str",
                    "tuple",
                    "int",
                    "List[str]",
                    "Iterator[str]",
                    "list"
                ],
                "value": [
                    "str",
                    "Pattern[str]",
                    "List[str]"
                ]
            }
        },
        "HTTPHeaders.parse": {
            "name": "parse",
            "location": 194,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "cls": [
                    "int",
                    "str",
                    "Dict[str, str]"
                ],
                "headers": [
                    "str",
                    "datetime.datetime"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "h": [
                    "str",
                    "Callable[[], None]",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "HTTPHeaders.__setitem__": {
            "name": "__setitem__",
            "location": 209,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "name": [
                    "str",
                    "Dict[str, str]",
                    "Optional[str]"
                ],
                "self": [],
                "value": [
                    "str",
                    "Dict[str, str]",
                    "MutableMapping[str, str]"
                ]
            },
            "variables": {
                "norm_name": [
                    "Dict[str, Any]",
                    "str",
                    "dict"
                ]
            }
        },
        "HTTPHeaders.__getitem__": {
            "name": "__getitem__",
            "location": 214,
            "return": [
                "Dict[str, Any]",
                "Dict[str, str]",
                "Mapping[str, str]",
                "List[str]",
                "str",
                "list"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "name": [
                    "str",
                    "Pattern"
                ],
                "self": []
            },
            "variables": {}
        },
        "HTTPHeaders.__delitem__": {
            "name": "__delitem__",
            "location": 218,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "name": [
                    "str",
                    "List[str]"
                ],
                "self": []
            },
            "variables": {
                "norm_name": [
                    "Dict[str, Any]",
                    "str",
                    "dict"
                ]
            }
        },
        "HTTPHeaders.__len__": {
            "name": "__len__",
            "location": 223,
            "return": [
                "Dict[str, Any]",
                "dict",
                "Dict[str, Dict[str, str]]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "HTTPHeaders.__iter__": {
            "name": "__iter__",
            "location": 226,
            "return": [
                "Callable",
                "List[int]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "HTTPHeaders.copy": {
            "name": "copy",
            "location": 229,
            "return": [
                "dict",
                "bytes",
                "int",
                "Dict[str, str]",
                "Dict[str, Any]",
                "Callable"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "HTTPHeaders.__str__": {
            "name": "__str__",
            "location": 238,
            "return": [
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "lines": [
                    "List[str]",
                    "list",
                    "str",
                    "dict"
                ]
            }
        },
        "HTTPServerRequest.__init__": {
            "name": "__init__",
            "location": 339,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "body": [
                    "str",
                    "Optional[str]",
                    "dict",
                    "Optional[int]",
                    "bool"
                ],
                "connection": [
                    "Optional[Dict[str, str]]",
                    "dict",
                    "Dict[str, Dict[str, Any]]",
                    "str"
                ],
                "files": [
                    "int",
                    "dict",
                    "bool",
                    "List[Mapping[str, str]]"
                ],
                "headers": [
                    "str"
                ],
                "host": [
                    "str",
                    "apistar.http.Headers",
                    "Dict[str, List[bytes]]"
                ],
                "kwargs": [],
                "method": [
                    "str",
                    "Tuple[str, str]",
                    "List[str]"
                ],
                "self": [],
                "server_connection": [
                    "str",
                    "int",
                    "List[Dict[str, Any]]"
                ],
                "start_line": [
                    "Optional[str]",
                    "str",
                    "Optional[List[str]]"
                ],
                "uri": [
                    "str",
                    "List[str]"
                ],
                "version": [
                    "str"
                ]
            },
            "variables": {
                "_finish_time": [
                    "float",
                    "datetime.datetime"
                ],
                "_start_time": [
                    "float",
                    "List[int]",
                    "list"
                ],
                "arguments": [
                    "str",
                    "int",
                    "List[str]",
                    "float",
                    "List[float]"
                ],
                "body": [
                    "dict",
                    "list",
                    "List[str]",
                    "int",
                    "str"
                ],
                "body_arguments": [
                    "str",
                    "int",
                    "Set[str]",
                    "dict",
                    "util.IDM"
                ],
                "connection": [
                    "dict",
                    "bool",
                    "Union[Literal, int]",
                    "str",
                    "Optional[str]",
                    "List[str]"
                ],
                "context": [
                    "dict",
                    "Dict[str, Tuple[str, str]]",
                    "Dict[str, list]",
                    "int",
                    "str",
                    "bool"
                ],
                "files": [
                    "str",
                    "list"
                ],
                "headers": [
                    "str",
                    "List[str]",
                    "bytes"
                ],
                "host": [
                    "str",
                    "Dict[Any, str]"
                ],
                "host_name": [
                    "str",
                    "frozenset[str]"
                ],
                "method": [
                    "dict",
                    "Dict[str, str]",
                    "Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]",
                    "List[int]",
                    "Type[Dict[str, Any]]",
                    "Dict[str, Tuple[str, str, str, str]]",
                    "Dict[str, Any]"
                ],
                "path": [
                    "str",
                    "Sequence[str]"
                ],
                "protocol": [
                    "Dict[str, int]",
                    "str",
                    "dict",
                    "Dict[Any, str]",
                    "Set[str]",
                    "Dict[Any, Union[int, str]]",
                    "Dict[Any, float]"
                ],
                "query": [
                    "str",
                    "bytes"
                ],
                "query_arguments": [
                    "str"
                ],
                "remote_ip": [
                    "str",
                    "Dict[str, Type[Any]]",
                    "bool"
                ],
                "sep": [
                    "str",
                    "Type[str]",
                    "bytes"
                ],
                "server_connection": [
                    "int",
                    "List[str]",
                    "str"
                ],
                "uri": [],
                "version": [
                    "str",
                    "Pattern[str]",
                    "Iterable[str]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "HTTPServerRequest.supports_http_1_1": {
            "name": "supports_http_1_1",
            "location": 368,
            "return": [
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "HTTPServerRequest.cookies": {
            "name": "cookies",
            "location": 379,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_cookies": [
                    "dict",
                    "Dict[str, Tuple[int, str]]"
                ],
                "parsed": [
                    "str",
                    "Dict[str, str]",
                    "list",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "HTTPServerRequest.write": {
            "name": "write",
            "location": 399,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "callback": [
                    "str",
                    "IO"
                ],
                "chunk": [
                    "int",
                    "str",
                    "bytes",
                    "Union[bytes, bytearray]",
                    "Optional[int]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "HTTPServerRequest.finish": {
            "name": "finish",
            "location": 411,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_finish_time": [
                    "int",
                    "float",
                    "time.struct_time",
                    "datetime.timedelta"
                ]
            }
        },
        "HTTPServerRequest.full_url": {
            "name": "full_url",
            "location": 421,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "HTTPServerRequest.request_time": {
            "name": "request_time",
            "location": 425,
            "return": [
                "Sequence[int]",
                "int",
                "Dict[str, Any]",
                "float",
                "bool",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "HTTPServerRequest.get_ssl_certificate": {
            "name": "get_ssl_certificate",
            "location": 432,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "args": [],
                "binary_form": [
                    "str",
                    "bytes",
                    "IO[bytes]",
                    "bool",
                    "Union[str, IO[str]]",
                    "IO"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "HTTPServerRequest._parse_body": {
            "name": "_parse_body",
            "location": 457,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "HTTPServerRequest.__repr__": {
            "name": "__repr__",
            "location": 466,
            "return": [
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "args": [
                    "List[str]",
                    "Tuple[Any, Literal]",
                    "Tuple[Literal, Literal, Literal, Literal, Literal, Literal]",
                    "Optional[bytes]",
                    "dict"
                ],
                "attrs": [
                    "str",
                    "int",
                    "Final[Dict[str, Any]]",
                    "list"
                ]
            }
        },
        "HTTPServerConnectionDelegate.start_request": {
            "name": "start_request",
            "location": 494,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "request_conn": [
                    "dict",
                    "int",
                    "str",
                    "Optional[bytes]"
                ],
                "self": [],
                "server_conn": [
                    "dict",
                    "int",
                    "str",
                    "Optional[bytes]"
                ]
            },
            "variables": {}
        },
        "HTTPServerConnectionDelegate.on_close": {
            "name": "on_close",
            "location": 506,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "server_conn": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            },
            "variables": {}
        },
        "HTTPMessageDelegate.headers_received": {
            "name": "headers_received",
            "location": 520,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "headers": [
                    "tornado.httputil.HTTPHeaders",
                    "bytes",
                    "str"
                ],
                "kwargs": [],
                "self": [],
                "start_line": [
                    "tornado.httputil.HTTPHeaders",
                    "bytes",
                    "str"
                ]
            },
            "variables": {}
        },
        "HTTPMessageDelegate.data_received": {
            "name": "data_received",
            "location": 535,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "chunk": [
                    "bytes",
                    "bool",
                    "int",
                    "Optional[Exception]",
                    "Callable[..., Awaitable]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "HTTPMessageDelegate.finish": {
            "name": "finish",
            "location": 542,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "HTTPMessageDelegate.on_connection_close": {
            "name": "on_connection_close",
            "location": 546,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "HTTPConnection.write_headers": {
            "name": "write_headers",
            "location": 560,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "callback": [
                    "bytes",
                    "tornado.httputil.HTTPHeaders",
                    "str",
                    "list",
                    "Iterable"
                ],
                "chunk": [
                    "bytes",
                    "tornado.httputil.HTTPHeaders",
                    "str",
                    "list",
                    "Iterable"
                ],
                "headers": [
                    "bytes",
                    "tornado.httputil.HTTPHeaders",
                    "str",
                    "list",
                    "Iterable"
                ],
                "kwargs": [],
                "self": [],
                "start_line": [
                    "bytes",
                    "tornado.httputil.HTTPHeaders",
                    "str",
                    "list",
                    "Iterable"
                ]
            },
            "variables": {}
        },
        "HTTPConnection.write": {
            "name": "write",
            "location": 576,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "callback": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "chunk": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "HTTPConnection.finish": {
            "name": "finish",
            "location": 584,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "global": {
            "RequestStartLine": [
                "str",
                "Type[str]",
                "int",
                "Set[str]",
                "List[str]"
            ],
            "ResponseStartLine": [
                "Pattern[str]",
                "str"
            ],
            "SSLError": [
                "int",
                "str",
                "bool"
            ],
            "_CRLF_RE": [
                "Pattern[str]",
                "str"
            ],
            "_OctalPatt": [
                "Pattern[str]"
            ],
            "_QuotePatt": [
                "Pattern[bytes]",
                "Pattern[str]"
            ],
            "_normalized_headers": [
                "Generator[Literal, None, None]",
                "set"
            ],
            "_nulljoin": [
                "List[int]",
                "int",
                "Callable(chr)[[int], str]",
                "float",
                "Type[str]",
                "datetime.datetime.datetime",
                "str"
            ]
        }
    },
    "tornado-5.0.2/tornado/ioloop.py": {
        "IOLoop.configure": {
            "name": "configure",
            "location": 190,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "cls": [
                    "complex",
                    "bytes",
                    "str",
                    "Optional[int]",
                    "bool"
                ],
                "impl": [
                    "Callable",
                    "str",
                    "bytes"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "impl": [
                    "str",
                    "list",
                    "dict"
                ]
            }
        },
        "IOLoop.instance": {
            "name": "instance",
            "location": 202,
            "return": [
                "str",
                "List[str]",
                "float",
                "bool",
                "bytes"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "IOLoop.install": {
            "name": "install",
            "location": 223,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "IOLoop.clear_instance": {
            "name": "clear_instance",
            "location": 238,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "IOLoop.current": {
            "name": "current",
            "location": 254,
            "return": [
                "Optional[str]",
                "Union[int, None]",
                "Optional[Callable]",
                "Optional[BaseException]",
                "static_frame.core.util.PathSpecifier",
                "Union[Iterable[str], str]"
            ],
            "arguments": {
                "args": [],
                "instance": [
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[float]",
                    "bool"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "current": [
                    "str",
                    "Optional[str]",
                    "set",
                    "bool",
                    "int"
                ],
                "loop": [
                    "int",
                    "str"
                ]
            }
        },
        "IOLoop.make_current": {
            "name": "make_current",
            "location": 297,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "old": [
                    "Optional[str]",
                    "bool",
                    "ImportError",
                    "str"
                ]
            }
        },
        "IOLoop.clear_current": {
            "name": "clear_current",
            "location": 321,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "old": [
                    "str",
                    "Type[datetime.datetime]",
                    "bool",
                    "Type[Dict[str, Any]]",
                    "list",
                    "datetime.datetime.datetime"
                ]
            }
        },
        "IOLoop._clear_current_hook": {
            "name": "_clear_current_hook",
            "location": 335,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "IOLoop.configurable_base": {
            "name": "configurable_base",
            "location": 343,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "args": [],
                "cls": [
                    "bool",
                    "List[int]",
                    "str",
                    "Callable[[Any], T]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "IOLoop.configurable_default": {
            "name": "configurable_default",
            "location": 347,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "args": [],
                "cls": [
                    "bool",
                    "str",
                    "Type",
                    "List[dict]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "IOLoop.initialize": {
            "name": "initialize",
            "location": 353,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "make_current": [
                    "int",
                    "float",
                    "Iterable[Optional[Any]]",
                    "Optional[int]"
                ],
                "self": []
            },
            "variables": {
                "current": [
                    "str"
                ]
            }
        },
        "IOLoop.close": {
            "name": "close",
            "location": 364,
            "return": [
                ""
            ],
            "arguments": {
                "all_fds": [
                    "bool"
                ],
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "IOLoop.add_handler": {
            "name": "add_handler",
            "location": 391,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "events": [
                    "int",
                    "Callable[..., None]",
                    "Callable[[int, int], None]",
                    "str"
                ],
                "fd": [
                    "int",
                    "Callable[..., None]",
                    "Callable[[int, int], None]",
                    "str"
                ],
                "handler": [
                    "int",
                    "Callable[..., None]",
                    "Callable[[int, int], None]",
                    "str"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "IOLoop.update_handler": {
            "name": "update_handler",
            "location": 410,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "events": [
                    "int",
                    "str"
                ],
                "fd": [
                    "int",
                    "str"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "IOLoop.remove_handler": {
            "name": "remove_handler",
            "location": 419,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "fd": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "IOLoop.set_blocking_signal_threshold": {
            "name": "set_blocking_signal_threshold",
            "location": 428,
            "return": [
                ""
            ],
            "arguments": {
                "action": [
                    "List[util.Block]",
                    "List[\"Block\"]",
                    "int",
                    "Dict[str, Any]",
                    "List[str]"
                ],
                "args": [],
                "kwargs": [],
                "seconds": [
                    "List[util.Block]",
                    "List[\"Block\"]",
                    "int",
                    "Dict[str, Any]",
                    "List[str]"
                ],
                "self": []
            },
            "variables": {}
        },
        "IOLoop.set_blocking_log_threshold": {
            "name": "set_blocking_log_threshold",
            "location": 447,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "seconds": [
                    "float"
                ],
                "self": []
            },
            "variables": {}
        },
        "IOLoop.log_stack": {
            "name": "log_stack",
            "location": 461,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "frame": [
                    "str",
                    "Sequence[str]",
                    "List[str]"
                ],
                "kwargs": [],
                "self": [],
                "signal": [
                    "Callable",
                    "str"
                ]
            },
            "variables": {}
        },
        "IOLoop.start": {
            "name": "start",
            "location": 470,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "IOLoop._setup_logging": {
            "name": "_setup_logging",
            "location": 478,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "IOLoop.stop": {
            "name": "stop",
            "location": 494,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "IOLoop.run": {
            "name": "run",
            "location": 550,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "result": [
                    "dict",
                    "bool",
                    "Tuple[Optional[int], Optional[int]]"
                ]
            }
        },
        "IOLoop.timeout_callback": {
            "name": "timeout_callback",
            "location": 568,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "IOLoop.run_sync": {
            "name": "run_sync",
            "location": 518,
            "return": [
                "bytes",
                "float",
                "List[dict]",
                "str",
                "int"
            ],
            "arguments": {
                "args": [],
                "func": [
                    "Callable",
                    "float",
                    "T",
                    "Exception"
                ],
                "kwargs": [],
                "self": [],
                "timeout": [
                    "int",
                    "Optional[float]",
                    "float",
                    "Optional[int]"
                ]
            },
            "variables": {
                "future_cell": [
                    "str",
                    "int"
                ],
                "timeout_handle": [
                    "int"
                ]
            }
        },
        "IOLoop.time": {
            "name": "time",
            "location": 583,
            "return": [
                "float",
                "Optional[datetime.datetime]",
                "Dict[int, datetime.datetime]",
                "int",
                "List[float]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "IOLoop.add_timeout": {
            "name": "add_timeout",
            "location": 598,
            "return": [
                "Callable[[KT], VT]",
                "Optional[Dict[str, Any]]",
                "str",
                "\"Namespace\"",
                "List[List[str]]"
            ],
            "arguments": {
                "args": [],
                "callback": [
                    "str",
                    "Union",
                    "BaseException",
                    "Callable"
                ],
                "deadline": [
                    "str",
                    "int",
                    "slice"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "IOLoop.call_later": {
            "name": "call_later",
            "location": 632,
            "return": [
                "bool",
                "int",
                "Awaitable[Any]"
            ],
            "arguments": {
                "args": [],
                "callback": [
                    "bool",
                    "Callable[..., None]",
                    "float",
                    "Union"
                ],
                "delay": [
                    "bool",
                    "Callable[..., None]",
                    "float",
                    "Union"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "IOLoop.call_at": {
            "name": "call_at",
            "location": 645,
            "return": [
                "Tuple[int, int]",
                "int",
                "bool",
                "Type"
            ],
            "arguments": {
                "args": [],
                "callback": [
                    "denite.util.UserContext",
                    "tuple",
                    "List[str]",
                    "bool"
                ],
                "kwargs": [],
                "self": [],
                "when": [
                    "denite.util.UserContext",
                    "tuple",
                    "List[str]",
                    "bool"
                ]
            },
            "variables": {}
        },
        "IOLoop.remove_timeout": {
            "name": "remove_timeout",
            "location": 661,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "timeout": [
                    "int",
                    "str"
                ]
            },
            "variables": {}
        },
        "IOLoop.add_callback": {
            "name": "add_callback",
            "location": 670,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "callback": [
                    "str",
                    "bytes",
                    "List[str]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "IOLoop.add_callback_from_signal": {
            "name": "add_callback_from_signal",
            "location": 685,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "callback": [
                    "int",
                    "Iterable[Any]",
                    "dict",
                    "bool"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "IOLoop.spawn_callback": {
            "name": "spawn_callback",
            "location": 697,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "callback": [
                    "tuple",
                    "List[str]",
                    "Dict[str, Any]",
                    "list",
                    "str",
                    "Callable"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "IOLoop.add_future": {
            "name": "add_future",
            "location": 710,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "callback": [
                    "bool",
                    "str",
                    "List[str]",
                    "bytes"
                ],
                "future": [
                    "List[str]",
                    "str",
                    "asyncio.Future",
                    "T"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "callback": []
            }
        },
        "IOLoop.run_in_executor": {
            "name": "run_in_executor",
            "location": 722,
            "return": [
                "str",
                "float",
                "Union[List[str], List[Any]]"
            ],
            "arguments": {
                "args": [],
                "executor": [
                    "int",
                    "Optional[\"PNSqlCursor\"]",
                    "Optional[Any]",
                    "list"
                ],
                "func": [
                    "int",
                    "str"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_executor": [
                    "int",
                    "float",
                    "asyncio.Queue",
                    "Final"
                ],
                "c_future": [
                    "bcompiler.process.cleansers.Cleanser",
                    "dict",
                    "str"
                ],
                "executor": [
                    "int",
                    "SupportsInt",
                    "Optional[int]",
                    "slice",
                    "str"
                ],
                "t_future": [
                    "float",
                    "Tuple[List[Any], List[Any], List[Any], List[Any], List[Any], List[Any], float]",
                    "str",
                    "os.terminal_size",
                    "Type[T]",
                    "Anaconda3.Lib.site-packages.astropy.time.core.Time"
                ]
            }
        },
        "IOLoop.set_default_executor": {
            "name": "set_default_executor",
            "location": 746,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "executor": [
                    "str",
                    "int",
                    "List[str]",
                    "bytes"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_executor": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ]
            }
        },
        "IOLoop._run_callback": {
            "name": "_run_callback",
            "location": 753,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "callback": [
                    "str"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "ret": [
                    "int",
                    "str",
                    "float",
                    "dict"
                ]
            }
        },
        "IOLoop._discard_future_result": {
            "name": "_discard_future_result",
            "location": 778,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "future": [
                    "int",
                    "str",
                    "bool"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "IOLoop.handle_callback_exception": {
            "name": "handle_callback_exception",
            "location": 782,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "callback": [
                    "Callable",
                    "logging.Logger",
                    "asyncio.AbstractEventLoop"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "IOLoop.split_fd": {
            "name": "split_fd",
            "location": 794,
            "return": [
                "Callable[[T], bool]",
                "str",
                "List[Tuple]",
                "bool"
            ],
            "arguments": {
                "args": [],
                "fd": [
                    "Callable[[T], bool]",
                    "str",
                    "List[Tuple]",
                    "bool"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "IOLoop.close_fd": {
            "name": "close_fd",
            "location": 815,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "fd": [
                    "Optional[bool]",
                    "List[str]",
                    "str"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "PollIOLoop.initialize": {
            "name": "initialize",
            "location": 843,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "impl": [
                    "int",
                    "str"
                ],
                "kwargs": [],
                "self": [],
                "time_func": [
                    "str",
                    "int",
                    "float"
                ]
            },
            "variables": {
                "_blocking_signal_threshold": [
                    "List[int]",
                    "int",
                    "dict",
                    "util.Position"
                ],
                "_callbacks": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ],
                "_cancellations": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ],
                "_closing": [
                    "int",
                    "float"
                ],
                "_events": [
                    "Counter",
                    "asyncio.tasks.Task[Any]",
                    "int",
                    "str"
                ],
                "_handlers": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ],
                "_impl": [
                    "str",
                    "int"
                ],
                "_pid": [
                    "str",
                    "bool"
                ],
                "_running": [
                    "Optional[BaseException]",
                    "str",
                    "int",
                    "bool"
                ],
                "_stopped": [
                    "Type[range]",
                    "int",
                    "dict",
                    "Union[Literal[False], Literal[True]]",
                    "List[str]",
                    "bytearray"
                ],
                "_thread_ident": [
                    "str",
                    "list",
                    "List[str]",
                    "bool",
                    "dict"
                ],
                "_timeout_counter": [
                    "int",
                    "Callable(time.time)[[], float]",
                    "List[str]"
                ],
                "_timeouts": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ],
                "_waker": [
                    "int",
                    "str"
                ],
                "time_func": [
                    "int",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "PollIOLoop.configurable_base": {
            "name": "configurable_base",
            "location": 870,
            "return": [
                "bytes",
                "str",
                "os.PathLike",
                "int",
                "asyncio.Transport"
            ],
            "arguments": {
                "args": [],
                "cls": [
                    "bool",
                    "List[int]",
                    "str",
                    "Callable[[Any], T]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "PollIOLoop.configurable_default": {
            "name": "configurable_default",
            "location": 874,
            "return": [
                "int",
                "str",
                "List[str]",
                "Callable",
                "bool"
            ],
            "arguments": {
                "args": [],
                "cls": [
                    "bool",
                    "str",
                    "Type",
                    "List[dict]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "PollIOLoop.close": {
            "name": "close",
            "location": 885,
            "return": [
                ""
            ],
            "arguments": {
                "all_fds": [
                    "bool"
                ],
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_callbacks": [
                    "\"Frame\"",
                    "str",
                    "Dict[str, Any]"
                ],
                "_closing": [
                    "str",
                    "bool"
                ],
                "_timeouts": [
                    "\"Frame\"",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "PollIOLoop.add_handler": {
            "name": "add_handler",
            "location": 898,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "events": [
                    "str",
                    "int",
                    "Callable"
                ],
                "fd": [
                    "Optional[asyncio.AbstractEventLoop]",
                    "Callable"
                ],
                "handler": [
                    "str",
                    "bool",
                    "bytes"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "fd": [
                    "str",
                    "Dict[str, str]"
                ],
                "obj": [
                    "dict",
                    "str"
                ]
            }
        },
        "PollIOLoop.update_handler": {
            "name": "update_handler",
            "location": 903,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "events": [
                    "str",
                    "Dict[str, Any]"
                ],
                "fd": [
                    "asyncio.AbstractEventLoop"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "fd": [
                    "int",
                    "str",
                    "Optional[Match[str]]",
                    "list"
                ],
                "obj": [
                    "int",
                    "str",
                    "Type[str]",
                    "Dict[str, Union[None, Any, Any]]",
                    "bool"
                ]
            }
        },
        "PollIOLoop.remove_handler": {
            "name": "remove_handler",
            "location": 907,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "fd": [
                    "Optional[str]",
                    "Optional[int]",
                    "List[int]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "fd": [
                    "Pattern[str]",
                    "str",
                    "Optional[str]"
                ],
                "obj": [
                    "int",
                    "str",
                    "Type[str]",
                    "Dict[str, Union[None, Any, Any]]",
                    "bool"
                ]
            }
        },
        "PollIOLoop.set_blocking_signal_threshold": {
            "name": "set_blocking_signal_threshold",
            "location": 916,
            "return": [
                "int",
                "Union[int, slice]"
            ],
            "arguments": {
                "action": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "int"
                ],
                "args": [],
                "kwargs": [],
                "seconds": [
                    "bool"
                ],
                "self": []
            },
            "variables": {
                "_blocking_signal_threshold": [
                    "Optional[bool]",
                    "tuple",
                    "int",
                    "float",
                    "str",
                    "util.IDM",
                    "Type[int]"
                ]
            }
        },
        "PollIOLoop.start": {
            "name": "start",
            "location": 926,
            "return": [
                "Union[tuple, list]",
                "Dict[str, Any]",
                "List[int]",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_cancellations": [
                    "int",
                    "dict",
                    "str",
                    "bool",
                    "bytes"
                ],
                "_running": [
                    "int",
                    "List[int]"
                ],
                "_stopped": [
                    "int",
                    "List[str]",
                    "str"
                ],
                "_thread_ident": [
                    "str",
                    "int",
                    "bool",
                    "List[str]"
                ],
                "_timeouts": [
                    "int",
                    "List[int]"
                ],
                "due_timeouts": [
                    "Dict[str, List[int]]",
                    "Dict[str, str]",
                    "frozenset[str]",
                    "dict",
                    "List[int]",
                    "Counter[Any]"
                ],
                "event_pairs": [
                    "Dict[str, Any]",
                    "str"
                ],
                "events": [
                    "List[str]",
                    "Dict[str, str]",
                    "threading.Event",
                    "Dict[str, Union[Any, Any]]",
                    "Type[Dict[str, Any]]"
                ],
                "fd": [
                    "list",
                    "List[Tuple[str, bytes]]",
                    "Dict[str, List[Any]]"
                ],
                "fd_obj": [
                    "asyncio.transports.Transport"
                ],
                "handler_func": [],
                "ncallbacks": [
                    "int",
                    "float",
                    "Optional[str]"
                ],
                "now": [
                    "int",
                    "List[str]",
                    "List[int]",
                    "Tuple[int]",
                    "asyncio.futures.Future[Any]",
                    "float"
                ],
                "old_current": [
                    "str"
                ],
                "old_wakeup_fd": [
                    "int",
                    "set"
                ],
                "poll_timeout": [
                    "int",
                    "float"
                ],
                "timeout": [
                    "List[int]"
                ]
            }
        },
        "PollIOLoop.stop": {
            "name": "stop",
            "location": 1087,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_running": [
                    "Optional[BaseException]",
                    "str",
                    "int",
                    "bool"
                ],
                "_stopped": [
                    "bool",
                    "str",
                    "float",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "PollIOLoop.time": {
            "name": "time",
            "location": 1092,
            "return": [
                "int",
                "str",
                "float",
                "List[float]",
                "List[Tuple[Any, str, int]]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "PollIOLoop.call_at": {
            "name": "call_at",
            "location": 1095,
            "return": [
                "asyncio.Future",
                "str"
            ],
            "arguments": {
                "args": [],
                "callback": [
                    "List[int]",
                    "int",
                    "Union[str, List[str]]"
                ],
                "deadline": [
                    "List[int]",
                    "int",
                    "Union[str, List[str]]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "timeout": [
                    "int",
                    "Anaconda3.Lib.site-packages.astropy.time.core.TimeDelta"
                ]
            }
        },
        "PollIOLoop.remove_timeout": {
            "name": "remove_timeout",
            "location": 1103,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "timeout": [
                    "Optional[str]",
                    "str"
                ]
            },
            "variables": {
                "callback": [
                    "Type[Optional[Any]]",
                    "list",
                    "str"
                ]
            }
        },
        "PollIOLoop.add_callback": {
            "name": "add_callback",
            "location": 1112,
            "return": [],
            "arguments": {
                "args": [],
                "callback": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "PollIOLoop.add_callback_from_signal": {
            "name": "add_callback_from_signal",
            "location": 1128,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "callback": [
                    "list",
                    "Dict[str, Any]",
                    "Sequence[str]",
                    "logging.LogRecord"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "_Timeout.__init__": {
            "name": "__init__",
            "location": 1139,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "callback": [
                    "int",
                    "bool",
                    "Union[int, Tuple[int, int]]",
                    "Callable[[str], bool]"
                ],
                "deadline": [
                    "int",
                    "static_frame.core.util.PathSpecifier",
                    "Dict[str, Dict]",
                    "Optional[float]"
                ],
                "io_loop": [
                    "int",
                    "bool",
                    "Union[int, Tuple[int, int]]",
                    "Callable[[str], bool]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "callback": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ],
                "deadline": [
                    "int",
                    "Pattern[str]"
                ],
                "tdeadline": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ]
            }
        },
        "_Timeout.__lt__": {
            "name": "__lt__",
            "location": 1150,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "Tuple[float, float]",
                    "Type"
                ],
                "self": []
            },
            "variables": {}
        },
        "_Timeout.__le__": {
            "name": "__le__",
            "location": 1153,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "Tuple[float, float]",
                    "Type"
                ],
                "self": []
            },
            "variables": {}
        },
        "PeriodicCallback.__init__": {
            "name": "__init__",
            "location": 1172,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "callback": [
                    "int",
                    "float",
                    "str",
                    "Union[str, float]"
                ],
                "callback_time": [
                    "int",
                    "float",
                    "Optional[float]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_running": [
                    "Optional[BaseException]",
                    "str",
                    "int",
                    "bool"
                ],
                "_timeout": [
                    "int"
                ],
                "callback": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ],
                "callback_time": [
                    "List[int]",
                    "list",
                    "int",
                    "float"
                ]
            }
        },
        "PeriodicCallback.start": {
            "name": "start",
            "location": 1180,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_next_timeout": [
                    "int",
                    "float",
                    "str"
                ],
                "_running": [
                    "str",
                    "Dict[str, str]",
                    "int",
                    "Dict[str, Dict[str, Any]]"
                ],
                "io_loop": [
                    "float",
                    "int"
                ]
            }
        },
        "PeriodicCallback.stop": {
            "name": "stop",
            "location": 1190,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_running": [
                    "Optional[BaseException]",
                    "str",
                    "int",
                    "bool"
                ],
                "_timeout": [
                    "int",
                    "Optional[int]",
                    "Optional[float]"
                ]
            }
        },
        "PeriodicCallback.is_running": {
            "name": "is_running",
            "location": 1197,
            "return": [
                "bool",
                "list",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "PeriodicCallback._run": {
            "name": "_run",
            "location": 1204,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "PeriodicCallback._schedule_next": {
            "name": "_schedule_next",
            "location": 1214,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_timeout": [
                    "int",
                    "float"
                ]
            }
        },
        "PeriodicCallback._update_next": {
            "name": "_update_next",
            "location": 1219,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "current_time": [
                    "int",
                    "float",
                    "datetime.datetime",
                    "Optional[int]",
                    "Callable"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "callback_time_sec": [
                    "int",
                    "float",
                    "str",
                    "List[Optional[float]]"
                ]
            }
        },
        "global": {
            "ThreadPoolExecutor": [
                "list"
            ],
            "_POLL_TIMEOUT": [
                "int",
                "float",
                "threading.Timer"
            ],
            "asyncio": [
                "Optional[asyncio.events.AbstractEventLoop]",
                "Optional[object]"
            ],
            "signal": [
                "Optional[str]",
                "List[Optional[Any]]"
            ]
        }
    },
    "tornado-5.0.2/tornado/iostream.py": {
        "doctests": {
            "name": "doctests",
            "location": 1676,
            "return": [
                "bool",
                "int",
                "Optional[float]",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": []
            },
            "variables": {}
        },
        "StreamClosedError.__init__": {
            "name": "__init__",
            "location": 101,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "real_error": [
                    "str"
                ],
                "self": []
            },
            "variables": {
                "real_error": [
                    "str",
                    "int",
                    "Exception"
                ]
            }
        },
        "_StreamBuffer.__init__": {
            "name": "__init__",
            "location": 126,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_buffers": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ],
                "_first_pos": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ],
                "_size": [
                    "int",
                    "deque",
                    "str",
                    "Optional[str]",
                    "Any"
                ]
            }
        },
        "_StreamBuffer.__len__": {
            "name": "__len__",
            "location": 133,
            "return": [
                "int",
                "List[Tuple[int, float, float]]",
                "List[int]",
                "List[List[int]]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "_StreamBuffer.append": {
            "name": "append",
            "location": 140,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "data": [
                    "dict",
                    "int",
                    "List['PlotInfo']"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "b": [
                    "List[int]",
                    "List[float]",
                    "list"
                ],
                "data": [
                    "list",
                    "List[List[int]]",
                    "bytes",
                    "Dict[str, str]",
                    "List[int]"
                ],
                "is_memview": [
                    "int",
                    "float",
                    "Optional[int]",
                    "List[float]"
                ],
                "new_buf": [
                    "list",
                    "List[str]",
                    "Dict[str, Any]"
                ],
                "size": [
                    "int",
                    "List[str]"
                ]
            }
        },
        "_StreamBuffer.peek": {
            "name": "peek",
            "location": 162,
            "return": [
                "Union[bytes, bytearray]",
                "bytearray",
                "str",
                "BinaryIO"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "size": [
                    "int",
                    "Tuple[int, int]",
                    "List[float]",
                    "float"
                ]
            },
            "variables": {
                "b": [
                    "int",
                    "Set[str]",
                    "Final[int]",
                    "Dict[str, int]"
                ],
                "is_memview": [
                    "int",
                    "Optional[int]"
                ],
                "pos": [
                    "int",
                    "float",
                    "Dict[int, int]"
                ]
            }
        },
        "_StreamBuffer.advance": {
            "name": "advance",
            "location": 179,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "size": [
                    "int",
                    "Iterator[int]"
                ]
            },
            "variables": {
                "_first_pos": [
                    "str",
                    "int",
                    "Tuple[int, int, int]",
                    "Pattern[str]"
                ],
                "b": [
                    "int",
                    "list",
                    "float"
                ],
                "b_remain": [
                    "int",
                    "List[int]"
                ],
                "buffers": [
                    "int",
                    "float"
                ],
                "is_large": [
                    "bool",
                    "Set[str]",
                    "FrozenSet",
                    "str",
                    "list"
                ],
                "pos": [
                    "int",
                    "List[int]",
                    "tuple"
                ],
                "size": [
                    "int"
                ]
            }
        },
        "BaseIOStream.__init__": {
            "name": "__init__",
            "location": 228,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "max_buffer_size": [
                    "int",
                    "Tuple[int, int]"
                ],
                "max_write_buffer_size": [
                    "int",
                    "Union[None, int]"
                ],
                "read_chunk_size": [
                    "int",
                    "Union[Tuple[int, int], int]",
                    "Union[None, int]"
                ],
                "self": []
            },
            "variables": {
                "_after_user_read_buffer": [
                    "str",
                    "int",
                    "Type[str]",
                    "Dict[str, Dict[str, str]]"
                ],
                "_close_callback": [
                    "bool",
                    "int"
                ],
                "_closed": [
                    "dict",
                    "Set[str]"
                ],
                "_connect_callback": [
                    "List[int]",
                    "dict",
                    "Optional[List[str]]",
                    "int",
                    "Optional[str]"
                ],
                "_connect_future": [
                    "List[int]",
                    "dict",
                    "Optional[List[str]]",
                    "int",
                    "Optional[str]"
                ],
                "_connecting": [
                    "int",
                    "float"
                ],
                "_pending_callbacks": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ],
                "_read_buffer": [
                    "int",
                    "dict",
                    "float",
                    "Dict[str, Union[Any, Any, Any, Any]]",
                    "Tuple[Any, Any]",
                    "list"
                ],
                "_read_buffer_pos": [
                    "io.TextIOWrapper",
                    "list",
                    "Dict[bytes, str]"
                ],
                "_read_buffer_size": [
                    "int"
                ],
                "_read_bytes": [
                    "int",
                    "bytes"
                ],
                "_read_callback": [
                    "str"
                ],
                "_read_delimiter": [
                    "str"
                ],
                "_read_future": [
                    "str"
                ],
                "_read_max_bytes": [
                    "str",
                    "int",
                    "Final",
                    "List[int]"
                ],
                "_read_partial": [
                    "Dict[str, str]",
                    "List[str]",
                    "List[Tuple[int, int]]",
                    "str",
                    "Tuple[float, int]",
                    "int"
                ],
                "_read_regex": [
                    "str"
                ],
                "_read_until_close": [
                    "Dict[str, str]",
                    "List[str]",
                    "List[Tuple[int, int]]",
                    "str",
                    "Tuple[float, int]",
                    "int"
                ],
                "_ssl_connect_future": [
                    "str"
                ],
                "_state": [
                    "str",
                    "dict",
                    "Callable",
                    "Optional[str]"
                ],
                "_streaming_callback": [
                    "Dict[str, Any]",
                    "int",
                    "Tuple[Any, Dict[str, Any]]",
                    "str",
                    "bytes",
                    "IO[str]"
                ],
                "_total_write_done_index": [
                    "int"
                ],
                "_total_write_index": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ],
                "_user_read_buffer": [
                    "str",
                    "List[str]",
                    "Dict[Any, Dict[str, Any]]"
                ],
                "_write_buffer": [
                    "int",
                    "List[int]",
                    "Dict[str, Union[Any, Any, Any, Any]]",
                    "Tuple[Any, Any]",
                    "list"
                ],
                "_write_callback": [
                    "bool",
                    "int"
                ],
                "_write_futures": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ],
                "error": [
                    "int",
                    "str",
                    "bool"
                ],
                "io_loop": [
                    "int",
                    "List[str]",
                    "\"Point\"",
                    "float",
                    "str",
                    "Type[int]"
                ],
                "max_buffer_size": [
                    "int"
                ],
                "max_write_buffer_size": [
                    "int"
                ],
                "read_chunk_size": [
                    "int"
                ]
            }
        },
        "BaseIOStream.fileno": {
            "name": "fileno",
            "location": 286,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "BaseIOStream.close_fd": {
            "name": "close_fd",
            "location": 290,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "BaseIOStream.write_to_fd": {
            "name": "write_to_fd",
            "location": 298,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "data": [
                    "list",
                    "memoryview",
                    "bool",
                    "bytes",
                    "List[Dict]",
                    "Iterable[bytes]",
                    "Optional[bool]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "BaseIOStream.read_from_fd": {
            "name": "read_from_fd",
            "location": 305,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "buf": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "BaseIOStream.get_fd_error": {
            "name": "get_fd_error",
            "location": 320,
            "return": [
                "Optional[int]",
                "bool",
                "str",
                "Optional[Dict]",
                "dict"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "BaseIOStream.read_until_regex": {
            "name": "read_until_regex",
            "location": 330,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "callback": [
                    "str",
                    "Dict[str, Any]",
                    "bool"
                ],
                "kwargs": [],
                "max_bytes": [
                    "int",
                    "Tuple[int, int]",
                    "Union[int, float]"
                ],
                "regex": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "self": []
            },
            "variables": {
                "_read_max_bytes": [
                    "int"
                ],
                "_read_regex": [
                    "str"
                ],
                "future": [
                    "list",
                    "Tuple[Type[tuple], Type[list]]",
                    "Coroutine[Any, Any, None]"
                ]
            }
        },
        "BaseIOStream.read_until": {
            "name": "read_until",
            "location": 364,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "callback": [
                    "str",
                    "Dict[str, Any]",
                    "bool"
                ],
                "delimiter": [
                    "str",
                    "float",
                    "bool"
                ],
                "kwargs": [],
                "max_bytes": [
                    "int",
                    "Tuple[int, int]",
                    "Union[int, float]"
                ],
                "self": []
            },
            "variables": {
                "_read_delimiter": [
                    "io.TextIOWrapper",
                    "list",
                    "Dict[bytes, str]"
                ],
                "_read_max_bytes": [
                    "int"
                ],
                "future": [
                    "list",
                    "Tuple[Type[tuple], Type[list]]",
                    "Coroutine[Any, Any, None]"
                ]
            }
        },
        "BaseIOStream.read_bytes": {
            "name": "read_bytes",
            "location": 395,
            "return": [
                "int",
                "Iterable[Any]",
                "Dict[str, bool]"
            ],
            "arguments": {
                "args": [],
                "callback": [
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "float"
                ],
                "kwargs": [],
                "num_bytes": [
                    "int",
                    "Optional[int]",
                    "Union[str, int, float]",
                    "List[int]",
                    "float"
                ],
                "partial": [
                    "int",
                    "float",
                    "Union[str, float]"
                ],
                "self": [],
                "streaming_callback": [
                    "str",
                    "Optional[\"Address\"]",
                    "List[str]",
                    "bool",
                    "Optional[str]"
                ]
            },
            "variables": {
                "_read_bytes": [
                    "int",
                    "Dict[str, int]"
                ],
                "_read_partial": [
                    "io.TextIOWrapper",
                    "list",
                    "Dict[bytes, str]"
                ],
                "_streaming_callback": [
                    "str",
                    "TextIO",
                    "int",
                    "socket",
                    "deque"
                ],
                "future": [
                    "list",
                    "Tuple[Type[tuple], Type[list]]",
                    "Coroutine[Any, Any, None]"
                ]
            }
        },
        "BaseIOStream.read_into": {
            "name": "read_into",
            "location": 425,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "buf": [
                    "str",
                    "IO[str]",
                    "Dict[str, Any]"
                ],
                "callback": [
                    "bool",
                    "float",
                    "str",
                    "int"
                ],
                "kwargs": [],
                "partial": [
                    "int",
                    "Callable",
                    "str"
                ],
                "self": []
            },
            "variables": {
                "_after_user_read_buffer": [
                    "int",
                    "str",
                    "Set[int]"
                ],
                "_read_buffer": [
                    "int",
                    "io.BytesIO",
                    "Type[str]",
                    "io.BufferedReader"
                ],
                "_read_buffer_pos": [
                    "int",
                    "bool",
                    "float",
                    "TextIO",
                    "io.BufferedWriter"
                ],
                "_read_buffer_size": [
                    "int"
                ],
                "_read_bytes": [
                    "int",
                    "str",
                    "List[int]"
                ],
                "_read_partial": [
                    "io.TextIOWrapper",
                    "list",
                    "Dict[bytes, str]"
                ],
                "_user_read_buffer": [
                    "str",
                    "List[str]"
                ],
                "available_bytes": [
                    "int"
                ],
                "end": [
                    "int",
                    "io.BufferedWriter",
                    "bool",
                    "str",
                    "TextIO",
                    "float"
                ],
                "future": [
                    "list",
                    "Tuple[Type[tuple], Type[list]]",
                    "Coroutine[Any, Any, None]"
                ],
                "n": [
                    "int",
                    "os.terminal_size",
                    "Tuple[int, int]",
                    "List[int]"
                ]
            }
        },
        "BaseIOStream.read_until_close": {
            "name": "read_until_close",
            "location": 469,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "callback": [
                    "bool",
                    "float",
                    "str",
                    "int"
                ],
                "kwargs": [],
                "self": [],
                "streaming_callback": [
                    "IO",
                    "str",
                    "List[str]",
                    "bytes"
                ]
            },
            "variables": {
                "_read_until_close": [
                    "List[List[str]]",
                    "Dict[int, str]",
                    "Tuple[Literal, Literal]",
                    "Tuple[str, str]",
                    "Tuple[str, str, str, str, str]"
                ],
                "_streaming_callback": [
                    "T",
                    "bytes"
                ],
                "future": [
                    "list",
                    "Tuple[Type[tuple], Type[list]]",
                    "Coroutine[Any, Any, None]"
                ]
            }
        },
        "BaseIOStream.write": {
            "name": "write",
            "location": 505,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "callback": [
                    "Optional[bytes]",
                    "Union[bytes, str]"
                ],
                "data": [
                    "bytes",
                    "int",
                    "Tuple[int, int, bytearray]",
                    "list"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_write_callback": [
                    "int",
                    "float",
                    "str",
                    "Tuple[bytes, bytes]"
                ],
                "future": [
                    "list",
                    "dict"
                ]
            }
        },
        "BaseIOStream.set_close_callback": {
            "name": "set_close_callback",
            "location": 546,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "callback": [
                    "str",
                    "Iterable[str]",
                    "bool"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_close_callback": [
                    "int",
                    "float",
                    "str",
                    "Tuple[bytes, bytes]"
                ]
            }
        },
        "BaseIOStream.close": {
            "name": "close",
            "location": 556,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "exc_info": [
                    "List['PydanticModelField']"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_closed": [
                    "Optional[str]",
                    "int",
                    "str",
                    "Dict[Any, Dict[Any, str]]",
                    "Optional[List[str]]",
                    "dict"
                ],
                "_read_until_close": [
                    "int",
                    "str",
                    "list"
                ],
                "_state": [
                    "str",
                    "int",
                    "Union[Literal, str]",
                    "Callable"
                ],
                "error": [
                    "OSError",
                    "int",
                    "Dict[str, str]",
                    "str"
                ],
                "exc_info": [
                    "OrderedDict[str, Union[Any, Any]]",
                    "Union[dict, Dict[str, Any]]",
                    "str",
                    "OrderedDict[str, Union[Any, str]]",
                    "Union[dict, Dict[str, str]]"
                ]
            }
        },
        "BaseIOStream._maybe_run_close_callback": {
            "name": "_maybe_run_close_callback",
            "location": 586,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_close_callback": [
                    "Set[str]",
                    "Dict[Optional[str], str]",
                    "Type[Optional[Any]]",
                    "DefaultDict[Any, Set[Any]]",
                    "List[None]"
                ],
                "_connect_future": [
                    "list",
                    "float"
                ],
                "_read_callback": [
                    "str",
                    "int",
                    "Dict[str, int]"
                ],
                "_read_future": [
                    "dict",
                    "str",
                    "float",
                    "Optional[str]",
                    "int",
                    "Dict[str, str]"
                ],
                "_ssl_connect_future": [
                    "list",
                    "Dict[int, Tuple[int, int]]",
                    "set",
                    "Dict[str, Dict[str, Any]]",
                    "List[slice]"
                ],
                "_write_buffer": [
                    "int"
                ],
                "_write_callback": [
                    "str",
                    "int",
                    "Dict[str, int]"
                ],
                "cb": [
                    "str",
                    "int"
                ],
                "futures": [
                    "list"
                ]
            }
        },
        "BaseIOStream.reading": {
            "name": "reading",
            "location": 616,
            "return": [
                "bool",
                "dict"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "BaseIOStream.writing": {
            "name": "writing",
            "location": 620,
            "return": [
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "BaseIOStream.closed": {
            "name": "closed",
            "location": 624,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "BaseIOStream.set_nodelay": {
            "name": "set_nodelay",
            "location": 628,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "value": [
                    "bool",
                    "int",
                    "Optional[int]",
                    "Iterable[T]",
                    "bytes"
                ]
            },
            "variables": {}
        },
        "BaseIOStream._handle_events": {
            "name": "_handle_events",
            "location": 643,
            "return": [
                "int",
                "Iterable[Type]",
                "Callable"
            ],
            "arguments": {
                "args": [],
                "events": [
                    "int",
                    "Dict[str, Union[int, bool]]"
                ],
                "fd": [
                    "Union[int, tornado.ioloop._Selectable]",
                    "dict",
                    "Dict[str, Any]",
                    "Callable"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_state": [
                    "str",
                    "Dict[str, str]",
                    "list",
                    "Optional[str]"
                ],
                "error": [
                    "str",
                    "Dict[str, Any]",
                    "int",
                    "Union[Literal, str]",
                    "Union[Literal[True], str]"
                ],
                "state": [
                    "str",
                    "int",
                    "Dict[str, str]"
                ]
            }
        },
        "BaseIOStream.wrapper": {
            "name": "wrapper",
            "location": 697,
            "return": [
                "bool",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "BaseIOStream._run_callback": {
            "name": "_run_callback",
            "location": 696,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "callback": [
                    "str",
                    "bool"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "BaseIOStream._read_to_buffer_loop": {
            "name": "_read_to_buffer_loop",
            "location": 731,
            "return": [
                "int",
                "float",
                "List[str]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "next_find_pos": [
                    "int",
                    "TextIO",
                    "List[bool]",
                    "bool"
                ],
                "pos": [
                    "int",
                    "Dict[Any, List[str]]",
                    "float",
                    "str"
                ],
                "target_bytes": [
                    "int",
                    "bytes"
                ]
            }
        },
        "BaseIOStream._handle_read": {
            "name": "_handle_read",
            "location": 791,
            "return": [
                "Iterator"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "pos": [
                    "str",
                    "bool",
                    "int",
                    "dict",
                    "Pattern[str]"
                ]
            }
        },
        "BaseIOStream._set_read_callback": {
            "name": "_set_read_callback",
            "location": 806,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "args": [],
                "callback": [
                    "int",
                    "Optional[float]",
                    "Optional[int]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_read_callback": [
                    "int",
                    "Optional[int]",
                    "Type[str]",
                    "str",
                    "List[int]"
                ],
                "_read_future": [
                    "int",
                    "str",
                    "SupportsInt",
                    "Type[str]",
                    "Optional[int]"
                ]
            }
        },
        "BaseIOStream._run_read_callback": {
            "name": "_run_read_callback",
            "location": 815,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "size": [
                    "int"
                ],
                "streaming": [
                    "int",
                    "Optional[int]",
                    "Optional[str]"
                ]
            },
            "variables": {
                "_after_user_read_buffer": [
                    "str"
                ],
                "_read_buffer": [
                    "str",
                    "int",
                    "bool"
                ],
                "_read_buffer_pos": [
                    "io.TextIOWrapper",
                    "list",
                    "Dict[bytes, str]"
                ],
                "_read_buffer_size": [
                    "int",
                    "float"
                ],
                "_read_callback": [
                    "int",
                    "str",
                    "Tuple[int, int]"
                ],
                "_read_future": [
                    "Optional[int]",
                    "int",
                    "Type[object]"
                ],
                "_streaming_callback": [
                    "bytes",
                    "str",
                    "int"
                ],
                "_user_read_buffer": [
                    "str",
                    "List[str]"
                ],
                "callback": [
                    "str",
                    "List[str]",
                    "Dict[str, str]",
                    "Set[str]"
                ],
                "future": [
                    "str",
                    "List[str]"
                ],
                "result": [
                    "str",
                    "int",
                    "Union[bool, int]",
                    "Tuple[Any, Any]"
                ]
            }
        },
        "BaseIOStream._try_inline_read": {
            "name": "_try_inline_read",
            "location": 844,
            "return": [
                "Iterator"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "pos": [
                    "str",
                    "io.TextIOWrapper",
                    "pymatgen.io.vasp.inputs.Poscar",
                    "List[int]"
                ]
            }
        },
        "BaseIOStream._read_to_buffer": {
            "name": "_read_to_buffer",
            "location": 877,
            "return": [
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "buf": [
                    "int",
                    "TextIO",
                    "str"
                ],
                "bytes_read": [
                    "int",
                    "list"
                ]
            }
        },
        "BaseIOStream._run_streaming_callback": {
            "name": "_run_streaming_callback",
            "location": 923,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "bytes_to_consume": [
                    "int",
                    "List[bool]",
                    "bool",
                    "str"
                ]
            }
        },
        "BaseIOStream._read_from_buffer": {
            "name": "_read_from_buffer",
            "location": 931,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "pos": [
                    "int",
                    "Sequence[int]",
                    "bytes",
                    "dict"
                ],
                "self": []
            },
            "variables": {
                "_read_bytes": [
                    "int"
                ],
                "_read_delimiter": [
                    "int",
                    "str"
                ],
                "_read_partial": [
                    "Dict[str, str]",
                    "List[str]",
                    "List[Tuple[int, int]]",
                    "str",
                    "Tuple[float, int]",
                    "int"
                ],
                "_read_regex": [
                    "int",
                    "str"
                ]
            }
        },
        "BaseIOStream._find_read_pos": {
            "name": "_find_read_pos",
            "location": 941,
            "return": [
                "bool",
                "float",
                "Set[int]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "delimiter_len": [
                    "int",
                    "Type[int]"
                ],
                "loc": [
                    "int",
                    "io.BytesIO",
                    "List[Tuple[str, int]]",
                    "str"
                ],
                "m": [
                    "int",
                    "dict",
                    "List[float]",
                    "bytes",
                    "List[int]"
                ],
                "num_bytes": [
                    "int",
                    "Tuple[int, int]"
                ]
            }
        },
        "BaseIOStream._check_max_bytes": {
            "name": "_check_max_bytes",
            "location": 984,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "delimiter": [
                    "int",
                    "bytes",
                    "str",
                    "bytearray"
                ],
                "kwargs": [],
                "self": [],
                "size": [
                    "int",
                    "Optional[float]",
                    "Callable[[str], int]",
                    "Optional[bool]"
                ]
            },
            "variables": {}
        },
        "BaseIOStream._handle_write": {
            "name": "_handle_write",
            "location": 991,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_write_callback": [
                    "dict",
                    "int",
                    "bool",
                    "Union[int, str]",
                    "Dict[str, Any]"
                ],
                "callback": [
                    "str",
                    "int"
                ],
                "future": [
                    "Pattern[str]",
                    "int",
                    "Pattern[bytes]"
                ],
                "index": [
                    "Pattern[str]",
                    "tuple",
                    "str",
                    "list",
                    "List[int]",
                    "float",
                    "Tuple[int, Any]"
                ],
                "num_bytes": [
                    "int"
                ],
                "size": [
                    "int"
                ]
            }
        },
        "BaseIOStream._consume": {
            "name": "_consume",
            "location": 1037,
            "return": [
                "str",
                "int",
                "bytes"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "loc": [
                    "bytes",
                    "str",
                    "trezor.io.HID",
                    "BinaryIO"
                ],
                "self": []
            },
            "variables": {
                "_read_buffer_pos": [
                    "str",
                    "float",
                    "int"
                ],
                "b": [
                    "int",
                    "str",
                    "pymatgen.util.coord.Simplex"
                ]
            }
        },
        "BaseIOStream._check_closed": {
            "name": "_check_closed",
            "location": 1056,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "BaseIOStream._maybe_add_error_listener": {
            "name": "_maybe_add_error_listener",
            "location": 1060,
            "return": [
                "Pattern"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "BaseIOStream._add_io_state": {
            "name": "_add_io_state",
            "location": 1076,
            "return": [
                "list"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "state": [
                    "float",
                    "bool",
                    "bytes",
                    "Union[int, float]"
                ]
            },
            "variables": {
                "_state": [
                    "str",
                    "Dict[str, str]",
                    "List[str]"
                ]
            }
        },
        "BaseIOStream._is_connreset": {
            "name": "_is_connreset",
            "location": 1109,
            "return": [],
            "arguments": {
                "args": [],
                "exc": [
                    "BaseException",
                    "Exception"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "IOStream.__init__": {
            "name": "__init__",
            "location": 1166,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "socket": [
                    "int",
                    "str"
                ]
            },
            "variables": {
                "socket": [
                    "str",
                    "List[Tuple[str, str, Any]]",
                    "int",
                    "Type[str]",
                    "bytes",
                    "Pattern[str]"
                ]
            }
        },
        "IOStream.fileno": {
            "name": "fileno",
            "location": 1171,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "IOStream.close_fd": {
            "name": "close_fd",
            "location": 1174,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "socket": [
                    "str",
                    "int"
                ]
            }
        },
        "IOStream.get_fd_error": {
            "name": "get_fd_error",
            "location": 1178,
            "return": [
                "str",
                "Callable",
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "errno": [
                    "io.StringIO",
                    "TextIO",
                    "pymatgen.io.lobster.inputs.Lobsterin",
                    "io.BufferedWriter",
                    "io.TextIOWrapper",
                    "pymatgen.io.vasp.outputs.Wavecar"
                ]
            }
        },
        "IOStream.read_from_fd": {
            "name": "read_from_fd",
            "location": 1183,
            "return": [
                "str",
                "Optional[str]",
                "Exception",
                "float"
            ],
            "arguments": {
                "args": [],
                "buf": [
                    "int"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "buf": [
                    "int",
                    "TextIO",
                    "dict",
                    "memoryview"
                ]
            }
        },
        "IOStream.write_to_fd": {
            "name": "write_to_fd",
            "location": 1194,
            "return": [
                "int",
                "bool",
                "str",
                "dict"
            ],
            "arguments": {
                "args": [],
                "data": [
                    "str",
                    "dict",
                    "Optional[Exception]",
                    "Optional[bool]",
                    "Iterable",
                    "type",
                    "Collection[str]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "IOStream.connect": {
            "name": "connect",
            "location": 1202,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "address": [
                    "int",
                    "Callable",
                    "str"
                ],
                "args": [],
                "callback": [
                    "int",
                    "float"
                ],
                "kwargs": [],
                "self": [],
                "server_hostname": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            },
            "variables": {
                "_connect_callback": [
                    "TextIO",
                    "str",
                    "deque",
                    "Type[Callable[[None], Any]]"
                ],
                "_connect_future": [
                    "int",
                    "List[List[Any]]",
                    "Dict[str, Dict[str, str]]"
                ],
                "_connecting": [
                    "str",
                    "bool"
                ],
                "future": [
                    "str",
                    "Optional[str]",
                    "Optional[Callable[..., Any]]",
                    "Optional[asyncio.Future]",
                    "int",
                    "Optional[Callable[Any, Any]]",
                    "Optional[Callable[[Any], Any]]"
                ]
            }
        },
        "IOStream.close_callback": {
            "name": "close_callback",
            "location": 1331,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "IOStream.start_tls": {
            "name": "start_tls",
            "location": 1267,
            "return": [
                "int",
                "Tuple[str, str]",
                "str",
                "list"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "server_hostname": [
                    "str",
                    "dict",
                    "float"
                ],
                "server_side": [
                    "str",
                    "dict",
                    "float"
                ],
                "ssl_options": [
                    "str",
                    "dict",
                    "float"
                ]
            },
            "variables": {
                "_close_callback": [
                    "str",
                    "List[str]",
                    "int",
                    "Dict[str, List[Any]]",
                    "Tuple[str, str, str, str, str, str, str, str]"
                ],
                "_ssl_connect_callback": [
                    "int",
                    "List[str]",
                    "list",
                    "frozenset[str]",
                    "Dict[str, Tuple[str, bool]]",
                    "Optional[str]",
                    "str"
                ],
                "future": [
                    "int",
                    "List[str]",
                    "list",
                    "frozenset[str]",
                    "Dict[str, Tuple[str, bool]]",
                    "Optional[str]",
                    "str"
                ],
                "max_buffer_size": [
                    "int"
                ],
                "orig_close_callback": [
                    "str",
                    "List[str]",
                    "int",
                    "Dict[str, List[Any]]",
                    "Tuple[str, str, str, str, str, str, str, str]"
                ],
                "read_chunk_size": [
                    "int",
                    "float"
                ],
                "socket": [
                    "str",
                    "List[str]",
                    "int",
                    "Dict[str, List[Any]]",
                    "Tuple[str, str, str, str, str, str, str, str]"
                ],
                "ssl_options": [
                    "List[str]",
                    "List[Tuple[str, str]]",
                    "List[Union[Any, Any, Any]]",
                    "list",
                    "List[int]",
                    "List[Dict[str, Any]]",
                    "Dict[int, str]"
                ],
                "ssl_stream": [
                    "qutebrowser.utils.log.ColoredFormatter",
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "IOStream._handle_connect": {
            "name": "_handle_connect",
            "location": 1351,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_connect_callback": [
                    "int",
                    "str",
                    "Tuple[str, str, str, str, str]",
                    "Tuple[str, str, str]"
                ],
                "_connect_future": [
                    "str",
                    "dict",
                    "Type[str]",
                    "Optional[int]",
                    "List[Tuple[int]]",
                    "Tuple[str, str, str, str, str]",
                    "Tuple[str, str, str]"
                ],
                "_connecting": [
                    "int",
                    "float"
                ],
                "callback": [
                    "str"
                ],
                "err": [
                    "pymatgen.io.vasp.outputs.Vasprun",
                    "pymatgen.io.vasp.outputs.Wavecar",
                    "pymatgen.io.lobster.inputs.Lobsterin",
                    "io.StringIO",
                    "pymatgen.io.vasp.inputs.Incar"
                ],
                "error": [
                    "str",
                    "list"
                ],
                "future": [
                    "int",
                    "Dict[str, str]",
                    "List[str]",
                    "Type[Mapping[str, str]]"
                ]
            }
        },
        "IOStream.set_nodelay": {
            "name": "set_nodelay",
            "location": 1374,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "value": [
                    "int",
                    "str"
                ]
            },
            "variables": {}
        },
        "SSLIOStream.__init__": {
            "name": "__init__",
            "location": 1399,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_handshake_reading": [
                    "List[str]",
                    "str",
                    "Set[str]",
                    "int"
                ],
                "_handshake_writing": [
                    "List[str]",
                    "str",
                    "Set[str]",
                    "int"
                ],
                "_server_hostname": [
                    "bool",
                    "int"
                ],
                "_ssl_accepting": [
                    "str",
                    "bool"
                ],
                "_ssl_connect_callback": [
                    "str"
                ],
                "_ssl_options": [
                    "dict",
                    "Dict[str, Any]",
                    "Set[str]",
                    "list",
                    "Dict[str, Literal]",
                    "Dict[str, Dict[str, Any]]"
                ]
            }
        },
        "SSLIOStream.reading": {
            "name": "reading",
            "location": 1423,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "SSLIOStream.writing": {
            "name": "writing",
            "location": 1426,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "SSLIOStream._do_ssl_handshake": {
            "name": "_do_ssl_handshake",
            "location": 1429,
            "return": [],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_handshake_reading": [
                    "int",
                    "float",
                    "list",
                    "List[Callable[[], bool]]",
                    "str"
                ],
                "_handshake_writing": [
                    "int",
                    "float",
                    "list",
                    "List[Callable[[], bool]]",
                    "str"
                ],
                "_ssl_accepting": [
                    "List[str]",
                    "str",
                    "Set[str]",
                    "int"
                ],
                "peer": [
                    "int",
                    "str",
                    "dict",
                    "float"
                ]
            }
        },
        "SSLIOStream._run_ssl_connect_callback": {
            "name": "_run_ssl_connect_callback",
            "location": 1475,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_ssl_connect_callback": [
                    "Dict[Optional[str], str]",
                    "int",
                    "Type[Optional[Any]]",
                    "Set[str]"
                ],
                "_ssl_connect_future": [
                    "str"
                ],
                "callback": [
                    "str"
                ],
                "future": [
                    "Generator[Any, None, None]",
                    "int",
                    "Tuple[Literal, Literal]",
                    "Tuple[Literal, Literal, Literal, Literal, Literal]",
                    "Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]",
                    "str",
                    "Set[str]"
                ]
            }
        },
        "SSLIOStream._verify_cert": {
            "name": "_verify_cert",
            "location": 1485,
            "return": [
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "peercert": [
                    "int",
                    "List[int]",
                    "bool"
                ],
                "self": []
            },
            "variables": {
                "cert": [
                    "int",
                    "Optional[int]",
                    "Type[str]",
                    "str",
                    "SupportsInt"
                ],
                "verify_mode": [
                    "str"
                ]
            }
        },
        "SSLIOStream._handle_read": {
            "name": "_handle_read",
            "location": 1512,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "SSLIOStream._handle_write": {
            "name": "_handle_write",
            "location": 1518,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "SSLIOStream.connect": {
            "name": "connect",
            "location": 1524,
            "return": [
                "bool",
                "str",
                "Optional[int]",
                "Optional[bool]"
            ],
            "arguments": {
                "address": [
                    "bool",
                    "str"
                ],
                "args": [],
                "callback": [
                    "List[int]",
                    "Optional[str]",
                    "int"
                ],
                "kwargs": [],
                "self": [],
                "server_hostname": [
                    "int",
                    "Callable",
                    "str"
                ]
            },
            "variables": {
                "_server_hostname": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ]
            }
        },
        "SSLIOStream._handle_connect": {
            "name": "_handle_connect",
            "location": 1531,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_state": [
                    "int",
                    "str",
                    "float"
                ],
                "old_state": [
                    "int",
                    "list",
                    "Tuple[Any, Any, Any]"
                ],
                "socket": [
                    "int",
                    "str"
                ]
            }
        },
        "SSLIOStream.wait_for_handshake": {
            "name": "wait_for_handshake",
            "location": 1554,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "args": [],
                "callback": [
                    "Optional[float]",
                    "List[str]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_ssl_connect_callback": [
                    "str",
                    "list",
                    "dict",
                    "platform.Any"
                ],
                "_ssl_connect_future": [
                    "int",
                    "set",
                    "str",
                    "Union[None, float, int]",
                    "list",
                    "float",
                    "platform.Any",
                    "Generator[int, None, None]",
                    "Optional[int]"
                ],
                "future": [
                    "int",
                    "Optional[int]",
                    "List[Tuple[int]]",
                    "list"
                ]
            }
        },
        "SSLIOStream.write_to_fd": {
            "name": "write_to_fd",
            "location": 1585,
            "return": [
                "int",
                "bool",
                "str",
                "dict"
            ],
            "arguments": {
                "args": [],
                "data": [
                    "str",
                    "dict",
                    "Optional[Exception]",
                    "Optional[bool]",
                    "Iterable",
                    "type",
                    "Collection[str]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "SSLIOStream.read_from_fd": {
            "name": "read_from_fd",
            "location": 1603,
            "return": [
                "Optional[bool]",
                "Optional[str]",
                "str",
                "Optional[float]",
                "bool"
            ],
            "arguments": {
                "args": [],
                "buf": [
                    "int"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "buf": [
                    "int",
                    "TextIO",
                    "dict",
                    "memoryview"
                ]
            }
        },
        "SSLIOStream._is_connreset": {
            "name": "_is_connreset",
            "location": 1627,
            "return": [
                "bool"
            ],
            "arguments": {
                "args": [],
                "e": [
                    "BaseException",
                    "Callable",
                    "str"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "PipeIOStream.__init__": {
            "name": "__init__",
            "location": 1641,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "fd": [
                    "str",
                    "io.StringIO",
                    "bytes",
                    "int"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_fio": [
                    "str",
                    "Dict[int, List[int]]",
                    "float"
                ],
                "fd": [
                    "Dict[str, int]",
                    "int",
                    "str"
                ]
            }
        },
        "PipeIOStream.fileno": {
            "name": "fileno",
            "location": 1647,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "PipeIOStream.close_fd": {
            "name": "close_fd",
            "location": 1650,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "PipeIOStream.write_to_fd": {
            "name": "write_to_fd",
            "location": 1653,
            "return": [
                "str",
                "allennlp.common.util.JsonDict"
            ],
            "arguments": {
                "args": [],
                "data": [
                    "int",
                    "bytes",
                    "float"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "PipeIOStream.read_from_fd": {
            "name": "read_from_fd",
            "location": 1661,
            "return": [
                "Optional[bool]",
                "Optional[int]",
                "bool",
                "list",
                "Optional[float]"
            ],
            "arguments": {
                "args": [],
                "buf": [
                    "int"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "buf": [
                    "str",
                    "Callable",
                    "float",
                    "dict"
                ]
            }
        },
        "global": {
            "_ERRNO_CONNRESET": [
                "Tuple[int, int, int, int]"
            ],
            "_ERRNO_INPROGRESS": [
                "Tuple[int]",
                "str",
                "int"
            ],
            "_ERRNO_WOULDBLOCK": [
                "Tuple[int, int]",
                "list",
                "Dict[str, Union[Any, Any]]",
                "frozenset[int]",
                "Dict[Any, int]"
            ],
            "_WINDOWS": [
                "bool",
                "Dict[str, List[str]]",
                "str",
                "List[Tuple[str, Any]]",
                "List[Tuple[Any, Any, Any]]"
            ],
            "_set_nonblocking": [
                "List[str]",
                "Type[set]",
                "bool",
                "Optional[str]",
                "str",
                "int"
            ],
            "ssl": [
                "str",
                "dict",
                "list",
                "Union[bytes, str]"
            ]
        }
    },
    "tornado-5.0.2/tornado/locks.py": {
        "_TimeoutGarbageCollector.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_timeouts": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ],
                "_waiters": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ]
            }
        },
        "_TimeoutGarbageCollector._garbage_collect": {
            "name": "_garbage_collect",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_timeouts": [
                    "str",
                    "int",
                    "List[str]",
                    "Tuple[Literal, Literal]"
                ],
                "_waiters": []
            }
        },
        "Condition.__init__": {
            "name": "__init__",
            "location": 111,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "io_loop": [
                    "int",
                    "List[str]",
                    "\"Point\"",
                    "float",
                    "str",
                    "Type[int]"
                ]
            }
        },
        "Condition.__repr__": {
            "name": "__repr__",
            "location": 115,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "result": [
                    "List[int]",
                    "int",
                    "str",
                    "Dict[int, Any]",
                    "set",
                    "list"
                ]
            }
        },
        "Condition.on_timeout": {
            "name": "on_timeout",
            "location": 130,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Condition.wait": {
            "name": "wait",
            "location": 121,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "timeout": [
                    "int",
                    "Optional[float]",
                    "Union[int, float]"
                ]
            },
            "variables": {
                "io_loop": [
                    "int"
                ],
                "timeout_handle": [
                    "int",
                    "Tuple[float, float, float]"
                ],
                "waiter": [
                    "tornado.websockeWebSocketClientConnection"
                ]
            }
        },
        "Condition.notify": {
            "name": "notify",
            "location": 140,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "n": [
                    "int"
                ],
                "self": []
            },
            "variables": {
                "waiter": [
                    "List[Tuple[int, int, int, int, int, int]]",
                    "int",
                    "Dict[str, Any]"
                ],
                "waiters": [
                    "list",
                    "Generator[Any, None, None]",
                    "List[Tuple[int, int]]",
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "Condition.notify_all": {
            "name": "notify_all",
            "location": 152,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Event.__init__": {
            "name": "__init__",
            "location": 199,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_value": [
                    "str",
                    "property",
                    "Dict[int, str]",
                    "float"
                ],
                "_waiters": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ]
            }
        },
        "Event.__repr__": {
            "name": "__repr__",
            "location": 203,
            "return": [
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Event.is_set": {
            "name": "is_set",
            "location": 207,
            "return": [
                "str",
                "list"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Event.set": {
            "name": "set",
            "location": 211,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_value": [
                    "Tuple[str, Any]",
                    "Tuple[str]",
                    "Tuple[str, Any, int]",
                    "Tuple[str, str, str, str, str, str, str, str, str]",
                    "MutableMapping[Any, Any]",
                    "List[Type[Any]]"
                ]
            }
        },
        "Event.clear": {
            "name": "clear",
            "location": 223,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_value": [
                    "str",
                    "property",
                    "Dict[int, str]",
                    "float"
                ]
            }
        },
        "Event.wait": {
            "name": "wait",
            "location": 230,
            "return": [
                "str",
                "bytes",
                "float"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "timeout": [
                    "int",
                    "Optional[int]",
                    "str",
                    "Optional[Dict]"
                ]
            },
            "variables": {
                "fut": [
                    "Type[Dict[str, Any]]",
                    "Type[Dict[str, str]]",
                    "Type[Tuple[Any, Any]]",
                    "Type[List[Any]]",
                    "Type[Tuple[str, int]]",
                    "str"
                ],
                "timeout_fut": [
                    "int",
                    "float"
                ]
            }
        },
        "_ReleasingContextManager.__init__": {
            "name": "__init__",
            "location": 261,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "obj": [
                    "int",
                    "bool",
                    "float"
                ],
                "self": []
            },
            "variables": {
                "_obj": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ]
            }
        },
        "_ReleasingContextManager.__enter__": {
            "name": "__enter__",
            "location": 264,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "_ReleasingContextManager.__exit__": {
            "name": "__exit__",
            "location": 267,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "exc_tb": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "exc_type": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "exc_val": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Semaphore.__init__": {
            "name": "__init__",
            "location": 368,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "value": [
                    "float",
                    "str",
                    "int",
                    "T"
                ]
            },
            "variables": {
                "_value": [
                    "Union[dict, str]",
                    "Union[float, int]",
                    "float",
                    "List[int]",
                    "list",
                    "str"
                ]
            }
        },
        "Semaphore.__repr__": {
            "name": "__repr__",
            "location": 375,
            "return": [
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "extra": [
                    "str",
                    "Dict[str, float]",
                    "dict"
                ],
                "res": [
                    "Pattern[str]",
                    "list",
                    "str",
                    "int"
                ]
            }
        },
        "Semaphore.release": {
            "name": "release",
            "location": 383,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "waiter": [
                    "str",
                    "bool",
                    "Dict[str, Union[Any, Any]]"
                ]
            }
        },
        "Semaphore.on_timeout": {
            "name": "on_timeout",
            "location": 413,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Semaphore.acquire": {
            "name": "acquire",
            "location": 400,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "timeout": [
                    "int",
                    "Optional[float]",
                    "Union[int, float]"
                ]
            },
            "variables": {
                "io_loop": [
                    "int"
                ],
                "timeout_handle": [
                    "int",
                    "Tuple[float, float, float]"
                ],
                "waiter": [
                    "tornado.websockeWebSocketClientConnection"
                ]
            }
        },
        "Semaphore.__enter__": {
            "name": "__enter__",
            "location": 423,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Semaphore.__aenter__": {
            "name": "__aenter__",
            "location": 431,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Semaphore.__aexit__": {
            "name": "__aexit__",
            "location": 435,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "tb": [
                    "Optional[BaseException]",
                    "Callable[[str, object], None]",
                    "Iterable[float]",
                    "bool"
                ],
                "typ": [
                    "Optional[BaseException]",
                    "Callable[[str, object], None]",
                    "Iterable[float]",
                    "bool"
                ],
                "value": [
                    "Optional[BaseException]",
                    "Callable[[str, object], None]",
                    "Iterable[float]",
                    "bool"
                ]
            },
            "variables": {}
        },
        "BoundedSemaphore.__init__": {
            "name": "__init__",
            "location": 447,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "value": [
                    "Dict[str, Any]",
                    "Optional['Value']",
                    "Optional[str]"
                ]
            },
            "variables": {
                "_initial_value": [
                    "int",
                    "list",
                    "List[str]"
                ]
            }
        },
        "BoundedSemaphore.release": {
            "name": "release",
            "location": 451,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Lock.__init__": {
            "name": "__init__",
            "location": 496,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_block": [
                    "int",
                    "List[None]",
                    "T",
                    "List[int]",
                    "str"
                ]
            }
        },
        "Lock.__repr__": {
            "name": "__repr__",
            "location": 499,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Lock.acquire": {
            "name": "acquire",
            "location": 504,
            "return": [
                "Sequence['cirq.Qid']",
                "float"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "timeout": [
                    "float",
                    "Optional[float]",
                    "int",
                    "bool",
                    "Union[int, float]"
                ]
            },
            "variables": {}
        },
        "Lock.release": {
            "name": "release",
            "location": 512,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Lock.__enter__": {
            "name": "__enter__",
            "location": 524,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Lock.__aenter__": {
            "name": "__aenter__",
            "location": 531,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Lock.__aexit__": {
            "name": "__aexit__",
            "location": 535,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "tb": [
                    "Optional[BaseException]",
                    "Callable[[str, object], None]",
                    "Iterable[float]",
                    "bool"
                ],
                "typ": [
                    "Optional[BaseException]",
                    "Callable[[str, object], None]",
                    "Iterable[float]",
                    "bool"
                ],
                "value": [
                    "Optional[BaseException]",
                    "Callable[[str, object], None]",
                    "Iterable[float]",
                    "bool"
                ]
            },
            "variables": {}
        },
        "global": {
            "__all__": [
                "List[str]",
                "Tuple[str]",
                "Tuple[str, str, str]"
            ]
        }
    },
    "tornado-5.0.2/tornado/log.py": {
        "_stderr_supports_color": {
            "name": "_stderr_supports_color",
            "location": 55,
            "return": [
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": []
            },
            "variables": {}
        },
        "_safe_unicode": {
            "name": "_safe_unicode",
            "location": 73,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "s": [
                    "str",
                    "bytes",
                    "Optional[str]",
                    "Set[int]"
                ]
            },
            "variables": {}
        },
        "enable_pretty_logging": {
            "name": "enable_pretty_logging",
            "location": 208,
            "return": [
                "Iterable[Hashable]",
                "Iterable[T]",
                "list",
                "str",
                "List[str]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "logger": [
                    "logging.Logger",
                    "Type",
                    "Exception",
                    "bool"
                ],
                "options": [
                    "str",
                    "Optional[str]",
                    "Callable"
                ]
            },
            "variables": {
                "channel": [
                    "logging.StreamHandler",
                    "logging.handlers.RotatingFileHandler",
                    "logging.Logger",
                    "ValueError"
                ],
                "error_message": [
                    "str"
                ],
                "logger": [
                    "logging.Logger"
                ],
                "options": [
                    "str",
                    "Dict[str, str]",
                    "Dict[str, Union[float, str]]",
                    "Tuple[str, str, str, str, str]",
                    "Dict[str, dict]",
                    "Dict[str, Dict[str, Any]]"
                ],
                "rotate_mode": [
                    "int",
                    "str",
                    "bool",
                    "float"
                ]
            }
        },
        "define_logging_options": {
            "name": "define_logging_options",
            "location": 250,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "options": [
                    "Optional[str]",
                    "MutableMapping[str, Any]",
                    "Callable"
                ]
            },
            "variables": {
                "options": [
                    "Optional[Mapping[str, Any]]",
                    "Union[Dict[str, Any], tuple[Any]]",
                    "Optional[Dict[str, Any]]",
                    "Optional[Dict[str, str]]",
                    "Optional[List[Any]]",
                    "Optional[str]"
                ]
            }
        },
        "LogFormatter.__init__": {
            "name": "__init__",
            "location": 114,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "color": [
                    "str",
                    "bool",
                    "Sequence"
                ],
                "colors": [
                    "List[str]",
                    "dict"
                ],
                "datefmt": [
                    "str",
                    "dict"
                ],
                "fmt": [
                    "str",
                    "bool",
                    "Sequence"
                ],
                "kwargs": [],
                "self": [],
                "style": [
                    "List[Dict[str, Any]]",
                    "bool",
                    "str",
                    "Callable[[List], List[str]]"
                ]
            },
            "variables": {
                "_colors": [
                    "int",
                    "Dict[int, Any]",
                    "str"
                ],
                "_fmt": [
                    "str"
                ],
                "_normal": [
                    "str",
                    "Dict[str, Union[Any, Any, Any]]",
                    "Set[str]",
                    "Dict[str, str]",
                    "Dict[str, Union[Any, bool, str]]"
                ],
                "fg_color": []
            }
        },
        "LogFormatter.format": {
            "name": "format",
            "location": 161,
            "return": [
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "record": [
                    "str",
                    "dict",
                    "Optional[str]"
                ],
                "self": []
            },
            "variables": {
                "asctime": [
                    "str",
                    "List[str]",
                    "bool",
                    "int",
                    "Union[Literal, Literal]"
                ],
                "color": [
                    "int"
                ],
                "end_color": [
                    "int",
                    "Dict[str, Tuple[str, str]]"
                ],
                "exc_text": [
                    "str"
                ],
                "formatted": [
                    "str",
                    "List[str]",
                    "dict",
                    "List[Tuple[str, Any]]"
                ],
                "lines": [
                    "str",
                    "bytes"
                ],
                "message": [
                    "Dict[str, Union[Any, Any]]",
                    "str"
                ]
            }
        },
        "global": {
            "access_log": [
                "int",
                "bool",
                "str"
            ],
            "app_log": [
                "logging.Logger",
                "staticmethod",
                "List[List[str]]",
                "Optional[bytes]"
            ],
            "colorama": [
                "Set[str]",
                "str",
                "List[Dict[str, Any]]",
                "int"
            ],
            "curses": [],
            "gen_log": [
                "int",
                "str",
                "bool",
                "Tuple[str, str, str, str]",
                "logging.Logger",
                "Dict[str, Any]"
            ]
        }
    },
    "tornado-5.0.2/tornado/netutil.py": {
        "bind_sockets": {
            "name": "bind_sockets",
            "location": 80,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "address": [
                    "Optional[int]",
                    "int"
                ],
                "args": [],
                "backlog": [
                    "int",
                    "Optional[Collection[int]]",
                    "float",
                    "bool",
                    "Optional[float]",
                    "str"
                ],
                "family": [
                    "int"
                ],
                "flags": [
                    "Optional[dict]",
                    "int",
                    "Optional[int]"
                ],
                "kwargs": [],
                "port": [
                    "int",
                    "str",
                    "Optional[int]",
                    "float"
                ],
                "reuse_port": [
                    "bool",
                    "Dict[str, Any]"
                ]
            },
            "variables": {
                "address": [
                    "Type[str]",
                    "int",
                    "Optional[int]",
                    "List[int]"
                ],
                "af": [
                    "int",
                    "str"
                ],
                "bound_port": [
                    "str",
                    "Tuple[Literal, Literal]",
                    "Optional[str]",
                    "bool",
                    "List[None]",
                    "Union[None, bytes, str]"
                ],
                "canonname": [
                    "int",
                    "Dict[str, int]",
                    "Tuple[int, int, int]"
                ],
                "family": [],
                "flags": [
                    "sys._version_info",
                    "int",
                    "ImportError",
                    "Tuple[int]"
                ],
                "host": [
                    "str",
                    "int",
                    "dict",
                    "bool",
                    "float"
                ],
                "proto": [
                    "int"
                ],
                "requested_port": [
                    "int",
                    "str",
                    "List[int]"
                ],
                "sock": [
                    "int"
                ],
                "sockaddr": [
                    "str",
                    "List[int]",
                    "int",
                    "dict"
                ],
                "sockets": [
                    "list",
                    "Generator[Any, None, None]",
                    "List[Tuple[int, int]]",
                    "str",
                    "float",
                    "int"
                ],
                "socktype": [
                    "int"
                ]
            }
        },
        "bind_unix_socket": {
            "name": "bind_unix_socket",
            "location": 171,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "backlog": [
                    "int",
                    "List[str]"
                ],
                "file": [
                    "str",
                    "BinaryIO",
                    "IO[str]",
                    "IO",
                    "IO[Any]"
                ],
                "kwargs": [],
                "mode": [
                    "int",
                    "bool",
                    "str",
                    "Dict[str, bool]"
                ]
            },
            "variables": {
                "sock": [],
                "st": [
                    "os.stat_result",
                    "bytes"
                ]
            }
        },
        "accept_handler": {
            "name": "accept_handler",
            "location": 222,
            "return": [
                "Iterator"
            ],
            "arguments": {
                "args": [],
                "events": [
                    "str",
                    "int",
                    "List[Dict[str, Any]]"
                ],
                "fd": [
                    "str",
                    "int",
                    "List[Dict[str, Any]]"
                ],
                "kwargs": []
            },
            "variables": {
                "address": [
                    "int"
                ],
                "connection": [
                    "str"
                ]
            }
        },
        "remove_handler": {
            "name": "remove_handler",
            "location": 254,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": []
            },
            "variables": {}
        },
        "add_accept_handler": {
            "name": "add_accept_handler",
            "location": 201,
            "return": [
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "args": [],
                "callback": [
                    "str",
                    "bytes",
                    "List[str]"
                ],
                "kwargs": [],
                "sock": [
                    "int"
                ]
            },
            "variables": {
                "io_loop": [
                    "Dict[str, str]"
                ],
                "removed": [
                    "str",
                    "List[str]",
                    "int",
                    "Dict[str, List[Any]]",
                    "Tuple[str, str, str, str, str, str, str, str]"
                ]
            }
        },
        "is_valid_ip": {
            "name": "is_valid_ip",
            "location": 262,
            "return": [
                "bool"
            ],
            "arguments": {
                "args": [],
                "ip": [
                    "int",
                    "str",
                    "bytes"
                ],
                "kwargs": []
            },
            "variables": {
                "res": [
                    "int",
                    "str"
                ]
            }
        },
        "_resolve_addr": {
            "name": "_resolve_addr",
            "location": 343,
            "return": [
                "deoplete.util.UserContext",
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "args": [],
                "family": [
                    "str",
                    "BinaryIO",
                    "int"
                ],
                "host": [
                    "int",
                    "dict",
                    "bool",
                    "str"
                ],
                "kwargs": [],
                "port": [
                    "int",
                    "dict",
                    "bool",
                    "str"
                ]
            },
            "variables": {
                "addrinfo": [
                    "int",
                    "str",
                    "Tuple[str, int]"
                ],
                "results": [
                    "list",
                    "str",
                    "Dict[str, Any]",
                    "List[str]"
                ]
            }
        },
        "ssl_options_to_context": {
            "name": "ssl_options_to_context",
            "location": 506,
            "return": [
                "Optional[Any]",
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "ssl_options": [
                    "Union[Dict[str, Any], ssl.SSLContext]",
                    "str",
                    "dict"
                ]
            },
            "variables": {
                "context": [
                    "str",
                    "int",
                    "dict",
                    "List[str]"
                ],
                "verify_mode": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "ssl_wrap_socket": {
            "name": "ssl_wrap_socket",
            "location": 542,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "server_hostname": [
                    "str",
                    "bool",
                    "Iterable[T]",
                    "int"
                ],
                "socket": [
                    "str",
                    "Optional[str]",
                    "Iterable[T]",
                    "int"
                ],
                "ssl_options": [
                    "Union[Dict[str, Any], ssl.SSLContext]",
                    "bool",
                    "str"
                ]
            },
            "variables": {
                "context": []
            }
        },
        "Resolver.configurable_base": {
            "name": "configurable_base",
            "location": 307,
            "return": [
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "args": [],
                "cls": [
                    "bool",
                    "List[int]",
                    "str",
                    "Callable[[Any], T]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Resolver.configurable_default": {
            "name": "configurable_default",
            "location": 311,
            "return": [
                "list",
                "Dict[str, Dict[str, int]]",
                "bool",
                "str"
            ],
            "arguments": {
                "args": [],
                "cls": [
                    "bool",
                    "str",
                    "Type",
                    "List[dict]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Resolver.resolve": {
            "name": "resolve",
            "location": 314,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "callback": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "family": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "host": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "kwargs": [],
                "port": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "self": []
            },
            "variables": {}
        },
        "Resolver.close": {
            "name": "close",
            "location": 334,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "DefaultExecutorResolver.resolve": {
            "name": "resolve",
            "location": 362,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "family": [
                    "Optional[str]",
                    "List[int]",
                    "str"
                ],
                "host": [
                    "Optional[str]",
                    "List[int]",
                    "str"
                ],
                "kwargs": [],
                "port": [
                    "Optional[str]",
                    "List[int]",
                    "str"
                ],
                "self": []
            },
            "variables": {
                "result": [
                    "list",
                    "int",
                    "List[None]",
                    "Dict[str, Union[Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any]]",
                    "List[str]"
                ]
            }
        },
        "ExecutorResolver.initialize": {
            "name": "initialize",
            "location": 385,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "close_executor": [
                    "bool",
                    "bytes",
                    "bytearray",
                    "str"
                ],
                "executor": [
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[float]",
                    "bool"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "close_executor": [
                    "int",
                    "list",
                    "str"
                ],
                "executor": [
                    "Dict[Optional[str], str]",
                    "int",
                    "list"
                ],
                "io_loop": [
                    "int",
                    "List[str]",
                    "\"Point\"",
                    "float",
                    "str",
                    "Type[int]"
                ]
            }
        },
        "ExecutorResolver.close": {
            "name": "close",
            "location": 394,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "executor": [
                    "\"FrameManager\"",
                    "List[str]",
                    "float",
                    "Type[Callable[..., Any]]"
                ]
            }
        },
        "ExecutorResolver.resolve": {
            "name": "resolve",
            "location": 400,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "family": [
                    "int",
                    "str",
                    "ssl.SSLContext",
                    "Optional[ssl.SSLContext]"
                ],
                "host": [
                    "int",
                    "str",
                    "ssl.SSLContext",
                    "Optional[ssl.SSLContext]"
                ],
                "kwargs": [],
                "port": [
                    "int",
                    "str",
                    "ssl.SSLContext",
                    "Optional[ssl.SSLContext]"
                ],
                "self": []
            },
            "variables": {}
        },
        "BlockingResolver.initialize": {
            "name": "initialize",
            "location": 414,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "ThreadedResolver.initialize": {
            "name": "initialize",
            "location": 441,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "num_threads": [
                    "Optional[int]",
                    "int",
                    "bool",
                    "float"
                ],
                "self": []
            },
            "variables": {
                "threadpool": [
                    "int",
                    "list",
                    "str",
                    "float",
                    "Counter[Any]"
                ]
            }
        },
        "ThreadedResolver._create_threadpool": {
            "name": "_create_threadpool",
            "location": 447,
            "return": [
                "Callable"
            ],
            "arguments": {
                "args": [],
                "cls": [
                    "Optional[str]",
                    "Type[\"SerializationDialect\"]",
                    "Optional[Dict[int, Any]]",
                    "Optional[Dict[str, Any]]",
                    "Optional[Set[str]]",
                    "Optional[dict]",
                    "Optional[Tuple[Any, str]]"
                ],
                "kwargs": [],
                "num_threads": [
                    "str",
                    "bool",
                    "dict",
                    "Dict[int, dict]",
                    "bytes"
                ],
                "self": []
            },
            "variables": {
                "_threadpool": [
                    "Union[Literal, Literal]",
                    "List[int]",
                    "Optional[str]",
                    "str"
                ],
                "_threadpool_pid": [
                    "Tuple[Literal, Literal, Literal]",
                    "Dict[Any, List[str]]",
                    "list",
                    "Counter",
                    "str"
                ],
                "pid": [
                    "str",
                    "bool",
                    "Type[int]",
                    "Dict[str, int]",
                    "int"
                ]
            }
        },
        "OverrideResolver.initialize": {
            "name": "initialize",
            "location": 482,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "mapping": [
                    "str",
                    "bool",
                    "List[str]",
                    "int"
                ],
                "resolver": [
                    "str",
                    "bool",
                    "List[str]",
                    "int"
                ],
                "self": []
            },
            "variables": {
                "mapping": [
                    "int",
                    "Dict[str, dict]",
                    "List[str]",
                    "Set[str]",
                    "str",
                    "float",
                    "Dict[str, Any]"
                ],
                "resolver": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ]
            }
        },
        "OverrideResolver.close": {
            "name": "close",
            "location": 486,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "OverrideResolver.resolve": {
            "name": "resolve",
            "location": 489,
            "return": [
                "Callable",
                "Dict[str, int]"
            ],
            "arguments": {
                "args": [],
                "family": [
                    "int",
                    "str",
                    "Optional[bytes]",
                    "Optional[ssl.SSLContext]"
                ],
                "host": [
                    "int",
                    "str",
                    "Optional[ssl.SSLContext]",
                    "bool"
                ],
                "kwargs": [],
                "port": [
                    "int",
                    "str",
                    "Optional[ssl.SSLContext]",
                    "bool"
                ],
                "self": []
            },
            "variables": {
                "host": [
                    "str",
                    "int"
                ],
                "port": [
                    "str",
                    "int"
                ]
            }
        },
        "global": {
            "_DEFAULT_BACKLOG": [
                "str",
                "int",
                "List[List[float]]",
                "List[str]"
            ],
            "_ERRNO_WOULDBLOCK": [
                "Tuple[int, int]",
                "List[Dict[str, str]]",
                "Dict[str, Any]",
                "List[str]"
            ],
            "_SSL_CONTEXT_KEYWORDS": [
                "frozenset[str]",
                "Dict[str, str]",
                "List[int]",
                "str"
            ],
            "_client_ssl_defaults": [
                "str",
                "Dict[str, str]",
                "bool"
            ],
            "_server_ssl_defaults": [
                "int"
            ],
            "ssl": [
                "ssl.SSLContext"
            ],
            "xrange": [
                "int",
                "dict",
                "List[int]",
                "List[List[int]]",
                "str"
            ]
        }
    },
    "tornado-5.0.2/tornado/options.py": {
        "define": {
            "name": "define",
            "location": 596,
            "return": [
                "bool",
                "Optional[Any]"
            ],
            "arguments": {
                "args": [],
                "callback": [
                    "str",
                    "type",
                    "bool",
                    "List[str]"
                ],
                "default": [
                    "str",
                    "type",
                    "bool",
                    "List[str]"
                ],
                "group": [
                    "str",
                    "type",
                    "bool",
                    "List[str]"
                ],
                "help": [
                    "str",
                    "type",
                    "bool",
                    "List[str]"
                ],
                "kwargs": [],
                "metavar": [
                    "str",
                    "type",
                    "bool",
                    "List[str]"
                ],
                "multiple": [
                    "str",
                    "type",
                    "bool",
                    "List[str]"
                ],
                "name": [
                    "str",
                    "type",
                    "bool",
                    "List[str]"
                ],
                "type": [
                    "str",
                    "type",
                    "bool",
                    "List[str]"
                ]
            },
            "variables": {}
        },
        "parse_command_line": {
            "name": "parse_command_line",
            "location": 607,
            "return": [
                "BaseException",
                "str",
                "Optional[str]",
                "Callable[[KT], VT]",
                "Type[BaseException]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "args": [],
                "final": [
                    "List[str]",
                    "int",
                    "Optional[List[str]]"
                ],
                "kwargs": []
            },
            "variables": {}
        },
        "parse_config_file": {
            "name": "parse_config_file",
            "location": 615,
            "return": [
                "bool",
                "List[str]"
            ],
            "arguments": {
                "args": [],
                "final": [],
                "kwargs": [],
                "path": []
            },
            "variables": {}
        },
        "print_help": {
            "name": "print_help",
            "location": 623,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {
                "args": [],
                "file": [
                    "bool",
                    "Optional[int]",
                    "str",
                    "Optional[str]"
                ],
                "kwargs": []
            },
            "variables": {}
        },
        "add_parse_callback": {
            "name": "add_parse_callback",
            "location": 631,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "callback": [
                    "dict",
                    "bool"
                ],
                "kwargs": []
            },
            "variables": {}
        },
        "OptionParser.__init__": {
            "name": "__init__",
            "location": 123,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "OptionParser._normalize_name": {
            "name": "_normalize_name",
            "location": 130,
            "return": [
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "name": [
                    "str",
                    "dict",
                    "type"
                ],
                "self": []
            },
            "variables": {}
        },
        "OptionParser.__getattr__": {
            "name": "__getattr__",
            "location": 133,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "name": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "self": []
            },
            "variables": {
                "name": [
                    "str",
                    "Dict[str, str]",
                    "Final",
                    "Tuple[int, int, int]",
                    "List[str]"
                ]
            }
        },
        "OptionParser.__setattr__": {
            "name": "__setattr__",
            "location": 139,
            "return": [
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "name": [
                    "str",
                    "Optional[str]"
                ],
                "self": [],
                "value": [
                    "str",
                    "Sequence[str]",
                    "Optional[str]"
                ]
            },
            "variables": {
                "name": [
                    "str",
                    "Final",
                    "Tuple[int, int, int]",
                    "List[str]",
                    "Dict[str, str]"
                ]
            }
        },
        "OptionParser.__iter__": {
            "name": "__iter__",
            "location": 145,
            "return": [
                "List[str]",
                "bool",
                "Generator[str, None, None]",
                "Tuple[str]",
                "Iterable[str]",
                "Sequence[str]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "OptionParser.__contains__": {
            "name": "__contains__",
            "location": 148,
            "return": [
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "name": [
                    "str",
                    "List[str]",
                    "bool"
                ],
                "self": []
            },
            "variables": {
                "name": [
                    "str"
                ]
            }
        },
        "OptionParser.__getitem__": {
            "name": "__getitem__",
            "location": 152,
            "return": [
                "str",
                "Tuple[str]",
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "name": [
                    "str"
                ],
                "self": []
            },
            "variables": {}
        },
        "OptionParser.__setitem__": {
            "name": "__setitem__",
            "location": 155,
            "return": [
                "str",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "name": [
                    "str"
                ],
                "self": [],
                "value": [
                    "str"
                ]
            },
            "variables": {}
        },
        "OptionParser.items": {
            "name": "items",
            "location": 158,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "OptionParser.groups": {
            "name": "groups",
            "location": 165,
            "return": [
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "OptionParser.group_dict": {
            "name": "group_dict",
            "location": 172,
            "return": [
                "Optional[str]",
                "dict",
                "Dict[str, str]",
                "Dict[str, Type[Any]]",
                "str"
            ],
            "arguments": {
                "args": [],
                "group": [
                    "Dict[str, Any]",
                    "str",
                    "Callable",
                    "Type[T]",
                    "Dict[str, str]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "OptionParser.as_dict": {
            "name": "as_dict",
            "location": 193,
            "return": [
                "str",
                "bool",
                "Dict[str, Any]",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "OptionParser.define": {
            "name": "define",
            "location": 201,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "callback": [
                    "Optional[str]",
                    "str",
                    "Type"
                ],
                "default": [
                    "str"
                ],
                "group": [
                    "str"
                ],
                "help": [
                    "Optional[str]",
                    "str",
                    "Type"
                ],
                "kwargs": [],
                "metavar": [
                    "Optional[str]",
                    "str",
                    "Type"
                ],
                "multiple": [
                    "Optional[str]",
                    "str"
                ],
                "name": [
                    "str"
                ],
                "self": [],
                "type": [
                    "Optional[str]",
                    "str"
                ]
            },
            "variables": {
                "file_name": [
                    "str",
                    "List[str]",
                    "Union[Literal, str]",
                    "dict"
                ],
                "frame": [
                    "list",
                    "str"
                ],
                "group_name": [
                    "str",
                    "Set[str]",
                    "Pattern[str]"
                ],
                "normalized": [
                    "str",
                    "Dict[str, Union[Any, int, str]]",
                    "bytes"
                ],
                "option": [
                    "Type[Dict[str, Any]]",
                    "Dict[str, str]",
                    "Type[Dict[str, str]]",
                    "List[Tuple[str, Any]]",
                    "str",
                    "Tuple[Any, Literal]",
                    "list",
                    "Dict[str, Any]"
                ],
                "options_file": [
                    "str",
                    "Dict[str, Union[Any, Any]]"
                ],
                "type": [
                    "Optional[str]",
                    "Tuple[str, Optional[str]]"
                ]
            }
        },
        "OptionParser.parse_command_line": {
            "name": "parse_command_line",
            "location": 269,
            "return": [
                "str",
                "int",
                "List[int]",
                "float"
            ],
            "arguments": {
                "args": [],
                "final": [
                    "bool",
                    "Iterator[str]",
                    "str",
                    "int",
                    "List[str]",
                    "List[bytes]",
                    "List[Dict[str, Any]]",
                    "list"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "arg": [
                    "int",
                    "str",
                    "Type[complex]"
                ],
                "args": [],
                "equals": [
                    "int",
                    "list",
                    "str"
                ],
                "name": [
                    "list",
                    "int",
                    "List[str]",
                    "Tuple[Any, Any]",
                    "str",
                    "Pattern[str]"
                ],
                "option": [
                    "bool"
                ],
                "remaining": [
                    "str",
                    "tuple",
                    "dict",
                    "int",
                    "List[str]",
                    "list",
                    "Union[bytes, str]"
                ],
                "value": [
                    "list",
                    "Tuple[Any, Any]",
                    "List[int]",
                    "Optional[Match[str]]",
                    "List[List[int]]"
                ]
            }
        },
        "OptionParser.parse_config_file": {
            "name": "parse_config_file",
            "location": 321,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "final": [
                    "Sequence[str]",
                    "List[str]",
                    "bool",
                    "str"
                ],
                "kwargs": [],
                "path": [
                    "str",
                    "dict"
                ],
                "self": []
            },
            "variables": {
                "config": [
                    "Dict[str, str]"
                ],
                "normalized": [
                    "Dict[str, Union[Any, Any]]",
                    "str",
                    "Dict[str, str]",
                    "bytes",
                    "List[str]",
                    "dict",
                    "Dict[str, List[str]]"
                ]
            }
        },
        "OptionParser.print_help": {
            "name": "print_help",
            "location": 373,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "file": [
                    "Optional[str]",
                    "str",
                    "Iterator[str]",
                    "dict",
                    "bool"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "by_group": [
                    "List[Optional[bool]]",
                    "Dict[str, Any]",
                    "Dict[str, Optional[str]]",
                    "str",
                    "int",
                    "list",
                    "Type[str]"
                ],
                "description": [
                    "str"
                ],
                "file": [
                    "List[str]",
                    "Dict[str, Union[Any, Any, Any]]",
                    "list",
                    "str"
                ],
                "lines": [
                    "int",
                    "TextIO",
                    "float"
                ],
                "prefix": [
                    "Set[str]",
                    "List[str]",
                    "int",
                    "Type[str]"
                ]
            }
        },
        "OptionParser._help_callback": {
            "name": "_help_callback",
            "location": 403,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "value": [
                    "int",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            },
            "variables": {}
        },
        "OptionParser.add_parse_callback": {
            "name": "add_parse_callback",
            "location": 408,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "callback": [
                    "dict",
                    "Mapping[str, Any]",
                    "List[dict]",
                    "str"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "OptionParser.run_parse_callbacks": {
            "name": "run_parse_callbacks",
            "location": 412,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "OptionParser.mockable": {
            "name": "mockable",
            "location": 416,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "_Mockable.__init__": {
            "name": "__init__",
            "location": 446,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "options": [
                    "int",
                    "bool",
                    "Callable",
                    "str"
                ],
                "self": []
            },
            "variables": {}
        },
        "_Mockable.__getattr__": {
            "name": "__getattr__",
            "location": 451,
            "return": [
                "str",
                "float",
                "Callable"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "name": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "list"
                ],
                "self": []
            },
            "variables": {}
        },
        "_Mockable.__setattr__": {
            "name": "__setattr__",
            "location": 454,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "name": [
                    "str",
                    "Dict[str, str]"
                ],
                "self": [],
                "value": [
                    "str",
                    "list",
                    "List[str]"
                ]
            },
            "variables": {}
        },
        "_Mockable.__delattr__": {
            "name": "__delattr__",
            "location": 459,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "name": [
                    "str",
                    "Dict[str, Any]"
                ],
                "self": []
            },
            "variables": {}
        },
        "_Option.__init__": {
            "name": "__init__",
            "location": 466,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "callback": [
                    "Optional[List[str]]",
                    "bool",
                    "str",
                    "Optional[bool]",
                    "Sequence"
                ],
                "default": [
                    "Optional[str]",
                    "Optional[Sequence[Any]]",
                    "Optional[Sequence[str]]",
                    "Optional[bool]",
                    "Optional[\"ValidatorTypes\"]",
                    "str",
                    "Optional[\"Node\"]",
                    "Optional[Dict[str, Any]]"
                ],
                "file_name": [
                    "str",
                    "bool",
                    "List[str]",
                    "float"
                ],
                "group_name": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "help": [
                    "Optional[List[str]]",
                    "bool",
                    "str",
                    "Optional[bool]",
                    "Sequence"
                ],
                "kwargs": [],
                "metavar": [
                    "Optional[List[str]]",
                    "bool",
                    "str",
                    "Optional[bool]",
                    "Sequence"
                ],
                "multiple": [
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[float]",
                    "Optional[bool]"
                ],
                "name": [
                    "str",
                    "Optional[str]",
                    "Optional[Sequence[Any]]",
                    "bool",
                    "Optional[Dict[str, str]]"
                ],
                "self": [],
                "type": [
                    "Optional[List[str]]",
                    "bool",
                    "str",
                    "Optional[bool]",
                    "Sequence"
                ]
            },
            "variables": {
                "_value": [
                    "bool",
                    "list",
                    "T",
                    "str",
                    "Type",
                    "int",
                    "Tuple[str, str, str, str]"
                ],
                "callback": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ],
                "default": [
                    "int",
                    "Dict[str, Any]",
                    "Optional[int]"
                ],
                "file_name": [
                    "str",
                    "dict"
                ],
                "group_name": [
                    "str",
                    "List[str]"
                ],
                "help": [
                    "Tuple[str, str, str]",
                    "List[str]",
                    "str",
                    "frozenset[str]",
                    "Dict[str, str]"
                ],
                "metavar": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ],
                "multiple": [
                    "Tuple[Type[tuple], Type[list]]",
                    "dict",
                    "Optional[str]",
                    "int"
                ],
                "name": [
                    "str",
                    "Dict[str, str]"
                ],
                "type": [
                    "str"
                ]
            }
        },
        "_Option.value": {
            "name": "value",
            "location": 482,
            "return": [
                "int",
                "List[int]",
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "_Option.parse": {
            "name": "parse",
            "location": 485,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "value": [
                    "str",
                    "int"
                ]
            },
            "variables": {
                "_": [
                    "Tuple[str, int]",
                    "Counter[str]",
                    "Tuple[str, str]",
                    "dict",
                    "TextIO"
                ],
                "_parse": [
                    "datetime.datetime",
                    "datetime.timedelta",
                    "datetime.date"
                ],
                "_value": [
                    "str",
                    "Tuple[str, str, str, str]",
                    "List[int]"
                ],
                "hi": [
                    "os.stat_result",
                    "os.statvfs_result"
                ],
                "lo": [
                    "float",
                    "int",
                    "str",
                    "Dict[str, int]"
                ]
            }
        },
        "_Option.set": {
            "name": "set",
            "location": 509,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "value": [
                    "Optional[Callable[..., Any]]",
                    "Callable[[], None]",
                    "str",
                    "Optional[List[Any]]",
                    "dict",
                    "int"
                ]
            },
            "variables": {
                "_value": [
                    "List[int]",
                    "list",
                    "int",
                    "Union[dict, str]",
                    "Union[float, int]",
                    "List[Tuple[int, int]]",
                    "Pattern[str]",
                    "str"
                ]
            }
        },
        "_Option._parse_datetime": {
            "name": "_parse_datetime",
            "location": 540,
            "return": [
                "str",
                "datetime.datetime",
                "int",
                "bool",
                "datetime.timedelta"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "value": [
                    "str"
                ]
            },
            "variables": {}
        },
        "_Option._parse_timedelta": {
            "name": "_parse_timedelta",
            "location": 565,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "value": [
                    "str",
                    "list",
                    "float",
                    "List[str]",
                    "bytes",
                    "bytearray",
                    "List[bytes]",
                    "List[int]",
                    "int"
                ]
            },
            "variables": {
                "m": [
                    "int",
                    "List[int]",
                    "Tuple[Any, Any]",
                    "bytes",
                    "float"
                ],
                "num": [
                    "int",
                    "float",
                    "str",
                    "List[Tuple[str, str]]"
                ],
                "start": [
                    "int",
                    "List[int]",
                    "Dict[str, int]",
                    "list",
                    "List[Tuple[int, int]]"
                ],
                "sum": [
                    "datetime.datetime",
                    "datetime.timedelta"
                ],
                "units": [
                    "int",
                    "float",
                    "datetime.datetime.datetime",
                    "datetime.datetime",
                    "datetime.timedelta",
                    "datetime.datetime.time",
                    "str"
                ]
            }
        },
        "_Option._parse_bool": {
            "name": "_parse_bool",
            "location": 582,
            "return": [
                "Optional[str]",
                "bool",
                "dict",
                "int",
                "str",
                "Set[str]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "value": [
                    "str",
                    "int",
                    "tuple",
                    "list",
                    "dict",
                    "Callable"
                ]
            },
            "variables": {}
        },
        "_Option._parse_string": {
            "name": "_parse_string",
            "location": 585,
            "return": [
                "Type[T]",
                "str",
                "dict",
                "Dict[Tuple[str, str], Tuple[float, float]]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "value": [
                    "str",
                    "Union[int, float]"
                ]
            },
            "variables": {}
        },
        "global": {
            "options": [
                "Type[dict]",
                "int",
                "str",
                "Dict[str, Tuple[Any, str]]",
                "Dict[str, str]"
            ]
        }
    },
    "tornado-5.0.2/tornado/process.py": {
        "cpu_count": {
            "name": "cpu_count",
            "location": 59,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": []
            },
            "variables": {}
        },
        "_reseed_random": {
            "name": "_reseed_random",
            "location": 75,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": []
            },
            "variables": {
                "seed": [
                    "int",
                    "List[float]",
                    "List[int]",
                    "Type[List[Any]]",
                    "str",
                    "List[str]"
                ]
            }
        },
        "_pipe_cloexec": {
            "name": "_pipe_cloexec",
            "location": 89,
            "return": [
                "List[str]",
                "bool",
                "List[Mapping[str, Any]]",
                "Tuple[type]",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": []
            },
            "variables": {
                "r": [
                    "int",
                    "list",
                    "str",
                    "List[int]",
                    "List[List[Any]]"
                ],
                "w": [
                    "List[Dict[str, Any]]",
                    "List[List[None]]",
                    "str",
                    "List[int]",
                    "Tuple[Any, None]",
                    "List[str]",
                    "List[Union[Any, Any]]",
                    "Tuple[int, int]",
                    "Type[str]"
                ]
            }
        },
        "start_child": {
            "name": "start_child",
            "location": 131,
            "return": [
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "args": [],
                "i": [
                    "int",
                    "str",
                    "Exception",
                    "Dict[str, Any]"
                ],
                "kwargs": []
            },
            "variables": {
                "_task_id": [
                    "Optional[str]",
                    "Dict[str, str]"
                ],
                "pid": [
                    "int",
                    "float",
                    "str",
                    "list"
                ]
            }
        },
        "fork_processes": {
            "name": "fork_processes",
            "location": 99,
            "return": [
                "List[str]",
                "allennlp.common.util.JsonDict",
                "Dict[str, Any]",
                "Union[int, float, complex]",
                "int"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "max_restarts": [
                    "int",
                    "Optional[int]"
                ],
                "num_processes": [
                    "int",
                    "Optional[int]"
                ]
            },
            "variables": {
                "children": [
                    "dict",
                    "str",
                    "Optional[int]",
                    "int",
                    "Dict[str, Any]"
                ],
                "id": [
                    "int",
                    "Generator[Any, None, None]",
                    "str"
                ],
                "new_id": [
                    "int",
                    "list"
                ],
                "num_processes": [
                    "int",
                    "Optional[int]"
                ],
                "num_restarts": [
                    "int"
                ],
                "pid": [
                    "bool",
                    "float",
                    "Dict[str, str]",
                    "Dict[str, dict]"
                ],
                "status": [
                    "int",
                    "Dict[str, str]",
                    "str",
                    "bytes"
                ]
            }
        },
        "task_id": {
            "name": "task_id",
            "location": 180,
            "return": [
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": []
            },
            "variables": {}
        },
        "Subprocess.__init__": {
            "name": "__init__",
            "location": 215,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_exit_callback": [
                    "bool",
                    "int"
                ],
                "err_r": [],
                "err_w": [
                    "list",
                    "List[Optional[str]]",
                    "int"
                ],
                "in_r": [
                    "int",
                    "List[int]",
                    "list"
                ],
                "in_w": [
                    "int"
                ],
                "io_loop": [
                    "int",
                    "List[str]",
                    "\"Point\"",
                    "float",
                    "str",
                    "Type[int]"
                ],
                "out_r": [],
                "out_w": [
                    "list",
                    "List[slice]",
                    "int",
                    "dict"
                ],
                "pipe_fds": [
                    "list",
                    "str",
                    "float",
                    "int"
                ],
                "proc": [
                    "List[str]",
                    "Dict[str, str]",
                    "str"
                ],
                "returncode": [
                    "\"Frame\"",
                    "str",
                    "Dict[str, Any]"
                ],
                "stderr": [
                    "str"
                ],
                "stdin": [
                    "int",
                    "float",
                    "str"
                ],
                "stdout": [
                    "str",
                    "Union[Literal, str]",
                    "Dict[str, Type[Any]]"
                ],
                "to_close": [
                    "list"
                ]
            }
        },
        "Subprocess.set_exit_callback": {
            "name": "set_exit_callback",
            "location": 253,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "callback": [
                    "str",
                    "Iterable[str]",
                    "bool"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_exit_callback": [
                    "int",
                    "float",
                    "str",
                    "Tuple[bytes, bytes]"
                ]
            }
        },
        "Subprocess.callback": {
            "name": "callback",
            "location": 291,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "ret": [
                    "str",
                    "type"
                ],
                "self": []
            },
            "variables": {}
        },
        "Subprocess.wait_for_exit": {
            "name": "wait_for_exit",
            "location": 273,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "raise_error": [
                    "bool"
                ],
                "self": []
            },
            "variables": {
                "future": [
                    "str",
                    "List[str]",
                    "int",
                    "Dict[str, List[Any]]",
                    "Tuple[str, str, str, str, str, str, str, str]"
                ]
            }
        },
        "Subprocess.initialize": {
            "name": "initialize",
            "location": 301,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "args": [],
                "cls": [
                    "str",
                    "Type[Any]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_initialized": [
                    "Optional[str]",
                    "str",
                    "bool"
                ],
                "_old_sigchld": [
                    "list"
                ],
                "io_loop": [
                    "DefaultDict[str, int]",
                    "int"
                ]
            }
        },
        "Subprocess.uninitialize": {
            "name": "uninitialize",
            "location": 322,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "args": [],
                "cls": [
                    "Dict[str, Any]",
                    "str",
                    "Optional[int]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_initialized": [
                    "Tuple[str, str, str]",
                    "int"
                ]
            }
        },
        "Subprocess._cleanup": {
            "name": "_cleanup",
            "location": 330,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "cls": [
                    "type",
                    "T",
                    "bool"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Subprocess._try_cleanup_process": {
            "name": "_try_cleanup_process",
            "location": 335,
            "return": [
                "Iterator"
            ],
            "arguments": {
                "args": [],
                "cls": [
                    "bytes",
                    "complex",
                    "str",
                    "Optional[int]",
                    "\"Track\""
                ],
                "kwargs": [],
                "pid": [
                    "int",
                    "bool"
                ],
                "self": []
            },
            "variables": {
                "ret_pid": [
                    "int",
                    "list"
                ],
                "status": [
                    "int",
                    "Pattern[Any]",
                    "str",
                    "Union[Literal, Literal]"
                ],
                "subproc": [
                    "str",
                    "Dict[str, str]",
                    "List[str]",
                    "Set[str]"
                ]
            }
        },
        "Subprocess._set_returncode": {
            "name": "_set_returncode",
            "location": 348,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "status": [
                    "Optional[int]",
                    "bytes",
                    "int",
                    "str",
                    "List[int]"
                ]
            },
            "variables": {
                "_exit_callback": [
                    "dict",
                    "int",
                    "bool",
                    "Union[int, str]",
                    "Dict[str, Any]",
                    "subprocess.Popen"
                ],
                "callback": [
                    "str",
                    "int",
                    "Union[Literal, str]"
                ],
                "returncode": [
                    "int",
                    "dict",
                    "Tuple[Literal, Literal, Literal, Literal]",
                    "list",
                    "str"
                ]
            }
        },
        "global": {
            "CalledProcessError": [
                "str",
                "int",
                "Dict[str, List[str]]",
                "Dict[int, Any]",
                "Pattern[str]",
                "Dict[str, str]"
            ],
            "_task_id": [
                "str",
                "Pattern[str]",
                "int"
            ],
            "long": [
                "str",
                "Tuple[Any, Any]",
                "Pattern[str]",
                "int"
            ],
            "multiprocessing": [
                "Optional[str]",
                "int",
                "str"
            ]
        }
    },
    "tornado-5.0.2/tornado/queues.py": {
        "on_timeout": {
            "name": "on_timeout",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": []
            },
            "variables": {}
        },
        "_set_timeout": {
            "name": "_set_timeout",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "future": [
                    "Optional[str]",
                    "int"
                ],
                "kwargs": [],
                "timeout": [
                    "int",
                    "Optional[int]",
                    "bool"
                ]
            },
            "variables": {
                "io_loop": [
                    "int"
                ],
                "timeout_handle": [
                    "int"
                ]
            }
        },
        "_QueueIterator.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "q": [
                    "int",
                    "bool",
                    "float"
                ],
                "self": []
            },
            "variables": {
                "q": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ]
            }
        },
        "_QueueIterator.__anext__": {
            "name": "__anext__",
            "location": 65,
            "return": [
                "bool",
                "Optional[Any]",
                "str",
                "Callable[..., None]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Queue.__init__": {
            "name": "__init__",
            "location": 137,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "maxsize": [
                    "Optional[float]",
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[Callable]",
                    "Optional[Hashable]",
                    "int"
                ],
                "self": []
            },
            "variables": {
                "_finished": [
                    "int",
                    "Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]",
                    "bool",
                    "Type[str]"
                ],
                "_getters": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ],
                "_maxsize": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ],
                "_putters": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ],
                "_unfinished_tasks": [
                    "List[str]",
                    "int",
                    "str",
                    "float",
                    "\"Point\""
                ]
            }
        },
        "Queue.maxsize": {
            "name": "maxsize",
            "location": 153,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Queue.qsize": {
            "name": "qsize",
            "location": 157,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Queue.empty": {
            "name": "empty",
            "location": 161,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Queue.full": {
            "name": "full",
            "location": 164,
            "return": [
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Queue.put": {
            "name": "put",
            "location": 170,
            "return": [
                "int",
                "Dict[str, bool]",
                "bool",
                "Iterable[Any]",
                "str"
            ],
            "arguments": {
                "args": [],
                "item": [
                    "int",
                    "str",
                    "T",
                    "List[List[str]]",
                    "list",
                    "Type[object]"
                ],
                "kwargs": [],
                "self": [],
                "timeout": [
                    "Callable",
                    "int"
                ]
            },
            "variables": {
                "future": [
                    "asyncio.futures.Future[Any]",
                    "DefaultDict[Any, List[Any]]",
                    "int"
                ]
            }
        },
        "Queue.put_nowait": {
            "name": "put_nowait",
            "location": 191,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "item": [
                    "Type",
                    "Dict[str, Any]",
                    "dict",
                    "Dict[str, object]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "getter": [
                    "int",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "Queue.get": {
            "name": "get",
            "location": 207,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "timeout": [
                    "str"
                ]
            },
            "variables": {
                "future": [
                    "set",
                    "Set[str]",
                    "asyncio.futures.Future[bool]",
                    "Type[Tuple[int, int]]"
                ]
            }
        },
        "Queue.get_nowait": {
            "name": "get_nowait",
            "location": 226,
            "return": [
                "str",
                "bool",
                "bytes"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "item": [
                    "int",
                    "bytes",
                    "Dict[str, str]",
                    "Dict[str, Union[Any, int]]"
                ],
                "putter": [
                    "str",
                    "dict"
                ]
            }
        },
        "Queue.task_done": {
            "name": "task_done",
            "location": 244,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Queue.join": {
            "name": "join",
            "location": 262,
            "return": [
                "str",
                "bytes",
                "float"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "timeout": [
                    "int",
                    "str",
                    "Union[int, float]"
                ]
            },
            "variables": {}
        },
        "Queue.__aiter__": {
            "name": "__aiter__",
            "location": 270,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Queue._init": {
            "name": "_init",
            "location": 274,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_queue": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ]
            }
        },
        "Queue._get": {
            "name": "_get",
            "location": 277,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Queue._put": {
            "name": "_put",
            "location": 280,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "item": [
                    "int",
                    "str",
                    "T",
                    "Callable"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Queue.__put_internal": {
            "name": "__put_internal",
            "location": 284,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "item": [
                    "str",
                    "List[str]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Queue._consume_expired": {
            "name": "_consume_expired",
            "location": 289,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Queue.__repr__": {
            "name": "__repr__",
            "location": 297,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Queue.__str__": {
            "name": "__str__",
            "location": 301,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Queue._format": {
            "name": "_format",
            "location": 304,
            "return": [
                "bool",
                "Tuple[int, Dict[str, Any]]",
                "float"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "result": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "PriorityQueue._init": {
            "name": "_init",
            "location": 341,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_queue": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ]
            }
        },
        "PriorityQueue._put": {
            "name": "_put",
            "location": 344,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "item": [
                    "List[Dict[str, Any]]",
                    "str",
                    "Iterable[str]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "PriorityQueue._get": {
            "name": "_get",
            "location": 347,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "LifoQueue._init": {
            "name": "_init",
            "location": 373,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_queue": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ]
            }
        },
        "LifoQueue._put": {
            "name": "_put",
            "location": 376,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "item": [
                    "int",
                    "str",
                    "T",
                    "Callable"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "LifoQueue._get": {
            "name": "_get",
            "location": 379,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "global": {
            "__all__": [
                "List[str]",
                "Tuple[str]",
                "Tuple[str, str, str]"
            ]
        }
    },
    "tornado-5.0.2/tornado/routing.py": {
        "_unquote_or_none": {
            "name": "_unquote_or_none",
            "location": 632,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "s": [
                    "Optional[str]",
                    "str",
                    "Optional[int]",
                    "Optional[AnyStr]"
                ]
            },
            "variables": {}
        },
        "Router.find_handler": {
            "name": "find_handler",
            "location": 198,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "request": [
                    "list",
                    "bool",
                    "tornado.httputil.HTTPServerRequest"
                ],
                "self": []
            },
            "variables": {}
        },
        "Router.start_request": {
            "name": "start_request",
            "location": 211,
            "return": [
                "int",
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "request_conn": [
                    "int",
                    "set"
                ],
                "self": [],
                "server_conn": [
                    "int",
                    "set"
                ]
            },
            "variables": {}
        },
        "ReversibleRouter.reverse_url": {
            "name": "reverse_url",
            "location": 220,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "name": [
                    "str",
                    "bool",
                    "bytes",
                    "Iterable[str]"
                ],
                "self": []
            },
            "variables": {}
        },
        "_RoutingDelegate.__init__": {
            "name": "__init__",
            "location": 232,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "request_conn": [
                    "Dict[str, str]",
                    "int",
                    "Dict[str, Any]"
                ],
                "router": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Optional[int]",
                    "Optional[str]",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]"
                ],
                "self": [],
                "server_conn": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Optional[int]",
                    "Optional[str]",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]"
                ]
            },
            "variables": {
                "delegate": [
                    "\"Frame\"",
                    "str",
                    "Dict[str, Any]"
                ],
                "request_conn": [
                    "str",
                    "int",
                    "Tuple[Literal, Literal]",
                    "dict"
                ],
                "router": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ],
                "server_conn": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ]
            }
        },
        "_RoutingDelegate.headers_received": {
            "name": "headers_received",
            "location": 238,
            "return": [
                "Dict[str, Any]",
                "int",
                "str",
                "Optional[\"permissions_doc\"]",
                "Dict[str, str]"
            ],
            "arguments": {
                "args": [],
                "headers": [
                    "int"
                ],
                "kwargs": [],
                "self": [],
                "start_line": [
                    "int",
                    "Optional[Dict]"
                ]
            },
            "variables": {
                "delegate": [
                    "str",
                    "Dict[str, str]",
                    "bool",
                    "Optional[str]"
                ],
                "request": []
            }
        },
        "_RoutingDelegate.data_received": {
            "name": "data_received",
            "location": 252,
            "return": [
                "Optional[float]",
                "IO[bytes]",
                "bool",
                "str",
                "dict",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "args": [],
                "chunk": [
                    "str",
                    "int",
                    "bytes",
                    "set"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "_RoutingDelegate.finish": {
            "name": "finish",
            "location": 255,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "_RoutingDelegate.on_connection_close": {
            "name": "on_connection_close",
            "location": 258,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "_DefaultMessageDelegate.__init__": {
            "name": "__init__",
            "location": 263,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "connection": [
                    "int",
                    "bool",
                    "float"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "connection": [
                    "str",
                    "int",
                    "Optional[float]",
                    "bool"
                ]
            }
        },
        "_DefaultMessageDelegate.finish": {
            "name": "finish",
            "location": 266,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "RuleRouter.__init__": {
            "name": "__init__",
            "location": 275,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "rules": [
                    "int"
                ],
                "self": []
            },
            "variables": {
                "rules": [
                    "Final",
                    "int",
                    "str",
                    "Dict[str, str]",
                    "List[str]"
                ]
            }
        },
        "RuleRouter.add_rules": {
            "name": "add_rules",
            "location": 306,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "rules": [
                    "float",
                    "int"
                ],
                "self": []
            },
            "variables": {
                "rule": [
                    "list",
                    "List[Tuple[Any, Any, Any, Any]]",
                    "List[List[Any]]"
                ]
            }
        },
        "RuleRouter.process_rule": {
            "name": "process_rule",
            "location": 322,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "rule": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "self": []
            },
            "variables": {}
        },
        "RuleRouter.find_handler": {
            "name": "find_handler",
            "location": 330,
            "return": [
                "Optional[str]",
                "Optional[int]",
                "str",
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "request": [
                    "dict",
                    "Tuple[int]",
                    "Dict[str, Any]"
                ],
                "self": []
            },
            "variables": {
                "delegate": [
                    "Optional[str]"
                ],
                "target_params": [
                    "int"
                ]
            }
        },
        "RuleRouter.get_target_delegate": {
            "name": "get_target_delegate",
            "location": 345,
            "return": [
                "bool",
                "Iterable[Union[Any, int]]",
                "bytes"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "request": [
                    "tornado.httputil.HTTPServerRequest",
                    "Exception"
                ],
                "self": [],
                "target": [
                    "int",
                    "Callable[..., Coroutine]"
                ],
                "target_params": [
                    "Tuple[int]"
                ]
            },
            "variables": {}
        },
        "ReversibleRuleRouter.__init__": {
            "name": "__init__",
            "location": 377,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "rules": [
                    "Callable"
                ],
                "self": []
            },
            "variables": {
                "named_rules": [
                    "str"
                ]
            }
        },
        "ReversibleRuleRouter.process_rule": {
            "name": "process_rule",
            "location": 381,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "rule": [
                    "int",
                    "str",
                    "bool"
                ],
                "self": []
            },
            "variables": {
                "rule": [
                    "str"
                ]
            }
        },
        "ReversibleRuleRouter.reverse_url": {
            "name": "reverse_url",
            "location": 393,
            "return": [
                "str",
                "Optional[Any]",
                "Callable[[str], str]",
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "Container[\"Taxon\"]"
                ],
                "self": []
            },
            "variables": {
                "reversed_url": [
                    "str",
                    "list",
                    "List[Tuple[str, Any]]",
                    "List[str]"
                ]
            }
        },
        "Rule.__init__": {
            "name": "__init__",
            "location": 409,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "matcher": [
                    "str",
                    "int",
                    "float"
                ],
                "name": [
                    "str",
                    "Callable[..., T]",
                    "List[str]",
                    "int"
                ],
                "self": [],
                "target": [
                    "str",
                    "Dict[str, Any]",
                    "int",
                    "Union[str, None]"
                ],
                "target_kwargs": [
                    "int",
                    "Sequence[Any]",
                    "float",
                    "List[str]"
                ]
            },
            "variables": {
                "matcher": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ],
                "name": [
                    "str",
                    "Dict[str, str]"
                ],
                "target": [
                    "str",
                    "int"
                ],
                "target_kwargs": [
                    "Tuple[int, int, Literal]",
                    "str",
                    "List[str]",
                    "int",
                    "Dict[str, str]"
                ]
            }
        },
        "Rule.reverse": {
            "name": "reverse",
            "location": 436,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Rule.__repr__": {
            "name": "__repr__",
            "location": 439,
            "return": [
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Matcher.match": {
            "name": "match",
            "location": 448,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "request": [
                    "tornado.httputil.HTTPServerRequest"
                ],
                "self": []
            },
            "variables": {}
        },
        "Matcher.reverse": {
            "name": "reverse",
            "location": 460,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "AnyMatches.match": {
            "name": "match",
            "location": 468,
            "return": [
                "IO[str]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "request": [
                    "tornado.httputil.HTTPServerRequest"
                ],
                "self": []
            },
            "variables": {}
        },
        "HostMatches.__init__": {
            "name": "__init__",
            "location": 475,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "host_pattern": [
                    "str",
                    "Union[str, Pattern]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "host_pattern": []
            }
        },
        "HostMatches.match": {
            "name": "match",
            "location": 483,
            "return": [
                "Optional[int]",
                "type",
                "Optional[str]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "request": [],
                "self": []
            },
            "variables": {}
        },
        "DefaultHostMatches.__init__": {
            "name": "__init__",
            "location": 495,
            "return": [
                ""
            ],
            "arguments": {
                "application": [
                    "int",
                    "bool",
                    "float"
                ],
                "args": [],
                "host_pattern": [
                    "int",
                    "bool",
                    "float"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "application": [
                    "int",
                    "str",
                    "float",
                    "Dict[str, Any]"
                ],
                "host_pattern": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ]
            }
        },
        "DefaultHostMatches.match": {
            "name": "match",
            "location": 499,
            "return": [
                "Optional[int]",
                "type",
                "Optional[str]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "request": [
                    "tornado.httputil.HTTPServerRequest"
                ],
                "self": []
            },
            "variables": {}
        },
        "PathMatches.__init__": {
            "name": "__init__",
            "location": 510,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "path_pattern": [
                    "str",
                    "bool"
                ],
                "self": []
            },
            "variables": {
                "_group_count": [
                    "str",
                    "int"
                ],
                "_path": [
                    "str"
                ],
                "regex": [
                    "str",
                    "Pattern[str]"
                ]
            }
        },
        "PathMatches.match": {
            "name": "match",
            "location": 524,
            "return": [
                "Type",
                "bool",
                "Optional[static_frame.core.util.DepthLevelSpecifier]",
                "Optional[Type]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "request": [
                    "Dict[str, Any]"
                ],
                "self": []
            },
            "variables": {
                "match": [
                    "dict",
                    "Optional[\"Lecture\"]",
                    "Optional[\"Texte\"]",
                    "Set[str]",
                    "Optional[Dict[str, Any]]",
                    "str",
                    "Dict[str, Any]"
                ],
                "path_args": [
                    "Dict[str, list]",
                    "Type[Dict[str, str]]",
                    "str",
                    "Tuple[str, Any]",
                    "List[str]"
                ],
                "path_kwargs": [
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "MutableMapping[str, Any]",
                    "dict"
                ]
            }
        },
        "PathMatches.reverse": {
            "name": "reverse",
            "location": 546,
            "return": [
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "a": [
                    "str",
                    "int"
                ],
                "converted_args": [
                    "list"
                ]
            }
        },
        "PathMatches._find_groups": {
            "name": "_find_groups",
            "location": 560,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[float]",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "paren_loc": [
                    "list",
                    "int",
                    "List[int]",
                    "dict",
                    "List[str]"
                ],
                "pattern": [
                    "Pattern[str]",
                    "List[str]",
                    "Pattern[bytes]"
                ],
                "pieces": [
                    "list",
                    "Dict[str, List[Any]]",
                    "int"
                ],
                "unescaped_fragment": [
                    "list"
                ]
            }
        },
        "URLSpec.__init__": {
            "name": "__init__",
            "location": 602,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "handler": [
                    "str",
                    "float",
                    "dict"
                ],
                "kwargs": [],
                "name": [
                    "str",
                    "float",
                    "dict"
                ],
                "pattern": [
                    "str",
                    "float",
                    "dict"
                ],
                "self": []
            },
            "variables": {
                "handler_class": [
                    "int",
                    "Dict[int, str]",
                    "dict",
                    "Dict[int, Any]"
                ],
                "kwargs": [
                    "dict",
                    "list"
                ],
                "regex": [
                    "str",
                    "Set[str]",
                    "List[int]",
                    "int"
                ]
            }
        },
        "URLSpec.__repr__": {
            "name": "__repr__",
            "location": 626,
            "return": [
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "global": {}
    },
    "tornado-5.0.2/tornado/simple_httpclient.py": {
        "SimpleAsyncHTTPClient.initialize": {
            "name": "initialize",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "defaults": [
                    "str"
                ],
                "hostname_mapping": [
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[bool]",
                    "Optional[List[str]]",
                    "bool"
                ],
                "kwargs": [],
                "max_body_size": [
                    "int",
                    "Optional[int]"
                ],
                "max_buffer_size": [
                    "int",
                    "float",
                    "str"
                ],
                "max_clients": [
                    "str",
                    "int"
                ],
                "max_header_size": [
                    "Callable",
                    "int",
                    "float",
                    "Optional[int]",
                    "List[str]"
                ],
                "resolver": [
                    "str",
                    "int",
                    "bool"
                ],
                "self": []
            },
            "variables": {
                "active": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ],
                "max_body_size": [
                    "int",
                    "Tuple[int, Any]"
                ],
                "max_buffer_size": [
                    "int"
                ],
                "max_clients": [
                    "str",
                    "int"
                ],
                "max_header_size": [
                    "int"
                ],
                "own_resolver": [
                    "str",
                    "int",
                    "dict",
                    "float"
                ],
                "queue": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ],
                "resolver": [
                    "str",
                    "int"
                ],
                "tcp_client": [
                    "str",
                    "set"
                ],
                "waiting": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ]
            }
        },
        "SimpleAsyncHTTPClient.close": {
            "name": "close",
            "location": 104,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "SimpleAsyncHTTPClient.fetch_impl": {
            "name": "fetch_impl",
            "location": 110,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "callback": [
                    "dict",
                    "Exception",
                    "int"
                ],
                "kwargs": [],
                "request": [
                    "int",
                    "Exception"
                ],
                "self": []
            },
            "variables": {
                "key": [
                    "Dict[str, functools.partial[Any]]",
                    "bytes"
                ],
                "timeout_handle": [
                    "int",
                    "float",
                    "bool",
                    "set"
                ]
            }
        },
        "SimpleAsyncHTTPClient._process_queue": {
            "name": "_process_queue",
            "location": 127,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "callback": [
                    "str",
                    "List[str]"
                ],
                "key": [],
                "release_callback": [
                    "dict"
                ],
                "request": [
                    "Dict[str, Any]"
                ]
            }
        },
        "SimpleAsyncHTTPClient._connection_class": {
            "name": "_connection_class",
            "location": 138,
            "return": [
                "int",
                "str",
                "Callable[..., T]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "SimpleAsyncHTTPClient._handle_request": {
            "name": "_handle_request",
            "location": 141,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "final_callback": [
                    "int",
                    "Exception",
                    "experimental.util.alice.alice_pb2.RunRequest"
                ],
                "kwargs": [],
                "release_callback": [
                    "int",
                    "Exception",
                    "experimental.util.alice.alice_pb2.RunRequest"
                ],
                "request": [
                    "int",
                    "Exception",
                    "experimental.util.alice.alice_pb2.RunRequest"
                ],
                "self": []
            },
            "variables": {}
        },
        "SimpleAsyncHTTPClient._release_fetch": {
            "name": "_release_fetch",
            "location": 147,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "key": [
                    "Optional[str]",
                    "str",
                    "tuple",
                    "Dict[str, str]",
                    "int",
                    "Callable[[KT], VT]",
                    "Type[RuntimeError]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "SimpleAsyncHTTPClient._remove_timeout": {
            "name": "_remove_timeout",
            "location": 151,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "key": [
                    "dict",
                    "Union[str, int]",
                    "Dict[str, str]",
                    "Sequence[Any]",
                    "Callable"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "callback": [
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "Dict[Any, str]",
                    "dict",
                    "List[List[int]]"
                ],
                "request": [
                    "dict",
                    "Dict[str, Union[int, str]]"
                ],
                "timeout_handle": [
                    "int",
                    "str",
                    "Tuple[Tuple[Any, Any]]"
                ]
            }
        },
        "SimpleAsyncHTTPClient._on_timeout": {
            "name": "_on_timeout",
            "location": 158,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "info": [
                    "str",
                    "int"
                ],
                "key": [
                    "Sequence[Any]",
                    "float",
                    "static_frame.core.util.GetItemKeyType",
                    "str",
                    "dict"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "callback": [
                    "str",
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "int"
                ],
                "error_message": [
                    "Dict[str, str]",
                    "str",
                    "Tuple[str]",
                    "Dict[str, List[Any]]",
                    "Dict[str, Any]"
                ],
                "request": [],
                "timeout_handle": [
                    "int",
                    "Dict[str, str]",
                    "list",
                    "str"
                ],
                "timeout_response": [
                    "Dict[str, str]",
                    "str",
                    "Dict[str, Dict[str, str]]"
                ]
            }
        },
        "_HTTPConnection.__init__": {
            "name": "__init__",
            "location": 180,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "client": [
                    "Tuple[int, int]",
                    "int",
                    "str"
                ],
                "final_callback": [
                    "Tuple[int, int]",
                    "int",
                    "str"
                ],
                "kwargs": [],
                "max_body_size": [
                    "int",
                    "Optional[int]",
                    "str"
                ],
                "max_buffer_size": [
                    "int",
                    "Optional[int]",
                    "float",
                    "bool",
                    "Optional[Union[int, float]]"
                ],
                "max_header_size": [
                    "int",
                    "str",
                    "Optional[int]"
                ],
                "release_callback": [
                    "Tuple[int, int]",
                    "int",
                    "str"
                ],
                "request": [
                    "bool",
                    "int"
                ],
                "self": [],
                "tcp_client": [
                    "int",
                    "bool",
                    "str"
                ]
            },
            "variables": {
                "_": [
                    "int",
                    "str",
                    "List[str]",
                    "Union[bytes, int]",
                    "bool",
                    "Tuple[int, int]"
                ],
                "_decompressor": [
                    "\"Frame\"",
                    "str",
                    "Dict[str, Any]"
                ],
                "_sockaddr": [
                    "\"Frame\"",
                    "str",
                    "Dict[str, Any]"
                ],
                "_timeout": [
                    "int",
                    "Tuple[Any, Any]"
                ],
                "af": [
                    "int"
                ],
                "chunks": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ],
                "client": [
                    "\"Client\"",
                    "int",
                    "Dict[str, Any]"
                ],
                "code": [
                    "Pattern[str]",
                    "List[str]",
                    "frozenset[str]",
                    "Dict[str, Union[Any, Any]]",
                    "str"
                ],
                "final_callback": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ],
                "headers": [
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, List[str]]"
                ],
                "host": [
                    "str"
                ],
                "io_loop": [
                    "int",
                    "float",
                    "property"
                ],
                "max_body_size": [
                    "int",
                    "Tuple[int, Any]"
                ],
                "max_buffer_size": [
                    "int"
                ],
                "max_header_size": [
                    "int"
                ],
                "netloc": [
                    "str",
                    "int"
                ],
                "parsed": [
                    "str",
                    "list",
                    "List[str]",
                    "Dict[str, str]"
                ],
                "parsed_hostname": [
                    "int",
                    "str",
                    "denite.util.Candidates",
                    "denite.util.UserContext",
                    "dict"
                ],
                "port": [
                    "list",
                    "io.TextIOWrapper",
                    "List[str]"
                ],
                "release_callback": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ],
                "request": [
                    "list",
                    "Dict[str, Any]",
                    "str"
                ],
                "ssl_options": [
                    "bytes",
                    "str",
                    "dict",
                    "List[str]",
                    "List[float]",
                    "Pattern[str]"
                ],
                "start_time": [
                    "int"
                ],
                "tcp_client": [
                    "str"
                ],
                "timeout": [
                    "int",
                    "float"
                ],
                "userpass": [
                    "int",
                    "str",
                    "List[str]",
                    "Union[bytes, int]",
                    "bool",
                    "Tuple[int, int]"
                ]
            }
        },
        "_HTTPConnection._get_ssl_options": {
            "name": "_get_ssl_options",
            "location": 235,
            "return": [
                "Dict[str, Any]",
                "str",
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "scheme": [
                    "int",
                    "bool",
                    "str"
                ],
                "self": []
            },
            "variables": {
                "check_hostname": [
                    "str",
                    "dict",
                    "Dict[str, Union[Any, Any]]"
                ],
                "ssl_ctx": [
                    "ssl.SSLContext",
                    "str"
                ],
                "verify_mode": [
                    "str",
                    "int",
                    "bool",
                    "Pattern[str]",
                    "List[str]"
                ]
            }
        },
        "_HTTPConnection._on_timeout": {
            "name": "_on_timeout",
            "location": 261,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "info": [
                    "str",
                    "static_frame.core.util.GetItemKeyType",
                    "Optional[Any]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_timeout": [
                    "int"
                ],
                "error_message": [
                    "str",
                    "functools.partial[None]"
                ]
            }
        },
        "_HTTPConnection._remove_timeout": {
            "name": "_remove_timeout",
            "location": 273,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_timeout": [
                    "int",
                    "Optional[int]",
                    "Optional[float]"
                ]
            }
        },
        "_HTTPConnection._on_connect": {
            "name": "_on_connect",
            "location": 278,
            "return": [
                "Iterator"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "stream": [
                    "io.BytesIO",
                    "int"
                ]
            },
            "variables": {
                "_timeout": [
                    "int"
                ],
                "auth": [],
                "body_expected": [
                    "str"
                ],
                "body_present": [
                    "dict",
                    "int",
                    "list"
                ],
                "connection": [
                    "str",
                    "int",
                    "Dict[str, str]"
                ],
                "password": [
                    "str"
                ],
                "req_path": [
                    "str"
                ],
                "start_line": [
                    "str",
                    "int",
                    "Dict[str, int]"
                ],
                "stream": [
                    "io.StringIO",
                    "pymatgen.io.vasp.outputs.Vasprun",
                    "pymatgen.io.lammps.data.Topology",
                    "io.BufferedReader",
                    "io.TextIOWrapper"
                ],
                "username": [
                    "Optional[object]",
                    "list",
                    "Dict[str, int]"
                ]
            }
        },
        "_HTTPConnection._create_connection": {
            "name": "_create_connection",
            "location": 359,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "stream": [
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "bool"
                ]
            },
            "variables": {
                "connection": [
                    "float",
                    "int",
                    "io.BufferedWriter",
                    "bool"
                ]
            }
        },
        "_HTTPConnection.on_body_written": {
            "name": "on_body_written",
            "location": 379,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "fut": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "_HTTPConnection._write_body": {
            "name": "_write_body",
            "location": 371,
            "return": [
                "str",
                "Iterable[Mapping[str, Any]]",
                "Optional[bool]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "start_read": [
                    "int",
                    "bool"
                ]
            },
            "variables": {
                "fut": [
                    "List[int]",
                    "list"
                ]
            }
        },
        "_HTTPConnection._read_response": {
            "name": "_read_response",
            "location": 390,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "_HTTPConnection._release": {
            "name": "_release",
            "location": 397,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "release_callback": [
                    "str",
                    "int",
                    "bool",
                    "Optional[int]"
                ]
            }
        },
        "_HTTPConnection._run_callback": {
            "name": "_run_callback",
            "location": 403,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "response": [
                    "int",
                    "Optional[int]",
                    "dict"
                ],
                "self": []
            },
            "variables": {
                "final_callback": [
                    "Dict[Any, List[str]]",
                    "float",
                    "str",
                    "Optional[Callable[..., Any]]",
                    "int"
                ]
            }
        },
        "_HTTPConnection._handle_exception": {
            "name": "_handle_exception",
            "location": 410,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "tb": [
                    "str",
                    "list",
                    "List[int]"
                ],
                "typ": [
                    "str",
                    "list",
                    "List[int]"
                ],
                "value": [
                    "str",
                    "Optional[str]",
                    "IO[bytes]",
                    "Callable"
                ]
            },
            "variables": {
                "value": [
                    "str"
                ]
            }
        },
        "_HTTPConnection.on_connection_close": {
            "name": "on_connection_close",
            "location": 435,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "message": [
                    "str",
                    "int"
                ]
            }
        },
        "_HTTPConnection.headers_received": {
            "name": "headers_received",
            "location": 445,
            "return": [
                "Iterator[Dict[str, str]]",
                "set"
            ],
            "arguments": {
                "args": [],
                "first_line": [
                    "str",
                    "List[str]",
                    "bytes"
                ],
                "headers": [
                    "str",
                    "dict",
                    "Optional[Dict[str, Any]]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "code": [
                    "int",
                    "Dict[int, str]",
                    "str",
                    "Dict[str, str]",
                    "Dict[str, int]",
                    "dict",
                    "Dict[int, Union[Any, Any]]"
                ],
                "headers": [
                    "Dict[str, str]"
                ],
                "reason": [
                    "str",
                    "List[str]",
                    "io.StringIO"
                ]
            }
        },
        "_HTTPConnection._should_follow_redirect": {
            "name": "_should_follow_redirect",
            "location": 463,
            "return": [
                "str",
                "Optional[Dict]",
                "List[str]",
                "dict"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "_HTTPConnection.finish": {
            "name": "finish",
            "location": 468,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "body": [
                    "str",
                    "Dict[str, Any]",
                    "bytes",
                    "Dict[str, Union[str, Any]]"
                ],
                "buffer": [
                    "bytes",
                    "io.BytesIO"
                ],
                "data": [
                    "str",
                    "bytes",
                    "List[int]"
                ],
                "final_callback": [
                    "bool",
                    "Tuple[Any, Any]",
                    "int",
                    "dict",
                    "str",
                    "Dict[str, Union[Any, str]]",
                    "Dict[str, Union[Any, Any, bytes]]",
                    "Dict[str, Union[Any, bytes]]"
                ],
                "max_redirects": [
                    "str",
                    "float",
                    "List[Tuple[str, Any]]",
                    "list",
                    "Dict[str, Dict[str, Any]]",
                    "List[str]"
                ],
                "method": [
                    "str"
                ],
                "new_request": [],
                "original_request": [],
                "response": [
                    "Dict[str, str]"
                ],
                "url": []
            }
        },
        "_HTTPConnection._on_end_request": {
            "name": "_on_end_request",
            "location": 516,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "_HTTPConnection.data_received": {
            "name": "data_received",
            "location": 519,
            "return": [
                "Union[tuple, list]",
                "Iterable[Hashable]"
            ],
            "arguments": {
                "args": [],
                "chunk": [
                    "Callable",
                    "io.BytesIO",
                    "bytes"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "global": {
            "ssl": [
                "str",
                "Optional[bool]"
            ]
        }
    },
    "tornado-5.0.2/tornado/stack_context.py": {
        "_remove_deactivated": {
            "name": "_remove_deactivated",
            "location": 228,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "contexts": [
                    "str",
                    "ClassVar",
                    "List[str]",
                    "bool",
                    "int"
                ],
                "kwargs": []
            },
            "variables": {
                "ctx": [
                    "threading.local"
                ],
                "head": [
                    "dict",
                    "list",
                    "int"
                ],
                "old_contexts": [
                    "bool",
                    "Optional[str]",
                    "list",
                    "List[Tuple[str, str]]"
                ],
                "parent": [
                    "str"
                ],
                "stack_contexts": [
                    "bool",
                    "Dict[str, Dict[str, Any]]",
                    "Dict[str, Tuple[str, bool]]"
                ]
            }
        },
        "null_wrapper": {
            "name": "null_wrapper",
            "location": 272,
            "return": [
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": []
            },
            "variables": {
                "contexts": [
                    "dict",
                    "Dict[str, Any]"
                ],
                "current_state": [
                    "str",
                    "Tuple[str, str, str, str, str, str, str, str, str, str, str, str, str]",
                    "set"
                ]
            }
        },
        "wrapped": {
            "name": "wrapped",
            "location": 282,
            "return": [
                "bool",
                "List[str]",
                "Set[str]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": []
            },
            "variables": {
                "c": [],
                "contexts": [],
                "current_state": [
                    "str",
                    "Tuple[str, str, str, str, str, str, str, str, str, str, str, str, str]",
                    "set"
                ],
                "exc": [
                    "threading.local",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "Dict[str, Tuple[str, str]]",
                    "dict",
                    "Dict[str, Type[Any]]",
                    "str"
                ],
                "last_ctx": [
                    "bool",
                    "Set[Pattern[str]]",
                    "str",
                    "dict",
                    "list",
                    "List[Dict[str, Any]]",
                    "Set[Union[int, str]]",
                    "Dict[str, Union[Any, Any]]",
                    "int"
                ],
                "ret": [
                    "Optional[Callable[..., Any]]",
                    "Set[str]",
                    "Optional[str]",
                    "Optional[Tuple[str, str]]",
                    "Type[str]"
                ],
                "stack": [
                    "int",
                    "Set[int]",
                    "bytes",
                    "str",
                    "frozenset[str]"
                ],
                "top": [
                    "int",
                    "Optional[str]",
                    "Optional[int]",
                    "str",
                    "list",
                    "dict",
                    "Tuple[int, int, int, int, int, int, int, int, int, int]"
                ]
            }
        },
        "wrap": {
            "name": "wrap",
            "location": 254,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "fn": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "kwargs": []
            },
            "variables": {
                "_wrapped": [
                    "bool",
                    "str"
                ],
                "cap_contexts": [
                    "str",
                    "List[str]",
                    "int",
                    "Dict[str, List[Any]]",
                    "Tuple[str, str, str, str, str, str, str, str]"
                ]
            }
        },
        "_handle_exception": {
            "name": "_handle_exception",
            "location": 353,
            "return": [
                "float",
                "bool",
                "Callable[[None], bool]",
                "List[str]"
            ],
            "arguments": {
                "args": [],
                "exc": [
                    "dict",
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ],
                "kwargs": [],
                "tail": [
                    "str",
                    "dict",
                    "Optional[str]"
                ]
            },
            "variables": {
                "exc": [
                    "Dict[str, Any]",
                    "list",
                    "threading.local",
                    "Dict[str, Tuple[Any, Any]]",
                    "List[Dict[str, Any]]",
                    "Dict[str, Tuple[str, str]]"
                ],
                "tail": [
                    "str",
                    "int",
                    "Optional[str]",
                    "dict",
                    "Dict[str, Union[bool, str]]",
                    "List[List[str]]"
                ]
            }
        },
        "run_with_stack_context": {
            "name": "run_with_stack_context",
            "location": 366,
            "return": [
                "Awaitable",
                "Sequence['cirq.Qid']"
            ],
            "arguments": {
                "args": [],
                "context": [
                    "Callable",
                    "Callable[[], None]",
                    "Callable[..., Dict]"
                ],
                "func": [
                    "Callable",
                    "Callable[[], None]",
                    "Callable[..., Dict]"
                ],
                "kwargs": []
            },
            "variables": {}
        },
        "_State.__init__": {
            "name": "__init__",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "contexts": [
                    "list",
                    "List[List[str]]",
                    "int",
                    "List[type]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "StackContext.__init__": {
            "name": "__init__",
            "location": 109,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "context_factory": [
                    "int",
                    "bool",
                    "float"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "active": [
                    "str",
                    "bool"
                ],
                "context_factory": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ],
                "contexts": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ]
            }
        },
        "StackContext._deactivate": {
            "name": "_deactivate",
            "location": 114,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "active": [
                    "int",
                    "float"
                ]
            }
        },
        "StackContext.enter": {
            "name": "enter",
            "location": 118,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "context": [
                    "Dict[str, str]",
                    "set",
                    "Tuple[Any, Literal]",
                    "Dict[str, Union[Any, Any, Any]]",
                    "Set[str]",
                    "Dict[str, Union[Any, Any]]",
                    "str",
                    "dict",
                    "Tuple[None]"
                ]
            }
        },
        "StackContext.exit": {
            "name": "exit",
            "location": 123,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "traceback": [
                    "Type[BaseException]",
                    "BaseException"
                ],
                "type": [
                    "Type[BaseException]",
                    "BaseException"
                ],
                "value": [
                    "Type[BaseException]",
                    "BaseException"
                ]
            },
            "variables": {
                "context": [
                    "str",
                    "Set[str]",
                    "list"
                ]
            }
        },
        "StackContext.__enter__": {
            "name": "__enter__",
            "location": 130,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "contexts": [
                    "Optional[int]",
                    "BaseException",
                    "bool"
                ],
                "new_contexts": [
                    "int",
                    "float",
                    "Tuple[int, int]"
                ],
                "old_contexts": [
                    "str",
                    "List[int]",
                    "int",
                    "bool"
                ]
            }
        },
        "StackContext.__exit__": {
            "name": "__exit__",
            "location": 143,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "traceback": [
                    "Type[BaseException]",
                    "BaseException"
                ],
                "type": [
                    "Type[BaseException]",
                    "BaseException"
                ],
                "value": [
                    "Type[BaseException]",
                    "BaseException"
                ]
            },
            "variables": {
                "contexts": [
                    "dict"
                ],
                "final_contexts": [
                    "dict"
                ],
                "new_contexts": [
                    "dict",
                    "set",
                    "list",
                    "List[str]",
                    "Dict[str, int]"
                ]
            }
        },
        "ExceptionStackContext.__init__": {
            "name": "__init__",
            "location": 178,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "exception_handler": [
                    "Callable",
                    "Optional[int]",
                    "str",
                    "bool"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "active": [
                    "str",
                    "bool"
                ],
                "exception_handler": [
                    "bool",
                    "Dict[str, Union[None, Any, int, str]]",
                    "dict",
                    "List[str]",
                    "str",
                    "int"
                ]
            }
        },
        "ExceptionStackContext._deactivate": {
            "name": "_deactivate",
            "location": 182,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "active": [
                    "int",
                    "float"
                ]
            }
        },
        "ExceptionStackContext.exit": {
            "name": "exit",
            "location": 185,
            "return": [
                "str",
                "Callable[..., T]",
                "tuple"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "traceback": [],
                "type": [
                    "Optional[Callable[[bool], None]]",
                    "Optional[Type[BaseException]]"
                ],
                "value": []
            },
            "variables": {}
        },
        "ExceptionStackContext.__enter__": {
            "name": "__enter__",
            "location": 189,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "contexts": [
                    "str"
                ],
                "new_contexts": [
                    "int",
                    "float",
                    "Tuple[int, int]"
                ],
                "old_contexts": [
                    "str",
                    "Tuple[str, str]",
                    "Dict[str, str]",
                    "Dict[str, Union[Any, str]]",
                    "Dict[str, Dict[int, str]]"
                ]
            }
        },
        "ExceptionStackContext.__exit__": {
            "name": "__exit__",
            "location": 196,
            "return": [
                "str",
                "Callable[..., T]",
                "tuple"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "traceback": [],
                "type": [
                    "Optional[Callable[[bool], None]]",
                    "Optional[Type[BaseException]]"
                ],
                "value": []
            },
            "variables": {
                "contexts": [
                    "dict"
                ],
                "final_contexts": [
                    "dict"
                ],
                "new_contexts": [
                    "dict",
                    "set",
                    "list",
                    "List[str]",
                    "Dict[str, int]"
                ]
            }
        },
        "NullContext.__enter__": {
            "name": "__enter__",
            "location": 220,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "contexts": [
                    "Tuple[str, str, str, str, str, str, str, str, str, str, str, str, str, str]",
                    "Tuple[Literal, None]",
                    "Type[Tuple[int, int, int]]",
                    "Tuple[Literal, Literal, Literal, Literal]",
                    "Final",
                    "Dict[str, Tuple[str, Any]]"
                ],
                "old_contexts": [
                    "bool",
                    "Optional[int]",
                    "Callable"
                ]
            }
        },
        "NullContext.__exit__": {
            "name": "__exit__",
            "location": 224,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "traceback": [
                    "Optional[BaseException]"
                ],
                "type": [
                    "Optional[BaseException]"
                ],
                "value": [
                    "Optional[BaseException]"
                ]
            },
            "variables": {
                "contexts": [
                    "int",
                    "str",
                    "Dict[str, int]",
                    "float"
                ]
            }
        },
        "global": {
            "_state": [
                "str",
                "dict"
            ]
        }
    },
    "tornado-5.0.2/tornado/tcpclient.py": {
        "_Connector.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "addrinfo": [
                    "str",
                    "bool"
                ],
                "args": [],
                "connect": [
                    "int",
                    "bool",
                    "float"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "connect": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ],
                "connect_timeout": [
                    "int",
                    "Tuple[Any, Any]",
                    "Dict[int, FrozenSet[int]]"
                ],
                "future": [
                    "int",
                    "List[str]",
                    "list",
                    "List[float]"
                ],
                "io_loop": [
                    "int",
                    "List[str]",
                    "\"Point\"",
                    "float",
                    "str",
                    "Type[int]"
                ],
                "last_error": [
                    "Set[str]",
                    "Dict[Hashable, int]",
                    "float",
                    "Type[List[Any]]",
                    "int",
                    "Type[str]",
                    "List[Dict[str, Any]]",
                    "Pattern[str]"
                ],
                "primary_addrs": [
                    "Pattern[str]",
                    "Dict[str, Union[Any, Any]]",
                    "Dict[str, str]"
                ],
                "remaining": [
                    "Dict[str, int]",
                    "List[int]",
                    "dict",
                    "float",
                    "Dict[str, List[str]]",
                    "int",
                    "DefaultDict[Any, Set[Any]]",
                    "Type[str]"
                ],
                "secondary_addrs": [
                    "str",
                    "Pattern[str]",
                    "Dict[int, str]",
                    "int",
                    "list"
                ],
                "streams": [
                    "str",
                    "int"
                ],
                "timeout": [
                    "int"
                ]
            }
        },
        "_Connector.split": {
            "name": "split",
            "location": 67,
            "return": [
                "str",
                "Iterable[str]",
                "Union[List, Dict]",
                "List[str]",
                "bool",
                "List[Mapping[str, Any]]"
            ],
            "arguments": {
                "addrinfo": [
                    "Callable[[T], bool]",
                    "str",
                    "List[Tuple]",
                    "bool"
                ],
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "primary": [
                    "str",
                    "list",
                    "Dict[str, Optional[str]]",
                    "List[str]",
                    "List[Pattern]"
                ],
                "primary_af": [
                    "str",
                    "List[str]",
                    "list",
                    "List[List[int]]",
                    "Dict[str, int]",
                    "KeysView[int]",
                    "List[int]"
                ],
                "secondary": [
                    "list",
                    "Generator[Any, None, None]",
                    "List[Tuple[int, int]]",
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "_Connector.start": {
            "name": "start",
            "location": 86,
            "return": [
                "int",
                "Tuple[str, str]",
                "str",
                "list"
            ],
            "arguments": {
                "args": [],
                "connect_timeout": [
                    "Union[float, datetime.timedelta]",
                    "int",
                    "float",
                    "str"
                ],
                "kwargs": [],
                "self": [],
                "timeout": [
                    "str",
                    "int",
                    "bytes"
                ]
            },
            "variables": {}
        },
        "_Connector.try_connect": {
            "name": "try_connect",
            "location": 93,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "addrs": [],
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "addr": [
                    "list"
                ],
                "af": [
                    "list"
                ],
                "future": [
                    "str",
                    "int",
                    "list",
                    "bool"
                ],
                "stream": [
                    "Dict[str, int]",
                    "int",
                    "dict",
                    "bytes",
                    "str"
                ]
            }
        },
        "_Connector.on_connect_done": {
            "name": "on_connect_done",
            "location": 109,
            "return": [],
            "arguments": {
                "addr": [
                    "bool",
                    "Callable[[Any], bool]",
                    "dict",
                    "str"
                ],
                "addrs": [
                    "int",
                    "float",
                    "List[str]",
                    "str"
                ],
                "af": [
                    "bool",
                    "Callable[[Any], bool]",
                    "dict",
                    "str"
                ],
                "args": [],
                "future": [
                    "list",
                    "str"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "last_error": [
                    "str",
                    "Dict[str, Tuple[str, None]]"
                ],
                "stream": [
                    "List[None]",
                    "int"
                ]
            }
        },
        "_Connector.set_timeout": {
            "name": "set_timeout",
            "location": 135,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "timeout": [
                    "int",
                    "Optional[int]",
                    "float"
                ]
            },
            "variables": {
                "timeout": [
                    "int",
                    "float"
                ]
            }
        },
        "_Connector.on_timeout": {
            "name": "on_timeout",
            "location": 139,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "timeout": [
                    "int"
                ]
            }
        },
        "_Connector.clear_timeout": {
            "name": "clear_timeout",
            "location": 144,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "_Connector.set_connect_timeout": {
            "name": "set_connect_timeout",
            "location": 148,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "connect_timeout": [
                    "int",
                    "str",
                    "Union[float, datetime.timedelta]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "connect_timeout": [
                    "int"
                ]
            }
        },
        "_Connector.on_connect_timeout": {
            "name": "on_connect_timeout",
            "location": 152,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "_Connector.clear_timeouts": {
            "name": "clear_timeouts",
            "location": 157,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "_Connector.close_streams": {
            "name": "close_streams",
            "location": 163,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TCPClient.__init__": {
            "name": "__init__",
            "location": 174,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "resolver": [
                    "Optional[float]",
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[Callable]",
                    "Optional[Hashable]",
                    "int"
                ],
                "self": []
            },
            "variables": {
                "_own_resolver": [
                    "str",
                    "int",
                    "dict",
                    "float"
                ],
                "resolver": [
                    "Dict[Optional[str], str]",
                    "int",
                    "list"
                ]
            }
        },
        "TCPClient.close": {
            "name": "close",
            "location": 182,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TCPClient.connect": {
            "name": "connect",
            "location": 187,
            "return": [
                ""
            ],
            "arguments": {
                "af": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "args": [],
                "host": [
                    "str",
                    "bool",
                    "int"
                ],
                "kwargs": [],
                "max_buffer_size": [
                    "int",
                    "Union[str, int]"
                ],
                "port": [
                    "str",
                    "int",
                    "bool"
                ],
                "self": [],
                "source_ip": [
                    "int",
                    "Union[str, int]"
                ],
                "source_port": [
                    "int",
                    "Union[str, int]"
                ],
                "ssl_options": [
                    "Optional[Any]",
                    "Optional[Dict[Any, Any]]",
                    "int",
                    "Optional[float]",
                    "str",
                    "Optional[static_frame.core.util.DepthLevelSpecifier]",
                    "Callable[[str], None]"
                ],
                "timeout": [
                    "Union[float, datetime.timedelta]",
                    "bool",
                    "datetime.timedelta",
                    "Optional[float]",
                    "Optional[bool]",
                    "str"
                ]
            },
            "variables": {
                "addr": [
                    "int"
                ],
                "addrinfo": [
                    "str",
                    "int",
                    "Set[str]",
                    "Tuple[float, float]",
                    "List[Tuple[str, str, Any]]"
                ],
                "af": [
                    "str",
                    "int"
                ],
                "connector": [],
                "stream": [
                    "int",
                    "str",
                    "Set[str]"
                ],
                "timeout": [
                    "int",
                    "float",
                    "Optional[int]",
                    "List[str]"
                ]
            }
        },
        "TCPClient._create_stream": {
            "name": "_create_stream",
            "location": 245,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "addr": [
                    "tuple",
                    "str",
                    "bytes"
                ],
                "af": [
                    "int",
                    "str"
                ],
                "args": [],
                "kwargs": [],
                "max_buffer_size": [
                    "int",
                    "float",
                    "bool"
                ],
                "self": [],
                "source_ip": [
                    "str",
                    "Optional[str]",
                    "Callable"
                ],
                "source_port": [
                    "int",
                    "Optional[str]",
                    "Dict[str, int]",
                    "str",
                    "Union[None, int]"
                ]
            },
            "variables": {
                "fu": [
                    "str"
                ],
                "socket_obj": [],
                "source_ip_bind": [
                    "str",
                    "bytes",
                    "Dict[str, str]"
                ],
                "source_port_bind": [
                    "int",
                    "str"
                ],
                "stream": [
                    "int"
                ]
            }
        },
        "global": {
            "_INITIAL_CONNECT_TIMEOUT": [
                "int",
                "float"
            ]
        }
    },
    "tornado-5.0.2/tornado/tcpserver.py": {
        "TCPServer.__init__": {
            "name": "__init__",
            "location": 108,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "max_buffer_size": [
                    "int",
                    "Union[Tuple[int, int], int]",
                    "Optional[int]"
                ],
                "read_chunk_size": [
                    "int",
                    "Callable[[int], bool]",
                    "str",
                    "bool"
                ],
                "self": [],
                "ssl_options": [
                    "str",
                    "int",
                    "Optional[str]",
                    "bool",
                    "List[str]"
                ]
            },
            "variables": {
                "_handlers": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ],
                "_pending_sockets": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ],
                "_sockets": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ],
                "_started": [
                    "int",
                    "str",
                    "list",
                    "List[int]"
                ],
                "_stopped": [
                    "Type[range]",
                    "int",
                    "dict",
                    "Union[Literal[False], Literal[True]]",
                    "List[str]",
                    "bytearray"
                ],
                "max_buffer_size": [
                    "int"
                ],
                "read_chunk_size": [
                    "int",
                    "float",
                    "bytes",
                    "Dict[str, int]"
                ],
                "ssl_options": [
                    "str",
                    "List[str]",
                    "Dict[str, str]",
                    "list",
                    "Pattern[str]",
                    "Set[str]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "TCPServer.listen": {
            "name": "listen",
            "location": 136,
            "return": [
                ""
            ],
            "arguments": {
                "address": [
                    "str",
                    "slice",
                    "List[int]",
                    "bool"
                ],
                "args": [],
                "kwargs": [],
                "port": [
                    "str",
                    "slice",
                    "List[int]",
                    "bool"
                ],
                "self": []
            },
            "variables": {
                "sockets": []
            }
        },
        "TCPServer.add_sockets": {
            "name": "add_sockets",
            "location": 147,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "sockets": [
                    "str",
                    "bytes",
                    "List[str]"
                ]
            },
            "variables": {}
        },
        "TCPServer.add_socket": {
            "name": "add_socket",
            "location": 161,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "socket": [
                    "int",
                    "Optional[str]"
                ]
            },
            "variables": {}
        },
        "TCPServer.bind": {
            "name": "bind",
            "location": 165,
            "return": [
                ""
            ],
            "arguments": {
                "address": [
                    "int",
                    "str",
                    "bool"
                ],
                "args": [],
                "backlog": [
                    "int",
                    "str",
                    "bool"
                ],
                "family": [
                    "int",
                    "str",
                    "bool"
                ],
                "kwargs": [],
                "port": [
                    "int",
                    "str",
                    "bool"
                ],
                "reuse_port": [
                    "int",
                    "str",
                    "bool"
                ],
                "self": []
            },
            "variables": {
                "sockets": [
                    "tornado.websockeWebSocketClientConnection",
                    "str",
                    "int"
                ]
            }
        },
        "TCPServer.start": {
            "name": "start",
            "location": 197,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "num_processes": [
                    "int",
                    "Optional[int]",
                    "float"
                ],
                "self": []
            },
            "variables": {
                "_pending_sockets": [
                    "str",
                    "int",
                    "Tuple[int, int, int]",
                    "Pattern[str]"
                ],
                "_started": [
                    "int",
                    "Callable",
                    "float",
                    "Optional[int]"
                ],
                "sockets": [
                    "Dict[Any, List[str]]",
                    "OrderedDict[str, Any]",
                    "list",
                    "Counter"
                ]
            }
        },
        "TCPServer.stop": {
            "name": "stop",
            "location": 225,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_stopped": [
                    "int"
                ]
            }
        },
        "TCPServer.handle_stream": {
            "name": "handle_stream",
            "location": 240,
            "return": [
                ""
            ],
            "arguments": {
                "address": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "args": [],
                "kwargs": [],
                "self": [],
                "stream": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            },
            "variables": {}
        },
        "TCPServer._handle_connection": {
            "name": "_handle_connection",
            "location": 257,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "address": [
                    "IO",
                    "int",
                    "Optional[Mapping[str, Any]]",
                    "BinaryIO"
                ],
                "args": [],
                "connection": [
                    "Dict[str, Any]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "connection": [
                    "str"
                ],
                "future": [],
                "stream": [
                    "int",
                    "float"
                ]
            }
        },
        "global": {
            "ssl": [
                "list",
                "bool",
                "int",
                "Dict[str, Union[Any, Any]]",
                "str"
            ]
        }
    },
    "tornado-5.0.2/tornado/template.py": {
        "filter_whitespace": {
            "name": "filter_whitespace",
            "location": 220,
            "return": [],
            "arguments": {
                "args": [],
                "kwargs": [],
                "mode": [
                    "str",
                    "int",
                    "bool",
                    "Tuple[int, int]"
                ],
                "text": [
                    "str",
                    "List[str]"
                ]
            },
            "variables": {
                "text": [
                    "str",
                    "Union[Literal, str]"
                ]
            }
        },
        "_format_code": {
            "name": "_format_code",
            "location": 789,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "args": [],
                "code": [
                    "str",
                    "bytes",
                    "dict"
                ],
                "kwargs": []
            },
            "variables": {
                "format": [
                    "List[str]",
                    "str",
                    "list",
                    "int",
                    "float",
                    "List[List[Any]]"
                ],
                "lines": [
                    "str",
                    "int",
                    "Callable[[List[str]], Iterable[str]]",
                    "List[str]"
                ]
            }
        },
        "_parse": {
            "name": "_parse",
            "location": 795,
            "return": [
                "int",
                "bytes",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "args": [],
                "in_block": [
                    "str"
                ],
                "in_loop": [
                    "str",
                    "bool",
                    "int",
                    "Optional[int]"
                ],
                "kwargs": [],
                "reader": [
                    "bool",
                    "str",
                    "Optional[str]"
                ],
                "template": [
                    "Optional[str]",
                    "Dict[str, int]",
                    "bool",
                    "int",
                    "Optional[float]"
                ]
            },
            "variables": {
                "allowed_parents": [
                    "threading.local",
                    "str",
                    "dict",
                    "Dict[str, Dict[str, Any]]",
                    "int",
                    "Tuple[Dict[str, Any], int]"
                ],
                "autoescape": [
                    "int",
                    "dict",
                    "List[int]",
                    "List[List[int]]",
                    "str",
                    "datetime.timedelta"
                ],
                "block": [
                    "list"
                ],
                "block_body": [
                    "Counter[str]",
                    "str"
                ],
                "body": [
                    "list",
                    "str",
                    "List[str]",
                    "List[Dict[str, Any]]"
                ],
                "cons": [
                    "Tuple[Literal, Literal, Literal]",
                    "Dict[str, Dict[str, Any]]"
                ],
                "contents": [
                    "str"
                ],
                "curly": [
                    "int",
                    "dict",
                    "List[int]",
                    "List[List[int]]",
                    "str",
                    "datetime.timedelta"
                ],
                "end": [],
                "fn": [
                    "str",
                    "Sequence[str]",
                    "threading.local",
                    "list"
                ],
                "intermediate_blocks": [
                    "set",
                    "Set[T]"
                ],
                "line": [
                    "list",
                    "List[str]",
                    "str"
                ],
                "mode": [
                    "str",
                    "Type[str]",
                    "Type[List[Any]]",
                    "Tuple[str, str, str, str, str]",
                    "int"
                ],
                "operator": [
                    "Dict[str, str]",
                    "Dict[str, Union[Any, Any]]",
                    "str"
                ],
                "space": [
                    "str",
                    "Pattern[str]"
                ],
                "start_brace": [
                    "int",
                    "defaultdict",
                    "float",
                    "list",
                    "Dict[str, Any]"
                ],
                "suffix": [
                    "libkol.util.parsing.ResourceGain"
                ],
                "whitespace": [
                    "str",
                    "List[str]",
                    "Tuple[Any, Any]",
                    "list"
                ]
            }
        },
        "Template.__init__": {
            "name": "__init__",
            "location": 254,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "autoescape": [
                    "str",
                    "bool",
                    "int",
                    "Optional[Dict[str, Any]]"
                ],
                "compress_whitespace": [
                    "str",
                    "bool",
                    "int",
                    "Optional[Dict[str, Any]]"
                ],
                "kwargs": [],
                "loader": [
                    "str",
                    "datetime.datetime",
                    "int",
                    "Dict[int, Dict[str, float]]"
                ],
                "name": [
                    "str",
                    "List[str]",
                    "Iterable[str]"
                ],
                "self": [],
                "template_string": [
                    "Union[str, bytes]",
                    "str",
                    "Dict[str, Any]"
                ],
                "whitespace": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Optional[IO[bytes]]",
                    "Optional[datetime.datetime]"
                ]
            },
            "variables": {
                "autoescape": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "int"
                ],
                "code": [
                    "str",
                    "int",
                    "Dict[str, Union[Any, Any, Any]]",
                    "Dict[str, str]",
                    "List[str]"
                ],
                "compiled": [
                    "str",
                    "Dict[str, Type[Any]]",
                    "FrozenSet",
                    "Dict[str, Dict[str, float]]"
                ],
                "file": [
                    "List[str]",
                    "list",
                    "io.TextIOWrapper"
                ],
                "formatted_code": [
                    "str",
                    "Dict[str, str]"
                ],
                "loader": [
                    "str"
                ],
                "name": [
                    "str",
                    "Dict[str, str]"
                ],
                "namespace": [
                    "Tuple[Literal, None]",
                    "List[str]",
                    "Tuple[str, str, str, str, str, str, str, str, str, str, str, str, str, str]",
                    "str",
                    "Dict[str, List[Any]]",
                    "Dict[str, Tuple[str, Any]]"
                ],
                "reader": [
                    "str",
                    "Dict[str, int]",
                    "io.TextIOWrapper"
                ],
                "whitespace": [
                    "str",
                    "Optional[str]",
                    "frozenset[str]",
                    "ImportError"
                ]
            }
        },
        "Template.generate": {
            "name": "generate",
            "location": 321,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "execute": [
                    "int",
                    "dict",
                    "List[int]",
                    "List[List[int]]",
                    "str",
                    "datetime.timedelta"
                ],
                "namespace": [
                    "str",
                    "list"
                ]
            }
        },
        "Template._generate_python": {
            "name": "_generate_python",
            "location": 348,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "loader": [
                    "str",
                    "Iterable[Any]",
                    "List[util.Block]",
                    "util.XYZ"
                ],
                "self": []
            },
            "variables": {
                "ancestors": [
                    "int",
                    "str",
                    "List[str]",
                    "List[int]",
                    "dict"
                ],
                "buffer": [
                    "io.BufferedWriter",
                    "authorityspoke.io.schemas.HoldingSchema",
                    "Tuple[Literal, Literal, Literal]",
                    "io.BufferedReader",
                    "TextIO"
                ],
                "named_blocks": [
                    "dict",
                    "str",
                    "Dict[str, int]",
                    "Tuple[Literal, Literal, Literal]",
                    "Type[str]",
                    "List[str]"
                ],
                "writer": [
                    "Set[str]",
                    "set",
                    "Dict[str, str]",
                    "list",
                    "int"
                ]
            }
        },
        "Template._get_ancestors": {
            "name": "_get_ancestors",
            "location": 364,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "loader": [
                    "Type",
                    "bool",
                    "str"
                ],
                "self": []
            },
            "variables": {
                "ancestors": [
                    "Optional[str]",
                    "int",
                    "str"
                ],
                "template": [
                    "List[str]",
                    "frozenset[str]",
                    "bool",
                    "Union[List[Any], str]",
                    "dict",
                    "Generator[Any, None, None]"
                ]
            }
        },
        "BaseLoader.__init__": {
            "name": "__init__",
            "location": 383,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "autoescape": [
                    "int",
                    "bool",
                    "float"
                ],
                "kwargs": [],
                "namespace": [
                    "int",
                    "bool",
                    "float"
                ],
                "self": [],
                "whitespace": [
                    "int",
                    "bool",
                    "float"
                ]
            },
            "variables": {
                "autoescape": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ],
                "lock": [
                    "threading.Lock",
                    "threading.RLock",
                    "Tuple[Any, Any]",
                    "list",
                    "int"
                ],
                "namespace": [
                    "list",
                    "Dict[str, List[str]]",
                    "int",
                    "Dict[str, str]",
                    "List[str]",
                    "Tuple[Literal, Literal, Literal, Literal]",
                    "List[Union[int, Any, Any]]",
                    "Type[Tuple[int, int, int]]"
                ],
                "templates": [
                    "str",
                    "Dict[str, Any]",
                    "Callable",
                    "bytes",
                    "int"
                ],
                "whitespace": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ]
            }
        },
        "BaseLoader.reset": {
            "name": "reset",
            "location": 411,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "templates": [
                    "str",
                    "Dict[str, Any]",
                    "Callable",
                    "bytes",
                    "int"
                ]
            }
        },
        "BaseLoader.resolve_path": {
            "name": "resolve_path",
            "location": 416,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "name": [
                    "str",
                    "bool"
                ],
                "parent_path": [
                    "str",
                    "bool"
                ],
                "self": []
            },
            "variables": {}
        },
        "BaseLoader.load": {
            "name": "load",
            "location": 420,
            "return": [
                "str",
                "Optional[Tuple[str]]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "name": [
                    "str",
                    "bool"
                ],
                "parent_path": [
                    "str",
                    "Union[str, BinaryIO]"
                ],
                "self": []
            },
            "variables": {
                "name": [
                    "str"
                ]
            }
        },
        "BaseLoader._create_template": {
            "name": "_create_template",
            "location": 428,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "name": [
                    "str",
                    "dict"
                ],
                "self": []
            },
            "variables": {}
        },
        "Loader.__init__": {
            "name": "__init__",
            "location": 435,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "root_directory": [
                    "str"
                ],
                "self": []
            },
            "variables": {
                "root": [
                    "str"
                ]
            }
        },
        "Loader.resolve_path": {
            "name": "resolve_path",
            "location": 439,
            "return": [
                "str",
                "Optional[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "name": [
                    "str",
                    "io.BytesIO"
                ],
                "parent_path": [
                    "str"
                ],
                "self": []
            },
            "variables": {
                "current_path": [
                    "str"
                ],
                "file_dir": [
                    "str",
                    "Dict[str, str]",
                    "Union[Literal, str]"
                ],
                "name": [
                    "str",
                    "Dict[str, Union[Any, Any]]"
                ],
                "relative_path": [
                    "str"
                ]
            }
        },
        "Loader._create_template": {
            "name": "_create_template",
            "location": 450,
            "return": [
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "name": [
                    "str"
                ],
                "self": []
            },
            "variables": {
                "path": [
                    "str",
                    "Generator[str, None, None]"
                ],
                "template": [
                    "str",
                    "bytes",
                    "List[str]",
                    "threading.Lock"
                ]
            }
        },
        "DictLoader.__init__": {
            "name": "__init__",
            "location": 459,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "dict": [
                    "str",
                    "List[str]",
                    "Sequence[str]",
                    "bool",
                    "bytes",
                    "int"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "dict": [
                    "Dict[str, int]",
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, Dict[str, Any]]",
                    "Dict[str, str]",
                    "Type[Dict[int, Any]]"
                ]
            }
        },
        "DictLoader.resolve_path": {
            "name": "resolve_path",
            "location": 463,
            "return": [
                "str",
                "Optional[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "name": [
                    "str"
                ],
                "parent_path": [
                    "str"
                ],
                "self": []
            },
            "variables": {
                "file_dir": [
                    "str",
                    "bool"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "DictLoader._create_template": {
            "name": "_create_template",
            "location": 471,
            "return": [],
            "arguments": {
                "args": [],
                "kwargs": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "Tuple[str]"
                ],
                "self": []
            },
            "variables": {}
        },
        "_Node.each_child": {
            "name": "each_child",
            "location": 476,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "_Node.generate": {
            "name": "generate",
            "location": 479,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "writer": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            },
            "variables": {}
        },
        "_Node.find_named_blocks": {
            "name": "find_named_blocks",
            "location": 482,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "loader": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "named_blocks": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "self": []
            },
            "variables": {}
        },
        "_File.__init__": {
            "name": "__init__",
            "location": 488,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "body": [
                    "str",
                    "int",
                    "float"
                ],
                "kwargs": [],
                "self": [],
                "template": [
                    "str",
                    "int",
                    "float"
                ]
            },
            "variables": {
                "body": [
                    "dict",
                    "list",
                    "List[str]",
                    "int",
                    "str"
                ],
                "line": [
                    "int",
                    "str",
                    "Tuple[str, str]",
                    "complex",
                    "List[int]"
                ],
                "template": [
                    "str",
                    "Dict[str, Any]",
                    "Callable",
                    "bytes",
                    "int"
                ]
            }
        },
        "_File.generate": {
            "name": "generate",
            "location": 493,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "writer": [
                    "str",
                    "int"
                ]
            },
            "variables": {}
        },
        "_File.each_child": {
            "name": "each_child",
            "location": 501,
            "return": [
                "str",
                "Dict[str, str]",
                "MutableMapping[str, Any]",
                "int",
                "Optional[float]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "_ChunkList.__init__": {
            "name": "__init__",
            "location": 506,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "chunks": [
                    "int",
                    "bool",
                    "float"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "chunks": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ]
            }
        },
        "_ChunkList.generate": {
            "name": "generate",
            "location": 509,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "writer": [
                    "int",
                    "Callable",
                    "str"
                ]
            },
            "variables": {}
        },
        "_ChunkList.each_child": {
            "name": "each_child",
            "location": 513,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "_NamedBlock.__init__": {
            "name": "__init__",
            "location": 518,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "body": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Iterable[str]",
                    "Sequence"
                ],
                "kwargs": [],
                "line": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "Dict[str, Any]"
                ],
                "name": [
                    "str",
                    "Optional[str]",
                    "List[str]"
                ],
                "self": [],
                "template": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Iterable[str]",
                    "Sequence"
                ]
            },
            "variables": {
                "body": [
                    "dict",
                    "list",
                    "List[str]",
                    "int",
                    "str"
                ],
                "line": [
                    "int",
                    "str",
                    "Iterator[str]"
                ],
                "name": [
                    "str",
                    "Dict[str, str]"
                ],
                "template": [
                    "str",
                    "Dict[str, Any]",
                    "Callable",
                    "bytes",
                    "int"
                ]
            }
        },
        "_NamedBlock.each_child": {
            "name": "each_child",
            "location": 524,
            "return": [
                "str",
                "Dict[str, str]",
                "MutableMapping[str, Any]",
                "int",
                "Optional[float]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "_NamedBlock.generate": {
            "name": "generate",
            "location": 527,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "writer": [
                    "List[util.Block]",
                    "util.XYZ"
                ]
            },
            "variables": {
                "block": []
            }
        },
        "_NamedBlock.find_named_blocks": {
            "name": "find_named_blocks",
            "location": 532,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "loader": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "named_blocks": [
                    "str",
                    "Optional[str]"
                ],
                "self": []
            },
            "variables": {}
        },
        "_ExtendsBlock.__init__": {
            "name": "__init__",
            "location": 538,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "dict"
                ],
                "self": []
            },
            "variables": {
                "name": [
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "_IncludeBlock.__init__": {
            "name": "__init__",
            "location": 543,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "line": [
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]"
                ],
                "name": [
                    "str"
                ],
                "reader": [
                    "Optional[str]",
                    "Dict[str, Any]",
                    "str"
                ],
                "self": []
            },
            "variables": {
                "line": [
                    "int",
                    "str",
                    "Iterator[str]"
                ],
                "name": [
                    "str",
                    "Final",
                    "List[str]",
                    "Optional[str]"
                ],
                "template_name": [
                    "str",
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "_IncludeBlock.find_named_blocks": {
            "name": "find_named_blocks",
            "location": 548,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "loader": [
                    "str",
                    "Optional[str]",
                    "Optional[List[Any]]"
                ],
                "named_blocks": [
                    "str",
                    "List[Union[str, Any]]",
                    "Callable"
                ],
                "self": []
            },
            "variables": {
                "included": [
                    "str",
                    "Pattern[str]",
                    "io.BytesIO"
                ]
            }
        },
        "_IncludeBlock.generate": {
            "name": "generate",
            "location": 552,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "writer": [
                    "str",
                    "Hashable",
                    "Dict[str, float]"
                ]
            },
            "variables": {
                "included": [
                    "str",
                    "float",
                    "Dict[str, int]"
                ]
            }
        },
        "_ApplyBlock.__init__": {
            "name": "__init__",
            "location": 559,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "body": [
                    "Optional[str]",
                    "int"
                ],
                "kwargs": [],
                "line": [
                    "bool",
                    "Dict[str, str]",
                    "str"
                ],
                "method": [
                    "Optional[str]",
                    "int"
                ],
                "self": []
            },
            "variables": {
                "body": [
                    "dict",
                    "list",
                    "List[str]",
                    "int",
                    "str"
                ],
                "line": [
                    "int",
                    "str",
                    "Iterator[str]"
                ],
                "method": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "_ApplyBlock.each_child": {
            "name": "each_child",
            "location": 564,
            "return": [
                "str",
                "Dict[str, str]",
                "MutableMapping[str, Any]",
                "int",
                "Optional[float]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "_ApplyBlock.generate": {
            "name": "generate",
            "location": 567,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "writer": [
                    "int",
                    "Tuple[type]"
                ]
            },
            "variables": {
                "method_name": [
                    "Optional[str]",
                    "str",
                    "property",
                    "Set[str]"
                ]
            }
        },
        "_ControlBlock.__init__": {
            "name": "__init__",
            "location": 581,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "body": [
                    "Optional[str]",
                    "bool",
                    "Optional[List[Any]]",
                    "int",
                    "Optional[\"Node\"]"
                ],
                "kwargs": [],
                "line": [
                    "List[int]",
                    "str",
                    "List[str]",
                    "Optional[Callable]",
                    "bytes"
                ],
                "self": [],
                "statement": [
                    "Optional[str]",
                    "bool",
                    "Optional[List[Any]]",
                    "int",
                    "Optional[\"Node\"]"
                ]
            },
            "variables": {
                "body": [
                    "dict",
                    "list",
                    "List[str]",
                    "int",
                    "str"
                ],
                "line": [
                    "int",
                    "str",
                    "Iterator[str]"
                ],
                "statement": [
                    "int",
                    "str",
                    "List[int]"
                ]
            }
        },
        "_ControlBlock.each_child": {
            "name": "each_child",
            "location": 586,
            "return": [
                "str",
                "Dict[str, str]",
                "MutableMapping[str, Any]",
                "int",
                "Optional[float]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "_ControlBlock.generate": {
            "name": "generate",
            "location": 589,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "writer": [
                    "str",
                    "List[str]"
                ]
            },
            "variables": {}
        },
        "_IntermediateControlBlock.__init__": {
            "name": "__init__",
            "location": 598,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "line": [
                    "str",
                    "Union[str, int]",
                    "List[Dict[str, Any]]",
                    "int"
                ],
                "self": [],
                "statement": [
                    "int",
                    "dict",
                    "float"
                ]
            },
            "variables": {
                "line": [
                    "int",
                    "str",
                    "Iterator[str]"
                ],
                "statement": [
                    "int",
                    "str",
                    "List[int]"
                ]
            }
        },
        "_IntermediateControlBlock.generate": {
            "name": "generate",
            "location": 602,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "writer": [
                    "int",
                    "str"
                ]
            },
            "variables": {}
        },
        "_Statement.__init__": {
            "name": "__init__",
            "location": 609,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "line": [
                    "str",
                    "Union[str, int]",
                    "List[Dict[str, Any]]",
                    "int"
                ],
                "self": [],
                "statement": [
                    "int",
                    "dict",
                    "float"
                ]
            },
            "variables": {
                "line": [
                    "int",
                    "str",
                    "Iterator[str]"
                ],
                "statement": [
                    "int",
                    "str",
                    "List[int]"
                ]
            }
        },
        "_Statement.generate": {
            "name": "generate",
            "location": 613,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "writer": [
                    "Type",
                    "str",
                    "Dict[str, Any]",
                    "Mapping[str, Any]"
                ]
            },
            "variables": {}
        },
        "_Expression.__init__": {
            "name": "__init__",
            "location": 618,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "expression": [
                    "str",
                    "IO"
                ],
                "kwargs": [],
                "line": [
                    "str",
                    "int",
                    "Tuple[int]",
                    "Callable",
                    "float"
                ],
                "raw": [
                    "str",
                    "IO"
                ],
                "self": []
            },
            "variables": {
                "expression": [
                    "int",
                    "List[str]",
                    "str",
                    "Dict[str, int]"
                ],
                "line": [
                    "int",
                    "str",
                    "Iterator[str]"
                ],
                "raw": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ]
            }
        },
        "_Expression.generate": {
            "name": "generate",
            "location": 623,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "writer": [
                    "str",
                    "tuple",
                    "int",
                    "bool",
                    "util.photolib.contentfiles.Contentfile",
                    "bytes"
                ]
            },
            "variables": {}
        },
        "_Module.__init__": {
            "name": "__init__",
            "location": 637,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "expression": [
                    "str",
                    "Optional[str]"
                ],
                "kwargs": [],
                "line": [
                    "str",
                    "Optional[str]"
                ],
                "self": []
            },
            "variables": {}
        },
        "_Text.__init__": {
            "name": "__init__",
            "location": 643,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "line": [
                    "str",
                    "bool",
                    "Union[str, int]",
                    "List[str]",
                    "Union[str, Sequence[str]]",
                    "int",
                    "dict"
                ],
                "self": [],
                "value": [
                    "int",
                    "float",
                    "datetime.timedelta",
                    "T",
                    "bool",
                    "str"
                ],
                "whitespace": [
                    "int",
                    "str",
                    "dict",
                    "float"
                ]
            },
            "variables": {
                "line": [
                    "int",
                    "str",
                    "Iterator[str]"
                ],
                "value": [
                    "Union[dict, str]",
                    "Union[float, int]",
                    "float",
                    "List[int]",
                    "list",
                    "str"
                ],
                "whitespace": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ]
            }
        },
        "_Text.generate": {
            "name": "generate",
            "location": 648,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "writer": [
                    "str",
                    "int",
                    "Callable[..., Awaitable[Any]]",
                    "dict"
                ]
            },
            "variables": {
                "value": [
                    "str",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        },
        "ParseError.__init__": {
            "name": "__init__",
            "location": 669,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "filename": [
                    "str"
                ],
                "kwargs": [],
                "lineno": [
                    "str",
                    "int",
                    "bool"
                ],
                "message": [
                    "str",
                    "int",
                    "bool"
                ],
                "self": []
            },
            "variables": {
                "filename": [
                    "List[str]",
                    "str"
                ],
                "lineno": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ],
                "message": [
                    "TextIO",
                    "str",
                    "deque",
                    "Type[Callable[[None], Any]]"
                ]
            }
        },
        "ParseError.__str__": {
            "name": "__str__",
            "location": 676,
            "return": [
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Indenter.__enter__": {
            "name": "__enter__",
            "location": 695,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "_": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Indenter.__exit__": {
            "name": "__exit__",
            "location": 699,
            "return": [
                ""
            ],
            "arguments": {
                "_": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "IncludeTemplate.__enter__": {
            "name": "__enter__",
            "location": 710,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "_": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "IncludeTemplate.__exit__": {
            "name": "__exit__",
            "location": 713,
            "return": [
                ""
            ],
            "arguments": {
                "_": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "current_template": [
                    "str",
                    "int",
                    "Dict[int, str]"
                ]
            }
        },
        "_CodeWriter.__init__": {
            "name": "__init__",
            "location": 681,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "current_template": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "bool"
                ],
                "file": [
                    "bool",
                    "str",
                    "Optional[List[str]]",
                    "Dict[str, str]"
                ],
                "kwargs": [],
                "loader": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "float"
                ],
                "named_blocks": [
                    "str",
                    "Optional[str]"
                ],
                "self": []
            },
            "variables": {
                "_indent": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ],
                "apply_counter": [
                    "bytes",
                    "str",
                    "Dict[str, Any]",
                    "bool"
                ],
                "current_template": [
                    "Pattern[str]",
                    "str"
                ],
                "file": [
                    "str",
                    "list"
                ],
                "include_stack": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ],
                "loader": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ],
                "named_blocks": [
                    "str",
                    "Dict[str, int]",
                    "Type[str]",
                    "List[str]",
                    "Dict[str, Dict[str, Any]]",
                    "list",
                    "Dict[str, str]",
                    "bytes",
                    "Dict[str, List[str]]"
                ]
            }
        },
        "_CodeWriter.indent_size": {
            "name": "indent_size",
            "location": 690,
            "return": [
                "dict",
                "bool",
                "Dict[str, int]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "_CodeWriter.indent": {
            "name": "indent",
            "location": 693,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "_CodeWriter.include": {
            "name": "include",
            "location": 705,
            "return": [
                "str",
                "Optional[Any]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "line": [
                    "int",
                    "str",
                    "Iterable[str]",
                    "Set[str]"
                ],
                "self": [],
                "template": [
                    "int",
                    "str",
                    "Iterable[str]",
                    "Set[str]"
                ]
            },
            "variables": {
                "current_template": [
                    "str",
                    "List[Tuple[str, str, Any]]",
                    "List[Type[Any]]"
                ]
            }
        },
        "_CodeWriter.write_line": {
            "name": "write_line",
            "location": 718,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "indent": [
                    "Optional[int]",
                    "str",
                    "List[str]",
                    "Optional[Type]",
                    "Optional[str]",
                    "Optional[bytes]"
                ],
                "kwargs": [],
                "line": [
                    "str",
                    "Optional[str]"
                ],
                "line_number": [
                    "str",
                    "dict",
                    "type"
                ],
                "self": []
            },
            "variables": {
                "ancestors": [
                    "Dict[str, str]",
                    "dict",
                    "Dict[str, List[str]]",
                    "str"
                ],
                "indent": [
                    "list",
                    "Optional[str]",
                    "dict"
                ],
                "line_comment": [
                    "List[str]",
                    "str",
                    "list",
                    "Tuple[str, str, str, str]"
                ]
            }
        },
        "_TemplateReader.__init__": {
            "name": "__init__",
            "location": 730,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "name": [
                    "str",
                    "List[str]",
                    "Dict[str, Any]"
                ],
                "self": [],
                "text": [
                    "bool",
                    "datetime.datetime",
                    "Optional[str]",
                    "str"
                ],
                "whitespace": [
                    "bool",
                    "datetime.datetime",
                    "Optional[str]",
                    "str"
                ]
            },
            "variables": {
                "line": [
                    "int",
                    "str",
                    "Tuple[str, str]",
                    "complex",
                    "List[int]"
                ],
                "name": [
                    "str",
                    "Dict[str, str]"
                ],
                "pos": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ],
                "text": [
                    "str",
                    "List[str]"
                ],
                "whitespace": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ]
            }
        },
        "_TemplateReader.find": {
            "name": "find",
            "location": 737,
            "return": [
                "int",
                "set",
                "str"
            ],
            "arguments": {
                "args": [],
                "end": [
                    "Optional[int]",
                    "Optional[datetime.datetime]",
                    "int",
                    "Optional[bool]"
                ],
                "kwargs": [],
                "needle": [
                    "str",
                    "Optional[float]",
                    "int",
                    "bool"
                ],
                "self": [],
                "start": [
                    "int",
                    "datetime.datetime"
                ]
            },
            "variables": {
                "index": [
                    "threading.Timer",
                    "List[int]",
                    "float"
                ],
                "pos": [
                    "int",
                    "Tuple[Any, Any, Any, Any]",
                    "List[float]",
                    "List[str]",
                    "dict",
                    "List[List[float]]"
                ]
            }
        },
        "_TemplateReader.consume": {
            "name": "consume",
            "location": 751,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "args": [],
                "count": [
                    "int",
                    "Optional[int]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "count": [
                    "int",
                    "Optional[int]",
                    "str"
                ],
                "newpos": [
                    "int",
                    "float",
                    "List[int]",
                    "property",
                    "Counter[Any]",
                    "Optional[List[Any]]",
                    "Dict[str, str]"
                ],
                "pos": [
                    "List[str]",
                    "int",
                    "list",
                    "Tuple[int, int]"
                ],
                "s": [
                    "int",
                    "Tuple[str, str, str]",
                    "Pattern[str]"
                ]
            }
        },
        "_TemplateReader.remaining": {
            "name": "remaining",
            "location": 760,
            "return": [
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "_TemplateReader.__len__": {
            "name": "__len__",
            "location": 763,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "_TemplateReader.__getitem__": {
            "name": "__getitem__",
            "location": 766,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "args": [],
                "key": [
                    "Union[int, slice]",
                    "int",
                    "static_frame.core.util.GetItemKeyTypeCompound",
                    "slice"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "size": [
                    "int",
                    "str",
                    "set",
                    "Dict[int, Any]",
                    "list",
                    "Dict[str, int]",
                    "dict"
                ],
                "start": [
                    "Tuple[str, str, str, str, str, str, str]",
                    "int",
                    "List[Tuple[int, int]]",
                    "List[int]",
                    "slice",
                    "List[float]"
                ],
                "step": [
                    "int",
                    "Dict[Any, int]",
                    "Dict[int, int]",
                    "Dict[str, int]"
                ],
                "stop": [
                    "int",
                    "Dict[str, Optional[float]]"
                ]
            }
        },
        "_TemplateReader.__str__": {
            "name": "__str__",
            "location": 782,
            "return": [
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "_TemplateReader.raise_parse_error": {
            "name": "raise_parse_error",
            "location": 785,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "msg": [
                    "str"
                ],
                "self": []
            },
            "variables": {}
        },
        "global": {
            "_DEFAULT_AUTOESCAPE": [
                "str",
                "int",
                "List[Dict[str, str]]",
                "float",
                "Dict[str, str]"
            ],
            "_UNSET": [
                "int",
                "dict",
                "List[int]",
                "List[List[int]]",
                "str",
                "datetime.timedelta"
            ]
        }
    },
    "tornado-5.0.2/tornado/testing.py": {
        "bind_unused_port": {
            "name": "bind_unused_port",
            "location": 83,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "reuse_port": [
                    "Optional[asyncio.AbstractEventLoop]",
                    "Optional[float]",
                    "str",
                    "ark.types.DinoCharacterStatusComponent"
                ]
            },
            "variables": {
                "port": [
                    "int",
                    "dict",
                    "List[int]",
                    "List[List[int]]",
                    "Callable(functools.wraps)[[Named(wrapped, Callable[..., Any]), Named(assigned, Sequence[str], default), Named(updated, Sequence[str], default)], Callable[Any, Any]]",
                    "str"
                ],
                "sock": [
                    "asyncio.events.AbstractEventLoop",
                    "int",
                    "list"
                ]
            }
        },
        "get_async_test_timeout": {
            "name": "get_async_test_timeout",
            "location": 98,
            "return": [
                "str",
                "Tuple[float, float]",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "args": [],
                "kwargs": []
            },
            "variables": {}
        },
        "pre_coroutine": {
            "name": "pre_coroutine",
            "location": 516,
            "return": [
                "deoplete.util.UserContext",
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [
                    "dict",
                    "Optional[List]",
                    "float",
                    "Optional[Exception]",
                    "Union[List, str]"
                ]
            },
            "variables": {
                "_test_generator": [
                    "str"
                ],
                "result": [
                    "Sequence[Any]",
                    "Tuple[Any, Any]",
                    "MutableMapping[Any, Any]",
                    "tuple",
                    "Dict[str, List[str]]",
                    "str"
                ]
            }
        },
        "post_coroutine": {
            "name": "post_coroutine",
            "location": 530,
            "return": [
                "bytes",
                "str",
                "Union[str, TextIO]",
                "asyncio.StreamWriter"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [
                    "str",
                    "List[str]"
                ]
            },
            "variables": {}
        },
        "wrap": {
            "name": "wrap",
            "location": 506,
            "return": [
                "str",
                "types.TopicPartition",
                "int",
                "List[str]"
            ],
            "arguments": {
                "args": [],
                "f": [
                    "Iterable[str]",
                    "Callable",
                    "T"
                ],
                "kwargs": []
            },
            "variables": {
                "coro": [
                    "str",
                    "List[str]",
                    "int",
                    "Dict[str, List[Any]]",
                    "Tuple[str, str, str, str, str, str, str, str]"
                ]
            }
        },
        "gen_test": {
            "name": "gen_test",
            "location": 467,
            "return": [
                "str",
                "core.types.UserRole",
                "List[str]"
            ],
            "arguments": {
                "args": [],
                "func": [
                    "Optional[Callable[..., Any]]",
                    "Optional[float]",
                    "Optional[str]",
                    "Optional[AnyStr]",
                    "Sequence[str]",
                    "str"
                ],
                "kwargs": [],
                "timeout": [
                    "Optional[float]",
                    "Callable",
                    "bool",
                    "float",
                    "List[int]",
                    "int",
                    "str"
                ]
            },
            "variables": {
                "timeout": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 621,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": []
            },
            "variables": {
                "argv": [
                    "list",
                    "int"
                ]
            }
        },
        "_TestMethodWrapper.__init__": {
            "name": "__init__",
            "location": 120,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "orig_method": [
                    "int",
                    "float"
                ],
                "self": []
            },
            "variables": {
                "orig_method": [
                    "int",
                    "List[str]",
                    "list",
                    "Set[str]"
                ]
            }
        },
        "_TestMethodWrapper.__call__": {
            "name": "__call__",
            "location": 123,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "result": [
                    "dict",
                    "Generator[Any, None, None]"
                ]
            }
        },
        "_TestMethodWrapper.__getattr__": {
            "name": "__getattr__",
            "location": 132,
            "return": [
                "mypy.types.CallableType",
                "Iterable[str]",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "name": [
                    "str",
                    "Pattern"
                ],
                "self": []
            },
            "variables": {}
        },
        "AsyncTestCase.__init__": {
            "name": "__init__",
            "location": 202,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "methodName": [
                    "str",
                    "float",
                    "List[str]"
                ],
                "self": []
            },
            "variables": {
                "__failure": [
                    "\"Frame\"",
                    "str",
                    "Dict[str, Any]"
                ],
                "__running": [
                    "Optional[BaseException]",
                    "str",
                    "int",
                    "bool"
                ],
                "__stop_args": [
                    "dict",
                    "T",
                    "list",
                    "bytes",
                    "Mapping"
                ],
                "__stopped": [
                    "Type[range]",
                    "int",
                    "dict",
                    "Union[Literal[False], Literal[True]]",
                    "List[str]",
                    "bytearray"
                ],
                "__timeout": [
                    "int"
                ]
            }
        },
        "AsyncTestCase.setUp": {
            "name": "setUp",
            "location": 216,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "io_loop": [
                    "int",
                    "Pattern[str]",
                    "bytearray"
                ]
            }
        },
        "AsyncTestCase.tearDown": {
            "name": "tearDown",
            "location": 221,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "AsyncTestCase.get_new_ioloop": {
            "name": "get_new_ioloop",
            "location": 238,
            "return": [
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "AsyncTestCase._handle_exception": {
            "name": "_handle_exception",
            "location": 251,
            "return": [
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "tb": [
                    "T",
                    "List[Tuple[str, Any]]",
                    "type",
                    "Type['AbstractIntegrationConversation']",
                    "Exception",
                    "str"
                ],
                "typ": [
                    "T",
                    "List[Tuple[str, Any]]",
                    "type",
                    "Type['AbstractIntegrationConversation']",
                    "Exception",
                    "str"
                ],
                "value": [
                    "T",
                    "List[Tuple[str, Any]]",
                    "type",
                    "Type['AbstractIntegrationConversation']",
                    "Exception",
                    "str"
                ]
            },
            "variables": {
                "__failure": [
                    "int",
                    "str",
                    "Dict[int, Any]",
                    "Optional[int]",
                    "list"
                ]
            }
        },
        "AsyncTestCase.__rethrow": {
            "name": "__rethrow",
            "location": 260,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "__failure": [
                    "Coroutine[Any, Any, Any]",
                    "Set[str]"
                ],
                "failure": [
                    "int",
                    "float"
                ]
            }
        },
        "AsyncTestCase.run": {
            "name": "run",
            "location": 266,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "result": [
                    "bool",
                    "Optional[Union[int, str]]",
                    "Optional[float]",
                    "int"
                ],
                "self": []
            },
            "variables": {}
        },
        "AsyncTestCase.stop": {
            "name": "stop",
            "location": 275,
            "return": [
                ""
            ],
            "arguments": {
                "_arg": [
                    "Optional[int]",
                    "Optional[str]",
                    "ics.types.ContextDict",
                    "Optional[bytes]"
                ],
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "__running": [
                    "Dict[str, str]",
                    "str",
                    "Dict[int, str]",
                    "Tuple[str]"
                ],
                "__stop_args": [
                    "List[Iterator[Any]]",
                    "List[Awaitable[Any]]",
                    "List[Callable[..., Any]]",
                    "tuple"
                ],
                "__stopped": [
                    "bool",
                    "str",
                    "float",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "AsyncTestCase.timeout_func": {
            "name": "timeout_func",
            "location": 308,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "__failure": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ]
            }
        },
        "AsyncTestCase.wait": {
            "name": "wait",
            "location": 289,
            "return": [
                "deoplete.util.UserContext",
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "args": [],
                "condition": [
                    "Optional[float]",
                    "Optional[dict]",
                    "int",
                    "bool",
                    "Optional[Callable]"
                ],
                "kwargs": [],
                "self": [],
                "timeout": [
                    "int"
                ]
            },
            "variables": {
                "__running": [
                    "str",
                    "Dict[str, str]",
                    "int",
                    "Dict[str, Dict[str, Any]]"
                ],
                "__stop_args": [
                    "Dict[int, Any]",
                    "list",
                    "Dict[str, str]",
                    "DefaultDict[Any, List[Any]]",
                    "int",
                    "str",
                    "Pattern[str]"
                ],
                "__stopped": [
                    "int",
                    "str"
                ],
                "__timeout": [
                    "int",
                    "float"
                ],
                "result": [
                    "int",
                    "Set[str]",
                    "range",
                    "list"
                ],
                "timeout": [
                    "float",
                    "int",
                    "str"
                ]
            }
        },
        "AsyncHTTPTestCase.setUp": {
            "name": "setUp",
            "location": 367,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "__port": [
                    "Dict[str, Dict[int, str]]",
                    "float",
                    "Dict[str, Any]",
                    "Dict[int, int]",
                    "dict",
                    "str",
                    "Dict[str, int]"
                ],
                "_app": [],
                "http_client": [
                    "str",
                    "bool",
                    "int"
                ],
                "http_server": [
                    "str",
                    "int",
                    "Union[Literal, Literal]"
                ],
                "port": [
                    "int",
                    "Set[int]"
                ],
                "sock": [
                    "str",
                    "asyncio.events.AbstractEventLoop",
                    "list"
                ]
            }
        },
        "AsyncHTTPTestCase.get_http_client": {
            "name": "get_http_client",
            "location": 377,
            "return": [
                "float",
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "AsyncHTTPTestCase.get_http_server": {
            "name": "get_http_server",
            "location": 380,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "AsyncHTTPTestCase.get_app": {
            "name": "get_app",
            "location": 383,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "AsyncHTTPTestCase.fetch": {
            "name": "fetch",
            "location": 389,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "path": [
                    "str"
                ],
                "self": []
            },
            "variables": {}
        },
        "AsyncHTTPTestCase.get_httpserver_options": {
            "name": "get_httpserver_options",
            "location": 409,
            "return": [
                "list",
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "AsyncHTTPTestCase.get_http_port": {
            "name": "get_http_port",
            "location": 415,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "AsyncHTTPTestCase.get_protocol": {
            "name": "get_protocol",
            "location": 422,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "AsyncHTTPTestCase.get_url": {
            "name": "get_url",
            "location": 425,
            "return": [
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "path": [
                    "str"
                ],
                "self": []
            },
            "variables": {}
        },
        "AsyncHTTPTestCase.tearDown": {
            "name": "tearDown",
            "location": 430,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "AsyncHTTPSTestCase.get_http_client": {
            "name": "get_http_client",
            "location": 443,
            "return": [
                "bool",
                "Dict[str, Dict[str, str]]",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "AsyncHTTPSTestCase.get_httpserver_options": {
            "name": "get_httpserver_options",
            "location": 447,
            "return": [
                "Optional[str]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "AsyncHTTPSTestCase.get_ssl_options": {
            "name": "get_ssl_options",
            "location": 450,
            "return": [
                "int",
                "Dict[str, str]",
                "str",
                "bytes",
                "Dict[str, Any]",
                "core.types.FBAccessToken"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "module_dir": [
                    "str"
                ]
            }
        },
        "AsyncHTTPSTestCase.get_protocol": {
            "name": "get_protocol",
            "location": 463,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "ExpectLog.__init__": {
            "name": "__init__",
            "location": 584,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "logger": [
                    "logging.Logger",
                    "Optional[logging.Logger]",
                    "Optional[Mapping[str, Any]]"
                ],
                "regex": [
                    "str",
                    "Iterable[str]"
                ],
                "required": [
                    "int",
                    "bool",
                    "apistar.types.RouteConfig"
                ],
                "self": []
            },
            "variables": {
                "logged_stack": [
                    "str"
                ],
                "logger": [
                    "logging.Logger"
                ],
                "matched": [
                    "Pattern[str]",
                    "Pattern[bytes]",
                    "list",
                    "str"
                ],
                "regex": [
                    "str",
                    "float"
                ],
                "required": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ]
            }
        },
        "ExpectLog.filter": {
            "name": "filter",
            "location": 602,
            "return": [
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "record": [
                    "dict",
                    "Optional[int]",
                    "Dict[str, Any]",
                    "str"
                ],
                "self": []
            },
            "variables": {
                "logged_stack": [
                    "logging.Logger",
                    "Dict[str, Union[Any, Any, Any]]",
                    "bool",
                    "int",
                    "str"
                ],
                "matched": [
                    "Dict[str, str]",
                    "Type[int]",
                    "Dict[str, Union[Any, Any, Any, Any, Any]]",
                    "dict",
                    "int",
                    "list",
                    "float"
                ],
                "message": [
                    "Pattern[str]",
                    "Pattern[bytes]",
                    "Dict[str, Type]"
                ]
            }
        },
        "ExpectLog.__enter__": {
            "name": "__enter__",
            "location": 611,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "ExpectLog.__exit__": {
            "name": "__exit__",
            "location": 615,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "tb": [
                    "Optional[types.TracebackType]",
                    "Optional[BaseException]",
                    "Callable[[str, object], None]",
                    "Iterable[float]",
                    "bool",
                    "abc.BaseConfig"
                ],
                "typ": [
                    "Tuple[int, int]",
                    "int",
                    "abc.BaseConfig",
                    "float"
                ],
                "value": [
                    "Optional[types.TracebackType]",
                    "Optional[BaseException]",
                    "Callable[[str, object], None]",
                    "Iterable[float]",
                    "bool",
                    "abc.BaseConfig"
                ]
            },
            "variables": {}
        },
        "global": {
            "AsyncHTTPClient": [],
            "HTTPServer": [
                "int",
                "str",
                "set"
            ],
            "IOLoop": [
                "list",
                "range",
                "str",
                "List[str]",
                "List[int]",
                "Tuple[str, str, str, str, str, str, str, str, str]",
                "Tuple[int, float, float]",
                "List[bool]"
            ],
            "SimpleAsyncHTTPClient": [
                "str",
                "bool",
                "int"
            ],
            "Subprocess": [
                "int",
                "dict",
                "List[int]",
                "List[List[int]]",
                "Callable(functools.wraps)[[Named(wrapped, Callable[..., Any]), Named(assigned, Sequence[str], default), Named(updated, Sequence[str], default)], Callable[Any, Any]]",
                "str"
            ],
            "_NON_OWNED_IOLOOPS": [
                "int",
                "str",
                "asyncio.locks.Event",
                "Tuple[str, str, str, str, str, str, str, str]"
            ],
            "__test__": [
                "List[Union[Any, Any]]",
                "Dict[str, Any]",
                "List[Dict[str, Any]]",
                "str",
                "List[Union[Any, Any, Any]]",
                "bool"
            ],
            "asyncio": [
                "concurrenfutures.process.ProcessPoolExecutor",
                "int"
            ],
            "gen": [
                "int",
                "dict",
                "List[int]",
                "List[List[int]]",
                "Callable(functools.wraps)[[Named(wrapped, Callable[..., Any]), Named(assigned, Sequence[str], default), Named(updated, Sequence[str], default)], Callable[Any, Any]]",
                "str"
            ],
            "iscoroutine": [
                "Dict[str, Set[str]]",
                "str",
                "Dict[str, Type[Any]]"
            ],
            "iscoroutinefunction": [
                "bool",
                "dict",
                "str",
                "set",
                "list",
                "Type[str]",
                "List[Tuple[str, Any, str]]",
                "int"
            ],
            "netutil": [
                "list",
                "Optional[asyncio.events.AbstractEventLoop]",
                "str",
                "functools.partial[None]",
                "asyncio.events.AbstractEventLoop"
            ]
        }
    },
    "tornado-5.0.2/tornado/util.py": {
        "cast": {
            "name": "cast",
            "location": 55,
            "return": [
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "typ": [
                    "bool",
                    "int",
                    "Iterable",
                    "str"
                ],
                "x": [
                    "bool",
                    "int",
                    "Iterable",
                    "str"
                ]
            },
            "variables": {}
        },
        "is_finalizing": {
            "name": "is_finalizing",
            "location": 78,
            "return": [
                "str",
                "Dict[str, Any]",
                "set",
                "Container[str]"
            ],
            "arguments": {
                "args": [],
                "kwargs": []
            },
            "variables": {}
        },
        "_get_emulated_is_finalizing": {
            "name": "_get_emulated_is_finalizing",
            "location": 74,
            "return": [
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": []
            },
            "variables": {
                "L": [
                    "str",
                    "int",
                    "list",
                    "List[int]",
                    "List[str]",
                    "float"
                ]
            }
        },
        "import_object": {
            "name": "import_object",
            "location": 155,
            "return": [
                "Optional[Type]",
                "Optional[str]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "Union[str, bytes]",
                    "List[\"Source\"]"
                ]
            },
            "variables": {
                "name": [
                    "str",
                    "Optional[str]"
                ],
                "obj": [
                    "str",
                    "Callable",
                    "Tuple[Hashable]",
                    "List[str]",
                    "Optional[str]",
                    "Dict[str, Dict[str, dict]]",
                    "dict"
                ],
                "parts": [
                    "List[str]",
                    "list",
                    "Type[Tuple[Any, Any]]"
                ]
            }
        },
        "raise_exc_info": {
            "name": "raise_exc_info",
            "location": 189,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "exc_info": [
                    "str",
                    "Dict[str, Any]"
                ],
                "kwargs": []
            },
            "variables": {}
        },
        "exec_in": {
            "name": "exec_in",
            "location": 194,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "code": [
                    "bytes",
                    "str",
                    "T",
                    "bool",
                    "dict",
                    "ark.types.PrimalDinoCharacter"
                ],
                "glob": [
                    "Mapping[str, Any]",
                    "Dict[str, Any]",
                    "str"
                ],
                "kwargs": [],
                "loc": [
                    "Mapping[str, Any]",
                    "Dict[str, Any]",
                    "str"
                ]
            },
            "variables": {
                "code": [
                    "str",
                    "Dict[str, str]",
                    "Dict[str, bool]",
                    "Dict[Any, str]",
                    "Dict[int, Any]",
                    "List[str]"
                ]
            }
        },
        "errno_from_exception": {
            "name": "errno_from_exception",
            "location": 219,
            "return": [
                "Optional[int]",
                "Optional[float]",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "args": [],
                "e": [
                    "BaseException",
                    "float",
                    "Callable[..., None]",
                    "List[Type]"
                ],
                "kwargs": []
            },
            "variables": {}
        },
        "_re_unescape_replacement": {
            "name": "_re_unescape_replacement",
            "location": 242,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "match": [
                    "str",
                    "bytes",
                    "Optional[int]"
                ]
            },
            "variables": {
                "group": [
                    "str",
                    "Pattern[str]"
                ]
            }
        },
        "re_unescape": {
            "name": "re_unescape",
            "location": 253,
            "return": [
                "str",
                "Optional[str]",
                "bytes",
                "IO",
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "s": [
                    "str",
                    "bytes"
                ]
            },
            "variables": {}
        },
        "timedelta_to_seconds": {
            "name": "timedelta_to_seconds",
            "location": 452,
            "return": [
                "List[int]",
                "int",
                "array.array",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "td": [
                    "int",
                    "str",
                    "bool"
                ]
            },
            "variables": {}
        },
        "_websocket_mask_python": {
            "name": "_websocket_mask_python",
            "location": 458,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "data": [
                    "str",
                    "bool",
                    "List[int]",
                    "List[str]",
                    "List[List[int]]",
                    "List[Tuple[int, int]]",
                    "Tuple[int, int]",
                    "int"
                ],
                "kwargs": [],
                "mask": [
                    "List[Tuple[int, int]]",
                    "Tuple[int, int]",
                    "int"
                ]
            },
            "variables": {
                "mask_arr": [
                    "list",
                    "Pattern[str]",
                    "float",
                    "str",
                    "Optional[Match[str]]"
                ],
                "unmasked_arr": [
                    "Tuple[Literal, Literal]",
                    "int",
                    "str"
                ]
            }
        },
        "doctests": {
            "name": "doctests",
            "location": 495,
            "return": [
                "bool",
                "int",
                "Optional[float]",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": []
            },
            "variables": {}
        },
        "ObjectDict.__getattr__": {
            "name": "__getattr__",
            "location": 100,
            "return": [
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "name": [
                    "str",
                    "bool",
                    "dict"
                ],
                "self": []
            },
            "variables": {}
        },
        "ObjectDict.__setattr__": {
            "name": "__setattr__",
            "location": 107,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "name": [
                    "str",
                    "float",
                    "List[Optional[str]]",
                    "Union[int, float]"
                ],
                "self": [],
                "value": [
                    "str",
                    "float",
                    "List[Optional[str]]",
                    "Union[int, float]"
                ]
            },
            "variables": {}
        },
        "GzipDecompressor.__init__": {
            "name": "__init__",
            "location": 118,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "decompressobj": [
                    "int",
                    "float",
                    "Optional[int]",
                    "ClassVar[int]"
                ]
            }
        },
        "GzipDecompressor.decompress": {
            "name": "decompress",
            "location": 124,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "dict",
                "Callable[[Mapping], T]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "max_length": [
                    "int",
                    "str",
                    "datetime.timedelta",
                    "bool"
                ],
                "self": [],
                "value": [
                    "int",
                    "str",
                    "datetime.timedelta",
                    "bool"
                ]
            },
            "variables": {}
        },
        "GzipDecompressor.unconsumed_tail": {
            "name": "unconsumed_tail",
            "location": 139,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "GzipDecompressor.flush": {
            "name": "flush",
            "location": 145,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Configurable.__new__": {
            "name": "__new__",
            "location": 295,
            "return": [
                "mypy.types.Type",
                "str",
                "types.Resolver",
                "bool"
            ],
            "arguments": {
                "args": [],
                "cls": [
                    "int",
                    "bool",
                    "dict"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "base": [
                    "str",
                    "RuntimeError"
                ],
                "impl": [
                    "Dict[str, float]"
                ],
                "init_kwargs": [
                    "Dict[str, Any]",
                    "OrderedDict[str, Any]",
                    "list",
                    "dict"
                ],
                "instance": [
                    "str",
                    "Dict[str, Any]",
                    "complex",
                    "tuple"
                ]
            }
        },
        "Configurable.configurable_base": {
            "name": "configurable_base",
            "location": 316,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "cls": [
                    "bool",
                    "List[int]",
                    "str",
                    "Callable[[Any], T]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Configurable.configurable_default": {
            "name": "configurable_default",
            "location": 328,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "cls": [
                    "bool",
                    "str",
                    "Type",
                    "List[dict]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Configurable.initialize": {
            "name": "initialize",
            "location": 333,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Configurable.configure": {
            "name": "configure",
            "location": 344,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "cls": [
                    "str",
                    "Callable",
                    "Optional[str]"
                ],
                "impl": [
                    "Type[types.C]",
                    "types.StrucInput",
                    "Type['AbstractIntegrationConversation']",
                    "type",
                    "bool"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "__impl_class": [
                    "List[Dict[str, Any]]",
                    "int",
                    "List[str]",
                    "Dict[int, Tuple[Any, Any]]",
                    "Dict[str, Type]"
                ],
                "__impl_kwargs": [
                    "dict",
                    "Dict[str, Union[None, Any, Any, str]]",
                    "Dict[str, Union[float, str]]",
                    "str",
                    "Pattern[str]",
                    "Dict[str, Optional[str]]"
                ],
                "base": [
                    "str",
                    "Union[Literal, str]"
                ],
                "impl": [
                    "str",
                    "float"
                ]
            }
        },
        "Configurable.configured_class": {
            "name": "configured_class",
            "location": 361,
            "return": [
                "str",
                "Callable[..., T]",
                "Exception"
            ],
            "arguments": {
                "args": [],
                "cls": [
                    "str"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "__impl_class": [
                    "Dict[str, Union[Any, Any]]",
                    "Dict[str, str]",
                    "dict",
                    "int",
                    "Pattern[str]"
                ],
                "base": [
                    "str",
                    "dict",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "Configurable._save_configuration": {
            "name": "_save_configuration",
            "location": 373,
            "return": [
                "str"
            ],
            "arguments": {
                "args": [],
                "cls": [
                    "bool",
                    "Type",
                    "int",
                    "type"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "base": [
                    "str",
                    "Union[Literal, str]"
                ]
            }
        },
        "Configurable._restore_configuration": {
            "name": "_restore_configuration",
            "location": 379,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "cls": [
                    "str",
                    "Optional[int]",
                    "bool",
                    "Type",
                    "type"
                ],
                "kwargs": [],
                "saved": [
                    "str"
                ],
                "self": []
            },
            "variables": {
                "__impl_class": [
                    "List[Dict[str, Any]]",
                    "int",
                    "List[str]",
                    "Dict[int, Tuple[Any, Any]]",
                    "Dict[str, Type]"
                ],
                "__impl_kwargs": [
                    "dict",
                    "Dict[str, Union[None, Any, Any, str]]",
                    "Dict[str, Union[float, str]]",
                    "str",
                    "Pattern[str]",
                    "Dict[str, Optional[str]]"
                ],
                "base": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "ArgReplacer.__init__": {
            "name": "__init__",
            "location": 393,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "func": [
                    "str",
                    "dict",
                    "bool"
                ],
                "kwargs": [],
                "name": [
                    "Dict[str, Any]",
                    "str",
                    "Union[str, List[str]]",
                    "List[str]",
                    "int",
                    "Collection[str]"
                ],
                "self": []
            },
            "variables": {
                "arg_pos": [
                    "int",
                    "str",
                    "Final"
                ],
                "name": [
                    "str",
                    "Final",
                    "List[str]",
                    "Set[str]"
                ]
            }
        },
        "ArgReplacer._getargnames": {
            "name": "_getargnames",
            "location": 402,
            "return": [
                "Iterable[str]",
                "IO[str]",
                "Callable",
                "List[types.ServiceT]",
                "Iterable[int]",
                "bool"
            ],
            "arguments": {
                "args": [],
                "func": [
                    "Callable",
                    "tuple",
                    "Dict[str, Any]",
                    "list",
                    "dict",
                    "str"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "code": [
                    "Pattern[str]",
                    "List[Tuple[str, str]]",
                    "str",
                    "Type[bytes]",
                    "Tuple[str, int]",
                    "List[str]"
                ]
            }
        },
        "ArgReplacer.get_old_value": {
            "name": "get_old_value",
            "location": 418,
            "return": [
                "Optional[str]",
                "Type['BaseModel']",
                "dict",
                "Pattern"
            ],
            "arguments": {
                "args": [],
                "default": [
                    "str",
                    "dict",
                    "T"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "ArgReplacer.replace": {
            "name": "replace",
            "location": 429,
            "return": [
                "Optional[str]",
                "str",
                "Callable[[KT], VT]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "new_value": [
                    "dict",
                    "Dict[str, Any]",
                    "str",
                    "Tuple[str, Any]"
                ],
                "self": []
            },
            "variables": {
                "args": [],
                "old_value": [
                    "str",
                    "Dict[int, List[str]]",
                    "list",
                    "Type[Optional[str]]",
                    "Tuple[str, str, str, str, str]"
                ]
            }
        },
        "global": {
            "PY3": [
                "int",
                "dict",
                "List[int]",
                "List[List[int]]",
                "str",
                "datetime.timedelta"
            ],
            "_BaseString": [
                "str",
                "int"
            ],
            "_ObjectDictBase": [
                "str",
                "Dict[str, Dict[str, Any]]",
                "bool",
                "dict",
                "Optional[str]"
            ],
            "_alphanum": [
                "int",
                "dict",
                "List[int]",
                "List[List[int]]",
                "str",
                "datetime.timedelta"
            ],
            "_re_unescape_pattern": [
                "Pattern[str]",
                "str",
                "List[Tuple[int, int]]",
                "datetime.datetime.datetime"
            ],
            "_websocket_mask": [
                "str",
                "List[str]",
                "int",
                "Dict[str, List[Any]]",
                "Tuple[str, str, str, str, str, str, str, str]",
                "numpy.array"
            ],
            "basestring_type": [
                "Type[int]",
                "Dict[Any, str]",
                "str",
                "Dict[str, str]",
                "Tuple[List[str], List[str], List[str]]",
                "List[str]"
            ],
            "bytes_type": [
                "Type[str]",
                "Type[Pattern[str]]",
                "int",
                "str",
                "list",
                "Type[Type[Any]]"
            ],
            "is_finalizing": [
                "bool",
                "int"
            ],
            "unicode_type": [
                "int",
                "List[str]",
                "bytes",
                "Tuple[Type[Any]]",
                "KeysView[int]",
                "Dict[bytes, float]"
            ],
            "xrange": [
                "Type[range]",
                "list",
                "List[str]"
            ]
        }
    },
    "tornado-5.0.2/tornado/web.py": {
        "future_complete": {
            "name": "future_complete",
            "location": 1710,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "f": [
                    "TextIO",
                    "bool"
                ],
                "kwargs": []
            },
            "variables": {}
        },
        "wrapper": {
            "name": "wrapper",
            "location": 2935,
            "return": [
                "types.Resolver"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [
                    "str",
                    "dict",
                    "float"
                ]
            },
            "variables": {
                "next_url": [
                    "dict",
                    "str"
                ],
                "url": [
                    "Dict[Any, str]",
                    "Dict[str, str]",
                    "dict",
                    "Dict[str, Union[Any, bool]]",
                    "Dict[str, Dict[str, Any]]"
                ]
            }
        },
        "asynchronous": {
            "name": "asynchronous",
            "location": 1648,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "method": [
                    "Callable",
                    "Callable[..., Optional[Any]]",
                    "List[str]",
                    "list",
                    "str"
                ]
            },
            "variables": {}
        },
        "stream_request_body": {
            "name": "stream_request_body",
            "location": 1725,
            "return": [
                "str"
            ],
            "arguments": {
                "args": [],
                "cls": [
                    "Dict[str, Any]",
                    "Type['Declared']",
                    "str"
                ],
                "kwargs": []
            },
            "variables": {
                "_stream_request_body": [
                    "str",
                    "Dict[str, Any]",
                    "Dict[str, float]",
                    "int",
                    "Dict[Any, str]",
                    "Type[Dict[str, Any]]",
                    "Dict[str, Dict[str, Any]]"
                ]
            }
        },
        "_has_stream_request_body": {
            "name": "_has_stream_request_body",
            "location": 1752,
            "return": [
                "int",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "args": [],
                "cls": [
                    "str",
                    "Dict[str, Any]",
                    "int"
                ],
                "kwargs": []
            },
            "variables": {}
        },
        "removeslash": {
            "name": "removeslash",
            "location": 1758,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "method": [
                    "Callable",
                    "Callable[..., Optional[Any]]",
                    "List[str]",
                    "list",
                    "str"
                ]
            },
            "variables": {}
        },
        "addslash": {
            "name": "addslash",
            "location": 1781,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "method": [
                    "Callable",
                    "Callable[..., Optional[Any]]",
                    "List[str]",
                    "list",
                    "str"
                ]
            },
            "variables": {}
        },
        "authenticated": {
            "name": "authenticated",
            "location": 2923,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "method": [
                    "Callable",
                    "Callable[..., Optional[Any]]",
                    "List[str]",
                    "list",
                    "str"
                ]
            },
            "variables": {}
        },
        "_time_independent_equals": {
            "name": "_time_independent_equals",
            "location": 3116,
            "return": [
                "bool"
            ],
            "arguments": {
                "a": [
                    "int",
                    "List[int]",
                    "Tuple[str, str]",
                    "List[str]"
                ],
                "args": [],
                "b": [
                    "int",
                    "List[int]"
                ],
                "kwargs": []
            },
            "variables": {
                "result": [
                    "list",
                    "Set[int]",
                    "str",
                    "Collection[int]",
                    "dict",
                    "set",
                    "Dict[str, List[str]]"
                ]
            }
        },
        "format_field": {
            "name": "format_field",
            "location": 3157,
            "return": [
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "s": [
                    "Union[str, bytes]",
                    "str",
                    "bytes",
                    "int",
                    "Sequence[str]"
                ]
            },
            "variables": {}
        },
        "create_signed_value": {
            "name": "create_signed_value",
            "location": 3129,
            "return": [
                "types.Optional[types.UUID]",
                "str",
                "types.Optional[types.Timestamp]",
                "List['Product']"
            ],
            "arguments": {
                "args": [],
                "clock": [
                    "Callable[[], float]",
                    "str",
                    "Iterable[Tuple[str, str, str]]",
                    "bool",
                    "Optional[str]"
                ],
                "key_version": [
                    "int",
                    "str",
                    "Union[str, bytes]",
                    "Optional[str]"
                ],
                "kwargs": [],
                "name": [
                    "str",
                    "Union[str, bytes]",
                    "int"
                ],
                "secret": [
                    "str",
                    "dict",
                    "Optional[List[str]]"
                ],
                "value": [
                    "str",
                    "Union[str, bytes]",
                    "int"
                ],
                "version": [
                    "int",
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "List[str]"
                ]
            },
            "variables": {
                "clock": [
                    "str",
                    "List[str]",
                    "int",
                    "Dict[str, List[Any]]",
                    "Tuple[str, str, str, str, str, str, str, str]"
                ],
                "secret": [
                    "str",
                    "int",
                    "Tuple[Literal, Literal]"
                ],
                "signature": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "int",
                    "Dict[str, str]"
                ],
                "timestamp": [
                    "str",
                    "Set[str]",
                    "List[str]"
                ],
                "to_sign": [
                    "str",
                    "Dict[str, str]"
                ],
                "value": [
                    "str",
                    "property",
                    "Dict[str, Type[Any]]",
                    "List[str]"
                ],
                "version": [
                    "str",
                    "int",
                    "tuple"
                ]
            }
        },
        "_get_version": {
            "name": "_get_version",
            "location": 3183,
            "return": [
                "str",
                "Optional[str]",
                "Union[str, Tuple[str, str]]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "value": [
                    "str",
                    "bytes",
                    "int",
                    "Optional[Callable[[Any, Any], None]]"
                ]
            },
            "variables": {
                "m": [
                    "int",
                    "str",
                    "datetime.datetime",
                    "Tuple[Literal, Any, Literal, Any, Literal, Any, Literal, Any, Literal, Any, Literal, Any, Literal, Any, Literal, Any, Literal, Any]",
                    "frozenset[str]"
                ],
                "version": [
                    "str",
                    "int",
                    "dict",
                    "List[str]"
                ]
            }
        },
        "decode_signed_value": {
            "name": "decode_signed_value",
            "location": 3206,
            "return": [
                "Optional[str]",
                "Optional[int]",
                "Optional[bool]"
            ],
            "arguments": {
                "args": [],
                "clock": [
                    "Optional[int]",
                    "int",
                    "Optional[\"ValidatorTypes\"]",
                    "django.utils.timezone.datetime",
                    "Optional[Union[int, str]]",
                    "str",
                    "Optional[str]",
                    "Optional[float]"
                ],
                "kwargs": [],
                "max_age_days": [
                    "str",
                    "int",
                    "bool",
                    "float",
                    "Optional[Pattern[str]]"
                ],
                "min_version": [
                    "Optional[str]",
                    "str",
                    "Optional[float]",
                    "bool",
                    "Optional[List[str]]"
                ],
                "name": [
                    "str",
                    "int",
                    "bool",
                    "float",
                    "Optional[Pattern[str]]"
                ],
                "secret": [
                    "str",
                    "int",
                    "bool",
                    "float",
                    "Optional[Pattern[str]]"
                ],
                "value": [
                    "float",
                    "bool"
                ]
            },
            "variables": {
                "clock": [
                    "str",
                    "int",
                    "Type[str]",
                    "Dict[str, Optional[float]]",
                    "Tuple[str, str, str, str, str]",
                    "Tuple[str, str, str]",
                    "Union[Literal, Literal]",
                    "Optional[float]"
                ],
                "min_version": [
                    "str",
                    "bool",
                    "ImportError"
                ],
                "value": [
                    "str",
                    "List[Tuple[int, int]]",
                    "datetime.datetime"
                ],
                "version": [
                    "str",
                    "list"
                ]
            }
        },
        "_decode_signed_value_v1": {
            "name": "_decode_signed_value_v1",
            "location": 3232,
            "return": [
                "bool",
                "Optional[bool]",
                "Optional[float]",
                "str"
            ],
            "arguments": {
                "args": [],
                "clock": [
                    "int",
                    "Callable[[], float]"
                ],
                "kwargs": [],
                "max_age_days": [
                    "int",
                    "Callable[[], float]"
                ],
                "name": [
                    "str",
                    "int",
                    "bool"
                ],
                "secret": [
                    "str",
                    "int",
                    "bool"
                ],
                "value": [
                    "str",
                    "bytes",
                    "Optional[str]"
                ]
            },
            "variables": {
                "parts": [
                    "str",
                    "List[str]",
                    "List[Dict[str, Any]]",
                    "Callable[[List[str]], Iterable[str]]"
                ],
                "signature": [
                    "str",
                    "Set[str]"
                ],
                "timestamp": [
                    "str",
                    "float",
                    "Type[int]",
                    "bool",
                    "int"
                ]
            }
        },
        "_consume_field": {
            "name": "_consume_field",
            "location": 3263,
            "return": [
                "str",
                "bool",
                "int",
                "type",
                "dict"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "s": [
                    "bytes",
                    "str",
                    "int",
                    "float",
                    "Set[int]",
                    "Optional[str]"
                ]
            },
            "variables": {
                "_": [
                    "List[Union[Any, Any]]",
                    "datetime.datetime.datetime",
                    "List[int]",
                    "List[str]",
                    "Pattern[str]",
                    "bytes"
                ],
                "field_value": [
                    "int",
                    "dict",
                    "list"
                ],
                "length": [
                    "int",
                    "str",
                    "Iterator[Any]",
                    "list"
                ],
                "n": [
                    "int"
                ],
                "rest": [
                    "dict",
                    "list",
                    "bytes",
                    "int"
                ]
            }
        },
        "_decode_fields_v2": {
            "name": "_decode_fields_v2",
            "location": 3262,
            "return": [
                "bool",
                "Optional[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "value": [
                    "bytes",
                    "str",
                    "Iterable[str]",
                    "Iterable[Any]",
                    "float"
                ]
            },
            "variables": {
                "key_version": [
                    "Pattern[str]",
                    "List[str]",
                    "dict",
                    "int",
                    "Set[str]"
                ],
                "name_field": [
                    "list",
                    "Set[str]",
                    "Tuple[str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str]",
                    "List[str]",
                    "set"
                ],
                "passed_sig": [
                    "list",
                    "dict",
                    "List[str]",
                    "int",
                    "str",
                    "float"
                ],
                "rest": [
                    "int",
                    "List[str]",
                    "List[int]",
                    "float",
                    "List[Dict[str, str]]"
                ],
                "timestamp": [
                    "tuple",
                    "Set[str]",
                    "Dict[str, Dict[str, Any]]",
                    "int",
                    "Dict[str, str]",
                    "Set[int]"
                ],
                "value_field": [
                    "Union[str, Tuple[str, ...]]",
                    "float",
                    "str",
                    "List[Tuple[str, int]]",
                    "list"
                ]
            }
        },
        "_decode_signed_value_v2": {
            "name": "_decode_signed_value_v2",
            "location": 3282,
            "return": [
                "bool",
                "Optional[bool]",
                "Optional[float]",
                "str"
            ],
            "arguments": {
                "args": [],
                "clock": [
                    "int",
                    "Callable[[], float]"
                ],
                "kwargs": [],
                "max_age_days": [
                    "int",
                    "Callable[[], float]"
                ],
                "name": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "int"
                ],
                "secret": [
                    "str",
                    "Optional[Mapping[str, Any]]",
                    "Dict[str, 'LabwareDefinition']",
                    "Dict[str, str]"
                ],
                "value": [
                    "str",
                    "Optional[Tuple[str]]",
                    "List[str]",
                    "List[Tuple]",
                    "List[int]"
                ]
            },
            "variables": {
                "expected_sig": [
                    "Dict[str, Dict[str, Any]]",
                    "traceback.StackSummary",
                    "List[str]"
                ],
                "key_version": [
                    "Pattern[str]",
                    "Dict[str, Union[Any, int, str]]"
                ],
                "name_field": [
                    "str",
                    "Pattern[str]",
                    "Dict[str, List[str]]",
                    "List[str]"
                ],
                "passed_sig": [
                    "Set[int]",
                    "list"
                ],
                "secret": [
                    "int",
                    "str",
                    "dict"
                ],
                "signed_string": [
                    "str",
                    "dict",
                    "Tuple[int]",
                    "Tuple[int, int, int, int]",
                    "bytes",
                    "io.TextIOWrapper"
                ],
                "timestamp": [
                    "int",
                    "wemake_python_styleguide.types.AnyNodes",
                    "frozenset[Any]",
                    "List[str]"
                ],
                "value_field": [
                    "Type[int]",
                    "Dict[str, Tuple[int, int]]",
                    "str",
                    "Union[bytearray, bytes]"
                ]
            }
        },
        "get_signature_key_version": {
            "name": "get_signature_key_version",
            "location": 3310,
            "return": [
                "Optional[str]",
                "Optional[List[Any]]",
                "Optional[Dict[str, Any]]",
                "Optional[List[str]]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "value": [
                    "Union[str, List]"
                ]
            },
            "variables": {
                "_": [
                    "list",
                    "Dict[str, int]",
                    "List[str]",
                    "List[float]",
                    "Dict[str, str]"
                ],
                "key_version": [
                    "List[bool]",
                    "Pattern[str]",
                    "int",
                    "Callable(len)[[Sized], int]",
                    "List[Tuple[Any, Any, Any]]"
                ],
                "value": [
                    "list",
                    "str",
                    "Union[List[Any], str]"
                ],
                "version": [
                    "str",
                    "int",
                    "Dict[str, str]"
                ]
            }
        },
        "_create_signature_v1": {
            "name": "_create_signature_v1",
            "location": 3323,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "parts": [
                    "Union[str, bytes]",
                    "str",
                    "Iterable",
                    "bool"
                ],
                "secret": [
                    "str",
                    "Optional[int]",
                    "bytes",
                    "Sized",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]"
                ]
            },
            "variables": {
                "hash": [
                    "hashlib._Hash",
                    "hmac.HMAC",
                    "Callable(hash)[[object], int]"
                ]
            }
        },
        "_create_signature_v2": {
            "name": "_create_signature_v2",
            "location": 3330,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "s": [
                    "bytes",
                    "str",
                    "Pattern[str]"
                ],
                "secret": [
                    "Union[str, bytes]",
                    "str",
                    "bool"
                ]
            },
            "variables": {
                "hash": [
                    "hmac.HMAC",
                    "hashlib._Hash"
                ]
            }
        },
        "is_absolute": {
            "name": "is_absolute",
            "location": 3336,
            "return": [
                "List[str]",
                "str",
                "io.StringIO",
                "Set[str]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "path": [
                    "str"
                ]
            },
            "variables": {}
        },
        "RequestHandler.__init__": {
            "name": "__init__",
            "location": 168,
            "return": [
                ""
            ],
            "arguments": {
                "application": [
                    "mypy.types.Instance",
                    "dict"
                ],
                "args": [],
                "kwargs": [],
                "request": [
                    "Mapping",
                    "str"
                ],
                "self": []
            },
            "variables": {
                "_auto_finish": [
                    "str",
                    "bool"
                ],
                "_finished": [
                    "int",
                    "float"
                ],
                "_headers": [
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, List[str]]"
                ],
                "_headers_written": [
                    "int",
                    "str",
                    "float",
                    "Set[str]",
                    "DefaultDict[Any, List[Any]]",
                    "Final"
                ],
                "_prepared_future": [
                    "float",
                    "bool",
                    "Dict[str, Dict[str, int]]",
                    "Union[str, int]",
                    "Optional[str]",
                    "Tuple[Any, Dict[str, Any]]",
                    "str"
                ],
                "_transforms": [
                    "\"Frame\"",
                    "str",
                    "Dict[str, Any]"
                ],
                "application": [
                    "int",
                    "float",
                    "Set[str]",
                    "Iterator[Any]",
                    "List[int]"
                ],
                "path_args": [
                    "MutableMapping[str, Any]",
                    "MutableMapping[Any, Any]",
                    "Iterator[Dict[str, Any]]",
                    "Iterable[Dict[str, Any]]",
                    "Iterator[Dict[str, str]]"
                ],
                "path_kwargs": [
                    "int",
                    "Optional[str]",
                    "T",
                    "Container[T]"
                ],
                "request": [
                    "Optional[str]"
                ],
                "ui": [
                    "Dict[str, Type[Any]]",
                    "Tuple[Any, Any, Any]",
                    "Optional[Match[str]]",
                    "List[Dict[str, Any]]",
                    "Pattern[str]",
                    "List[Tuple[int, int, Any]]",
                    "FrozenSet[int]",
                    "int",
                    "List[str]"
                ]
            }
        },
        "RequestHandler.initialize": {
            "name": "initialize",
            "location": 195,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "RequestHandler.settings": {
            "name": "settings",
            "location": 217,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "RequestHandler.head": {
            "name": "head",
            "location": 221,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "RequestHandler.get": {
            "name": "get",
            "location": 224,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "RequestHandler.post": {
            "name": "post",
            "location": 227,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "RequestHandler.delete": {
            "name": "delete",
            "location": 230,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "RequestHandler.patch": {
            "name": "patch",
            "location": 233,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "RequestHandler.put": {
            "name": "put",
            "location": 236,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "RequestHandler.options": {
            "name": "options",
            "location": 239,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "RequestHandler.prepare": {
            "name": "prepare",
            "location": 242,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "RequestHandler.on_finish": {
            "name": "on_finish",
            "location": 259,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "RequestHandler.on_connection_close": {
            "name": "on_connection_close",
            "location": 269,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "RequestHandler.clear": {
            "name": "clear",
            "location": 288,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_headers": [
                    "Dict[str, str]",
                    "Dict[str, Union[Any, Any, str]]",
                    "List[Tuple[Any, Any]]",
                    "Dict[int, Union[Any, Any]]",
                    "str",
                    "Dict[int, str]",
                    "Dict[int, Any]"
                ],
                "_reason": [
                    "str",
                    "List[str]",
                    "io.StringIO"
                ],
                "_status_code": [
                    "int",
                    "List[int]",
                    "Type[tuple]"
                ],
                "_write_buffer": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ]
            }
        },
        "RequestHandler.set_default_headers": {
            "name": "set_default_headers",
            "location": 300,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "RequestHandler.set_status": {
            "name": "set_status",
            "location": 310,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "reason": [
                    "Optional[str]",
                    "str",
                    "Dict[bytes, int]",
                    "int"
                ],
                "self": [],
                "status_code": [
                    "int",
                    "bool"
                ]
            },
            "variables": {
                "_reason": [
                    "str",
                    "int",
                    "Union[Literal, str]",
                    "Dict[str, Any]",
                    "Tuple[Literal, Literal, int]",
                    "Final"
                ],
                "_status_code": [
                    "int"
                ]
            }
        },
        "RequestHandler.get_status": {
            "name": "get_status",
            "location": 329,
            "return": [
                "int",
                "dict",
                "Dict[str, str]",
                "Optional[Dict[str, Any]]",
                "Exception",
                "Dict[str, Dict[str, str]]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "RequestHandler.set_header": {
            "name": "set_header",
            "location": 333,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "name": [
                    "str",
                    "int",
                    "List[str]"
                ],
                "self": [],
                "value": [
                    "str",
                    "int",
                    "List[str]"
                ]
            },
            "variables": {}
        },
        "RequestHandler.add_header": {
            "name": "add_header",
            "location": 343,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "name": [
                    "str",
                    "List[str]",
                    "bool"
                ],
                "self": [],
                "value": [
                    "str",
                    "List[str]",
                    "bool"
                ]
            },
            "variables": {}
        },
        "RequestHandler.clear_header": {
            "name": "clear_header",
            "location": 352,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "name": [
                    "str"
                ],
                "self": []
            },
            "variables": {}
        },
        "RequestHandler._convert_header_value": {
            "name": "_convert_header_value",
            "location": 363,
            "return": [
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "value": [
                    "str",
                    "Optional[str]",
                    "Iterable[str]"
                ]
            },
            "variables": {
                "retval": [
                    "dict",
                    "int",
                    "datetime.datetime.timedelta",
                    "Dict[str, Dict[int, str]]"
                ]
            }
        },
        "RequestHandler.get_argument": {
            "name": "get_argument",
            "location": 395,
            "return": [
                "str",
                "Optional[str]",
                "bool",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "args": [],
                "default": [
                    "str",
                    "bytes",
                    "bool",
                    "int"
                ],
                "kwargs": [],
                "name": [
                    "str",
                    "bytes",
                    "bool",
                    "int"
                ],
                "self": [],
                "strip": [
                    "str",
                    "bytes",
                    "bool",
                    "int"
                ]
            },
            "variables": {}
        },
        "RequestHandler.get_arguments": {
            "name": "get_arguments",
            "location": 408,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "name": [
                    "str"
                ],
                "self": [],
                "strip": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            },
            "variables": {}
        },
        "RequestHandler.get_body_argument": {
            "name": "get_body_argument",
            "location": 423,
            "return": [
                "bool",
                "List[str]",
                "int",
                "dict",
                "List[object]",
                "Iterable[str]",
                "str"
            ],
            "arguments": {
                "args": [],
                "default": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "kwargs": [],
                "name": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "self": [],
                "strip": [
                    "str",
                    "bool",
                    "List[str]"
                ]
            },
            "variables": {}
        },
        "RequestHandler.get_body_arguments": {
            "name": "get_body_arguments",
            "location": 440,
            "return": [
                "Optional[str]",
                "bool",
                "str",
                "Dict[str, str]",
                "int",
                "Optional[Dict[str, Any]]",
                "IO"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "name": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "self": [],
                "strip": [
                    "str",
                    "bool",
                    "List[str]"
                ]
            },
            "variables": {}
        },
        "RequestHandler.get_query_argument": {
            "name": "get_query_argument",
            "location": 451,
            "return": [
                "bool",
                "Union[int, float]",
                "tuple",
                "Optional[str]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "args": [],
                "default": [
                    "str",
                    "Optional[List]",
                    "bool",
                    "List[str]"
                ],
                "kwargs": [],
                "name": [
                    "str",
                    "Optional[List]",
                    "bool",
                    "List[str]"
                ],
                "self": [],
                "strip": [
                    "str",
                    "Optional[List]",
                    "bool",
                    "List[str]"
                ]
            },
            "variables": {}
        },
        "RequestHandler.get_query_arguments": {
            "name": "get_query_arguments",
            "location": 468,
            "return": [
                "str",
                "bool",
                "IO"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "name": [
                    "bool",
                    "str",
                    "Optional[str]"
                ],
                "self": [],
                "strip": [
                    "bool",
                    "str",
                    "Optional[str]"
                ]
            },
            "variables": {}
        },
        "RequestHandler._get_argument": {
            "name": "_get_argument",
            "location": 479,
            "return": [
                "str",
                "Union[int, float, complex]",
                "Dict[str, int]",
                "bool",
                "Dict[str, str]"
            ],
            "arguments": {
                "args": [],
                "default": [
                    "Optional[str]",
                    "datetime.datetime",
                    "bool",
                    "int",
                    "str",
                    "Sequence[int]"
                ],
                "kwargs": [],
                "name": [
                    "str",
                    "dict",
                    "Union[str, bytes]"
                ],
                "self": [],
                "source": [
                    "str",
                    "Dict[str, str]"
                ],
                "strip": [
                    "str",
                    "Dict[str, str]"
                ]
            },
            "variables": {
                "args": [
                    "Type[Callable[[Any], Any]]",
                    "List[Tuple[Any, Any]]",
                    "List[bytes]",
                    "List[str]",
                    "Dict[str, List[str]]",
                    "Tuple[str, Any, Any]",
                    "Tuple[str]",
                    "Optional[bytes]"
                ]
            }
        },
        "RequestHandler._get_arguments": {
            "name": "_get_arguments",
            "location": 487,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "name": [
                    "str",
                    "List[str]",
                    "Dict[str, Dict[str, str]]",
                    "Dict[str, Dict[str, Any]]"
                ],
                "self": [],
                "source": [
                    "Dict[str, List[bytes]]",
                    "str"
                ],
                "strip": [
                    "str",
                    "int"
                ]
            },
            "variables": {
                "v": [
                    "List[List[Any]]",
                    "OrderedDict[str, int]",
                    "int"
                ],
                "values": [
                    "str",
                    "list",
                    "List[str]",
                    "Pattern[str]",
                    "Dict[str, str]",
                    "Dict[str, int]",
                    "Tuple[str, List[str], List[str]]"
                ]
            }
        },
        "RequestHandler.decode_argument": {
            "name": "decode_argument",
            "location": 500,
            "return": [
                "str",
                "int",
                "Callable[[Mapping], T]",
                "List[int]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "name": [
                    "str"
                ],
                "self": [],
                "value": [
                    "bytes",
                    "str",
                    "List[str]",
                    "types.CodeType"
                ]
            },
            "variables": {}
        },
        "RequestHandler.cookies": {
            "name": "cookies",
            "location": 520,
            "return": [
                "int",
                "list",
                "static_frame.core.util.DepthLevelSpecifier"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "RequestHandler.get_cookie": {
            "name": "get_cookie",
            "location": 525,
            "return": [
                "bool",
                "Optional[float]",
                "Optional[int]",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "args": [],
                "default": [
                    "str",
                    "bool"
                ],
                "kwargs": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "float",
                    "Optional[Any]",
                    "Optional[Dict[str, Any]]"
                ],
                "self": []
            },
            "variables": {}
        },
        "RequestHandler.set_cookie": {
            "name": "set_cookie",
            "location": 538,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "domain": [
                    "str",
                    "bool",
                    "Iterable[str]",
                    "Optional[str]",
                    "int",
                    "Optional[bool]"
                ],
                "expires": [
                    "datetime.datetime",
                    "Optional[datetime.datetime]",
                    "Optional[datetime.date]"
                ],
                "expires_days": [
                    "datetime.datetime",
                    "Optional[datetime.datetime]",
                    "Optional[datetime.date]"
                ],
                "kwargs": [],
                "name": [
                    "str",
                    "list",
                    "dict",
                    "Optional[str]"
                ],
                "path": [
                    "str",
                    "Optional[str]",
                    "List[str]"
                ],
                "self": [],
                "value": [
                    "str",
                    "List[str]",
                    "tuple",
                    "Optional[Any]",
                    "list",
                    "dict"
                ]
            },
            "variables": {
                "_new_cookie": [
                    "list"
                ],
                "expires": [
                    "datetime.timedelta",
                    "datetime.datetime.datetime",
                    "datetime.datetime",
                    "datetime.date",
                    "datetime.date.time.date"
                ],
                "k": [
                    "int",
                    "List[int]",
                    "str",
                    "Tuple[int, int, int, int, int, int, int]"
                ],
                "morsel": [
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "Dict[str, Tuple[str, str]]",
                    "dict"
                ],
                "name": [
                    "str"
                ],
                "value": [
                    "str",
                    "Tuple[Any, Any]"
                ]
            }
        },
        "RequestHandler.clear_cookie": {
            "name": "clear_cookie",
            "location": 582,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "domain": [
                    "str",
                    "Optional[str]"
                ],
                "kwargs": [],
                "name": [
                    "str",
                    "Optional[str]"
                ],
                "path": [
                    "str",
                    "Optional[str]"
                ],
                "self": []
            },
            "variables": {
                "expires": [
                    "datetime.datetime.timedelta",
                    "datetime.datetime"
                ]
            }
        },
        "RequestHandler.clear_all_cookies": {
            "name": "clear_all_cookies",
            "location": 597,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "domain": [
                    "str",
                    "int",
                    "Set[str]",
                    "bool"
                ],
                "kwargs": [],
                "path": [
                    "str",
                    "int",
                    "Set[str]",
                    "bool"
                ],
                "self": []
            },
            "variables": {}
        },
        "RequestHandler.set_secure_cookie": {
            "name": "set_secure_cookie",
            "location": 613,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "expires_days": [
                    "int",
                    "str",
                    "Union[str, bytes]",
                    "Optional[str]"
                ],
                "kwargs": [],
                "name": [
                    "int",
                    "str",
                    "Union[str, bytes]",
                    "Optional[str]"
                ],
                "self": [],
                "value": [
                    "int",
                    "str",
                    "Union[str, bytes]",
                    "Optional[str]"
                ],
                "version": [
                    "int",
                    "str",
                    "Union[str, bytes]",
                    "Optional[str]"
                ]
            },
            "variables": {}
        },
        "RequestHandler.create_signed_value": {
            "name": "create_signed_value",
            "location": 642,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "name": [
                    "str",
                    "int",
                    "Union[str, bytes]"
                ],
                "self": [],
                "value": [
                    "str",
                    "int",
                    "Union[str, bytes]"
                ],
                "version": [
                    "str",
                    "int",
                    "Union[str, bytes]"
                ]
            },
            "variables": {
                "key_version": [
                    "functools.partial[None]",
                    "Optional[str]",
                    "list",
                    "functools.partial[bool]",
                    "Set[str]",
                    "str"
                ],
                "secret": [
                    "str",
                    "int"
                ]
            }
        },
        "RequestHandler.get_secure_cookie": {
            "name": "get_secure_cookie",
            "location": 665,
            "return": [
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "max_age_days": [
                    "int",
                    "str",
                    "bool"
                ],
                "min_version": [
                    "int",
                    "str",
                    "bool"
                ],
                "name": [
                    "int",
                    "str",
                    "list",
                    "Optional[int]"
                ],
                "self": [],
                "value": [
                    "str",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "int",
                    "bool",
                    "Optional[bool]"
                ]
            },
            "variables": {
                "value": [
                    "list",
                    "Optional[Callable[..., Any]]",
                    "int",
                    "Iterator[Any]"
                ]
            }
        },
        "RequestHandler.get_secure_cookie_key_version": {
            "name": "get_secure_cookie_key_version",
            "location": 688,
            "return": [
                "bool",
                "Optional[Dict[str, str]]",
                "Dict[str, str]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "name": [
                    "str"
                ],
                "self": [],
                "value": [
                    "Optional[str]",
                    "str",
                    "Optional[Dict[str, dict]]"
                ]
            },
            "variables": {
                "value": [
                    "Iterator[Any]",
                    "Optional[Callable[..., Any]]",
                    "Optional[Type[Any]]"
                ]
            }
        },
        "RequestHandler.redirect": {
            "name": "redirect",
            "location": 698,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "permanent": [
                    "bool",
                    "int",
                    "Optional[str]",
                    "str",
                    "bytes",
                    "Optional[\"Node\"]"
                ],
                "self": [],
                "status": [
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "Optional[Union[Any, Any]]"
                ],
                "url": [
                    "bool",
                    "int",
                    "Optional[str]",
                    "str",
                    "bytes",
                    "Optional[\"Node\"]"
                ]
            },
            "variables": {
                "status": [
                    "int",
                    "Optional[int]",
                    "Generator[Any, None, None]"
                ]
            }
        },
        "RequestHandler.write": {
            "name": "write",
            "location": 716,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "chunk": [
                    "dict",
                    "int",
                    "Dict[str, Any]",
                    "List[float]",
                    "str"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "chunk": [
                    "Dict[str, bool]",
                    "str",
                    "dict"
                ],
                "message": [
                    "str",
                    "int"
                ]
            }
        },
        "RequestHandler.render": {
            "name": "render",
            "location": 1624,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_active_modules": [
                    "frozenset[str]",
                    "str",
                    "Union[Literal, Literal]",
                    "Type[str]",
                    "List[str]"
                ],
                "rendered": [
                    "str",
                    "Dict[str, Any]",
                    "Dict[str, Type[Any]]",
                    "T",
                    "Dict[str, Dict[str, Any]]",
                    "Dict[str, str]",
                    "dict"
                ]
            }
        },
        "RequestHandler.render_linked_js": {
            "name": "render_linked_js",
            "location": 810,
            "return": [
                "int",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "args": [],
                "js_files": [
                    "Iterable[str]",
                    "List[str]",
                    "Sequence[str]",
                    "Set[str]",
                    "Iterator[str]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "path": [],
                "paths": [
                    "str"
                ],
                "unique_paths": [
                    "List[str]",
                    "list",
                    "int",
                    "str"
                ]
            }
        },
        "RequestHandler.render_embed_js": {
            "name": "render_embed_js",
            "location": 830,
            "return": [
                "int",
                "types.FrameType",
                "Union[int, List[int]]",
                "str"
            ],
            "arguments": {
                "args": [],
                "js_embed": [
                    "int",
                    "Callable",
                    "str"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "RequestHandler.render_linked_css": {
            "name": "render_linked_css",
            "location": 839,
            "return": [
                "str",
                "Dict[str, Any]",
                "denite.util.Candidate"
            ],
            "arguments": {
                "args": [],
                "css_files": [
                    "Iterable[str]",
                    "List[str]",
                    "Sequence[str]",
                    "Set[str]",
                    "Iterator[str]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "path": [],
                "paths": [
                    "str"
                ],
                "unique_paths": [
                    "List[str]",
                    "list",
                    "int",
                    "str"
                ]
            }
        },
        "RequestHandler.render_embed_css": {
            "name": "render_embed_css",
            "location": 859,
            "return": [
                "int",
                "List[allennlp.common.util.JsonDict]",
                "float"
            ],
            "arguments": {
                "args": [],
                "css_embed": [
                    "int",
                    "Callable",
                    "str"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "RequestHandler.render_string": {
            "name": "render_string",
            "location": 868,
            "return": [
                "str",
                "float",
                "int"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "template_name": [
                    "str",
                    "bytes"
                ]
            },
            "variables": {
                "frame": [
                    "list"
                ],
                "loader": [
                    "list",
                    "io.TextIOWrapper",
                    "dict",
                    "Dict[str, int]",
                    "Optional[IO[bytes]]",
                    "str"
                ],
                "namespace": [
                    "Dict[str, Dict[str, Any]]",
                    "Pattern[str]",
                    "Dict[str, str]",
                    "str",
                    "functools.partial[Any]",
                    "Dict[str, int]",
                    "dict",
                    "Dict[str, Any]"
                ],
                "t": [
                    "str",
                    "float"
                ],
                "template_path": [
                    "str",
                    "Optional[str]"
                ],
                "web_file": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "RequestHandler.get_template_namespace": {
            "name": "get_template_namespace",
            "location": 893,
            "return": [
                "str",
                "List[str]",
                "int",
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "namespace": [
                    "int",
                    "Dict[str, Any]",
                    "list",
                    "List[Union[Any, Any, Any, Any]]"
                ]
            }
        },
        "RequestHandler.create_template_loader": {
            "name": "create_template_loader",
            "location": 916,
            "return": [
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "template_path": [
                    "str",
                    "Optional[str]"
                ]
            },
            "variables": {
                "kwargs": [
                    "str",
                    "List[Dict[str, Any]]",
                    "Dict[str, str]",
                    "Counter[str]",
                    "io.TextIOWrapper"
                ],
                "settings": [
                    "List[str]",
                    "Dict[str, List[Any]]",
                    "Final",
                    "Set[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "RequestHandler.flush": {
            "name": "flush",
            "location": 937,
            "return": [
                "dict",
                "bytes",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "args": [],
                "callback": [
                    "int",
                    "Sequence[int]",
                    "bool"
                ],
                "include_footers": [
                    "List[List[str]]",
                    "int",
                    "str"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_headers": [
                    "str",
                    "frozenset[Union[bytes, str]]",
                    "List[str]"
                ],
                "_headers_written": [
                    "str",
                    "int",
                    "Dict[str, Literal]"
                ],
                "_status_code": [
                    "str",
                    "int"
                ],
                "_write_buffer": [
                    "str"
                ],
                "chunk": [
                    "str",
                    "Dict[str, str]"
                ],
                "future": [
                    "Tuple[str, str, str, str, str, str, str, str, str, str, str, str, str, str]",
                    "Set[str]",
                    "List[str]"
                ],
                "start_line": [
                    "datetime.timedelta",
                    "Union[int, float]",
                    "datetime.datetime",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "RequestHandler.finish": {
            "name": "finish",
            "location": 985,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "chunk": [
                    "Optional[bool]",
                    "Optional[\"Outcome\"]",
                    "bool",
                    "Optional[int]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_finished": [
                    "Type[str]",
                    "str",
                    "List[str]",
                    "float"
                ],
                "_write_buffer": [
                    "int",
                    "str",
                    "Callable(chr)[[int], str]"
                ],
                "content_length": [
                    "Counter[int]",
                    "int",
                    "Set[int]",
                    "str"
                ]
            }
        },
        "RequestHandler._break_cycles": {
            "name": "_break_cycles",
            "location": 1025,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "ui": [
                    "\"Frame\"",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "RequestHandler.send_error": {
            "name": "send_error",
            "location": 1030,
            "return": [
                "mypy.types.Type"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "status_code": [
                    "int",
                    "str"
                ]
            },
            "variables": {
                "exception": [
                    "Dict[str, Union[Any, Any, Any]]",
                    "int",
                    "Dict[str, Union[int, Any]]",
                    "List[str]",
                    "Dict[str, Dict[str, Any]]",
                    "Dict[int, str]",
                    "Dict[str, int]",
                    "dict"
                ],
                "reason": [
                    "int",
                    "str",
                    "Tuple[str]"
                ]
            }
        },
        "RequestHandler.write_error": {
            "name": "write_error",
            "location": 1069,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "status_code": [
                    "int"
                ]
            },
            "variables": {}
        },
        "RequestHandler.locale": {
            "name": "locale",
            "location": 1114,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "value": [
                    "str",
                    "List[float]",
                    "T",
                    "Union[bool, Any]",
                    "float"
                ]
            },
            "variables": {
                "_locale": [
                    "int",
                    "str",
                    "Set[str]",
                    "Dict[str, List[str]]",
                    "float"
                ]
            }
        },
        "RequestHandler.get_user_locale": {
            "name": "get_user_locale",
            "location": 1117,
            "return": [
                "Optional[str]",
                "Optional[int]",
                "bool",
                "Optional[Dict]",
                "Optional[mypy.types.Type]",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "RequestHandler.get_browser_locale": {
            "name": "get_browser_locale",
            "location": 1127,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "args": [],
                "default": [
                    "str",
                    "float",
                    "Dict[str, str]",
                    "Optional[str]",
                    "List[str]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "codes": [
                    "Dict[Any, str]",
                    "dict",
                    "Dict[str, Union[Any, str]]",
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ],
                "languages": [
                    "str",
                    "List[str]",
                    "Set[str]",
                    "Dict[str, str]"
                ],
                "locales": [
                    "list",
                    "List[str]"
                ],
                "parts": [
                    "str",
                    "List[str]"
                ],
                "score": [
                    "list",
                    "asyncio.futures.Future[Any]",
                    "int"
                ]
            }
        },
        "RequestHandler.current_user": {
            "name": "current_user",
            "location": 1188,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "value": [
                    "str",
                    "Union[str]",
                    "T"
                ]
            },
            "variables": {
                "_current_user": [
                    "str",
                    "Dict[int, str]",
                    "list",
                    "Type[str]",
                    "int"
                ]
            }
        },
        "RequestHandler.get_current_user": {
            "name": "get_current_user",
            "location": 1191,
            "return": [
                "Optional[str]",
                "Optional[int]",
                "bool",
                "Optional[mypy.types.Type]",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "RequestHandler.get_login_url": {
            "name": "get_login_url",
            "location": 1198,
            "return": [
                "str",
                "Iterable[int]",
                "bool",
                "float"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "RequestHandler.get_template_path": {
            "name": "get_template_path",
            "location": 1206,
            "return": [
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "RequestHandler.xsrf_token": {
            "name": "xsrf_token",
            "location": 1215,
            "return": [
                "str",
                "int",
                "list"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_xsrf_token": [
                    "str",
                    "Dict[str, List[Any]]",
                    "Tuple[str, str]",
                    "Dict[str, Union[Any, str]]",
                    "List[str]",
                    "int",
                    "OrderedDict"
                ],
                "cookie_kwargs": [
                    "str",
                    "Dict[str, Dict[str, str]]",
                    "Dict[str, dict]",
                    "Dict[str, Dict[str, Any]]",
                    "Dict[str, Dict[Any, str]]",
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ],
                "expires_days": [
                    "str",
                    "Dict[int, Any]",
                    "Type[object]",
                    "Tuple[float]",
                    "Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]",
                    "List[int]"
                ],
                "mask": [
                    "List[str]",
                    "str",
                    "Tuple[List[str], List[str], List[str]]"
                ],
                "output_version": [
                    "str",
                    "Dict[str, str]",
                    "Dict[str, Union[float, str]]"
                ],
                "timestamp": [
                    "str",
                    "bool",
                    "Dict[str, Dict[str, Any]]",
                    "Tuple[float, int]",
                    "dict"
                ],
                "token": [
                    "str"
                ],
                "version": [
                    "str",
                    "routemaster_sdk.types.LabelRef",
                    "bytes"
                ]
            }
        },
        "RequestHandler._get_raw_xsrf_token": {
            "name": "_get_raw_xsrf_token",
            "location": 1270,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_raw_xsrf_token": [
                    "str",
                    "Dict[str, str]",
                    "Pattern[str]",
                    "Dict[Any, str]"
                ],
                "cookie": [
                    "int",
                    "Dict[int, str]",
                    "str",
                    "Type[str]",
                    "List[str]"
                ],
                "timestamp": [],
                "token": [
                    "Dict[str, Any]"
                ],
                "version": [
                    "str",
                    "Dict[str, Union[str, int, bool]]",
                    "list"
                ]
            }
        },
        "RequestHandler._decode_xsrf_token": {
            "name": "_decode_xsrf_token",
            "location": 1294,
            "return": [
                "bool",
                "Optional[Type[Exception]]"
            ],
            "arguments": {
                "args": [],
                "cookie": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_": [
                    "Pattern[str]",
                    "int",
                    "hashlib._Hash",
                    "dict"
                ],
                "m": [
                    "Pattern[str]",
                    "Dict[str, Type[Any]]",
                    "List[str]"
                ],
                "mask": [
                    "List[str]",
                    "str",
                    "Tuple[Any, Any, Any, Any, Any, Any]",
                    "Type[str]"
                ],
                "masked_token": [
                    "str"
                ],
                "timestamp": [
                    "int",
                    "time.struct_time",
                    "float",
                    "dict"
                ],
                "token": [
                    "str"
                ],
                "version": [
                    "str",
                    "int",
                    "List[str]",
                    "Pattern[str]"
                ]
            }
        },
        "RequestHandler.check_xsrf_cookie": {
            "name": "check_xsrf_cookie",
            "location": 1330,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_": [
                    "dict",
                    "Type[str]",
                    "Dict[str, Type[Any]]"
                ],
                "expected_token": [
                    "list",
                    "threading.Timer",
                    "int"
                ],
                "token": [
                    "Dict[str, Union[int, str]]",
                    "Dict[str, str]"
                ]
            }
        },
        "RequestHandler.xsrf_form_html": {
            "name": "xsrf_form_html",
            "location": 1367,
            "return": [
                "str",
                "Tuple[str, str]",
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "RequestHandler.static_url": {
            "name": "static_url",
            "location": 1383,
            "return": [
                "str",
                "bool",
                "Optional[int]",
                "int",
                "List[str]",
                "dict"
            ],
            "arguments": {
                "args": [],
                "include_host": [
                    "Optional[str]",
                    "Optional[List[str]]",
                    "Optional[Sequence[str]]",
                    "str"
                ],
                "kwargs": [],
                "path": [
                    "str",
                    "dict"
                ],
                "self": []
            },
            "variables": {
                "base": [
                    "str"
                ],
                "get_url": [
                    "dict",
                    "int"
                ],
                "include_host": [
                    "Tuple[Type[tuple], Type[list]]",
                    "list",
                    "Tuple[int, int, int, int, int, int, int, int, int, int]",
                    "dict"
                ]
            }
        },
        "RequestHandler.require_setting": {
            "name": "require_setting",
            "location": 1418,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "feature": [
                    "str",
                    "List[str]",
                    "Optional[List[str]]"
                ],
                "kwargs": [],
                "name": [
                    "str",
                    "apistar.types.ParamName"
                ],
                "self": []
            },
            "variables": {}
        },
        "RequestHandler.reverse_url": {
            "name": "reverse_url",
            "location": 1424,
            "return": [
                "bool",
                "int",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "name": [
                    "str"
                ],
                "self": []
            },
            "variables": {}
        },
        "RequestHandler.compute_etag": {
            "name": "compute_etag",
            "location": 1428,
            "return": [
                "str",
                "denite.util.UserContext",
                "float"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "hasher": [
                    "hashlib._Hash",
                    "Dict[Any, bytes]",
                    "str",
                    "Dict[int, Any]",
                    "bytes",
                    "Set[Tuple[Any, Any]]",
                    "Dict[str, str]"
                ]
            }
        },
        "RequestHandler.set_etag_header": {
            "name": "set_etag_header",
            "location": 1441,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "etag": [
                    "str",
                    "bytes"
                ]
            }
        },
        "RequestHandler.val": {
            "name": "val",
            "location": 1484,
            "return": [
                "int",
                "List[int]",
                "Iterable[int]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "x": [
                    "bytes",
                    "int",
                    "str"
                ]
            },
            "variables": {}
        },
        "RequestHandler.check_etag_header": {
            "name": "check_etag_header",
            "location": 1452,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "computed_etag": [
                    "str",
                    "List[str]",
                    "Dict[str, Union[Any, Any]]",
                    "dict"
                ],
                "etags": [
                    "str",
                    "List[str]",
                    "int",
                    "Dict[str, List[Any]]",
                    "Tuple[str, str, str, str, str, str, str, str]"
                ],
                "match": [
                    "ClassVar[bool]",
                    "bool",
                    "list",
                    "Set[str]",
                    "threading.Thread",
                    "int",
                    "Tuple[Type[AttributeError], Type[NotImplementedError]]"
                ]
            }
        },
        "RequestHandler._stack_context_handle_exception": {
            "name": "_stack_context_handle_exception",
            "location": 1493,
            "return": [
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "traceback": [
                    "Callable[[T], T]",
                    "T"
                ],
                "type": [
                    "Callable[[T], T]",
                    "T"
                ],
                "value": [
                    "mypy.types.Type",
                    "int",
                    "Optional[Type[BaseException]]",
                    "Optional[types.TracebackType]",
                    "Optional[BaseException]"
                ]
            },
            "variables": {}
        },
        "RequestHandler._execute": {
            "name": "_execute",
            "location": 1505,
            "return": [
                "Iterator"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "transforms": [
                    "int",
                    "Callable",
                    "str"
                ]
            },
            "variables": {
                "_transforms": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ],
                "method": [
                    "str",
                    "Optional[str]"
                ],
                "path_args": [
                    "List[str]",
                    "str",
                    "Dict[str, str]",
                    "Tuple[Literal, Literal, Literal, Literal, Literal, Literal]",
                    "Dict[str, Union[Any, Any, Any]]",
                    "dict"
                ],
                "path_kwargs": [
                    "dict",
                    "list",
                    "Dict[str, Any]",
                    "Mapping[str, Any]",
                    "str"
                ],
                "result": [
                    "lambda_handlers.types.APIGatewayProxyResult"
                ]
            }
        },
        "RequestHandler.data_received": {
            "name": "data_received",
            "location": 1561,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "chunk": [
                    "bytes",
                    "bool",
                    "int",
                    "Optional[Exception]",
                    "Callable[..., Awaitable]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "RequestHandler._log": {
            "name": "_log",
            "location": 1568,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "RequestHandler._request_summary": {
            "name": "_request_summary",
            "location": 1577,
            "return": [
                "str",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "RequestHandler._handle_request_exception": {
            "name": "_handle_request_exception",
            "location": 1581,
            "return": [
                "Iterator[Dict[str, str]]",
                "Iterator[List[T]]",
                "Iterator[bytes]",
                "Iterable[Sequence[T]]"
            ],
            "arguments": {
                "args": [],
                "e": [
                    "Sequence[str]",
                    "BaseException",
                    "float",
                    "Callable[..., None]",
                    "Callable",
                    "Dict[str, Any]",
                    "tuple"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "RequestHandler.log_exception": {
            "name": "log_exception",
            "location": 1603,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "tb": [
                    "str",
                    "Dict[str, Any]",
                    "T",
                    "bool"
                ],
                "typ": [
                    "str",
                    "Dict[str, Any]",
                    "T",
                    "bool"
                ],
                "value": [
                    "Callable",
                    "str",
                    "types.MethodType",
                    "Callable[..., Coroutine[Any, Any, Any]]"
                ]
            },
            "variables": {
                "args": [
                    "List[str]",
                    "Dict[str, Union[Any, bool, str]]",
                    "Dict[str, Union[Any, Any, Any, bool, str]]",
                    "Dict[str, Union[Any, Any, bool, str]]"
                ],
                "format": [
                    "str",
                    "Final"
                ]
            }
        },
        "RequestHandler._ui_module": {
            "name": "_ui_module",
            "location": 1623,
            "return": [
                "float",
                "bool",
                "str",
                "IO[Any]",
                "hashdecoder.lib.types.hint_type"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "module": [
                    "str",
                    "List[str]",
                    "bool"
                ],
                "name": [
                    "str",
                    "List[str]",
                    "bool"
                ],
                "self": []
            },
            "variables": {}
        },
        "RequestHandler._ui_method": {
            "name": "_ui_method",
            "location": 1633,
            "return": [
                "bool",
                "Mapping",
                "opentrons.types.Mount"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "method": [
                    "str",
                    "Callable[..., str]",
                    "Callable",
                    "Dict[str, Any]"
                ],
                "self": []
            },
            "variables": {}
        },
        "RequestHandler._clear_headers_for_304": {
            "name": "_clear_headers_for_304",
            "location": 1636,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "headers": [
                    "Mapping[str, str]",
                    "List[Tuple[str, str, str]]",
                    "list",
                    "Callable[[str], Tuple[str, str]]",
                    "property"
                ]
            }
        },
        "_ApplicationRouter.__init__": {
            "name": "__init__",
            "location": 1813,
            "return": [
                ""
            ],
            "arguments": {
                "application": [
                    "str"
                ],
                "args": [],
                "kwargs": [],
                "rules": [
                    "str",
                    "bytes",
                    "config.Rule",
                    "Iterable[str]"
                ],
                "self": []
            },
            "variables": {
                "application": [
                    "urllib.error.URLError",
                    "str",
                    "qutebrowser.qutebrowser.utils.log.LogFilter"
                ]
            }
        },
        "_ApplicationRouter.process_rule": {
            "name": "process_rule",
            "location": 1818,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "rule": [
                    "denite.util.UserContext",
                    "Callable[[], Awaitable[Mapping]]",
                    "int",
                    "List[str]",
                    "Mapping[str, Sequence[str]]"
                ],
                "self": []
            },
            "variables": {
                "rule": [
                    "list",
                    "str"
                ],
                "target": [
                    "int",
                    "list",
                    "functools.partial[None]",
                    "range",
                    "List[str]",
                    "List[float]",
                    "Set[int]",
                    "Dict[int, Tuple[int, int]]"
                ]
            }
        },
        "_ApplicationRouter.get_target_delegate": {
            "name": "get_target_delegate",
            "location": 1826,
            "return": [
                "Optional[str]",
                "str",
                "Optional[List[str]]",
                "exporwiki.types.PrimalEngramEntry",
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "request": [
                    "dict",
                    "Tuple[int]"
                ],
                "self": [],
                "target": [
                    "tornado.httputil.HTTPServerRequest"
                ],
                "target_params": [
                    "dict",
                    "Tuple[int]"
                ]
            },
            "variables": {}
        },
        "Application.__init__": {
            "name": "__init__",
            "location": 1916,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "default_host": [
                    "int",
                    "bool",
                    "str",
                    "Sequence[T]",
                    "List[Tuple[int, float]]",
                    "apps.monero.xmr.types.Ge25519"
                ],
                "handlers": [
                    "str",
                    "bool",
                    "List[str]",
                    "Dict[str, Any]"
                ],
                "kwargs": [],
                "self": [],
                "settings": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "Callable",
                    "bool"
                ],
                "transforms": [
                    "Optional[Dict]",
                    "dict",
                    "Optional[str]",
                    "Optional[Callable[..., Any]]",
                    "Optional[int]",
                    "Optional[List[str]]"
                ]
            },
            "variables": {
                "default_host": [
                    "str",
                    "int",
                    "List[Dict[str, str]]",
                    "float",
                    "Dict[str, str]"
                ],
                "default_router": [
                    "Pattern[str]"
                ],
                "handlers": [
                    "List[str]",
                    "str",
                    "Dict[str, List[str]]",
                    "Optional[Match[str]]",
                    "Type[List[int]]",
                    "dict",
                    "Set[str]",
                    "Tuple[str, str, str]",
                    "Tuple[str, str, str, str, str]"
                ],
                "path": [
                    "str"
                ],
                "settings": [
                    "str",
                    "Dict[str, str]",
                    "Dict[str, Union[Any, Any]]",
                    "Dict[str, Union[dict, Any, Any, Any]]",
                    "Dict[str, List[Any]]",
                    "list"
                ],
                "static_handler_args": [
                    "List[str]",
                    "str",
                    "Set[str]",
                    "list"
                ],
                "static_handler_class": [
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "Dict[str, Union[Any, Any, Any, Any, Any, Any, Any, Any, Any]]",
                    "set",
                    "Dict[str, int]",
                    "dict",
                    "Dict[str, Union[Any, Any, Any, Any]]",
                    "Dict[Type[Any], Type[Any]]"
                ],
                "static_url_prefix": [
                    "str",
                    "Dict[Any, str]",
                    "Dict[str, str]"
                ],
                "transforms": [
                    "concurrenfutures._base.Future[Any]",
                    "opsi.util.cv.maMat"
                ],
                "ui_methods": [
                    "int",
                    "List[str]",
                    "list",
                    "Set[str]"
                ],
                "ui_modules": [
                    "str"
                ],
                "wildcard_router": [
                    "datetime.timedelta",
                    "str",
                    "int",
                    "float",
                    "List[Tuple[str, str, str]]",
                    "Dict[str, List[str]]"
                ]
            }
        },
        "Application.listen": {
            "name": "listen",
            "location": 1963,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "address": [
                    "int",
                    "str",
                    "Optional[bytes]",
                    "Union[str, int]",
                    "float"
                ],
                "args": [],
                "kwargs": [],
                "port": [
                    "int",
                    "str",
                    "Optional[bytes]",
                    "Union[str, int]",
                    "float"
                ],
                "self": []
            },
            "variables": {
                "server": [
                    "str",
                    "int"
                ]
            }
        },
        "Application.add_handlers": {
            "name": "add_handlers",
            "location": 1989,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "host_handlers": [
                    "int",
                    "str"
                ],
                "host_pattern": [
                    "Dict[str, Any]",
                    "Any",
                    "dict",
                    "str"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "host_matcher": [],
                "rule": [
                    "property",
                    "int"
                ]
            }
        },
        "Application.add_transform": {
            "name": "add_transform",
            "location": 2006,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "transform_class": [
                    "List[str]",
                    "str",
                    "list",
                    "Optional[str]"
                ]
            },
            "variables": {}
        },
        "Application._load_ui_methods": {
            "name": "_load_ui_methods",
            "location": 2009,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "methods": [
                    "type",
                    "Type[Any]",
                    "AbstractSet[\"TemplatePropertyVariable\"]"
                ],
                "self": []
            },
            "variables": {}
        },
        "Application._load_ui_modules": {
            "name": "_load_ui_modules",
            "location": 2022,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "modules": [
                    "mypy.types.CallableType",
                    "types.FunctionType"
                ],
                "self": []
            },
            "variables": {}
        },
        "Application.__call__": {
            "name": "__call__",
            "location": 2038,
            "return": [
                "starlette.types.Receive",
                "Callable",
                "Union[concurrenfutures.Future, asyncio.futures.Future]",
                "starlette.types.Send",
                "int",
                "float"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "request": [
                    "rouver.types.WSGIEnvironment"
                ],
                "self": []
            },
            "variables": {
                "dispatcher": [
                    "str",
                    "Optional[str]",
                    "int",
                    "Dict[str, str]"
                ]
            }
        },
        "Application.find_handler": {
            "name": "find_handler",
            "location": 2043,
            "return": [
                "bool",
                "str",
                "Optional[Dict[str, Any]]",
                "float",
                "Dict[str, Dict]",
                "opentrons.types.Location",
                "opentrons.protocols.types.APIVersion"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "request": [],
                "self": []
            },
            "variables": {
                "route": [
                    "list",
                    "byceps.util.image.models.Dimensions"
                ]
            }
        },
        "Application.get_handler_delegate": {
            "name": "get_handler_delegate",
            "location": 2057,
            "return": [
                "str",
                "Optional[Dict]",
                "lunch_buddies.types.BotMention",
                "dict",
                "int"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "path_args": [
                    "tornado.httputil.HTTPServerRequest",
                    "Dict[str, bytes]",
                    "List[bytes]",
                    "Dict[str, Any]"
                ],
                "path_kwargs": [
                    "tornado.httputil.HTTPServerRequest",
                    "Dict[str, bytes]",
                    "List[bytes]",
                    "Dict[str, Any]"
                ],
                "request": [
                    "tornado.httputil.HTTPServerRequest",
                    "Dict[str, bytes]",
                    "List[bytes]",
                    "Dict[str, Any]"
                ],
                "self": [],
                "target_class": [
                    "tornado.httputil.HTTPServerRequest",
                    "Dict[str, bytes]",
                    "List[bytes]",
                    "Dict[str, Any]"
                ],
                "target_kwargs": [
                    "tornado.httputil.HTTPServerRequest",
                    "Dict[str, bytes]",
                    "List[bytes]",
                    "Dict[str, Any]"
                ]
            },
            "variables": {}
        },
        "Application.reverse_url": {
            "name": "reverse_url",
            "location": 2072,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "name": [
                    "str"
                ],
                "self": []
            },
            "variables": {
                "reversed_url": [
                    "str",
                    "Final",
                    "List[str]",
                    "functools.partial[Any]"
                ]
            }
        },
        "Application.log_request": {
            "name": "log_request",
            "location": 2087,
            "return": [
                "Iterable[Mapping[str, Any]]",
                "Optional[bool]",
                "str",
                "Iterator[Any]",
                "Iterator[Dict[str, str]]",
                "Iterator[str]"
            ],
            "arguments": {
                "args": [],
                "handler": [
                    "Optional[Dict[str, str]]",
                    "Union[Dict, str]",
                    "apistar.types.ReturnValue"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "log_method": [
                    "str",
                    "List[int]",
                    "bytes"
                ],
                "request_time": [
                    "int",
                    "Dict[str, Union[Any, Any, Any, Any, Any, Any, Any]]",
                    "float",
                    "Dict[str, str]"
                ]
            }
        },
        "_HandlerDelegate.__init__": {
            "name": "__init__",
            "location": 2110,
            "return": [
                ""
            ],
            "arguments": {
                "application": [
                    "List[Dict[str, Any]]",
                    "int",
                    "Tuple[Dict[str, Any], Dict[str, Any]]"
                ],
                "args": [],
                "handler_class": [
                    "bool"
                ],
                "handler_kwargs": [
                    "List[Dict[str, Any]]",
                    "int",
                    "Tuple[Dict[str, Any], Dict[str, Any]]"
                ],
                "kwargs": [],
                "path_args": [
                    "List[str]",
                    "bool",
                    "Dict[str, Any]",
                    "Optional[List[bytes]]",
                    "str"
                ],
                "path_kwargs": [
                    "str",
                    "Optional[Dict[str, bytes]]",
                    "List[str]",
                    "Mapping[str, Any]",
                    "bool",
                    "Optional[str]"
                ],
                "request": [
                    "tornado.httputil.HTTPServerRequest",
                    "Dict[str, bytes]",
                    "List[bytes]",
                    "Dict[str, Any]"
                ],
                "self": []
            },
            "variables": {
                "application": [
                    "int",
                    "str",
                    "float",
                    "Dict[str, Any]"
                ],
                "chunks": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ],
                "connection": [
                    "str",
                    "urllib.requesRequest",
                    "int",
                    "Dict[str, Dict[str, Any]]",
                    "dict",
                    "Dict[str, str]"
                ],
                "handler_class": [
                    "dict",
                    "int",
                    "Dict[Any, int]",
                    "Optional[int]"
                ],
                "handler_kwargs": [
                    "List[str]",
                    "Dict[str, dict]",
                    "str",
                    "Set[str]",
                    "int",
                    "DefaultDict[Any, List[Any]]",
                    "float"
                ],
                "path_args": [
                    "Set[str]",
                    "List[str]",
                    "list",
                    "Dict[str, Tuple[str, ...]]",
                    "Dict[str, str]"
                ],
                "path_kwargs": [
                    "dict"
                ],
                "request": [
                    "Dict[str, Union[int, str]]",
                    "list",
                    "str"
                ],
                "stream_request_body": [
                    "int",
                    "staticmethod",
                    "str",
                    "float",
                    "Dict[str, int]",
                    "Dict[int, Any]"
                ]
            }
        },
        "_HandlerDelegate.headers_received": {
            "name": "headers_received",
            "location": 2122,
            "return": [
                "Optional[str]",
                "str",
                "complex"
            ],
            "arguments": {
                "args": [],
                "headers": [
                    "tornado.httputil.HTTPHeaders",
                    "bytes",
                    "str"
                ],
                "kwargs": [],
                "self": [],
                "start_line": [
                    "tornado.httputil.HTTPHeaders",
                    "bytes",
                    "str"
                ]
            },
            "variables": {}
        },
        "_HandlerDelegate.data_received": {
            "name": "data_received",
            "location": 2127,
            "return": [
                "bool",
                "Optional[float]",
                "str",
                "starfish.types.Axes",
                "dict"
            ],
            "arguments": {
                "args": [],
                "data": [
                    "dict",
                    "str"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "_HandlerDelegate.finish": {
            "name": "finish",
            "location": 2133,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "_HandlerDelegate.on_connection_close": {
            "name": "on_connection_close",
            "location": 2141,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "chunks": [
                    "\"Frame\"",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "_HandlerDelegate.execute": {
            "name": "execute",
            "location": 2147,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "handler": [
                    "str",
                    "List[str]",
                    "Dict[str, Union[Any, Any, Any, Any]]"
                ],
                "transforms": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "HTTPError.__init__": {
            "name": "__init__",
            "location": 2201,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "log_message": [
                    "int",
                    "bytes",
                    "str",
                    "Optional[int]",
                    "dict"
                ],
                "self": [],
                "status_code": [
                    "int"
                ]
            },
            "variables": {
                "args": [
                    "dict",
                    "str",
                    "Dict[str, Any]",
                    "Tuple[Literal, Literal, Literal]",
                    "Tuple[Any, Any]",
                    "List[str]"
                ],
                "log_message": [
                    "bool",
                    "list",
                    "str",
                    "int",
                    "starfish.core.util.logging.Log",
                    "Optional[str]"
                ],
                "reason": [
                    "KeysView[str]",
                    "str",
                    "Dict[str, Union[Any, str]]",
                    "Set[str]",
                    "Dict[Any, Union[int, str]]",
                    "Dict[Any, float]",
                    "Dict[str, Union[Any, Any]]",
                    "Dict[str, str]"
                ],
                "status_code": [
                    "int"
                ]
            }
        },
        "HTTPError.__str__": {
            "name": "__str__",
            "location": 2209,
            "return": [
                "int",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "message": [
                    "dict",
                    "Dict[str, Union[Any, Any, Any, str]]",
                    "Dict[str, Union[Any, Any]]",
                    "str"
                ]
            }
        },
        "MissingArgumentError.__init__": {
            "name": "__init__",
            "location": 2254,
            "return": [
                ""
            ],
            "arguments": {
                "arg_name": [
                    "str",
                    "Optional[str]"
                ],
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "arg_name": [
                    "str"
                ]
            }
        },
        "ErrorHandler.initialize": {
            "name": "initialize",
            "location": 2262,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "status_code": [
                    "int",
                    "str"
                ]
            },
            "variables": {}
        },
        "ErrorHandler.prepare": {
            "name": "prepare",
            "location": 2265,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "ErrorHandler.check_xsrf_cookie": {
            "name": "check_xsrf_cookie",
            "location": 2268,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "RedirectHandler.initialize": {
            "name": "initialize",
            "location": 2307,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "permanent": [
                    "str",
                    "float",
                    "List[Tuple[int, int]]"
                ],
                "self": [],
                "url": [
                    "str",
                    "float",
                    "List[Tuple[int, int]]"
                ]
            },
            "variables": {
                "_permanent": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ],
                "_url": [
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "RedirectHandler.get": {
            "name": "get",
            "location": 2311,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "to_url": [
                    "str",
                    "Set[str]",
                    "dict",
                    "Dict[str, Union[Any, bool]]",
                    "List[str]",
                    "list",
                    "Dict[str, Any]"
                ]
            }
        },
        "StaticFileHandler.initialize": {
            "name": "initialize",
            "location": 2390,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "default_filename": [
                    "IO",
                    "str"
                ],
                "kwargs": [],
                "path": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "self": []
            },
            "variables": {
                "default_filename": [
                    "str",
                    "bytes"
                ],
                "root": [
                    "str",
                    "Dict[str, str]",
                    "Optional[str]"
                ]
            }
        },
        "StaticFileHandler.reset": {
            "name": "reset",
            "location": 2395,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "cls": [
                    "str",
                    "Optional[int]",
                    "complex",
                    "bytes",
                    "bool"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_static_hashes": [
                    "List[str]",
                    "set",
                    "Set[str]",
                    "Type[Optional[str]]",
                    "List[tuple]"
                ]
            }
        },
        "StaticFileHandler.head": {
            "name": "head",
            "location": 2399,
            "return": [
                "str",
                "bool",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "path": [
                    "str"
                ],
                "self": []
            },
            "variables": {}
        },
        "StaticFileHandler.get": {
            "name": "get",
            "location": 2403,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "args": [],
                "include_body": [
                    "bool",
                    "str"
                ],
                "kwargs": [],
                "path": [
                    "str",
                    "bool",
                    "int"
                ],
                "self": []
            },
            "variables": {
                "absolute_path": [],
                "content": [
                    "bytes",
                    "str",
                    "List[int]"
                ],
                "content_length": [
                    "str",
                    "Type[Dict[str, Any]]",
                    "Optional[str]",
                    "list",
                    "datetime.timedelta",
                    "dict"
                ],
                "end": [
                    "int",
                    "str",
                    "Dict[str, str]",
                    "float"
                ],
                "modified": [
                    "int"
                ],
                "path": [
                    "str",
                    "deque[str]"
                ],
                "range_header": [
                    "bytes",
                    "Type[Callable[..., Any]]",
                    "Dict[str, int]"
                ],
                "request_range": [
                    "str",
                    "hashlib._Hash",
                    "List[Tuple[int, str]]",
                    "int"
                ],
                "size": [
                    "int",
                    "time.struct_time",
                    "str"
                ],
                "start": [
                    "int",
                    "slice",
                    "float"
                ]
            }
        },
        "StaticFileHandler.compute_etag": {
            "name": "compute_etag",
            "location": 2478,
            "return": [
                "Optional[str]",
                "Optional[int]",
                "Optional[Dict]",
                "int"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "version_hash": [
                    "list",
                    "dict",
                    "Pattern[str]"
                ]
            }
        },
        "StaticFileHandler.set_headers": {
            "name": "set_headers",
            "location": 2492,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "cache_time": [
                    "datetime.datetime.datetime",
                    "datetime.time",
                    "datetime.timedelta",
                    "datetime.date"
                ],
                "content_type": [
                    "str"
                ]
            }
        },
        "StaticFileHandler.should_return_304": {
            "name": "should_return_304",
            "location": 2516,
            "return": [
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "date_tuple": [
                    "datetime.date",
                    "datetime.datetime",
                    "datetime.datetime.datetime",
                    "str"
                ],
                "if_since": [
                    "datetime.datetime.datetime",
                    "str",
                    "datetime.date",
                    "datetime.datetime"
                ],
                "ims_value": [
                    "float",
                    "Dict[str, int]",
                    "Counter[Any]",
                    "Dict[Optional[str], Any]",
                    "dict",
                    "Dict[Any, str]",
                    "Generator[Any, None, None]"
                ]
            }
        },
        "StaticFileHandler.get_absolute_path": {
            "name": "get_absolute_path",
            "location": 2538,
            "return": [
                "str",
                "List[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "args": [],
                "cls": [
                    "str",
                    "List[str]"
                ],
                "kwargs": [],
                "path": [
                    "str",
                    "bool"
                ],
                "root": [
                    "str",
                    "bool"
                ],
                "self": []
            },
            "variables": {
                "abspath": [
                    "str",
                    "float"
                ]
            }
        },
        "StaticFileHandler.validate_absolute_path": {
            "name": "validate_absolute_path",
            "location": 2554,
            "return": [
                "edgar_code.types.PathLike",
                "str",
                "bytes"
            ],
            "arguments": {
                "absolute_path": [
                    "str",
                    "Optional[str]"
                ],
                "args": [],
                "kwargs": [],
                "root": [
                    "str"
                ],
                "self": []
            },
            "variables": {
                "absolute_path": [
                    "str",
                    "List[str]"
                ],
                "root": [
                    "str"
                ]
            }
        },
        "StaticFileHandler.get_content": {
            "name": "get_content",
            "location": 2607,
            "return": [
                "str",
                "List[Dict[str, str]]",
                "int"
            ],
            "arguments": {
                "abspath": [
                    "str",
                    "bool",
                    "int"
                ],
                "args": [],
                "cls": [
                    "int",
                    "bool"
                ],
                "end": [
                    "int",
                    "Optional[str]",
                    "Optional[bool]",
                    "Optional[int]"
                ],
                "kwargs": [],
                "self": [],
                "start": [
                    "int",
                    "Optional[int]",
                    "ics.types.OptionalDatetimeLike",
                    "Union[int, None]"
                ]
            },
            "variables": {
                "chunk": [
                    "str",
                    "list",
                    "List[int]",
                    "io.TextIOWrapper",
                    "List[bytes]",
                    "int"
                ],
                "chunk_size": [
                    "int",
                    "float"
                ],
                "remaining": [
                    "int",
                    "str"
                ]
            }
        },
        "StaticFileHandler.get_content_version": {
            "name": "get_content_version",
            "location": 2644,
            "return": [
                "str",
                "Optional[str]",
                "int",
                "datetime.datetime",
                "List[str]"
            ],
            "arguments": {
                "abspath": [
                    "int",
                    "str",
                    "float"
                ],
                "args": [],
                "cls": [
                    "int",
                    "str",
                    "float"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "data": [
                    "bytes",
                    "Dict[str, Any]",
                    "str"
                ],
                "hasher": [
                    "hashlib._Hash",
                    "dict",
                    "\"OrderedDict[str, float]\""
                ]
            }
        },
        "StaticFileHandler._stat": {
            "name": "_stat",
            "location": 2661,
            "return": [
                "str",
                "dict",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_stat_result": [
                    "Pattern[str]",
                    "int"
                ]
            }
        },
        "StaticFileHandler.get_content_size": {
            "name": "get_content_size",
            "location": 2666,
            "return": [
                "str",
                "Optional[str]",
                "Optional[Dict[str, str]]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "stat_result": [
                    "int",
                    "str",
                    "List[int]"
                ]
            }
        },
        "StaticFileHandler.get_modified_time": {
            "name": "get_modified_time",
            "location": 2680,
            "return": [
                "int",
                "str",
                "bytes"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "modified": [
                    "datetime.datetime.timedelta",
                    "datetime.datetime.datetime"
                ],
                "stat_result": [
                    "datetime.datetime.timedelta",
                    "datetime.datetime",
                    "datetime.datetime.datetime",
                    "datetime.date",
                    "datetime.date.time.datetime"
                ]
            }
        },
        "StaticFileHandler.get_content_type": {
            "name": "get_content_type",
            "location": 2693,
            "return": [
                "mypy.types.CallableType",
                "str",
                "bytes",
                "type",
                "mypy.types.Type"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "encoding": [
                    "str"
                ],
                "mime_type": [
                    "str",
                    "Dict[str, Union[Any, Any, Any, Any]]",
                    "List[str]",
                    "Dict[str, List[str]]"
                ]
            }
        },
        "StaticFileHandler.set_extra_headers": {
            "name": "set_extra_headers",
            "location": 2713,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "path": [
                    "str",
                    "List[Tuple[object, object]]",
                    "bool"
                ],
                "self": []
            },
            "variables": {}
        },
        "StaticFileHandler.get_cache_time": {
            "name": "get_cache_time",
            "location": 2717,
            "return": [
                "str",
                "Dict[str, int]",
                "float",
                "list"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "mime_type": [
                    "str",
                    "Optional[datetime.datetime]",
                    "Optional[concurrenfutures.Future]",
                    "list",
                    "Dict[str, Any]"
                ],
                "modified": [
                    "str",
                    "Optional[datetime.datetime]",
                    "Optional[concurrenfutures.Future]",
                    "list",
                    "Dict[str, Any]"
                ],
                "path": [
                    "str",
                    "Optional[datetime.datetime]",
                    "Optional[concurrenfutures.Future]",
                    "list",
                    "Dict[str, Any]"
                ],
                "self": []
            },
            "variables": {}
        },
        "StaticFileHandler.make_static_url": {
            "name": "make_static_url",
            "location": 2731,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "args": [],
                "cls": [
                    "str",
                    "float",
                    "Callable[[str], bool]",
                    "list"
                ],
                "include_version": [
                    "bool",
                    "int",
                    "str",
                    "Set[str]"
                ],
                "kwargs": [],
                "path": [
                    "str"
                ],
                "self": [],
                "settings": [
                    "str"
                ]
            },
            "variables": {
                "url": [
                    "str",
                    "bytes",
                    "Dict[Tuple[str, str], str]"
                ],
                "version_hash": [
                    "str",
                    "Pattern[str]",
                    "Dict[str, str]",
                    "Type[Callable[..., None]]"
                ]
            }
        },
        "StaticFileHandler.parse_url_path": {
            "name": "parse_url_path",
            "location": 2760,
            "return": [
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "url_path": [
                    "str",
                    "Optional[str]"
                ]
            },
            "variables": {
                "url_path": [
                    "str"
                ]
            }
        },
        "StaticFileHandler.get_version": {
            "name": "get_version",
            "location": 2774,
            "return": [
                "Optional[str]",
                "List[str]",
                "str",
                "Callable[[str], None]"
            ],
            "arguments": {
                "args": [],
                "cls": [
                    "str",
                    "Optional[str]",
                    "dict"
                ],
                "kwargs": [],
                "path": [
                    "str",
                    "bool"
                ],
                "self": [],
                "settings": [
                    "str",
                    "bool"
                ]
            },
            "variables": {
                "abs_path": [
                    "str",
                    "Pattern[str]",
                    "list"
                ]
            }
        },
        "StaticFileHandler._get_cached_version": {
            "name": "_get_cached_version",
            "location": 2791,
            "return": [
                "Optional[int]",
                "bool",
                "str",
                "Optional[List[Any]]",
                "Optional[List[str]]",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "abs_path": [
                    "str",
                    "Union[str, bytes]",
                    "Optional[str]",
                    "Union[str, bytes, IO[bytes]]"
                ],
                "args": [],
                "cls": [
                    "str",
                    "Type[Any]",
                    "Tuple[Type]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "hashes": [
                    "str"
                ],
                "hsh": [
                    "str",
                    "list"
                ]
            }
        },
        "FallbackHandler.initialize": {
            "name": "initialize",
            "location": 2822,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "fallback": [
                    "int",
                    "Callable",
                    "str"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "fallback": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ]
            }
        },
        "FallbackHandler.prepare": {
            "name": "prepare",
            "location": 2825,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_finished": [
                    "str",
                    "bool"
                ]
            }
        },
        "OutputTransform.__init__": {
            "name": "__init__",
            "location": 2837,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "request": [
                    "tornado.httputil.HTTPServerRequest",
                    "list",
                    "Dict[str, Any]"
                ],
                "self": []
            },
            "variables": {}
        },
        "OutputTransform.transform_first_chunk": {
            "name": "transform_first_chunk",
            "location": 2840,
            "return": [
                "int",
                "List[str]",
                "bool",
                "str",
                "dict"
            ],
            "arguments": {
                "args": [],
                "chunk": [
                    "int",
                    "bytes",
                    "tornado.httputil.HTTPHeaders",
                    "str"
                ],
                "finishing": [
                    "bool",
                    "list",
                    "int",
                    "str"
                ],
                "headers": [
                    "int",
                    "bytes",
                    "tornado.httputil.HTTPHeaders",
                    "str"
                ],
                "kwargs": [],
                "self": [],
                "status_code": [
                    "int",
                    "bytes",
                    "tornado.httputil.HTTPHeaders",
                    "str"
                ]
            },
            "variables": {}
        },
        "OutputTransform.transform_chunk": {
            "name": "transform_chunk",
            "location": 2844,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "chunk": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "finishing": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "GZipContentEncoding.__init__": {
            "name": "__init__",
            "location": 2875,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "request": [
                    "Mapping"
                ],
                "self": []
            },
            "variables": {
                "_gzipping": [
                    "str",
                    "list",
                    "functools.partial[Any]",
                    "dict"
                ]
            }
        },
        "GZipContentEncoding._compressible_type": {
            "name": "_compressible_type",
            "location": 2878,
            "return": [
                "bool",
                "\"PerceptionGraphPattern\"",
                "float",
                "Tuple[float, float, float]",
                "busboy.util.Maybe[busboy.model.Stop]"
            ],
            "arguments": {
                "args": [],
                "ctype": [
                    "str",
                    "MutableMapping[str, Any]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "GZipContentEncoding.transform_first_chunk": {
            "name": "transform_first_chunk",
            "location": 2881,
            "return": [
                "int",
                "List[str]",
                "bool",
                "str",
                "dict"
            ],
            "arguments": {
                "args": [],
                "chunk": [
                    "str",
                    "tornado.httputil.HTTPHeaders",
                    "int",
                    "Dict[str, str]",
                    "Optional[str]"
                ],
                "finishing": [
                    "Optional[str]",
                    "Sequence[Tuple[str, int]]",
                    "int",
                    "str"
                ],
                "headers": [
                    "dict",
                    "Optional[str]",
                    "tornado.httputil.HTTPHeaders",
                    "Dict[str, Any]",
                    "graph.types.RowsProxy"
                ],
                "kwargs": [],
                "self": [],
                "status_code": [
                    "int",
                    "bytes",
                    "tornado.httputil.HTTPHeaders",
                    "str"
                ]
            },
            "variables": {
                "_gzip_file": [
                    "str",
                    "Dict[int, str]",
                    "dict",
                    "List[str]",
                    "Tuple[str, str, str, str, str]"
                ],
                "_gzip_value": [
                    "io.StringIO",
                    "TextIO",
                    "List[int]",
                    "Dict[starfish.core.types._constants.Axes, Any]",
                    "Dict[starfish.core.types._constants.Axes, int]",
                    "Tuple[Any, int]"
                ],
                "_gzipping": [
                    "int",
                    "float",
                    "Dict[str, str]"
                ],
                "chunk": [
                    "str",
                    "bytes",
                    "float",
                    "Dict[str, Dict[str, Any]]",
                    "int"
                ],
                "ctype": [
                    "Dict[str, Any]",
                    "dict",
                    "Dict[int, Any]",
                    "KeysView[str]"
                ]
            }
        },
        "GZipContentEncoding.transform_chunk": {
            "name": "transform_chunk",
            "location": 2910,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "chunk": [
                    "Optional[IO[str]]",
                    "str",
                    "bytes"
                ],
                "finishing": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "chunk": [
                    "io.BufferedWriter",
                    "int",
                    "memoryview"
                ]
            }
        },
        "UIModule.__init__": {
            "name": "__init__",
            "location": 2962,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "handler": [
                    "Optional[str]",
                    "str",
                    "int"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "handler": [
                    "int",
                    "memoryview"
                ],
                "locale": [
                    "float",
                    "Type[Callable[..., None]]",
                    "bytearray",
                    "int",
                    "bool",
                    "str",
                    "Tuple[Any, Any]",
                    "list"
                ],
                "request": [
                    "dict",
                    "str"
                ],
                "ui": [
                    "float",
                    "Type[Callable[..., None]]",
                    "bytearray",
                    "int",
                    "bool",
                    "str",
                    "Tuple[Any, Any]",
                    "list"
                ]
            }
        },
        "UIModule.current_user": {
            "name": "current_user",
            "location": 2969,
            "return": [
                "bool",
                "aiogram.types.Message",
                "Optional[int]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "UIModule.render": {
            "name": "render",
            "location": 2972,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "UIModule.embedded_javascript": {
            "name": "embedded_javascript",
            "location": 2976,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "UIModule.javascript_files": {
            "name": "javascript_files",
            "location": 2981,
            "return": [
                "str",
                "List[Dict[str, Any]]",
                "Optional[str]",
                "Optional[bool]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "UIModule.embedded_css": {
            "name": "embedded_css",
            "location": 2989,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "UIModule.css_files": {
            "name": "css_files",
            "location": 2994,
            "return": [
                "str",
                "List[Dict[str, Any]]",
                "Optional[str]",
                "Optional[bool]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "UIModule.html_head": {
            "name": "html_head",
            "location": 3002,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "UIModule.html_body": {
            "name": "html_body",
            "location": 3008,
            "return": [
                "Optional[str]",
                "Optional[int]",
                "bool",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "UIModule.render_string": {
            "name": "render_string",
            "location": 3014,
            "return": [
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "path": [
                    "str",
                    "bool"
                ],
                "self": []
            },
            "variables": {}
        },
        "_linkify.render": {
            "name": "render",
            "location": 3020,
            "return": [
                "str",
                "Tuple[str, str]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "text": [
                    "str"
                ]
            },
            "variables": {}
        },
        "_xsrf_form_html.render": {
            "name": "render",
            "location": 3025,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TemplateModule.__init__": {
            "name": "__init__",
            "location": 3044,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "handler": [
                    "bytes",
                    "str"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_resource_dict": [
                    "Dict[str, Any]",
                    "dict",
                    "Dict[str, List[str]]"
                ],
                "_resource_list": [
                    "MutableMapping[str, Any]",
                    "denite.util.Candidates",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "TemplateModule.set_resources": {
            "name": "set_resources",
            "location": 3051,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TemplateModule.render": {
            "name": "render",
            "location": 3050,
            "return": [
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "path": [
                    "str"
                ],
                "self": []
            },
            "variables": {}
        },
        "TemplateModule._get_resources": {
            "name": "_get_resources",
            "location": 3063,
            "return": [
                "Set[str]",
                "str",
                "Optional[bool]",
                "AbstractSet[Type[object]]"
            ],
            "arguments": {
                "args": [],
                "key": [
                    "str",
                    "List[int]",
                    "List[str]",
                    "list",
                    "int"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TemplateModule.embedded_javascript": {
            "name": "embedded_javascript",
            "location": 3066,
            "return": [
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TemplateModule.javascript_files": {
            "name": "javascript_files",
            "location": 3069,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "result": [
                    "list"
                ]
            }
        },
        "TemplateModule.embedded_css": {
            "name": "embedded_css",
            "location": 3078,
            "return": [
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TemplateModule.css_files": {
            "name": "css_files",
            "location": 3081,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "result": [
                    "list"
                ]
            }
        },
        "TemplateModule.html_head": {
            "name": "html_head",
            "location": 3090,
            "return": [
                "bool",
                "Optional[Any]",
                "str",
                "Callable[..., None]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TemplateModule.html_body": {
            "name": "html_body",
            "location": 3093,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "_UIModuleNamespace.__init__": {
            "name": "__init__",
            "location": 3099,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "handler": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Sequence[str]",
                    "Optional[List]",
                    "Dict[str, Tuple[str, str]]"
                ],
                "kwargs": [],
                "self": [],
                "ui_modules": [
                    "str",
                    "Dict[str, Any]",
                    "bool"
                ]
            },
            "variables": {
                "handler": [
                    "str",
                    "float",
                    "Dict[str, List[str]]"
                ],
                "ui_modules": [
                    "str",
                    "dict",
                    "list"
                ]
            }
        },
        "_UIModuleNamespace.__getitem__": {
            "name": "__getitem__",
            "location": 3103,
            "return": [
                "str",
                "List[str]",
                "dict",
                "Union[str, Dict]"
            ],
            "arguments": {
                "args": [],
                "key": [
                    "str",
                    "KT",
                    "List[Optional[Any]]",
                    "Optional[List[str]]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "_UIModuleNamespace.__getattr__": {
            "name": "__getattr__",
            "location": 3106,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "args": [],
                "key": [
                    "str",
                    "int",
                    "bytes",
                    "Optional[str]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "global": {
            "DEFAULT_SIGNED_VALUE_MIN_VERSION": [
                "int",
                "List[int]",
                "float"
            ],
            "DEFAULT_SIGNED_VALUE_VERSION": [
                "int",
                "Dict[str, str]"
            ],
            "MAX_SUPPORTED_SIGNED_VALUE_VERSION": [
                "int"
            ],
            "MIN_SUPPORTED_SIGNED_VALUE_VERSION": [
                "int"
            ],
            "_HeaderTypes": [
                "str",
                "list"
            ],
            "_signed_value_version_re": [
                "Pattern[str]",
                "Pattern[bytes]"
            ],
            "_time_independent_equals": [
                "list",
                "int",
                "float",
                "List[str]",
                "List[float]",
                "str"
            ],
            "url": [
                "str",
                "Dict[str, str]",
                "dict"
            ]
        }
    },
    "tornado-5.0.2/tornado/websocket.py": {
        "_raise_not_supported_for_websockets": {
            "name": "_raise_not_supported_for_websockets",
            "location": 477,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": []
            },
            "variables": {}
        },
        "websocket_connect": {
            "name": "websocket_connect",
            "location": 1219,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "callback": [
                    "str",
                    "int",
                    "Optional[str]",
                    "Optional[int]",
                    "float"
                ],
                "compression_options": [
                    "str",
                    "Optional[str]"
                ],
                "connect_timeout": [
                    "str",
                    "Optional[str]"
                ],
                "kwargs": [],
                "max_message_size": [
                    "str",
                    "Optional[str]"
                ],
                "on_message_callback": [
                    "str",
                    "Optional[str]"
                ],
                "ping_interval": [
                    "str",
                    "Optional[str]"
                ],
                "ping_timeout": [
                    "str",
                    "Optional[str]"
                ],
                "url": [
                    "int",
                    "bool",
                    "Optional[Union[int, float]]",
                    "str"
                ]
            },
            "variables": {
                "conn": [
                    "Dict[str, Dict[str, Any]]"
                ],
                "headers": [
                    "str",
                    "list",
                    "tuple",
                    "Dict[str, Union[int, str]]"
                ],
                "request": [
                    "str",
                    "Dict[str, str]",
                    "Optional[dict]",
                    "Union[bool, str]",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "WebSocketHandler.__init__": {
            "name": "__init__",
            "location": 140,
            "return": [
                ""
            ],
            "arguments": {
                "application": [
                    "int",
                    "Callable[..., Coroutine]"
                ],
                "args": [],
                "kwargs": [],
                "request": [
                    "int",
                    "Callable[..., Coroutine]"
                ],
                "self": []
            },
            "variables": {
                "_on_close_called": [
                    "int",
                    "str",
                    "Dict[str, str]",
                    "List[str]"
                ],
                "close_code": [
                    "str",
                    "Match",
                    "int"
                ],
                "close_reason": [
                    "bool",
                    "int"
                ],
                "stream": [
                    "Dict[str, Any]",
                    "Dict[str, int]",
                    "bool",
                    "str",
                    "dict",
                    "Tuple[Literal]"
                ],
                "ws_connection": [
                    "str",
                    "slice"
                ]
            }
        },
        "WebSocketHandler.get": {
            "name": "get",
            "location": 149,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "connection": [
                    "str",
                    "Dict[str, str]",
                    "dict",
                    "Set[str]",
                    "int"
                ],
                "headers": [
                    "Dict[str, str]",
                    "str",
                    "Generator[Any, None, None]",
                    "Dict[str, dict]",
                    "Dict[str, Any]"
                ],
                "log_msg": [],
                "open_args": [
                    "int",
                    "str",
                    "list",
                    "dict",
                    "tuple",
                    "List[int]",
                    "Type[DefaultDict[int, Any]]"
                ],
                "open_kwargs": [
                    "int",
                    "\"Point\"",
                    "str",
                    "dict"
                ],
                "origin": [
                    "int",
                    "dict",
                    "Dict[str, Union[list, str]]",
                    "Pattern[str]",
                    "str"
                ],
                "ws_connection": [
                    "int",
                    "float"
                ]
            }
        },
        "WebSocketHandler.ping_interval": {
            "name": "ping_interval",
            "location": 204,
            "return": [
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "WebSocketHandler.ping_timeout": {
            "name": "ping_timeout",
            "location": 212,
            "return": [
                "str",
                "float",
                "Optional[str]",
                "Optional[BaseException]",
                "Optional[int]",
                "type",
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "WebSocketHandler.max_message_size": {
            "name": "max_message_size",
            "location": 220,
            "return": [
                "bool",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "WebSocketHandler.write_message": {
            "name": "write_message",
            "location": 230,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "binary": [
                    "bool",
                    "dict"
                ],
                "kwargs": [],
                "message": [
                    "bool"
                ],
                "self": []
            },
            "variables": {
                "message": [
                    "List[Tuple[int, int, int, int, int, int]]",
                    "Dict[str, Any]",
                    "Counter[str]",
                    "int"
                ]
            }
        },
        "WebSocketHandler.select_subprotocol": {
            "name": "select_subprotocol",
            "location": 258,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "subprotocols": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            },
            "variables": {}
        },
        "WebSocketHandler.get_compression_options": {
            "name": "get_compression_options",
            "location": 271,
            "return": [
                "Optional[int]",
                "Optional[str]",
                "bool",
                "str",
                "dict"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "WebSocketHandler.open": {
            "name": "open",
            "location": 295,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "WebSocketHandler.on_message": {
            "name": "on_message",
            "location": 304,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "message": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "self": []
            },
            "variables": {}
        },
        "WebSocketHandler.ping": {
            "name": "ping",
            "location": 315,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "data": [
                    "bytes",
                    "List[Tuple[Any, Dict]]",
                    "Dict[str, Any]",
                    "dict"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "WebSocketHandler.on_pong": {
            "name": "on_pong",
            "location": 321,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "data": [
                    "int",
                    "bytes",
                    "bool",
                    "dict"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "WebSocketHandler.on_ping": {
            "name": "on_ping",
            "location": 325,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "data": [
                    "int",
                    "bytes",
                    "bool",
                    "dict"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "WebSocketHandler.on_close": {
            "name": "on_close",
            "location": 329,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "WebSocketHandler.close": {
            "name": "close",
            "location": 342,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "code": [
                    "str",
                    "bool"
                ],
                "kwargs": [],
                "reason": [
                    "str",
                    "bool"
                ],
                "self": []
            },
            "variables": {
                "ws_connection": [
                    "int"
                ]
            }
        },
        "WebSocketHandler.check_origin": {
            "name": "check_origin",
            "location": 362,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "origin": [
                    "str"
                ],
                "self": []
            },
            "variables": {
                "host": [
                    "str",
                    "Set[str]",
                    "List[str]",
                    "Dict[int, str]",
                    "Set[Tuple[str, str]]"
                ],
                "origin": [],
                "parsed_origin": [
                    "List[str]"
                ]
            }
        },
        "WebSocketHandler.set_nodelay": {
            "name": "set_nodelay",
            "location": 418,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "value": [
                    "bool",
                    "int",
                    "float",
                    "str",
                    "Optional[str]",
                    "T"
                ]
            },
            "variables": {}
        },
        "WebSocketHandler.on_connection_close": {
            "name": "on_connection_close",
            "location": 434,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_on_close_called": [
                    "int",
                    "str"
                ],
                "ws_connection": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "WebSocketHandler._break_cycles": {
            "name": "_break_cycles",
            "location": 443,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "WebSocketHandler.send_error": {
            "name": "send_error",
            "location": 452,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "WebSocketHandler.get_websocket_protocol": {
            "name": "get_websocket_protocol",
            "location": 462,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "websocket_version": [
                    "str"
                ]
            }
        },
        "WebSocketHandler._attach_stream": {
            "name": "_attach_stream",
            "location": 468,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "stream": [
                    "str",
                    "Tuple[Literal, Literal]",
                    "list",
                    "Dict[str, str]"
                ]
            }
        },
        "WebSocketProtocol.__init__": {
            "name": "__init__",
            "location": 484,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "handler": [
                    "str",
                    "Optional[bool]",
                    "int",
                    "bool",
                    "Dict[str, Any]",
                    "bytes"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "client_terminated": [
                    "str",
                    "Counter"
                ],
                "handler": [
                    "list",
                    "int",
                    "bytes",
                    "property",
                    "List[Tuple[str, int]]"
                ],
                "request": [
                    "dict",
                    "str"
                ],
                "server_terminated": [
                    "List[str]",
                    "str",
                    "Set[str]",
                    "int"
                ],
                "stream": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "WebSocketProtocol._run_callback": {
            "name": "_run_callback",
            "location": 491,
            "return": [
                "str",
                "int",
                "Set[str]",
                "Mapping[str, int]",
                "bool",
                "\"Parameter\""
            ],
            "arguments": {
                "args": [],
                "callback": [
                    "Callable",
                    "Union"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "result": [
                    "dict",
                    "Dict[str, Any]",
                    "list",
                    "List[List[str]]"
                ]
            }
        },
        "WebSocketProtocol.on_connection_close": {
            "name": "on_connection_close",
            "location": 509,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "WebSocketProtocol._abort": {
            "name": "_abort",
            "location": 512,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "client_terminated": [
                    "str",
                    "int"
                ],
                "server_terminated": [
                    "str",
                    "bool"
                ]
            }
        },
        "_PerMessageDeflateCompressor.__init__": {
            "name": "__init__",
            "location": 521,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "compression_options": [
                    "Optional[str]",
                    "Optional[float]",
                    "Optional[List[Any]]",
                    "Optional[List[str]]",
                    "Optional[Union[str, Any]]",
                    "Optional[Dict[str, Any]]"
                ],
                "kwargs": [],
                "max_wbits": [
                    "int",
                    "Optional[float]",
                    "Optional[int]"
                ],
                "persistent": [
                    "bool",
                    "Tuple[str, int]",
                    "int",
                    "Callable[[], None]"
                ],
                "self": []
            },
            "variables": {
                "_compression_level": [
                    "str",
                    "List[int]",
                    "bool"
                ],
                "_compressor": [
                    "str",
                    "Union[Literal, str]"
                ],
                "_max_wbits": [
                    "int"
                ],
                "_mem_level": [
                    "int",
                    "str",
                    "Tuple[int, int, int, int]",
                    "dict",
                    "List[str]",
                    "Tuple[Any, int]"
                ],
                "max_wbits": [
                    "int"
                ]
            }
        },
        "_PerMessageDeflateCompressor._create_compressor": {
            "name": "_create_compressor",
            "location": 545,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "_PerMessageDeflateCompressor.compress": {
            "name": "compress",
            "location": 549,
            "return": [
                "str",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "args": [],
                "data": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "compressor": [
                    "int",
                    "str",
                    "float",
                    "dict"
                ],
                "data": [
                    "str",
                    "Dict[str, Set[str]]",
                    "bytes",
                    "Dict[str, Dict[str, Any]]",
                    "dict"
                ]
            }
        },
        "_PerMessageDeflateDecompressor.__init__": {
            "name": "__init__",
            "location": 558,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "compression_options": [
                    "bool",
                    "Tuple[str, int]",
                    "int",
                    "Callable[[], None]"
                ],
                "kwargs": [],
                "max_wbits": [
                    "int",
                    "Optional[float]",
                    "Optional[int]"
                ],
                "persistent": [
                    "bool",
                    "Tuple[str, int]",
                    "int",
                    "Callable[[], None]"
                ],
                "self": []
            },
            "variables": {
                "_decompressor": [
                    "str",
                    "Union[Literal, str]"
                ],
                "_max_wbits": [
                    "int"
                ],
                "max_wbits": [
                    "int"
                ]
            }
        },
        "_PerMessageDeflateDecompressor._create_decompressor": {
            "name": "_create_decompressor",
            "location": 570,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "_PerMessageDeflateDecompressor.decompress": {
            "name": "decompress",
            "location": 573,
            "return": [
                "Sequence[str]",
                "int",
                "float",
                "Iterable[str]"
            ],
            "arguments": {
                "args": [],
                "data": [
                    "dict",
                    "str",
                    "bytes"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "decompressor": [
                    "str",
                    "int",
                    "bool",
                    "List[List[Any]]"
                ]
            }
        },
        "WebSocketProtocol13.__init__": {
            "name": "__init__",
            "location": 592,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "compression_options": [],
                "handler": [
                    "str",
                    "bool"
                ],
                "kwargs": [],
                "mask_outgoing": [
                    "int",
                    "float",
                    "Callable",
                    "bool",
                    "Union[float, Tuple[float, float]]"
                ],
                "self": []
            },
            "variables": {
                "_compression_options": [
                    "Dict[str, Dict[str, Any]]",
                    "Dict[str, dict]",
                    "Dict[str, Any]",
                    "Dict[str, Dict[str, str]]"
                ],
                "_compressor": [
                    "\"Frame\"",
                    "str",
                    "Dict[str, Any]"
                ],
                "_decompressor": [
                    "\"Frame\"",
                    "str",
                    "Dict[str, Any]"
                ],
                "_final_frame": [
                    "List[str]",
                    "str",
                    "Set[str]",
                    "int"
                ],
                "_fragmented_message_buffer": [
                    "int",
                    "float"
                ],
                "_fragmented_message_opcode": [
                    "str"
                ],
                "_frame_compressed": [
                    "bool",
                    "int"
                ],
                "_frame_length": [
                    "bool",
                    "int"
                ],
                "_frame_mask": [
                    "bool",
                    "int"
                ],
                "_frame_opcode": [
                    "bool",
                    "int"
                ],
                "_masked_frame": [
                    "bool",
                    "int"
                ],
                "_message_bytes_in": [
                    "int",
                    "str"
                ],
                "_message_bytes_out": [
                    "str",
                    "int"
                ],
                "_waiting": [
                    "List[str]",
                    "dict",
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "Callable"
                ],
                "_wire_bytes_in": [
                    "int",
                    "str"
                ],
                "_wire_bytes_out": [
                    "str",
                    "int"
                ],
                "last_ping": [
                    "int",
                    "deque",
                    "Type[int]",
                    "str"
                ],
                "last_pong": [
                    "int",
                    "deque",
                    "Type[int]",
                    "str"
                ],
                "mask_outgoing": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ],
                "ping_callback": [
                    "bool",
                    "int"
                ]
            }
        },
        "WebSocketProtocol13.accept_connection": {
            "name": "accept_connection",
            "location": 621,
            "return": [
                "Iterator"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "log_msg": [
                    "starfish.core.util.logging.Log",
                    "TextIO"
                ]
            }
        },
        "WebSocketProtocol13._handle_websocket_headers": {
            "name": "_handle_websocket_headers",
            "location": 639,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "fields": [
                    "Dict[Any, Tuple[Any, Any, Any]]",
                    "list",
                    "dict",
                    "Tuple[str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str]",
                    "List[str]",
                    "Dict[str, str]"
                ]
            }
        },
        "WebSocketProtocol13.compute_accept_value": {
            "name": "compute_accept_value",
            "location": 650,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "args": [],
                "key": [
                    "str",
                    "bytes",
                    "Optional[Callable]",
                    "Dict[str, Any]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "sha1": [
                    "hashlib._Hash",
                    "Set[Tuple[Any, Any]]",
                    "dict"
                ]
            }
        },
        "WebSocketProtocol13._challenge_response": {
            "name": "_challenge_response",
            "location": 659,
            "return": [
                "Tuple[str, str, int]",
                "Hashable",
                "Callable[[None, None], bool]",
                "OrderedDict",
                "List[str]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "WebSocketProtocol13._accept_connection": {
            "name": "_accept_connection",
            "location": 663,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "extensions": [
                    "str"
                ],
                "selected": [
                    "int",
                    "str",
                    "bytes",
                    "Dict[str, Any]"
                ],
                "stream": [
                    "str",
                    "Dict[str, str]",
                    "List[str]",
                    "int",
                    "dict",
                    "set"
                ],
                "subprotocols": [
                    "Pattern[str]",
                    "Optional[Literal]",
                    "Dict[str, Union[Any, Any]]",
                    "Dict[str, int]",
                    "List[str]",
                    "list",
                    "frozenset[str]",
                    "str",
                    "Dict[int, Type[Any]]"
                ]
            }
        },
        "WebSocketProtocol13._parse_extensions_header": {
            "name": "_parse_extensions_header",
            "location": 704,
            "return": [
                "bool",
                "Dict[str, str]",
                "int",
                "List[str]",
                "str"
            ],
            "arguments": {
                "args": [],
                "headers": [
                    "Mapping",
                    "str"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "extensions": [
                    "str",
                    "float",
                    "dict"
                ]
            }
        },
        "WebSocketProtocol13._process_server_headers": {
            "name": "_process_server_headers",
            "location": 711,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "headers": [
                    "str",
                    "Optional[Dict]",
                    "Dict[str, str]"
                ],
                "key": [
                    "bool",
                    "T",
                    "str",
                    "List[Dict[str, Any]]",
                    "List[str]",
                    "Union[str, bytes]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "accept": [
                    "str",
                    "int"
                ],
                "extensions": [
                    "int",
                    "str"
                ]
            }
        },
        "WebSocketProtocol13._get_compressor_options": {
            "name": "_get_compressor_options",
            "location": 729,
            "return": [
                "str",
                "int",
                "Hashable",
                "Optional[str]"
            ],
            "arguments": {
                "agreed_parameters": [
                    "dict",
                    "bool",
                    "str"
                ],
                "args": [],
                "compression_options": [
                    "bool",
                    "Optional[bool]"
                ],
                "kwargs": [],
                "self": [],
                "side": [
                    "dict",
                    "bool",
                    "str"
                ]
            },
            "variables": {
                "options": [
                    "Dict[str, str]",
                    "Dict[str, Union[Any, Any, Any, Any]]",
                    "Dict[str, Union[float, str]]",
                    "dict",
                    "Dict[str, Any]",
                    "float",
                    "str"
                ],
                "wbits_header": [
                    "Dict[str, str]",
                    "Pattern[str]",
                    "Optional[Callable[..., Any]]",
                    "str",
                    "Dict[bytes, float]",
                    "Type[Dict[str, Any]]"
                ]
            }
        },
        "WebSocketProtocol13._create_compressors": {
            "name": "_create_compressors",
            "location": 743,
            "return": [
                ""
            ],
            "arguments": {
                "agreed_parameters": [
                    "int",
                    "Optional[str]",
                    "str"
                ],
                "args": [],
                "compression_options": [
                    "int",
                    "Optional[str]",
                    "str"
                ],
                "kwargs": [],
                "self": [],
                "side": [
                    "int",
                    "str",
                    "Dict[str, Any]"
                ]
            },
            "variables": {
                "_compressor": [
                    "bytes",
                    "Dict[str, List]"
                ],
                "_decompressor": [
                    "bytes",
                    "Dict[str, List]"
                ],
                "allowed_keys": [
                    "Set[str]",
                    "str",
                    "List[Tuple[Any, Any]]",
                    "Dict[str, str]",
                    "int"
                ],
                "other_side": [
                    "int",
                    "float",
                    "Optional[Any]",
                    "List[str]",
                    "dict",
                    "Sequence['cirq.Qid']"
                ]
            }
        },
        "WebSocketProtocol13._write_frame": {
            "name": "_write_frame",
            "location": 758,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "data": [
                    "int",
                    "dict",
                    "bytearray"
                ],
                "fin": [
                    "bool",
                    "Optional[Dict[str, Any]]"
                ],
                "flags": [
                    "int",
                    "list",
                    "bytes"
                ],
                "kwargs": [],
                "opcode": [
                    "int",
                    "list",
                    "bytes"
                ],
                "self": []
            },
            "variables": {
                "data": [
                    "bytes",
                    "int",
                    "List[int]",
                    "dict"
                ],
                "data_len": [
                    "int",
                    "str",
                    "dict",
                    "bytes",
                    "Dict[int, Any]"
                ],
                "finbit": [
                    "int",
                    "Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]",
                    "bool",
                    "Type[str]"
                ],
                "frame": [
                    "int",
                    "dict",
                    "List[int]",
                    "List[List[int]]",
                    "str"
                ],
                "mask": [
                    "str",
                    "float",
                    "Dict[str, str]",
                    "Type[str]"
                ],
                "mask_bit": [
                    "int",
                    "dict",
                    "List[int]",
                    "List[List[int]]",
                    "str"
                ]
            }
        },
        "WebSocketProtocol13.wrapper": {
            "name": "wrapper",
            "location": 806,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "WebSocketProtocol13.write_message": {
            "name": "write_message",
            "location": 782,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "binary": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "kwargs": [],
                "message": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "self": []
            },
            "variables": {
                "flags": [
                    "int",
                    "str",
                    "Optional[str]",
                    "Optional[bool]",
                    "list"
                ],
                "fut": [
                    "str",
                    "List[str]",
                    "int",
                    "Dict[str, List[Any]]",
                    "Tuple[str, str, str, str, str, str, str, str]"
                ],
                "message": [
                    "str",
                    "List[str]",
                    "int",
                    "Dict[str, List[Any]]",
                    "Tuple[str, str, str, str, str, str, str, str]"
                ],
                "opcode": [
                    "str",
                    "List[str]",
                    "int",
                    "Dict[str, List[Any]]",
                    "Tuple[str, str, str, str, str, str, str, str]"
                ]
            }
        },
        "WebSocketProtocol13.write_ping": {
            "name": "write_ping",
            "location": 813,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "data": [
                    "bytes",
                    "Union[bytes, str]",
                    "List[int]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "WebSocketProtocol13._receive_frame": {
            "name": "_receive_frame",
            "location": 818,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "WebSocketProtocol13._on_frame_start": {
            "name": "_on_frame_start",
            "location": 824,
            "return": [],
            "arguments": {
                "args": [],
                "data": [
                    "str",
                    "bytes",
                    "float"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_final_frame": [
                    "Dict[str, str]",
                    "Dict[str, Union[Any, Any]]",
                    "dict",
                    "str",
                    "Dict[str, Type[Any]]"
                ],
                "_frame_compressed": [
                    "bool",
                    "int",
                    "list",
                    "List[bool]"
                ],
                "_frame_length": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ],
                "_frame_opcode": [
                    "str",
                    "int"
                ],
                "_frame_opcode_is_control": [
                    "int",
                    "Dict[str, Optional[str]]",
                    "str",
                    "List[str]"
                ],
                "_masked_frame": [
                    "int",
                    "Tuple[int]",
                    "bool",
                    "List[int]",
                    "Type[float]",
                    "Type[List[Any]]",
                    "list"
                ],
                "header": [
                    "str",
                    "Dict[str, str]",
                    "dict"
                ],
                "payloadlen": [
                    "str"
                ],
                "reserved_bits": [
                    "str"
                ]
            }
        },
        "WebSocketProtocol13._read_frame_data": {
            "name": "_read_frame_data",
            "location": 858,
            "return": [
                "Union[tuple, list]",
                "Iterable[Hashable]",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "masked": [
                    "Callable",
                    "int",
                    "memoryview",
                    "bytes"
                ],
                "self": []
            },
            "variables": {
                "new_len": [
                    "int",
                    "Dict[int, int]",
                    "float"
                ]
            }
        },
        "WebSocketProtocol13._on_frame_length_16": {
            "name": "_on_frame_length_16",
            "location": 869,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "data": [
                    "str",
                    "bytes",
                    "dict",
                    "List[int]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_frame_length": [
                    "int",
                    "str",
                    "dict"
                ]
            }
        },
        "WebSocketProtocol13._on_frame_length_64": {
            "name": "_on_frame_length_64",
            "location": 880,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "data": [
                    "str",
                    "bytes",
                    "dict",
                    "List[int]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_frame_length": [
                    "int",
                    "str",
                    "dict"
                ]
            }
        },
        "WebSocketProtocol13._on_masking_key": {
            "name": "_on_masking_key",
            "location": 891,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "data": [
                    "str",
                    "List['PlotInfo']"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_frame_mask": [
                    "int",
                    "List[str]",
                    "str",
                    "Set[str]"
                ]
            }
        },
        "WebSocketProtocol13._on_masked_frame_data": {
            "name": "_on_masked_frame_data",
            "location": 899,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "data": [
                    "dict",
                    "bytes",
                    "Optional[List[Any]]",
                    "str"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "WebSocketProtocol13._on_frame_data": {
            "name": "_on_frame_data",
            "location": 903,
            "return": [
                "Iterator[Dict[str, str]]"
            ],
            "arguments": {
                "args": [],
                "data": [
                    "bytes",
                    "bool",
                    "int"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_fragmented_message_buffer": [
                    "int",
                    "Pattern[str]",
                    "Tuple[Any, Any, Any, Any]",
                    "Tuple[Any, int]"
                ],
                "_fragmented_message_opcode": [
                    "int",
                    "str",
                    "List[str]"
                ],
                "data": [
                    "bytes",
                    "dict",
                    "int",
                    "str",
                    "List[int]",
                    "Type[DefaultDict[int, Any]]"
                ],
                "handled_future": [
                    "Generator[Any, None, None]",
                    "Dict[str, str]"
                ],
                "opcode": [
                    "str",
                    "int"
                ]
            }
        },
        "WebSocketProtocol13._handle_message": {
            "name": "_handle_message",
            "location": 948,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "args": [],
                "data": [
                    "list",
                    "bool",
                    "Union[bytes, bytearray, memoryview]",
                    "bytes"
                ],
                "kwargs": [],
                "opcode": [
                    "bool",
                    "str"
                ],
                "self": []
            },
            "variables": {
                "client_terminated": [
                    "str",
                    "int",
                    "bool",
                    "set"
                ],
                "data": [
                    "str"
                ],
                "decoded": [
                    "str",
                    "int",
                    "list",
                    "List[str]"
                ],
                "last_pong": [
                    "int",
                    "deque",
                    "Type[int]",
                    "str"
                ]
            }
        },
        "WebSocketProtocol13.close": {
            "name": "close",
            "location": 992,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "code": [
                    "str",
                    "Optional[str]"
                ],
                "kwargs": [],
                "reason": [
                    "str",
                    "bool",
                    "Type",
                    "int"
                ],
                "self": []
            },
            "variables": {
                "_waiting": [
                    "str",
                    "int"
                ],
                "close_data": [
                    "str",
                    "bytes"
                ],
                "code": [
                    "int",
                    "str",
                    "Optional[str]",
                    "List[None]",
                    "dict"
                ],
                "server_terminated": [
                    "str",
                    "int"
                ]
            }
        },
        "WebSocketProtocol13.ping_interval": {
            "name": "ping_interval",
            "location": 1021,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "interval": [
                    "int",
                    "str"
                ]
            }
        },
        "WebSocketProtocol13.ping_timeout": {
            "name": "ping_timeout",
            "location": 1028,
            "return": [
                "int",
                "str",
                "type",
                "List[dict]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "timeout": [
                    "int"
                ]
            }
        },
        "WebSocketProtocol13.start_pinging": {
            "name": "start_pinging",
            "location": 1034,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "last_ping": [
                    "int",
                    "str",
                    "List[str]"
                ],
                "last_pong": [
                    "int",
                    "str",
                    "List[str]"
                ],
                "ping_callback": [
                    "str",
                    "dict",
                    "Dict[str, List[str]]",
                    "int"
                ]
            }
        },
        "WebSocketProtocol13.periodic_ping": {
            "name": "periodic_ping",
            "location": 1042,
            "return": [
                "Iterator"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "last_ping": [
                    "int",
                    "Dict[str, float]",
                    "str"
                ],
                "now": [
                    "int",
                    "str"
                ],
                "since_last_ping": [
                    "int",
                    "str",
                    "Dict[str, str]",
                    "Dict[int, int]"
                ],
                "since_last_pong": [
                    "int",
                    "str",
                    "Dict[str, str]",
                    "Dict[int, int]"
                ]
            }
        },
        "WebSocketClientConnection.__init__": {
            "name": "__init__",
            "location": 1072,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "compression_options": [
                    "bool",
                    "Optional[float]",
                    "Optional[bool]",
                    "Callable"
                ],
                "kwargs": [],
                "max_message_size": [
                    "int",
                    "Union[Tuple[int, int], int]",
                    "Tuple[int, int]"
                ],
                "on_message_callback": [
                    "bool",
                    "Sequence[Sequence[float]]",
                    "str",
                    "Optional[Dict[str, Any]]",
                    "list"
                ],
                "ping_interval": [
                    "bool",
                    "Sequence[Sequence[float]]",
                    "str",
                    "Optional[Dict[str, Any]]",
                    "list"
                ],
                "ping_timeout": [
                    "float",
                    "Callable"
                ],
                "request": [
                    "int"
                ],
                "self": []
            },
            "variables": {
                "_on_message_callback": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ],
                "close_code": [
                    "str"
                ],
                "close_reason": [
                    "dict",
                    "str",
                    "Dict[str, str]",
                    "List[str]",
                    "Set[str]",
                    "Dict[str, Type[Any]]"
                ],
                "compression_options": [
                    "dict",
                    "Dict[str, str]"
                ],
                "connect_future": [
                    "Callable[[], None]",
                    "TextIO",
                    "Iterable[Any]"
                ],
                "key": [
                    "str",
                    "bytes",
                    "int"
                ],
                "max_message_size": [
                    "int"
                ],
                "ping_interval": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ],
                "ping_timeout": [
                    "int",
                    "float"
                ],
                "protocol": [
                    "\"Frame\"",
                    "str",
                    "Dict[str, Any]"
                ],
                "read_future": [
                    "str"
                ],
                "read_queue": [
                    "str",
                    "dict",
                    "Dict[str, str]",
                    "List[str]"
                ],
                "rest": [
                    "str",
                    "Dict[str, str]",
                    "Dict[str, Union[Any, int, str]]",
                    "urllib.requesRequest"
                ],
                "scheme": [
                    "str",
                    "Dict[str, Dict[str, Any]]",
                    "Dict[str, Union[Any, int, str]]",
                    "urllib.requesRequest",
                    "dict"
                ],
                "sep": [
                    "str",
                    "Dict[str, str]",
                    "Dict[str, Union[Any, int, str]]",
                    "urllib.requesRequest"
                ],
                "tcp_client": [],
                "url": [
                    "Optional[str]",
                    "str",
                    "bool"
                ]
            }
        },
        "WebSocketClientConnection.close": {
            "name": "close",
            "location": 1110,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "code": [
                    "str",
                    "bytes",
                    "int",
                    "TextIO",
                    "Dict[str, str]"
                ],
                "kwargs": [],
                "reason": [
                    "str",
                    "bytes",
                    "int",
                    "TextIO",
                    "Dict[str, str]"
                ],
                "self": []
            },
            "variables": {
                "protocol": [
                    "Dict[str, Type[Any]]",
                    "list",
                    "List[str]",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "WebSocketClientConnection.on_connection_close": {
            "name": "on_connection_close",
            "location": 1126,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "WebSocketClientConnection._on_http_response": {
            "name": "_on_http_response",
            "location": 1133,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "response": [
                    "str",
                    "Dict[str, str]",
                    "\"Task\"",
                    "list",
                    "List[str]"
                ],
                "self": []
            },
            "variables": {}
        },
        "WebSocketClientConnection.headers_received": {
            "name": "headers_received",
            "location": 1141,
            "return": [
                "str"
            ],
            "arguments": {
                "args": [],
                "headers": [
                    "FrozenSet[bytes]",
                    "int",
                    "str"
                ],
                "kwargs": [],
                "self": [],
                "start_line": [
                    "int",
                    "float",
                    "List[int]"
                ]
            },
            "variables": {
                "_timeout": [
                    "int",
                    "Optional[int]",
                    "Optional[float]"
                ],
                "final_callback": [
                    "bool",
                    "int"
                ],
                "headers": [
                    "list",
                    "bytes",
                    "List[str]",
                    "List[float]"
                ],
                "protocol": [
                    "str"
                ],
                "stream": [
                    "str",
                    "int",
                    "Dict[str, Union[None, Any, Any]]"
                ]
            }
        },
        "WebSocketClientConnection.write_message": {
            "name": "write_message",
            "location": 1166,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "binary": [
                    "bytes",
                    "Callable[[bytes], bytes]",
                    "dict",
                    "str"
                ],
                "kwargs": [],
                "message": [
                    "bytes",
                    "Callable[[bytes], bytes]",
                    "dict",
                    "str"
                ],
                "self": []
            },
            "variables": {}
        },
        "WebSocketClientConnection.read_message": {
            "name": "read_message",
            "location": 1178,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "callback": [
                    "Optional[\"Outcome\"]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "future": [
                    "str"
                ],
                "read_future": [
                    "int",
                    "Type[str]",
                    "Optional[int]",
                    "str"
                ]
            }
        },
        "WebSocketClientConnection.on_message": {
            "name": "on_message",
            "location": 1199,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "message": [
                    "bool",
                    "bytes"
                ],
                "self": []
            },
            "variables": {
                "read_future": [
                    "int",
                    "str"
                ]
            }
        },
        "WebSocketClientConnection.on_pong": {
            "name": "on_pong",
            "location": 1208,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "data": [
                    "int",
                    "bytes",
                    "bool",
                    "dict"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "WebSocketClientConnection.on_ping": {
            "name": "on_ping",
            "location": 1211,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "data": [
                    "int",
                    "bytes",
                    "bool",
                    "dict"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "WebSocketClientConnection.get_websocket_protocol": {
            "name": "get_websocket_protocol",
            "location": 1214,
            "return": [
                "float",
                "Dict[str, int]",
                "int",
                "bytearray"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "global": {
            "xrange": [
                "str",
                "List[str]",
                "int",
                "Dict[str, List[Any]]",
                "Tuple[str, str, str, str, str, str, str, str]"
            ]
        }
    },
    "tornado-5.0.2/tornado/wsgi.py": {
        "to_wsgi_str": {
            "name": "to_wsgi_str",
            "location": 64,
            "return": [
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "s": [
                    "str",
                    "int"
                ]
            },
            "variables": {}
        },
        "from_wsgi_str": {
            "name": "from_wsgi_str",
            "location": 68,
            "return": [
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "s": [
                    "str",
                    "int",
                    "float"
                ]
            },
            "variables": {}
        },
        "WSGIApplication.__call__": {
            "name": "__call__",
            "location": 80,
            "return": [
                "Container[T]",
                "dict"
            ],
            "arguments": {
                "args": [],
                "environ": [
                    "Callable",
                    "dict",
                    "bytes",
                    "Dict[str, Any]"
                ],
                "kwargs": [],
                "self": [],
                "start_response": [
                    "Callable",
                    "dict",
                    "bytes",
                    "Dict[str, Any]"
                ]
            },
            "variables": {}
        },
        "_WSGIConnection.__init__": {
            "name": "__init__",
            "location": 91,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "context": [
                    "str",
                    "Callable",
                    "bool"
                ],
                "kwargs": [],
                "method": [
                    "str",
                    "Callable",
                    "bool"
                ],
                "self": [],
                "start_response": [
                    "Optional[\"libkol.Item\"]",
                    "Callable",
                    "Iterable[Hashable]",
                    "Hashable"
                ]
            },
            "variables": {
                "_error": [
                    "int",
                    "str",
                    "bool"
                ],
                "_expected_content_remaining": [
                    "dict",
                    "static_frame.core.util.PathSpecifier",
                    "bool",
                    "Union[str, Dict[str, Any]]",
                    "Dict[str, Any]"
                ],
                "_finished": [
                    "int",
                    "float"
                ],
                "_write_buffer": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ],
                "context": [
                    "int",
                    "bytes"
                ],
                "method": [
                    "str",
                    "List[str]"
                ],
                "start_response": [
                    "list",
                    "int",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "_WSGIConnection.set_close_callback": {
            "name": "set_close_callback",
            "location": 100,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "callback": [
                    "int",
                    "str",
                    "bool"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "_WSGIConnection.write_headers": {
            "name": "write_headers",
            "location": 105,
            "return": [
                "str",
                "dict",
                "Callable",
                "Callable[[None, None], bool]"
            ],
            "arguments": {
                "args": [],
                "callback": [
                    "str"
                ],
                "chunk": [
                    "str",
                    "Optional[str]",
                    "Tuple[int, int]",
                    "Optional[Any]"
                ],
                "headers": [
                    "str",
                    "Callable",
                    "Set[str]",
                    "Optional[dict]"
                ],
                "kwargs": [],
                "self": [],
                "start_line": [
                    "Optional[int]",
                    "Callable",
                    "int"
                ]
            },
            "variables": {
                "_expected_content_remaining": [
                    "Pattern[str]",
                    "Tuple[Literal, Literal, List[str]]",
                    "int",
                    "Final"
                ]
            }
        },
        "_WSGIConnection.write": {
            "name": "write",
            "location": 121,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "callback": [
                    "io.TextIO",
                    "Optional[int]",
                    "Optional[List[Callable]]",
                    "str"
                ],
                "chunk": [
                    "str",
                    "int",
                    "bytes",
                    "List[str]",
                    "Dict[str, str]",
                    "Union[List[str], List[int]]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_error": [
                    "str"
                ]
            }
        },
        "_WSGIConnection.finish": {
            "name": "finish",
            "location": 133,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_error": [
                    "str",
                    "int"
                ],
                "_finished": [
                    "str",
                    "bool"
                ]
            }
        },
        "_WSGIRequestContext.__init__": {
            "name": "__init__",
            "location": 144,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "protocol": [
                    "int",
                    "bool",
                    "float"
                ],
                "remote_ip": [
                    "int",
                    "bool",
                    "float"
                ],
                "self": []
            },
            "variables": {
                "protocol": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ],
                "remote_ip": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ]
            }
        },
        "_WSGIRequestContext.__str__": {
            "name": "__str__",
            "location": 148,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "WSGIAdapter.__init__": {
            "name": "__init__",
            "location": 184,
            "return": [
                ""
            ],
            "arguments": {
                "application": [
                    "Awaitable",
                    "str"
                ],
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "application": []
            }
        },
        "WSGIAdapter.__call__": {
            "name": "__call__",
            "location": 191,
            "return": [
                "Callable",
                "Union[concurrenfutures.Future, asyncio.futures.Future]",
                "int",
                "float"
            ],
            "arguments": {
                "args": [],
                "environ": [
                    "Dict[str, Any]",
                    "dict",
                    "Callable"
                ],
                "kwargs": [],
                "self": [],
                "start_response": [
                    "dict"
                ]
            },
            "variables": {
                "body": [
                    "Dict[str, Any]",
                    "str",
                    "Dict[str, Union[str, Any]]",
                    "bytes",
                    "Dict[str, str]"
                ],
                "connection": [
                    "Dict[str, Any]",
                    "str",
                    "List[str]",
                    "int"
                ],
                "headers": [
                    "str",
                    "Dict[str, str]",
                    "dict",
                    "Dict[str, Any]"
                ],
                "host": [
                    "str",
                    "urllib.requesRequest"
                ],
                "method": [
                    "Dict[str, None]",
                    "Dict[Any, str]",
                    "Mapping[str, str]",
                    "Dict[str, Union[Any, Any, Any]]",
                    "str",
                    "bytes"
                ],
                "protocol": [
                    "str",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "List[Dict[str, str]]",
                    "int"
                ],
                "remote_ip": [
                    "Dict[str, str]",
                    "str"
                ],
                "request": [
                    "urllib.requesRequest"
                ],
                "uri": [
                    "dict",
                    "Tuple[Type[str], Type[bytes]]",
                    "Dict[str, str]",
                    "str"
                ]
            }
        },
        "WSGIContainer.__init__": {
            "name": "__init__",
            "location": 264,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "wsgi_application": [
                    "int",
                    "bool",
                    "float"
                ]
            },
            "variables": {
                "wsgi_application": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ]
            }
        },
        "WSGIContainer.start_response": {
            "name": "start_response",
            "location": 271,
            "return": [
                "List[Tuple[str, str, int]]",
                "int",
                "Dict[str, str]",
                "str",
                "bool",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "args": [],
                "exc_info": [
                    "bool",
                    "List[Dict[str, Any]]",
                    "int",
                    "str",
                    "Optional[str]"
                ],
                "kwargs": [],
                "response_headers": [
                    "int",
                    "str",
                    "bool"
                ],
                "self": [],
                "status": [
                    "str",
                    "int",
                    "Optional[str]"
                ]
            },
            "variables": {}
        },
        "WSGIContainer.__call__": {
            "name": "__call__",
            "location": 267,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "request": [
                    "aiohttp.web.Request"
                ],
                "self": []
            },
            "variables": {
                "app_response": [
                    "Dict[str, str]",
                    "str",
                    "Dict[str, Any]"
                ],
                "body": [
                    "Dict[str, Any]",
                    "Set[str]",
                    "Tuple[str]",
                    "str",
                    "bytes"
                ],
                "data": [
                    "dict",
                    "Type[Dict[str, Any]]",
                    "Dict[str, Any]",
                    "str",
                    "Tuple[str, str, str]",
                    "Dict[str, Dict[str, Any]]",
                    "Dict[Any, str]"
                ],
                "header_obj": [
                    "dict",
                    "list"
                ],
                "header_set": [
                    "list",
                    "Tuple[Literal]",
                    "Dict[str, List[Any]]",
                    "List[str]",
                    "Dict[str, Any]",
                    "set",
                    "List[Type[Any]]"
                ],
                "headers": [
                    "str",
                    "List[Dict[str, Any]]",
                    "Dict[str, Union[Any, Any]]",
                    "Dict[str, int]",
                    "Dict[str, Any]"
                ],
                "reason": [
                    "Dict[str, str]",
                    "str",
                    "List[str]",
                    "Dict[str, Any]",
                    "DefaultDict[Any, List]"
                ],
                "response": [
                    "List[bytes]",
                    "list",
                    "Dict[str, str]"
                ],
                "start_line": [
                    "int",
                    "Pattern[Any]"
                ],
                "status_code": [
                    "int",
                    "Dict[int, str]"
                ]
            }
        },
        "WSGIContainer.environ": {
            "name": "environ",
            "location": 308,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "request": [
                    "tornado.httputil.HTTPServerRequest",
                    "aiohttp.web.Request",
                    "Exception"
                ],
                "self": []
            },
            "variables": {
                "environ": [
                    "str",
                    "List[str]",
                    "Dict[str, Any]"
                ],
                "host": [
                    "urllib.requesRequest",
                    "str",
                    "Optional[Dict[str, Any]]"
                ],
                "hostport": [
                    "int",
                    "str",
                    "dict",
                    "DefaultDict[Any, int]"
                ],
                "port": [
                    "str",
                    "int",
                    "List[Tuple[str, Any]]",
                    "float",
                    "Pattern[str]"
                ]
            }
        },
        "WSGIContainer._log": {
            "name": "_log",
            "location": 344,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "request": [
                    "int",
                    "tornado.httputil.HTTPServerRequest",
                    "bytes"
                ],
                "self": [],
                "status_code": [
                    "int",
                    "MutableMapping",
                    "List[Dict[str, Any]]",
                    "str"
                ]
            },
            "variables": {
                "log_method": [
                    "str",
                    "bytes"
                ],
                "request_time": [
                    "Dict[str, Union[Any, Any, Any, Any, Any, Any, Any]]",
                    "Tuple[Literal, Literal, Literal]",
                    "List[Tuple[Any, Any]]",
                    "urllib.requesProxyHandler",
                    "Dict[str, List[Any]]",
                    "List[str]",
                    "float",
                    "int"
                ],
                "summary": [
                    "Dict[str, Union[int, str]]",
                    "str",
                    "Dict[str, Any]",
                    "urllib.requesOpenerDirector",
                    "Dict[str, Union[Any, Any]]"
                ]
            }
        },
        "global": {
            "HTTPRequest": [
                "str",
                "int",
                "Type[Dict[str, Any]]",
                "bool"
            ],
            "_dummy_future": [
                "List[str]",
                "dict",
                "List[int]",
                "Pattern[str]"
            ]
        }
    },
    "tornado-5.0.2/tornado/__init__.py": {
        "global": {
            "version": [
                "str",
                "int"
            ],
            "version_info": [
                "Tuple[Union[int, str]]",
                "Tuple[int]",
                "Tuple[Any, Any, Any, Any]"
            ]
        }
    },
    "tornado-5.0.2/tornado/platform/asyncio.py": {
        "to_tornado_future": {
            "name": "to_tornado_future",
            "location": 240,
            "return": [
                "float",
                "dict",
                "str",
                "int"
            ],
            "arguments": {
                "args": [],
                "asyncio_future": [
                    "dict",
                    "IO",
                    "List[str]",
                    "int",
                    "Iterator[Dict[str, str]]"
                ],
                "kwargs": []
            },
            "variables": {}
        },
        "to_asyncio_future": {
            "name": "to_asyncio_future",
            "location": 252,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "tornado_future": [
                    "float",
                    "dict",
                    "str",
                    "int"
                ]
            },
            "variables": {}
        },
        "BaseAsyncIOLoop.initialize": {
            "name": "initialize",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "asyncio_loop": [
                    "int",
                    "Callable",
                    "str"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "asyncio_loop": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ],
                "closing": [
                    "int",
                    "float"
                ],
                "handlers": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ],
                "readers": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ],
                "writers": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ]
            }
        },
        "BaseAsyncIOLoop.close": {
            "name": "close",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "all_fds": [
                    "bool"
                ],
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "closing": [
                    "str",
                    "bool"
                ],
                "fileobj": [
                    "bytes",
                    "str",
                    "int"
                ],
                "handler_func": [
                    "Pattern[str]",
                    "Final"
                ]
            }
        },
        "BaseAsyncIOLoop.add_handler": {
            "name": "add_handler",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "events": [
                    "int",
                    "str",
                    "bytes"
                ],
                "fd": [
                    "int",
                    "Tuple[float]",
                    "str"
                ],
                "handler": [
                    "str",
                    "bool",
                    "bytes"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "fd": [
                    "str",
                    "List[int]"
                ],
                "fileobj": [
                    "dict",
                    "str"
                ]
            }
        },
        "BaseAsyncIOLoop.update_handler": {
            "name": "update_handler",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "events": [
                    "int",
                    "dict",
                    "List[List[int]]"
                ],
                "fd": [
                    "asyncio.AbstractEventLoop",
                    "List[dict]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "fd": [
                    "str"
                ],
                "fileobj": [
                    "int",
                    "str",
                    "Type[str]",
                    "Dict[str, Union[None, Any, Any]]",
                    "bool"
                ]
            }
        },
        "BaseAsyncIOLoop.remove_handler": {
            "name": "remove_handler",
            "location": 103,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "args": [],
                "fd": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "fd": [
                    "str",
                    "List[str]",
                    "Dict[str, str]",
                    "int"
                ],
                "fileobj": [
                    "int",
                    "str",
                    "Type[str]",
                    "Dict[str, Union[None, Any, Any]]",
                    "bool"
                ]
            }
        },
        "BaseAsyncIOLoop._handle_events": {
            "name": "_handle_events",
            "location": 115,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "events": [
                    "int",
                    "dict",
                    "Mapping"
                ],
                "fd": [
                    "Callable",
                    "str"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "fileobj": [
                    "Dict[str, str]",
                    "str",
                    "Dict[Any, str]",
                    "int",
                    "Pattern[str]",
                    "List[str]"
                ],
                "handler_func": [
                    "Pattern[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "BaseAsyncIOLoop.start": {
            "name": "start",
            "location": 119,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "old_loop": [
                    "int"
                ]
            }
        },
        "BaseAsyncIOLoop.stop": {
            "name": "stop",
            "location": 131,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "BaseAsyncIOLoop.call_at": {
            "name": "call_at",
            "location": 134,
            "return": [
                "Optional[str]",
                "Optional[bool]"
            ],
            "arguments": {
                "args": [],
                "callback": [
                    "float",
                    "asyncio.StreamWriter",
                    "asyncio.StreamReader"
                ],
                "kwargs": [],
                "self": [],
                "when": [
                    "float",
                    "asyncio.StreamWriter",
                    "asyncio.StreamReader"
                ]
            },
            "variables": {}
        },
        "BaseAsyncIOLoop.remove_timeout": {
            "name": "remove_timeout",
            "location": 142,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "timeout": [
                    "str",
                    "float",
                    "Optional[float]",
                    "bool",
                    "int"
                ]
            },
            "variables": {}
        },
        "BaseAsyncIOLoop.add_callback": {
            "name": "add_callback",
            "location": 145,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "callback": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "BaseAsyncIOLoop.run_in_executor": {
            "name": "run_in_executor",
            "location": 160,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "args": [],
                "executor": [
                    "str"
                ],
                "func": [
                    "str"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "BaseAsyncIOLoop.set_default_executor": {
            "name": "set_default_executor",
            "location": 163,
            "return": [
                "int",
                "dict",
                "IO[str]"
            ],
            "arguments": {
                "args": [],
                "executor": [
                    "str",
                    "int",
                    "float"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "AsyncIOMainLoop.initialize": {
            "name": "initialize",
            "location": 181,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "AsyncIOMainLoop.make_current": {
            "name": "make_current",
            "location": 184,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "AsyncIOLoop.initialize": {
            "name": "initialize",
            "location": 209,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "is_current": [
                    "bool",
                    "int",
                    "Optional[Any]",
                    "str",
                    "Optional[int]"
                ],
                "loop": [
                    "str",
                    "Counter",
                    "int"
                ]
            }
        },
        "AsyncIOLoop.close": {
            "name": "close",
            "location": 220,
            "return": [
                ""
            ],
            "arguments": {
                "all_fds": [
                    "Type[tornado.util.Configurable]",
                    "Callable",
                    "str",
                    "bool",
                    "asyncio.streams.StreamWriter"
                ],
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "AsyncIOLoop.make_current": {
            "name": "make_current",
            "location": 225,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "is_current": [
                    "Dict[str, str]",
                    "Dict[str, bool]",
                    "Dict[Any, bool]",
                    "str"
                ],
                "old_asyncio": [
                    "int"
                ]
            }
        },
        "AsyncIOLoop._clear_current_hook": {
            "name": "_clear_current_hook",
            "location": 234,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "is_current": [
                    "Tuple[str]",
                    "Tuple[str, str]",
                    "List[str]",
                    "str",
                    "Final"
                ]
            }
        },
        "AnyThreadEventLoopPolicy.get_event_loop": {
            "name": "get_event_loop",
            "location": 285,
            "return": [
                "bool",
                "[dict]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "loop": [
                    "str",
                    "bool",
                    "int",
                    "list",
                    "List[str]"
                ]
            }
        },
        "global": {}
    },
    "tornado-5.0.2/tornado/platform/auto.py": {
        "set_close_exec": {
            "name": "set_close_exec",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "fd": [
                    "int",
                    "str",
                    "bool"
                ],
                "kwargs": []
            },
            "variables": {}
        },
        "global": {
            "__all__": [
                "List[str]",
                "Tuple[str]",
                "Tuple[str, str, str]"
            ],
            "monotonic_time": [
                "int",
                "float",
                "str"
            ]
        }
    },
    "tornado-5.0.2/tornado/platform/caresresolver.py": {
        "CaresResolver.initialize": {
            "name": "initialize",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "channel": [
                    "int",
                    "float"
                ],
                "fds": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ],
                "io_loop": [
                    "int",
                    "List[str]",
                    "\"Point\"",
                    "float",
                    "str",
                    "Type[int]"
                ]
            }
        },
        "CaresResolver._sock_state_cb": {
            "name": "_sock_state_cb",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "fd": [
                    "str",
                    "bytes"
                ],
                "kwargs": [],
                "readable": [
                    "str",
                    "bool",
                    "bytes"
                ],
                "self": [],
                "writable": [
                    "str",
                    "bool",
                    "bytes"
                ]
            },
            "variables": {
                "state": [
                    "bytes"
                ]
            }
        },
        "CaresResolver._handle_events": {
            "name": "_handle_events",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "events": [
                    "int",
                    "Dict[str, Union[int, bool]]",
                    "bool"
                ],
                "fd": [
                    "Dict[str, Any]",
                    "Optional[int]",
                    "str",
                    "int",
                    "\"Step\""
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "read_fd": [],
                "write_fd": []
            }
        },
        "CaresResolver.resolve": {
            "name": "resolve",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "family": [
                    "int",
                    "float",
                    "bool"
                ],
                "host": [
                    "int",
                    "str",
                    "bool"
                ],
                "kwargs": [],
                "port": [
                    "str",
                    "int",
                    "bytes",
                    "list"
                ],
                "self": []
            },
            "variables": {
                "address_family": [
                    "int"
                ],
                "addresses": [
                    "str",
                    "bytes",
                    "int",
                    "list",
                    "Optional[str]"
                ],
                "addrinfo": [
                    "list",
                    "Tuple[str, str, str, str, str, str, str, str, str]",
                    "Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]",
                    "List[int]"
                ],
                "callback_args": [
                    "Dict[str, Union[Any, Any]]",
                    "Dict[str, Any]",
                    "Type[Dict[str, str]]"
                ],
                "error": [
                    "str",
                    "Union[Literal, Literal]",
                    "tuple",
                    "Dict[str, Any]"
                ],
                "result": [
                    "str",
                    "List[Dict[str, str]]",
                    "Dict[str, Union[Any, str]]",
                    "Dict[str, Union[bool, str]]",
                    "Optional[str]"
                ]
            }
        },
        "global": {}
    },
    "tornado-5.0.2/tornado/platform/common.py": {
        "try_close": {
            "name": "try_close",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "f": [
                    "Callable",
                    "IO[bytes]"
                ],
                "kwargs": []
            },
            "variables": {}
        },
        "Waker.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "a": [
                    "int",
                    "list"
                ],
                "addr": [
                    "float",
                    "str",
                    "Tuple[int, int, int, int]"
                ],
                "connect_address": [
                    "int",
                    "List[str]",
                    "float"
                ],
                "count": [
                    "str",
                    "List[str]",
                    "int",
                    "Dict[str, List[Any]]",
                    "Tuple[str, str, str, str, str, str, str, str]"
                ],
                "reader": [
                    "str",
                    "int"
                ],
                "reader_fd": [
                    "int",
                    "str",
                    "Tuple[int, int, int, int]",
                    "dict",
                    "List[str]",
                    "Tuple[Any, int]"
                ],
                "writer": [
                    "Type[str]",
                    "int",
                    "bytes"
                ]
            }
        },
        "Waker.fileno": {
            "name": "fileno",
            "location": 90,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Waker.write_fileno": {
            "name": "write_fileno",
            "location": 93,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Waker.wake": {
            "name": "wake",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Waker.consume": {
            "name": "consume",
            "location": 102,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "result": [
                    "int",
                    "T",
                    "float"
                ]
            }
        },
        "Waker.close": {
            "name": "close",
            "location": 111,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "global": {}
    },
    "tornado-5.0.2/tornado/platform/interface.py": {
        "set_close_exec": {
            "name": "set_close_exec",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "fd": [
                    "int",
                    "str",
                    "bool"
                ],
                "kwargs": []
            },
            "variables": {}
        },
        "monotonic_time": {
            "name": "monotonic_time",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": []
            },
            "variables": {}
        },
        "Waker.fileno": {
            "name": "fileno",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Waker.write_fileno": {
            "name": "write_fileno",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Waker.wake": {
            "name": "wake",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Waker.consume": {
            "name": "consume",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Waker.close": {
            "name": "close",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "global": {}
    },
    "tornado-5.0.2/tornado/platform/kqueue.py": {
        "_KQueue.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_active": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ],
                "_kqueue": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ]
            }
        },
        "_KQueue.fileno": {
            "name": "fileno",
            "location": 31,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "_KQueue.close": {
            "name": "close",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "_KQueue.register": {
            "name": "register",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "events": [
                    "Callable",
                    "str",
                    "Dict[str, Any]",
                    "int",
                    "dict"
                ],
                "fd": [
                    "Callable",
                    "Optional[int]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "_KQueue.modify": {
            "name": "modify",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "events": [
                    "Dict[str, Any]",
                    "int",
                    "dict"
                ],
                "fd": [
                    "int"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "_KQueue.unregister": {
            "name": "unregister",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "fd": [
                    "Dict[str, Any]",
                    "Dict[str, AsyncGenerator]",
                    "dict"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "events": [
                    "str"
                ]
            }
        },
        "_KQueue._control": {
            "name": "_control",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "events": [
                    "int",
                    "bool",
                    "str",
                    "Mapping[str, str]",
                    "dict"
                ],
                "fd": [
                    "dict",
                    "List[int]",
                    "Dict[str, bool]",
                    "List[List[Any]]"
                ],
                "flags": [
                    "dict",
                    "List[int]",
                    "Dict[str, bool]",
                    "List[List[Any]]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "kevents": [
                    "list",
                    "int",
                    "List[Tuple[str, str]]"
                ]
            }
        },
        "_KQueue.poll": {
            "name": "poll",
            "location": 64,
            "return": [],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "timeout": [
                    "Optional[int]",
                    "int",
                    "float",
                    "Optional[float]",
                    "Union[int, float]"
                ]
            },
            "variables": {
                "events": [
                    "dict",
                    "Dict[str, str]",
                    "Dict[str, Union[float, str]]",
                    "List[str]",
                    "str"
                ],
                "fd": [
                    "str",
                    "dict",
                    "int"
                ],
                "kevents": [
                    "int",
                    "Dict[int, Any]",
                    "str"
                ]
            }
        },
        "KQueueIOLoop.initialize": {
            "name": "initialize",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "global": {}
    },
    "tornado-5.0.2/tornado/platform/posix.py": {
        "set_close_exec": {
            "name": "set_close_exec",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "fd": [
                    "Sequence[int]",
                    "int",
                    "bool",
                    "list"
                ],
                "kwargs": []
            },
            "variables": {
                "flags": [
                    "str",
                    "float"
                ]
            }
        },
        "_set_nonblocking": {
            "name": "_set_nonblocking",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "fd": [
                    "Sequence[int]",
                    "bool",
                    "int"
                ],
                "kwargs": []
            },
            "variables": {
                "flags": [
                    "str",
                    "float"
                ]
            }
        },
        "Waker.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "r": [
                    "platform.Any"
                ],
                "reader": [
                    "str",
                    "bool"
                ],
                "w": [
                    "Dict[str, List[Any]]",
                    "str",
                    "Tuple[int]"
                ],
                "writer": [
                    "str",
                    "bool"
                ]
            }
        },
        "Waker.fileno": {
            "name": "fileno",
            "location": 46,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Waker.write_fileno": {
            "name": "write_fileno",
            "location": 49,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Waker.wake": {
            "name": "wake",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Waker.consume": {
            "name": "consume",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "result": [
                    "int",
                    "dict",
                    "str",
                    "range",
                    "Set[str]"
                ]
            }
        },
        "Waker.close": {
            "name": "close",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "global": {}
    },
    "tornado-5.0.2/tornado/platform/select.py": {
        "_Select.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "error_fds": [
                    "int"
                ],
                "fd_sets": [
                    "int",
                    "Dict[int, Any]",
                    "str",
                    "Final"
                ],
                "read_fds": [
                    "List[int]",
                    "property",
                    "float",
                    "int",
                    "list",
                    "Type[str]",
                    "Tuple[Type[bytes], Type[str]]"
                ],
                "write_fds": [
                    "str",
                    "int",
                    "Dict[str, int]",
                    "list",
                    "dict"
                ]
            }
        },
        "_Select.close": {
            "name": "close",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "_Select.register": {
            "name": "register",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "events": [
                    "int",
                    "dict",
                    "Dict[str, Union[int, bool]]",
                    "List[List[int]]",
                    "List[Dict[str, Any]]"
                ],
                "fd": [
                    "Dict[str, Any]",
                    "Optional[str]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "_Select.modify": {
            "name": "modify",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "events": [
                    "Dict[str, Any]",
                    "int",
                    "dict"
                ],
                "fd": [
                    "int"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "_Select.unregister": {
            "name": "unregister",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "fd": [
                    "int"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "_Select.poll": {
            "name": "poll",
            "location": 60,
            "return": [],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "timeout": [
                    "int",
                    "T",
                    "Awaitable[T]"
                ]
            },
            "variables": {
                "errors": [
                    "str"
                ],
                "events": [
                    "dict",
                    "Dict[str, str]",
                    "Dict[str, dict]",
                    "Dict[str, Union[float, str]]",
                    "Dict[Any, List[Any]]",
                    "Dict[str, Dict[str, int]]",
                    "Dict[Any, Dict[str, int]]"
                ],
                "readable": [],
                "writeable": []
            }
        },
        "SelectIOLoop.initialize": {
            "name": "initialize",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "global": {}
    },
    "tornado-5.0.2/tornado/platform/twisted.py": {
        "install": {
            "name": "install",
            "location": 339,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": []
            },
            "variables": {
                "reactor": [
                    "int",
                    "dict",
                    "List[int]",
                    "List[List[int]]",
                    "Callable(functools.wraps)[[Named(wrapped, Callable[..., Any]), Named(assigned, Sequence[str], default), Named(updated, Sequence[str], default)], Callable[Any, Any]]",
                    "str",
                    "datetime.timedelta"
                ]
            }
        },
        "errback": {
            "name": "errback",
            "location": 583,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "failure": [
                    "int",
                    "Callable",
                    "str"
                ],
                "kwargs": []
            },
            "variables": {}
        },
        "_": {
            "name": "_",
            "location": 580,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "args": [],
                "d": [
                    "twisted.internedefer.Deferred",
                    "Callable",
                    "IO[bytes]",
                    "Dict[str, Any]"
                ],
                "kwargs": []
            },
            "variables": {
                "f": [
                    "ros.util.Context",
                    "TextIO",
                    "str"
                ]
            }
        },
        "TornadoDelayedCall.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "f": [
                    "List[List[float]]",
                    "List[int]"
                ],
                "kw": [
                    "List[List[float]]",
                    "List[int]"
                ],
                "kwargs": [],
                "reactor": [
                    "int",
                    "Callable",
                    "bool"
                ],
                "seconds": [
                    "int",
                    "Callable",
                    "bool"
                ],
                "self": []
            },
            "variables": {
                "_active": [
                    "str",
                    "bool"
                ],
                "_func": [
                    "bool",
                    "int",
                    "list",
                    "str",
                    "List[str]"
                ],
                "_reactor": [
                    "str",
                    "int"
                ],
                "_time": [
                    "int",
                    "str",
                    "Union[Literal, str]"
                ],
                "_timeout": [
                    "int",
                    "float"
                ]
            }
        },
        "TornadoDelayedCall._called": {
            "name": "_called",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_active": [
                    "int",
                    "float"
                ]
            }
        },
        "TornadoDelayedCall.getTime": {
            "name": "getTime",
            "location": 75,
            "return": [
                "str",
                "datetime.datetime",
                "int",
                "Optional[datetime.timedelta]",
                "bool",
                "float",
                "Dict[int, datetime.datetime]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TornadoDelayedCall.cancel": {
            "name": "cancel",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_active": [
                    "int",
                    "float"
                ]
            }
        },
        "TornadoDelayedCall.delay": {
            "name": "delay",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "seconds": [
                    "int",
                    "Callable",
                    "str"
                ],
                "self": []
            },
            "variables": {
                "_timeout": [
                    "int",
                    "datetime.date.time"
                ]
            }
        },
        "TornadoDelayedCall.reset": {
            "name": "reset",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "seconds": [
                    "int",
                    "Callable",
                    "str"
                ],
                "self": []
            },
            "variables": {
                "_time": [
                    "int",
                    "str",
                    "Union[Literal, str]"
                ],
                "_timeout": [
                    "int",
                    "datetime.date.time"
                ]
            }
        },
        "TornadoDelayedCall.active": {
            "name": "active",
            "location": 95,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TornadoReactor.start_if_necessary": {
            "name": "start_if_necessary",
            "location": 140,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TornadoReactor.__init__": {
            "name": "__init__",
            "location": 128,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_delayedCalls": [
                    "Set[str]",
                    "bool",
                    "list",
                    "str",
                    "Type[Tuple[Any, Any]]",
                    "List[int]"
                ],
                "_fds": [
                    "str",
                    "List[str]",
                    "int",
                    "Dict[str, List[Any]]",
                    "Tuple[str, str, str, str, str, str, str, str]"
                ],
                "_io_loop": [
                    "str",
                    "Dict[str, Tuple[Any, Any]]",
                    "Dict[str, Any]",
                    "Dict[str, int]"
                ],
                "_readers": [
                    "str",
                    "List[str]",
                    "int",
                    "Dict[str, List[Any]]",
                    "Tuple[str, str, str, str, str, str, str, str]"
                ],
                "_writers": [
                    "str",
                    "List[str]",
                    "int",
                    "Dict[str, List[Any]]",
                    "Tuple[str, str, str, str, str, str, str, str]"
                ]
            }
        },
        "TornadoReactor.seconds": {
            "name": "seconds",
            "location": 146,
            "return": [
                "BinaryIO",
                "TextIO",
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TornadoReactor.callLater": {
            "name": "callLater",
            "location": 149,
            "return": [
                "Callable",
                "Union[concurrenfutures.Future, asyncio.futures.Future]",
                "int",
                "float"
            ],
            "arguments": {
                "args": [],
                "f": [
                    "Iterable[T]",
                    "Callable"
                ],
                "kw": [
                    "Iterable[T]",
                    "Callable"
                ],
                "kwargs": [],
                "seconds": [
                    "Iterable[T]",
                    "Callable"
                ],
                "self": []
            },
            "variables": {
                "dc": [
                    "list",
                    "Tuple[str, int]"
                ]
            }
        },
        "TornadoReactor.getDelayedCalls": {
            "name": "getDelayedCalls",
            "location": 154,
            "return": [
                "List[str]",
                "Optional[dict]",
                "int"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TornadoReactor._removeDelayedCall": {
            "name": "_removeDelayedCall",
            "location": 157,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "dc": [
                    "int",
                    "str",
                    "Optional[List[str]]",
                    "Callable",
                    "Union[concurrenfutures.Future, asyncio.futures.Future]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TornadoReactor.callFromThread": {
            "name": "callFromThread",
            "location": 162,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "f": [
                    "Callable",
                    "tuple"
                ],
                "kw": [
                    "Callable"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TornadoReactor.installWaker": {
            "name": "installWaker",
            "location": 173,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TornadoReactor.wakeUp": {
            "name": "wakeUp",
            "location": 176,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TornadoReactor._invoke_callback": {
            "name": "_invoke_callback",
            "location": 180,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "args": [],
                "events": [
                    "dict"
                ],
                "fd": [
                    "Dict[str, Any]",
                    "Optional[int]",
                    "str",
                    "List[int]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "err": [
                    "Union[Literal, Literal]",
                    "Optional[str]",
                    "List[str]",
                    "str",
                    "rflx.error.Location"
                ],
                "reader": [
                    "int",
                    "float",
                    "bool"
                ],
                "writer": [
                    "int",
                    "str",
                    "Dict[str, Union[float, str]]",
                    "float"
                ]
            }
        },
        "TornadoReactor.addReader": {
            "name": "addReader",
            "location": 207,
            "return": [],
            "arguments": {
                "args": [],
                "kwargs": [],
                "reader": [
                    "str"
                ],
                "self": []
            },
            "variables": {
                "_": [
                    "str",
                    "Final",
                    "Dict[str, Union[Any, Any, Any]]",
                    "Set[str]"
                ],
                "fd": [
                    "List[int]",
                    "Tuple[FrozenSet[int]]",
                    "FrozenSet[int]"
                ],
                "writer": [
                    "int",
                    "datetime.datetime.datetime",
                    "list",
                    "functools.partial[Any]",
                    "Dict[str, str]",
                    "Tuple[str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str]"
                ]
            }
        },
        "TornadoReactor.addWriter": {
            "name": "addWriter",
            "location": 226,
            "return": [],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "writer": [
                    "float",
                    "str",
                    "Iterable[str]"
                ]
            },
            "variables": {
                "_": [
                    "str",
                    "int",
                    "float"
                ],
                "fd": [
                    "str",
                    "List[Tuple[str, str]]",
                    "Tuple[FrozenSet[int]]",
                    "FrozenSet[int]",
                    "float"
                ],
                "reader": [
                    "int",
                    "str",
                    "float",
                    "List[int]"
                ]
            }
        },
        "TornadoReactor.removeReader": {
            "name": "removeReader",
            "location": 244,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "reader": [
                    "int",
                    "Callable",
                    "str"
                ],
                "self": []
            },
            "variables": {
                "_": [
                    "str",
                    "Final",
                    "Dict[str, Union[Any, Any, Any]]",
                    "Set[str]"
                ],
                "fd": [
                    "int",
                    "str",
                    "datetime.datetime.datetime",
                    "datetime.timedelta"
                ],
                "writer": [
                    "float",
                    "int"
                ]
            }
        },
        "TornadoReactor.removeWriter": {
            "name": "removeWriter",
            "location": 260,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "writer": [
                    "int",
                    "Callable",
                    "str"
                ]
            },
            "variables": {
                "_": [
                    "str",
                    "int",
                    "float"
                ],
                "fd": [
                    "float",
                    "int",
                    "datetime.datetime.datetime",
                    "property"
                ],
                "reader": [
                    "int",
                    "Dict[int, Any]"
                ]
            }
        },
        "TornadoReactor.removeAll": {
            "name": "removeAll",
            "location": 276,
            "return": [
                "str",
                "int",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TornadoReactor.getReaders": {
            "name": "getReaders",
            "location": 279,
            "return": [
                "str",
                "Optional[str]",
                "bytes"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TornadoReactor.getWriters": {
            "name": "getWriters",
            "location": 282,
            "return": [
                "str",
                "Optional[str]",
                "bytes"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TornadoReactor.stop": {
            "name": "stop",
            "location": 288,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "fire_shutdown": [
                    "str"
                ]
            }
        },
        "TornadoReactor.crash": {
            "name": "crash",
            "location": 293,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TornadoReactor.doIteration": {
            "name": "doIteration",
            "location": 297,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "delay": [
                    "bool",
                    "int",
                    "set"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TornadoReactor.mainLoop": {
            "name": "mainLoop",
            "location": 300,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "_TestReactor.__init__": {
            "name": "__init__",
            "location": 318,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "_TestReactor.listenTCP": {
            "name": "listenTCP",
            "location": 325,
            "return": [
                "bool",
                "str",
                "pymatgen.util.Vector3Like",
                "Optional[int]"
            ],
            "arguments": {
                "args": [],
                "backlog": [
                    "str",
                    "int"
                ],
                "factory": [
                    "str",
                    "int"
                ],
                "interface": [
                    "str",
                    "int"
                ],
                "kwargs": [],
                "port": [
                    "str",
                    "int"
                ],
                "self": []
            },
            "variables": {
                "interface": [
                    "int",
                    "str"
                ]
            }
        },
        "_TestReactor.listenUDP": {
            "name": "listenUDP",
            "location": 332,
            "return": [
                "bool",
                "str",
                "pymatgen.util.Vector3Like",
                "Optional[int]"
            ],
            "arguments": {
                "args": [],
                "interface": [
                    "int",
                    "Optional[int]",
                    "str",
                    "bool"
                ],
                "kwargs": [],
                "maxPacketSize": [
                    "int",
                    "Optional[int]",
                    "str",
                    "bool"
                ],
                "port": [
                    "int",
                    "Optional[int]",
                    "str",
                    "bool"
                ],
                "protocol": [
                    "int",
                    "Optional[int]",
                    "str",
                    "bool"
                ],
                "self": []
            },
            "variables": {
                "interface": [
                    "int"
                ]
            }
        },
        "_FD.__init__": {
            "name": "__init__",
            "location": 362,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "fd": [
                    "int",
                    "apistar.interfaces.Router",
                    "bool",
                    "float"
                ],
                "fileobj": [
                    "int",
                    "apistar.interfaces.Router",
                    "bool",
                    "float"
                ],
                "handler": [
                    "int",
                    "apistar.interfaces.Router",
                    "bool",
                    "float"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "fd": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ],
                "fileobj": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ],
                "handler": [
                    "str",
                    "float",
                    "Dict[str, List[str]]"
                ],
                "lost": [
                    "int",
                    "float"
                ],
                "reading": [
                    "int",
                    "float"
                ],
                "writing": [
                    "int",
                    "str",
                    "bytes"
                ]
            }
        },
        "_FD.fileno": {
            "name": "fileno",
            "location": 370,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "_FD.doRead": {
            "name": "doRead",
            "location": 373,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "_FD.doWrite": {
            "name": "doWrite",
            "location": 377,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "_FD.connectionLost": {
            "name": "connectionLost",
            "location": 381,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "reason": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "self": []
            },
            "variables": {
                "lost": [
                    "Type[str]",
                    "str",
                    "List[str]",
                    "float"
                ]
            }
        },
        "_FD.logPrefix": {
            "name": "logPrefix",
            "location": 388,
            "return": [
                "str",
                "List[bytes]",
                "Iterable[float]",
                "int",
                "float"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TwistedIOLoop.initialize": {
            "name": "initialize",
            "location": 415,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "reactor": [
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[float]",
                    "bool"
                ],
                "self": []
            },
            "variables": {
                "fds": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ],
                "reactor": [
                    "int"
                ]
            }
        },
        "TwistedIOLoop.close": {
            "name": "close",
            "location": 423,
            "return": [
                ""
            ],
            "arguments": {
                "all_fds": [
                    "bool"
                ],
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "fds": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "TwistedIOLoop.add_handler": {
            "name": "add_handler",
            "location": 432,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "events": [
                    "int",
                    "bool",
                    "List[List[int]]",
                    "Dict[str, Any]"
                ],
                "fd": [
                    "bool",
                    "float",
                    "dict"
                ],
                "handler": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[int]",
                    "int"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "fd": [
                    "int",
                    "str",
                    "Final",
                    "Pattern[str]",
                    "List[str]"
                ],
                "fileobj": [
                    "str",
                    "bool",
                    "List[str]",
                    "List[int]"
                ]
            }
        },
        "TwistedIOLoop.update_handler": {
            "name": "update_handler",
            "location": 444,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "events": [
                    "int"
                ],
                "fd": [
                    "Optional[int]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "fd": [
                    "str"
                ],
                "fileobj": [
                    "int",
                    "str",
                    "Type[str]",
                    "Dict[str, Union[None, Any, Any]]",
                    "bool"
                ]
            }
        },
        "TwistedIOLoop.remove_handler": {
            "name": "remove_handler",
            "location": 463,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "args": [],
                "fd": [
                    "bytes",
                    "AbstractSet[str]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "fd": [
                    "str"
                ],
                "fileobj": [
                    "int",
                    "str",
                    "Type[str]",
                    "Dict[str, Union[None, Any, Any]]",
                    "bool"
                ]
            }
        },
        "TwistedIOLoop.start": {
            "name": "start",
            "location": 474,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "old_current": [
                    "Tuple[Literal, Literal]",
                    "Type[datetime.datetime]",
                    "int",
                    "str"
                ]
            }
        },
        "TwistedIOLoop.stop": {
            "name": "stop",
            "location": 486,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TwistedIOLoop.add_timeout": {
            "name": "add_timeout",
            "location": 489,
            "return": [
                "str",
                "Union[str, int]"
            ],
            "arguments": {
                "args": [],
                "callback": [
                    "str",
                    "float",
                    "Dict[str, Any]",
                    "int"
                ],
                "deadline": [
                    "int",
                    "datetime.datetime"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "delay": [
                    "str",
                    "int"
                ]
            }
        },
        "TwistedIOLoop.remove_timeout": {
            "name": "remove_timeout",
            "location": 503,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "timeout": [
                    "int",
                    "bytes",
                    "Optional[int]",
                    "Tuple[int, int]"
                ]
            },
            "variables": {}
        },
        "TwistedIOLoop.add_callback": {
            "name": "add_callback",
            "location": 507,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "callback": [
                    "str",
                    "int",
                    "bool",
                    "Callable",
                    "float"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TwistedIOLoop.add_callback_from_signal": {
            "name": "add_callback_from_signal",
            "location": 512,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "callback": [
                    "list",
                    "Dict[str, Any]",
                    "Sequence[str]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TwistedResolver.initialize": {
            "name": "initialize",
            "location": 533,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "cache_resolver": [
                    "dict",
                    "List[Tuple[str, str, str]]",
                    "Dict[str, list]",
                    "str",
                    "Dict[str, Tuple[str, str]]"
                ],
                "host_resolver": [
                    "Optional[str]",
                    "dict",
                    "List[Tuple[str, str, str]]",
                    "Type[Tuple[str, ...]]",
                    "Type[str]",
                    "str"
                ],
                "reactor": [
                    "Dict[Any, int]",
                    "float",
                    "str",
                    "Dict[str, str]"
                ],
                "real_resolver": [
                    "Dict[str, str]",
                    "Dict[str, Union[Any, Any, Any, Any]]",
                    "Dict[str, Union[Any, bool, str]]",
                    "List[Dict[str, str]]",
                    "Dict[str, Any]"
                ],
                "resolver": [
                    "dict",
                    "Dict[Any, Union[Any, Any, Any]]",
                    "bool"
                ]
            }
        },
        "TwistedResolver.resolve": {
            "name": "resolve",
            "location": 546,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "family": [
                    "int",
                    "str"
                ],
                "host": [
                    "str",
                    "int",
                    "Union[str, int]"
                ],
                "kwargs": [],
                "port": [
                    "str",
                    "List[str]",
                    "denite.util.UserContext",
                    "Type"
                ],
                "self": []
            },
            "variables": {
                "deferred": [
                    "List[str]",
                    "Dict[str, Any]",
                    "float",
                    "Optional[\"Lecture\"]",
                    "int",
                    "Dict[str, str]",
                    "str"
                ],
                "resolved": [
                    "str",
                    "Dict[str, Any]",
                    "Dict[str, Union[Any, Any]]"
                ],
                "resolved_family": [
                    "int"
                ],
                "result": [
                    "set",
                    "list",
                    "int",
                    "Set[str]",
                    "MutableMapping[str, Any]"
                ]
            }
        },
        "global": {}
    },
    "tornado-5.0.2/tornado/platform/windows.py": {
        "set_close_exec": {
            "name": "set_close_exec",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "fd": [
                    "str",
                    "int",
                    "dict",
                    "bool"
                ],
                "kwargs": []
            },
            "variables": {
                "success": [
                    "int",
                    "list",
                    "ctypes.c_int64",
                    "Tuple[int, int, int]"
                ]
            }
        },
        "global": {
            "HANDLE_FLAG_INHERIT": [
                "int",
                "str",
                "bool",
                "ctypes.c_int64",
                "Tuple[int, int, int]",
                "list"
            ],
            "SetHandleInformation": [
                "ctypes._NamedFuncPointer",
                "ctypes.CDLL",
                "ctypes._FuncPointer",
                "float",
                "Type[ctypes._FuncPointer]"
            ],
            "argtypes": [
                "str",
                "List[str]",
                "int",
                "Dict[str, List[Any]]",
                "Tuple[str, str, str, str, str, str, str, str]"
            ],
            "restype": [
                "str",
                "List[str]",
                "int",
                "Dict[str, List[Any]]",
                "Tuple[str, str, str, str, str, str, str, str]"
            ]
        }
    },
    "tornado-5.0.2/tornado/test/asyncio_test.py": {
        "AsyncIOLoopTest.get_new_ioloop": {
            "name": "get_new_ioloop",
            "location": 33,
            "return": [
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "io_loop": [
                    "int",
                    "str",
                    "Pattern[str]",
                    "Dict[str, Union[Any, str]]",
                    "List[str]"
                ]
            }
        },
        "AsyncIOLoopTest.test_asyncio_callback": {
            "name": "test_asyncio_callback",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "AsyncIOLoopTest.test_asyncio_future": {
            "name": "test_asyncio_future",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "ensure_future": [
                    "asyncio.transports.Transport"
                ],
                "x": []
            }
        },
        "AsyncIOLoopTest.test_asyncio_yield_from": {
            "name": "test_asyncio_yield_from",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "namespace": [
                    "List[slice]"
                ],
                "result": [
                    "list",
                    "List[object]"
                ]
            }
        },
        "AsyncIOLoopTest.tornado_coroutine": {
            "name": "tornado_coroutine",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "AsyncIOLoopTest.test_asyncio_adapter": {
            "name": "test_asyncio_adapter",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "native_coroutine_with_adapter": [
                    "List[str]",
                    "Tuple[Literal, Literal, Literal]"
                ],
                "native_coroutine_with_adapter2": [
                    "List[str]",
                    "Tuple[Literal, Literal, Literal]"
                ],
                "native_coroutine_without_adapter": []
            }
        },
        "LeakTest.setUp": {
            "name": "setUp",
            "location": 127,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "orig_policy": [
                    "int"
                ]
            }
        },
        "LeakTest.tearDown": {
            "name": "tearDown",
            "location": 135,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "LeakTest.test_ioloop_close_leak": {
            "name": "test_ioloop_close_leak",
            "location": 139,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "loop": [
                    "Dict[str, int]",
                    "str"
                ],
                "new_count": [
                    "list",
                    "int",
                    "List[str]",
                    "List[int]"
                ],
                "orig_count": [
                    "int",
                    "float",
                    "list",
                    "List[List[int]]",
                    "List[Dict[str, str]]",
                    "List[int]",
                    "str"
                ]
            }
        },
        "LeakTest.test_asyncio_close_leak": {
            "name": "test_asyncio_close_leak",
            "location": 148,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "loop": [
                    "list",
                    "bool"
                ],
                "new_count": [
                    "list",
                    "int",
                    "List[str]",
                    "List[int]"
                ],
                "orig_count": [
                    "int",
                    "float",
                    "list",
                    "List[List[int]]",
                    "List[Dict[str, str]]",
                    "List[int]",
                    "str"
                ]
            }
        },
        "AnyThreadEventLoopPolicyTest.setUp": {
            "name": "setUp",
            "location": 165,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "executor": [
                    "dict",
                    "float",
                    "str",
                    "int",
                    "Tuple[Any, Any]",
                    "list",
                    "Dict[str, str]"
                ],
                "orig_policy": [
                    "int"
                ]
            }
        },
        "AnyThreadEventLoopPolicyTest.tearDown": {
            "name": "tearDown",
            "location": 169,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "AnyThreadEventLoopPolicyTest.get_and_close_event_loop": {
            "name": "get_and_close_event_loop",
            "location": 174,
            "return": [
                "str",
                "Optional[str]",
                "List[str]",
                "List[List[int]]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "loop": [
                    "int",
                    "str"
                ]
            }
        },
        "AnyThreadEventLoopPolicyTest.get_event_loop_on_thread": {
            "name": "get_event_loop_on_thread",
            "location": 173,
            "return": [
                "int",
                "bool",
                "str",
                "pymatgen.util.Vector3Like"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "future": [
                    "bool",
                    "Dict[str, Set[str]]",
                    "Dict[Union[bool, str], Any]",
                    "List[Tuple[int, int, int, int, int, int]]"
                ]
            }
        },
        "AnyThreadEventLoopPolicyTest.run_policy_test": {
            "name": "run_policy_test",
            "location": 188,
            "return": [
                ""
            ],
            "arguments": {
                "accessor": [
                    "bytes",
                    "Exception",
                    "Callable"
                ],
                "args": [],
                "expected_type": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "AnyThreadEventLoopPolicyTest.test_asyncio_accessor": {
            "name": "test_asyncio_accessor",
            "location": 202,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "AnyThreadEventLoopPolicyTest.test_tornado_accessor": {
            "name": "test_tornado_accessor",
            "location": 205,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "global": {
            "asyncio": []
        }
    },
    "tornado-5.0.2/tornado/test/auth_test.py": {
        "OpenIdClientLoginHandler.initialize": {
            "name": "initialize",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "test": [
                    "str",
                    "Optional[bytes]"
                ]
            },
            "variables": {
                "_OPENID_ENDPOINT": [
                    "int",
                    "str"
                ]
            }
        },
        "OpenIdClientLoginHandler.get": {
            "name": "get",
            "location": 27,
            "return": [
                "Iterator[object]",
                "bool",
                "Union[tuple, list]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "res": [
                    "frozenset[str]",
                    "list",
                    "str",
                    "tuple"
                ]
            }
        },
        "OpenIdClientLoginHandler.on_user": {
            "name": "on_user",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "user": [
                    "bool",
                    "Optional[str]",
                    "Optional[Dict[str, str]]"
                ]
            },
            "variables": {}
        },
        "OpenIdServerAuthenticateHandler.post": {
            "name": "post",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "OAuth1ClientLoginHandler.initialize": {
            "name": "initialize",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "test": [
                    "str",
                    "Dict[str, Any]",
                    "bool",
                    "Callable[[str], str]",
                    "Union[int, Type[Exception]]"
                ],
                "version": [
                    "List[str]",
                    "dict",
                    "Sequence[int]",
                    "Set[str]",
                    "str"
                ]
            },
            "variables": {
                "_OAUTH_ACCESS_TOKEN_URL": [
                    "str",
                    "Sequence[str]",
                    "type"
                ],
                "_OAUTH_AUTHORIZE_URL": [
                    "str",
                    "int",
                    "list"
                ],
                "_OAUTH_REQUEST_TOKEN_URL": [
                    "str",
                    "List[str]",
                    "Sequence[str]"
                ],
                "_OAUTH_VERSION": [
                    "str",
                    "Set[int]",
                    "int",
                    "List[str]"
                ]
            }
        },
        "OAuth1ClientLoginHandler._oauth_consumer_token": {
            "name": "_oauth_consumer_token",
            "location": 56,
            "return": [
                "dict",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "OAuth1ClientLoginHandler.get": {
            "name": "get",
            "location": 60,
            "return": [
                "Iterator[object]",
                "bool",
                "Union[tuple, list]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "res": [
                    "int",
                    "str",
                    "float",
                    "Type[str]"
                ]
            }
        },
        "OAuth1ClientLoginHandler.on_user": {
            "name": "on_user",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "user": [
                    "bool",
                    "Optional[str]",
                    "Optional[Dict[str, str]]"
                ]
            },
            "variables": {}
        },
        "OAuth1ClientLoginHandler._oauth_get_user": {
            "name": "_oauth_get_user",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "access_token": [
                    "str"
                ],
                "args": [],
                "callback": [
                    "str",
                    "Dict[str, Any]",
                    "dict"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "OAuth1ClientLoginCoroutineHandler.get": {
            "name": "get",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "OAuth1ClientRequestParametersHandler.initialize": {
            "name": "initialize",
            "location": 98,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "version": [
                    "str",
                    "int",
                    "bool"
                ]
            },
            "variables": {
                "_OAUTH_VERSION": [
                    "str",
                    "Set[int]",
                    "int",
                    "List[str]"
                ]
            }
        },
        "OAuth1ClientRequestParametersHandler._oauth_consumer_token": {
            "name": "_oauth_consumer_token",
            "location": 101,
            "return": [
                "dict",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "OAuth1ClientRequestParametersHandler.get": {
            "name": "get",
            "location": 104,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "params": [
                    "Dict[str, str]",
                    "int",
                    "List[Union[Any, Any]]"
                ]
            }
        },
        "OAuth1ServerRequestTokenHandler.get": {
            "name": "get",
            "location": 113,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "OAuth1ServerAccessTokenHandler.get": {
            "name": "get",
            "location": 118,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "OAuth2ClientLoginHandler.initialize": {
            "name": "initialize",
            "location": 123,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "test": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "int"
                ]
            },
            "variables": {
                "_OAUTH_AUTHORIZE_URL": [
                    "str",
                    "int",
                    "list"
                ]
            }
        },
        "OAuth2ClientLoginHandler.get": {
            "name": "get",
            "location": 126,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "res": [
                    "Iterator[Any]",
                    "list",
                    "str",
                    "int",
                    "tuple",
                    "Tuple[Sequence[Any]]"
                ]
            }
        },
        "FacebookClientLoginHandler.initialize": {
            "name": "initialize",
            "location": 133,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "test": [
                    "dict",
                    "float",
                    "List[Callable]",
                    "str",
                    "Dict[str, Any]"
                ]
            },
            "variables": {
                "_FACEBOOK_BASE_URL": [
                    "str",
                    "list"
                ],
                "_OAUTH_ACCESS_TOKEN_URL": [
                    "str",
                    "Sequence[str]",
                    "type"
                ],
                "_OAUTH_AUTHORIZE_URL": [
                    "str",
                    "int",
                    "list"
                ]
            }
        },
        "FacebookClientLoginHandler.get": {
            "name": "get",
            "location": 139,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "user": [
                    "str",
                    "List[float]"
                ]
            }
        },
        "FacebookServerAccessTokenHandler.get": {
            "name": "get",
            "location": 155,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "FacebookServerMeHandler.get": {
            "name": "get",
            "location": 160,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TwitterClientHandler.initialize": {
            "name": "initialize",
            "location": 165,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "test": [
                    "Optional[Tuple]",
                    "str",
                    "int",
                    "Tuple[Dict, int]",
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]",
                    "Iterable['Notification']",
                    "bool"
                ]
            },
            "variables": {
                "_OAUTH_ACCESS_TOKEN_URL": [
                    "str",
                    "Sequence[str]",
                    "type"
                ],
                "_OAUTH_AUTHORIZE_URL": [
                    "str",
                    "int",
                    "list"
                ],
                "_OAUTH_REQUEST_TOKEN_URL": [
                    "str",
                    "List[str]",
                    "Sequence[str]"
                ],
                "_TWITTER_BASE_URL": [
                    "str",
                    "list"
                ]
            }
        },
        "TwitterClientHandler.get_auth_http_client": {
            "name": "get_auth_http_client",
            "location": 171,
            "return": [
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TwitterClientLoginHandler.get": {
            "name": "get",
            "location": 177,
            "return": [
                "Iterator[object]",
                "bool",
                "Union[tuple, list]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TwitterClientLoginHandler.on_user": {
            "name": "on_user",
            "location": 183,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "user": [
                    "bool",
                    "Optional[str]",
                    "Optional[Dict[str, str]]"
                ]
            },
            "variables": {}
        },
        "TwitterClientLoginGenEngineHandler.get": {
            "name": "get",
            "location": 192,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "user": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "TwitterClientLoginGenCoroutineHandler.get": {
            "name": "get",
            "location": 204,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "user": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "TwitterClientShowUserHandler.get": {
            "name": "get",
            "location": 217,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "dict",
                    "Dict[Any, str]",
                    "Dict[str, int]",
                    "Dict[str, str]"
                ]
            }
        },
        "TwitterClientShowUserFutureHandler.get": {
            "name": "get",
            "location": 233,
            "return": [
                "Iterator[object]",
                "bool",
                "Union[tuple, list]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "dict",
                    "Dict[str, Any]",
                    "Dict[Any, int]",
                    "Dict[str, int]"
                ]
            }
        },
        "TwitterServerAccessTokenHandler.get": {
            "name": "get",
            "location": 247,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TwitterServerShowUserHandler.get": {
            "name": "get",
            "location": 252,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "screen_name": [
                    "str",
                    "Optional[str]"
                ],
                "self": []
            },
            "variables": {}
        },
        "TwitterServerVerifyCredentialsHandler.get": {
            "name": "get",
            "location": 266,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "AuthTest.get_app": {
            "name": "get_app",
            "location": 278,
            "return": [
                "str",
                "bool",
                "Optional[List[str]]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "AuthTest.test_openid_redirect": {
            "name": "test_openid_redirect",
            "location": 328,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "Dict[str, List[str]]",
                    "list",
                    "Dict[str, Any]",
                    "Dict[Any, str]"
                ]
            }
        },
        "AuthTest.test_openid_get_user": {
            "name": "test_openid_get_user",
            "location": 334,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "parsed": [
                    "bytes",
                    "Dict[str, str]"
                ],
                "response": [
                    "bytes",
                    "list",
                    "str",
                    "Dict[str, Union[Any, Any, str]]",
                    "Dict[str, str]"
                ]
            }
        },
        "AuthTest.test_oauth10_redirect": {
            "name": "test_oauth10_redirect",
            "location": 343,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "dict",
                    "str"
                ]
            }
        },
        "AuthTest.test_oauth10_get_user": {
            "name": "test_oauth10_get_user",
            "location": 353,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "parsed": [
                    "str",
                    "Dict[str, str]",
                    "set"
                ],
                "response": [
                    "str",
                    "Dict[str, str]",
                    "Optional[str]"
                ]
            }
        },
        "AuthTest.test_oauth10_request_parameters": {
            "name": "test_oauth10_request_parameters",
            "location": 362,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "parsed": [
                    "Dict[str, Union[float, str]]",
                    "str"
                ],
                "response": [
                    "bytes",
                    "list",
                    "str",
                    "Dict[str, Union[Any, Any, str]]",
                    "Dict[str, str]"
                ]
            }
        },
        "AuthTest.test_oauth10a_redirect": {
            "name": "test_oauth10a_redirect",
            "location": 371,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "dict",
                    "str"
                ]
            }
        },
        "AuthTest.test_oauth10a_get_user": {
            "name": "test_oauth10a_get_user",
            "location": 381,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "parsed": [
                    "str",
                    "Dict[str, str]",
                    "set"
                ],
                "response": [
                    "str",
                    "Dict[str, str]",
                    "Optional[str]"
                ]
            }
        },
        "AuthTest.test_oauth10a_request_parameters": {
            "name": "test_oauth10a_request_parameters",
            "location": 390,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "parsed": [
                    "Dict[str, Union[float, str]]",
                    "str"
                ],
                "response": [
                    "bytes",
                    "list",
                    "str",
                    "Dict[str, Union[Any, Any, str]]",
                    "Dict[str, str]"
                ]
            }
        },
        "AuthTest.test_oauth10a_get_user_coroutine_exception": {
            "name": "test_oauth10a_get_user_coroutine_exception",
            "location": 399,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "str",
                    "Dict[str, str]",
                    "Dict[str, List[str]]",
                    "dict",
                    "Dict[str, bool]"
                ]
            }
        },
        "AuthTest.test_oauth2_redirect": {
            "name": "test_oauth2_redirect",
            "location": 405,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "Dict[str, List[str]]",
                    "list",
                    "Dict[str, Any]",
                    "Dict[Any, str]"
                ]
            }
        },
        "AuthTest.test_facebook_login": {
            "name": "test_facebook_login",
            "location": 410,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "dict",
                    "bytes"
                ],
                "user": [
                    "str",
                    "Dict[str, str]",
                    "Dict[str, Union[Any, Any, Any]]",
                    "int",
                    "List[str]"
                ]
            }
        },
        "AuthTest.base_twitter_redirect": {
            "name": "base_twitter_redirect",
            "location": 420,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "url": [
                    "str",
                    "bool",
                    "Tuple[int, int]",
                    "Optional[str]",
                    "int",
                    "List[str]"
                ]
            },
            "variables": {
                "response": [
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "AuthTest.test_twitter_redirect": {
            "name": "test_twitter_redirect",
            "location": 431,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "AuthTest.test_twitter_redirect_gen_engine": {
            "name": "test_twitter_redirect_gen_engine",
            "location": 434,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "AuthTest.test_twitter_redirect_gen_coroutine": {
            "name": "test_twitter_redirect_gen_coroutine",
            "location": 437,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "AuthTest.test_twitter_get_user": {
            "name": "test_twitter_get_user",
            "location": 440,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "parsed": [
                    "bytes",
                    "Dict[str, str]"
                ],
                "response": [
                    "str",
                    "Dict[str, str]",
                    "Optional[str]"
                ]
            }
        },
        "AuthTest.test_twitter_show_user": {
            "name": "test_twitter_show_user",
            "location": 454,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "str",
                    "dict",
                    "Dict[str, str]",
                    "bytes",
                    "list",
                    "Dict[str, Any]"
                ]
            }
        },
        "AuthTest.test_twitter_show_user_error": {
            "name": "test_twitter_show_user_error",
            "location": 460,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "list",
                    "Dict[str, Union[Any, Any]]"
                ]
            }
        },
        "AuthTest.test_twitter_show_user_future": {
            "name": "test_twitter_show_user_future",
            "location": 466,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "str",
                    "dict",
                    "Dict[str, str]",
                    "bytes",
                    "list",
                    "Dict[str, Any]"
                ]
            }
        },
        "AuthTest.test_twitter_show_user_future_error": {
            "name": "test_twitter_show_user_future_error",
            "location": 472,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "list",
                    "Dict[str, int]",
                    "List[str]",
                    "List[int]",
                    "Exception",
                    "Dict[str, List[Any]]",
                    "DefaultDict[Any, List[Any]]"
                ]
            }
        },
        "GoogleLoginHandler.initialize": {
            "name": "initialize",
            "location": 479,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "test": [
                    "Dict[str, Any]",
                    "str",
                    "list"
                ]
            },
            "variables": {
                "_OAUTH_ACCESS_TOKEN_URL": [
                    "str",
                    "Sequence[str]",
                    "type"
                ],
                "_OAUTH_AUTHORIZE_URL": [
                    "str",
                    "int",
                    "list"
                ],
                "_OAUTH_REDIRECT_URI": [
                    "int",
                    "str",
                    "Tuple[str, str]",
                    "bool"
                ],
                "test": [
                    "int",
                    "List[int]",
                    "Dict[str, Union[Any, Any, Any, Any]]"
                ]
            }
        },
        "GoogleLoginHandler.get": {
            "name": "get",
            "location": 486,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "access": [
                    "str",
                    "int",
                    "Pattern[str]"
                ],
                "code": [
                    "int",
                    "str",
                    "dict"
                ],
                "user": [
                    "Dict[str, Dict[str, Any]]",
                    "List[Dict[str, str]]",
                    "Dict[str, Dict[str, str]]",
                    "Dict[Any, str]",
                    "Dict[str, Union[dict, Any]]",
                    "Dict[str, Union[None, int, str]]"
                ]
            }
        },
        "GoogleOAuth2AuthorizeHandler.get": {
            "name": "get",
            "location": 509,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "code": [
                    "int",
                    "str",
                    "bytes"
                ]
            }
        },
        "GoogleOAuth2TokenHandler.post": {
            "name": "post",
            "location": 517,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "GoogleOAuth2UserinfoHandler.get": {
            "name": "get",
            "location": 527,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "GoogleOAuth2Test.get_app": {
            "name": "get_app",
            "location": 537,
            "return": [
                "bool",
                "Optional[str]",
                "str",
                "List[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "GoogleOAuth2Test.test_google_login": {
            "name": "test_google_login",
            "location": 553,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "Dict[str, Any]",
                    "Dict[str, Union[Any, Any, str]]",
                    "dict",
                    "list"
                ]
            }
        },
        "global": {}
    },
    "tornado-5.0.2/tornado/test/autoreload_test.py": {
        "AutoreloadTest.test_reload_module": {
            "name": "test_reload_module",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "out": [
                    "int",
                    "str"
                ],
                "p": [
                    "int"
                ],
                "path": [
                    "str",
                    "Dict[str, str]"
                ],
                "pythonpath": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "global": {
            "MAIN": [
                "str"
            ]
        }
    },
    "tornado-5.0.2/tornado/test/concurrent_test.py": {
        "MiscFutureTest.test_future_set_result_unless_cancelled": {
            "name": "test_future_set_result_unless_cancelled",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "fut": [
                    "str",
                    "concurrenfutures._base.Future[Any]",
                    "ClassVar",
                    "DefaultDict[str, List[str]]"
                ],
                "is_cancelled": [
                    "int",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "ReturnFutureTest.sync_future": {
            "name": "sync_future",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "callback": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "ReturnFutureTest.async_future": {
            "name": "async_future",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "callback": [
                    "dict",
                    "int"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "ReturnFutureTest.immediate_failure": {
            "name": "immediate_failure",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "callback": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "ReturnFutureTest.delayed_failure": {
            "name": "delayed_failure",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "callback": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "ReturnFutureTest.return_value": {
            "name": "return_value",
            "location": 78,
            "return": [
                "int",
                "Optional[str]",
                "float",
                "str"
            ],
            "arguments": {
                "args": [],
                "callback": [
                    "dict",
                    "List[str]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "ReturnFutureTest.no_result_future": {
            "name": "no_result_future",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "callback": [
                    "str",
                    "bool",
                    "bytes"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "ReturnFutureTest.test_immediate_failure": {
            "name": "test_immediate_failure",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "result": [
                    "allennlp.common.util.JsonDict",
                    "dict"
                ]
            }
        },
        "ReturnFutureTest.test_return_value": {
            "name": "test_return_value",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "ReturnFutureTest.test_callback_kw": {
            "name": "test_callback_kw",
            "location": 101,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "future": [
                    "str",
                    "T",
                    "int",
                    "property"
                ],
                "result": [
                    "list",
                    "List[Tuple[str, int]]"
                ]
            }
        },
        "ReturnFutureTest.test_callback_positional": {
            "name": "test_callback_positional",
            "location": 107,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "future": [
                    "List[float]",
                    "str",
                    "List[str]"
                ],
                "result": [
                    "list",
                    "List[Tuple[str, int]]"
                ]
            }
        },
        "ReturnFutureTest.test_no_callback": {
            "name": "test_no_callback",
            "location": 115,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "future": [
                    "set",
                    "dict",
                    "int",
                    "Dict[str, Any]",
                    "List[str]",
                    "list"
                ]
            }
        },
        "ReturnFutureTest.test_none_callback_kw": {
            "name": "test_none_callback_kw",
            "location": 119,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "future": [
                    "str",
                    "List[Tuple[int, int]]"
                ]
            }
        },
        "ReturnFutureTest.test_none_callback_pos": {
            "name": "test_none_callback_pos",
            "location": 124,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "future": [
                    "str",
                    "list",
                    "dict",
                    "float"
                ]
            }
        },
        "ReturnFutureTest.test_async_future": {
            "name": "test_async_future",
            "location": 128,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "future": [
                    "str",
                    "float",
                    "Tuple[float, float, float]",
                    "list",
                    "Dict[str, Union[Any, Any, bool, str]]"
                ],
                "future2": [
                    "str",
                    "Sized",
                    "List[int]",
                    "Tuple[int]",
                    "Set[str]",
                    "Dict[str, List[Any]]",
                    "list"
                ]
            }
        },
        "ReturnFutureTest.test_async_future_gen": {
            "name": "test_async_future_gen",
            "location": 137,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "result": []
            }
        },
        "ReturnFutureTest.test_delayed_failure": {
            "name": "test_delayed_failure",
            "location": 141,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "future": [
                    "int",
                    "Tuple[Literal, Literal]",
                    "Dict[str, Union[Any, Any, bool, str]]",
                    "Set[str]",
                    "concurrenfutures._base.Future[Any]",
                    "List[str]",
                    "set",
                    "Dict[int, str]"
                ],
                "future2": [
                    "str",
                    "Sized",
                    "List[int]",
                    "Tuple[int]",
                    "Set[str]",
                    "Dict[str, List[Any]]",
                    "list"
                ]
            }
        },
        "ReturnFutureTest.f": {
            "name": "f",
            "location": 205,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "ReturnFutureTest.test_kw_only_callback": {
            "name": "test_kw_only_callback",
            "location": 149,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "future": [
                    "list",
                    "Tuple[float, float]",
                    "List[\"Rule\"]",
                    "int",
                    "deque"
                ]
            }
        },
        "ReturnFutureTest.test_error_in_callback": {
            "name": "test_error_in_callback",
            "location": 156,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "ReturnFutureTest.test_no_result_future": {
            "name": "test_no_result_future",
            "location": 162,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "future": [
                    "int",
                    "Tuple[List[int], List[float]]",
                    "str"
                ],
                "result": [
                    "dict",
                    "bool"
                ]
            }
        },
        "ReturnFutureTest.test_no_result_future_callback": {
            "name": "test_no_result_future_callback",
            "location": 169,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "future": [
                    "str",
                    "bytes",
                    "bool",
                    "Pattern[str]",
                    "dict",
                    "Set[str]",
                    "Dict[str, str]",
                    "Dict[int, str]"
                ],
                "result": [
                    "dict",
                    "bool"
                ]
            }
        },
        "ReturnFutureTest.test_future_traceback": {
            "name": "test_future_traceback",
            "location": 176,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "tb": []
            }
        },
        "ReturnFutureTest.exc_handler": {
            "name": "exc_handler",
            "location": 199,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "context": [
                    "str",
                    "Exception",
                    "dict",
                    "logging.LogRecord"
                ],
                "kwargs": [],
                "loop": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "self": []
            },
            "variables": {}
        },
        "ReturnFutureTest.test_uncaught_exception_log": {
            "name": "test_uncaught_exception_log",
            "location": 195,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "g": [
                    "bool",
                    "dict",
                    "str",
                    "set",
                    "list",
                    "Type[str]",
                    "List[Tuple[str, Any, str]]",
                    "int"
                ]
            }
        },
        "CapServer.handle_stream": {
            "name": "handle_stream",
            "location": 228,
            "return": [
                ""
            ],
            "arguments": {
                "address": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "args": [],
                "kwargs": [],
                "self": [],
                "stream": [
                    "bytes",
                    "TextIO"
                ]
            },
            "variables": {
                "stream": [
                    "bytes",
                    "str",
                    "int"
                ]
            }
        },
        "CapServer.handle_read": {
            "name": "handle_read",
            "location": 233,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "data": [
                    "bytes",
                    "str",
                    "MutableMapping"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "data": [
                    "str",
                    "dict",
                    "Tuple[str, dict]"
                ]
            }
        },
        "BaseCapClient.__init__": {
            "name": "__init__",
            "location": 249,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "port": [
                    "int",
                    "bool",
                    "float"
                ],
                "self": []
            },
            "variables": {
                "port": [
                    "Dict[str, Dict[int, str]]",
                    "float",
                    "Dict[str, Any]",
                    "Dict[int, int]",
                    "dict",
                    "str",
                    "Dict[str, int]"
                ]
            }
        },
        "BaseCapClient.process_response": {
            "name": "process_response",
            "location": 252,
            "return": [
                "dict",
                "str",
                "Callable",
                "Callable[[None, None], bool]"
            ],
            "arguments": {
                "args": [],
                "data": [
                    "dict",
                    "list",
                    "Dict[str, Any]",
                    "int"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "message": [
                    "str",
                    "int",
                    "Dict[str, Union[Any, Any, Any, Any]]",
                    "List[str]"
                ],
                "status": [
                    "T",
                    "bytes",
                    "str",
                    "int",
                    "list"
                ]
            }
        },
        "ManualCapClient.capitalize": {
            "name": "capitalize",
            "location": 261,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "callback": [
                    "dict",
                    "List[Dict[str, Any]]",
                    "bytes",
                    "List[int]"
                ],
                "kwargs": [],
                "request_data": [
                    "Mapping[str, object]",
                    "dict"
                ],
                "self": []
            },
            "variables": {
                "future": [
                    "concurrenfutures._base.Future[Any]"
                ],
                "request_data": [
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "dict"
                ],
                "stream": [
                    "TextIO"
                ]
            }
        },
        "ManualCapClient.handle_connect": {
            "name": "handle_connect",
            "location": 273,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "ManualCapClient.handle_read": {
            "name": "handle_read",
            "location": 278,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "data": [
                    "dict",
                    "Mapping[str, Any]",
                    "List[str]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "DecoratorCapClient.capitalize": {
            "name": "capitalize",
            "location": 289,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "callback": [
                    "int",
                    "str",
                    "bytes"
                ],
                "kwargs": [],
                "request_data": [
                    "Mapping[str, object]",
                    "dict"
                ],
                "self": []
            },
            "variables": {
                "callback": [
                    "int",
                    "str"
                ],
                "request_data": [
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "dict"
                ],
                "stream": [
                    "TextIO"
                ]
            }
        },
        "DecoratorCapClient.handle_connect": {
            "name": "handle_connect",
            "location": 297,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "DecoratorCapClient.handle_read": {
            "name": "handle_read",
            "location": 302,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "data": [
                    "dict",
                    "List[str]",
                    "Dict[str, Any]",
                    "bytes",
                    "str"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "GeneratorCapClient.capitalize": {
            "name": "capitalize",
            "location": 311,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "callback": [
                    "dict",
                    "Dict[str, Any]",
                    "str",
                    "bytes"
                ],
                "kwargs": [],
                "request_data": [
                    "str",
                    "bytes",
                    "Dict[str, Any]"
                ],
                "self": []
            },
            "variables": {
                "data": [
                    "dict",
                    "Dict[str, Any]",
                    "Type[Dict[str, Any]]",
                    "Dict[str, Union[int, str]]",
                    "Dict[str, str]",
                    "Dict[int, List[str]]",
                    "str"
                ],
                "stream": []
            }
        },
        "ClientTestMixin.setUp": {
            "name": "setUp",
            "location": 325,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "client": [
                    "str",
                    "dict",
                    "Dict[str, Dict[str, Any]]",
                    "Dict[str, str]"
                ],
                "port": [
                    "str",
                    "int"
                ],
                "server": [
                    "str",
                    "dict",
                    "bool",
                    "Dict[str, str]",
                    "list"
                ],
                "sock": [
                    "str",
                    "int",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "ClientTestMixin.tearDown": {
            "name": "tearDown",
            "location": 332,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "ClientTestMixin.test_callback": {
            "name": "test_callback",
            "location": 336,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "result": [
                    "OrderedDict[str, str]"
                ]
            }
        },
        "ClientTestMixin.test_callback_error": {
            "name": "test_callback_error",
            "location": 341,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "ClientTestMixin.test_future": {
            "name": "test_future",
            "location": 345,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "future": [
                    "int",
                    "str"
                ]
            }
        },
        "ClientTestMixin.test_future_error": {
            "name": "test_future_error",
            "location": 351,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "future": [
                    "str",
                    "int",
                    "Dict[Type[Any], str]"
                ]
            }
        },
        "ClientTestMixin.f": {
            "name": "f",
            "location": 368,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "ClientTestMixin.test_generator": {
            "name": "test_generator",
            "location": 357,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "ClientTestMixin.test_generator_error": {
            "name": "test_generator_error",
            "location": 366,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Object.__init__": {
            "name": "__init__",
            "location": 421,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "__executor": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "Object.f": {
            "name": "f",
            "location": 425,
            "return": [
                "float",
                "int",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "RunOnExecutorTest.test_no_calling": {
            "name": "test_no_calling",
            "location": 391,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "answer": [
                    "list",
                    "Dict[str, Any]",
                    "List[str]"
                ],
                "o": [
                    "str",
                    "Tuple[int, int, int]",
                    "List[int]",
                    "Dict[str, int]",
                    "bytes",
                    "list"
                ]
            }
        },
        "RunOnExecutorTest.test_call_with_no_args": {
            "name": "test_call_with_no_args",
            "location": 405,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "answer": [
                    "list",
                    "Dict[str, Any]",
                    "List[str]"
                ],
                "o": [
                    "str",
                    "Tuple[int, int, int]",
                    "List[int]",
                    "Dict[str, int]",
                    "bytes",
                    "list"
                ]
            }
        },
        "RunOnExecutorTest.test_call_with_executor": {
            "name": "test_call_with_executor",
            "location": 419,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "answer": [
                    "list",
                    "Dict[str, Any]",
                    "List[str]"
                ],
                "o": [
                    "str",
                    "Tuple[int, int, int]",
                    "List[int]",
                    "Dict[str, int]",
                    "bytes",
                    "list"
                ]
            }
        },
        "global": {
            "futures": [
                "int",
                "TextIO"
            ]
        }
    },
    "tornado-5.0.2/tornado/test/escape_test.py": {
        "EscapeTestCase.test_linkify": {
            "name": "test_linkify",
            "location": 140,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "linked": [
                    "List[int]",
                    "List[Tuple[str, Any]]"
                ]
            }
        },
        "EscapeTestCase.test_xhtml_escape": {
            "name": "test_xhtml_escape",
            "location": 145,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "tests": [
                    "List[Union[Any, Any]]",
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]",
                    "str",
                    "List[Union[Any, Any, Any]]",
                    "bool"
                ]
            }
        },
        "EscapeTestCase.test_xhtml_unescape_numeric": {
            "name": "test_xhtml_unescape_numeric",
            "location": 161,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "tests": [
                    "List[Union[Any, Any]]",
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]",
                    "str",
                    "List[Union[Any, Any, Any]]",
                    "bool"
                ]
            }
        },
        "EscapeTestCase.test_url_escape_unicode": {
            "name": "test_url_escape_unicode",
            "location": 174,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "tests": [
                    "Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]",
                    "List[Tuple[str, str, str, str]]",
                    "str",
                    "Tuple[str, str]",
                    "List[Union[Any, Any]]"
                ]
            }
        },
        "EscapeTestCase.test_url_unescape_unicode": {
            "name": "test_url_unescape_unicode",
            "location": 186,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "tests": [
                    "Final",
                    "Type[Dict[str, Any]]",
                    "Tuple[Tuple[Literal, Literal, Literal]]",
                    "list",
                    "List[Tuple[Any, Any]]"
                ]
            }
        },
        "EscapeTestCase.test_url_escape_quote_plus": {
            "name": "test_url_escape_quote_plus",
            "location": 199,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "escaped": [
                    "list",
                    "str",
                    "int",
                    "float",
                    "List[Dict[str, Any]]",
                    "Dict[str, str]"
                ],
                "plus_escaped": [
                    "List[str]",
                    "Dict[str, int]"
                ],
                "unescaped": [
                    "Dict[str, int]",
                    "List[str]",
                    "list",
                    "List[int]"
                ]
            }
        },
        "EscapeTestCase.test_escape_return_types": {
            "name": "test_escape_return_types",
            "location": 212,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "EscapeTestCase.test_json_decode": {
            "name": "test_json_decode",
            "location": 218,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "EscapeTestCase.test_json_encode": {
            "name": "test_json_encode",
            "location": 227,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "EscapeTestCase.test_squeeze": {
            "name": "test_squeeze",
            "location": 236,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "EscapeTestCase.test_recursive_unicode": {
            "name": "test_recursive_unicode",
            "location": 240,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "tests": [
                    "list",
                    "List[Dict[str, Any]]",
                    "List[Type[Any]]",
                    "str",
                    "List[Tuple[str, Any]]"
                ]
            }
        },
        "global": {
            "linkify_tests": [
                "bool",
                "str",
                "List[str]",
                "List[Tuple[Any, Any]]",
                "Dict[str, Union[Any, Any, Any, Any, Any, Any, Any, Any, Any, Any]]",
                "List[Tuple[Any, Any, str]]",
                "int"
            ]
        }
    },
    "tornado-5.0.2/tornado/test/gen_test.py": {
        "GenEngineTest.setUp": {
            "name": "setUp",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "named_contexts": [
                    "str",
                    "Tuple[str]"
                ]
            }
        },
        "GenEngineTest.context": {
            "name": "context",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "GenEngineTest.named_context": {
            "name": "named_context",
            "location": 41,
            "return": [
                "Dict[str, Any]",
                "str",
                "int",
                "Iterator",
                "Container[str]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "name": [
                    "str",
                    "bool"
                ],
                "self": []
            },
            "variables": {}
        },
        "GenEngineTest.run_gen": {
            "name": "run_gen",
            "location": 51,
            "return": [
                "str",
                "int",
                "bool",
                "asyncio.events.AbstractEventLoop",
                "list"
            ],
            "arguments": {
                "args": [],
                "f": [
                    "Callable[[], None]",
                    "Callable"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "GenEngineTest.delay_callback": {
            "name": "delay_callback",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "arg": [
                    "asyncio.AbstractEventLoop",
                    "Dict[str, str]"
                ],
                "args": [],
                "callback": [
                    "asyncio.AbstractEventLoop",
                    "Dict[str, str]"
                ],
                "iterations": [
                    "dict",
                    "int"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "GenEngineTest.async_future": {
            "name": "async_future",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "callback": [
                    "int",
                    "bool",
                    "str"
                ],
                "kwargs": [],
                "result": [
                    "int",
                    "bool",
                    "str"
                ],
                "self": []
            },
            "variables": {}
        },
        "GenEngineTest.async_exception": {
            "name": "async_exception",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "e": [
                    "Exception",
                    "str",
                    "Callable",
                    "int"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "GenEngineTest.f": {
            "name": "f",
            "location": 647,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "arg": [
                    "str",
                    "property",
                    "int",
                    "Pattern[str]"
                ],
                "arg_ref": [
                    "int",
                    "str",
                    "list",
                    "float",
                    "Dict[str, int]"
                ],
                "task": [
                    "bytes",
                    "str"
                ],
                "task_ref": [
                    "Dict[str, str]",
                    "str",
                    "datetime.timedelta",
                    "int",
                    "Dict[str, int]",
                    "Final"
                ]
            }
        },
        "GenEngineTest.test_no_yield": {
            "name": "test_no_yield",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "GenEngineTest.test_inline_cb": {
            "name": "test_inline_cb",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "GenEngineTest.test_ioloop_cb": {
            "name": "test_ioloop_cb",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "GenEngineTest.test_exception_phase1": {
            "name": "test_exception_phase1",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "GenEngineTest.test_exception_phase2": {
            "name": "test_exception_phase2",
            "location": 101,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "GenEngineTest.fail_task": {
            "name": "fail_task",
            "location": 124,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "callback": [
                    "concurrenfutures.Future",
                    "T",
                    "bool",
                    "Awaitable[Any]",
                    "List[dict]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "GenEngineTest.test_exception_in_task_phase1": {
            "name": "test_exception_in_task_phase1",
            "location": 109,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "GenEngineTest.test_exception_in_task_phase2": {
            "name": "test_exception_in_task_phase2",
            "location": 122,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "GenEngineTest.test_with_arg": {
            "name": "test_with_arg",
            "location": 136,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "GenEngineTest.test_with_arg_tuple": {
            "name": "test_with_arg_tuple",
            "location": 145,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "GenEngineTest.test_key_reuse": {
            "name": "test_key_reuse",
            "location": 154,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "GenEngineTest.test_key_reuse_tuple": {
            "name": "test_key_reuse_tuple",
            "location": 162,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "GenEngineTest.test_key_mismatch": {
            "name": "test_key_mismatch",
            "location": 170,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "GenEngineTest.test_key_mismatch_tuple": {
            "name": "test_key_mismatch_tuple",
            "location": 178,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "GenEngineTest.test_leaked_callback": {
            "name": "test_leaked_callback",
            "location": 186,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "GenEngineTest.test_leaked_callback_tuple": {
            "name": "test_leaked_callback_tuple",
            "location": 193,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "GenEngineTest.test_parallel_callback": {
            "name": "test_parallel_callback",
            "location": 200,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "GenEngineTest.test_bogus_yield": {
            "name": "test_bogus_yield",
            "location": 213,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "GenEngineTest.test_bogus_yield_tuple": {
            "name": "test_bogus_yield_tuple",
            "location": 219,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "GenEngineTest.test_reuse": {
            "name": "test_reuse",
            "location": 225,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "GenEngineTest.test_task": {
            "name": "test_task",
            "location": 234,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "GenEngineTest.test_wait_all": {
            "name": "test_wait_all",
            "location": 241,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "GenEngineTest.test_exception_in_yield": {
            "name": "test_exception_in_yield",
            "location": 251,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "GenEngineTest.test_resume_after_exception_in_yield": {
            "name": "test_resume_after_exception_in_yield",
            "location": 262,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "GenEngineTest.test_orphaned_callback": {
            "name": "test_orphaned_callback",
            "location": 275,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "GenEngineTest.test_none": {
            "name": "test_none",
            "location": 286,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "GenEngineTest.test_multi": {
            "name": "test_multi",
            "location": 293,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "GenEngineTest.test_multi_dict": {
            "name": "test_multi_dict",
            "location": 303,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "GenEngineTest.test_multi_yieldpoint_delayed": {
            "name": "test_multi_yieldpoint_delayed",
            "location": 316,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "GenEngineTest.test_multi_yieldpoint_dict_delayed": {
            "name": "test_multi_yieldpoint_dict_delayed",
            "location": 328,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "GenEngineTest.test_multi_future_delayed": {
            "name": "test_multi_future_delayed",
            "location": 340,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "GenEngineTest.test_multi_future_dict_delayed": {
            "name": "test_multi_future_dict_delayed",
            "location": 352,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "GenEngineTest.test_multi_performance": {
            "name": "test_multi_performance",
            "location": 366,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "end": [
                    "int",
                    "Type[object]",
                    "List[str]"
                ],
                "start": [
                    "dict",
                    "platform.Any",
                    "set"
                ]
            }
        },
        "GenEngineTest.test_multi_empty": {
            "name": "test_multi_empty",
            "location": 376,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "x": [
                    "int",
                    "dict",
                    "List[float]",
                    "bytes",
                    "float"
                ],
                "y": [
                    "str",
                    "Dict[Any, str]"
                ]
            }
        },
        "GenEngineTest.test_multi_mixed_types": {
            "name": "test_multi_mixed_types",
            "location": 384,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "responses": [
                    "Dict[str, List[str]]"
                ]
            }
        },
        "GenEngineTest.test_future": {
            "name": "test_future",
            "location": 393,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "result": []
            }
        },
        "GenEngineTest.test_multi_future": {
            "name": "test_multi_future",
            "location": 398,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "results": [
                    "platform.Any",
                    "dict",
                    "OrderedDict[str, int]"
                ]
            }
        },
        "GenEngineTest.test_multi_future_duplicate": {
            "name": "test_multi_future_duplicate",
            "location": 403,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "f": [
                    "int",
                    "Dict[Any, int]",
                    "float",
                    "T",
                    "Dict[str, int]"
                ],
                "results": [
                    "platform.Any",
                    "list"
                ]
            }
        },
        "GenEngineTest.test_multi_dict_future": {
            "name": "test_multi_dict_future",
            "location": 409,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "results": [
                    "Dict[str, str]",
                    "str",
                    "List[str]"
                ]
            }
        },
        "GenEngineTest.test_multi_exceptions": {
            "name": "test_multi_exceptions",
            "location": 414,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "GenEngineTest.test_multi_future_exceptions": {
            "name": "test_multi_future_exceptions",
            "location": 433,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "GenEngineTest.task_func": {
            "name": "task_func",
            "location": 472,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "callback": [
                    "Optional[int]",
                    "str",
                    "asyncio.AbstractEventLoop",
                    "Optional[str]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "GenEngineTest.test_arguments": {
            "name": "test_arguments",
            "location": 452,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "GenEngineTest._stack_depth": {
            "name": "_stack_depth",
            "location": 484,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "head": [
                    "Tuple[Literal, Literal]",
                    "int"
                ],
                "length": [
                    "str",
                    "List[str]",
                    "int",
                    "Dict[str, List[Any]]",
                    "Tuple[str, str, str, str, str, str, str, str]"
                ]
            }
        },
        "GenEngineTest.inner": {
            "name": "inner",
            "location": 513,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "callback": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "GenEngineTest.outer": {
            "name": "outer",
            "location": 518,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "stack_increase": [
                    "str",
                    "int"
                ]
            }
        },
        "GenEngineTest.test_stack_context_leak": {
            "name": "test_stack_context_leak",
            "location": 481,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "initial_stack_depth": [
                    "int",
                    "dict",
                    "List[int]",
                    "List[List[int]]",
                    "Callable(functools.wraps)[[Named(wrapped, Callable[..., Any]), Named(assigned, Sequence[str], default), Named(updated, Sequence[str], default)], Callable[Any, Any]]",
                    "str",
                    "datetime.timedelta"
                ]
            }
        },
        "GenEngineTest.test_stack_context_leak_exception": {
            "name": "test_stack_context_leak_exception",
            "location": 510,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "initial_stack_depth": [
                    "List[int]",
                    "Set[str]",
                    "int",
                    "list",
                    "set"
                ]
            }
        },
        "GenEngineTest.step2": {
            "name": "step2",
            "location": 534,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "GenEngineTest.function_with_stack_context": {
            "name": "function_with_stack_context",
            "location": 530,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "callback": [
                    "int",
                    "Callable[[], None]",
                    "bool",
                    "str",
                    "dict"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "GenEngineTest.test_wait_transfer_stack_context": {
            "name": "test_wait_transfer_stack_context",
            "location": 542,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "cb": [
                    "list",
                    "Dict[str, Any]",
                    "Dict[str, Union[Any, Any, Any, Any, Any, Any, Any, Any]]",
                    "Dict[str, Dict[str, Any]]"
                ]
            }
        },
        "GenEngineTest.test_task_transfer_stack_context": {
            "name": "test_task_transfer_stack_context",
            "location": 552,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "GenEngineTest.test_raise_after_stop": {
            "name": "test_raise_after_stop",
            "location": 556,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "GenEngineTest.test_sync_raise_return": {
            "name": "test_sync_raise_return",
            "location": 567,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "result": []
            }
        },
        "GenEngineTest.test_async_raise_return": {
            "name": "test_async_raise_return",
            "location": 578,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "result": []
            }
        },
        "GenEngineTest.test_sync_raise_return_value": {
            "name": "test_sync_raise_return_value",
            "location": 588,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "GenEngineTest.test_sync_raise_return_value_tuple": {
            "name": "test_sync_raise_return_value_tuple",
            "location": 596,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "GenEngineTest.test_async_raise_return_value": {
            "name": "test_async_raise_return_value",
            "location": 604,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "GenEngineTest.test_async_raise_return_value_tuple": {
            "name": "test_async_raise_return_value_tuple",
            "location": 613,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "GenEngineTest.test_return_value": {
            "name": "test_return_value",
            "location": 622,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "GenEngineTest.test_return_value_tuple": {
            "name": "test_return_value_tuple",
            "location": 632,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "GenEngineTest.test_task_refcounting": {
            "name": "test_task_refcounting",
            "location": 643,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "GenCoroutineTest.setUp": {
            "name": "setUp",
            "location": 663,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "finished": [
                    "int",
                    "float"
                ]
            }
        },
        "GenCoroutineTest.tearDown": {
            "name": "tearDown",
            "location": 670,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "GenCoroutineTest.f": {
            "name": "f",
            "location": 1078,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "GenCoroutineTest.test_attributes": {
            "name": "test_attributes",
            "location": 674,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "coro": [
                    "str",
                    "Pattern[str]"
                ],
                "finished": [
                    "str",
                    "List[str]",
                    "int",
                    "Dict[str, List[Any]]",
                    "Tuple[str, str, str, str, str, str, str, str]"
                ]
            }
        },
        "GenCoroutineTest.test_is_coroutine_function": {
            "name": "test_is_coroutine_function",
            "location": 685,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "coro": [
                    "str",
                    "functools.partial[Any]"
                ],
                "finished": [
                    "str",
                    "List[str]",
                    "int",
                    "Dict[str, List[Any]]",
                    "Tuple[str, str, str, str, str, str, str, str]"
                ]
            }
        },
        "GenCoroutineTest.test_sync_gen_return": {
            "name": "test_sync_gen_return",
            "location": 697,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "finished": [
                    "str",
                    "bool"
                ],
                "result": [
                    "dict",
                    "Dict[str, Any]",
                    "Generator[Any, None, None]",
                    "list"
                ]
            }
        },
        "GenCoroutineTest.test_async_gen_return": {
            "name": "test_async_gen_return",
            "location": 706,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "finished": [
                    "str",
                    "bool"
                ],
                "result": [
                    "dict",
                    "Dict[str, Any]",
                    "Generator[Any, None, None]",
                    "list"
                ]
            }
        },
        "GenCoroutineTest.test_sync_return": {
            "name": "test_sync_return",
            "location": 716,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "finished": [
                    "str",
                    "bool"
                ],
                "result": [
                    "dict",
                    "Dict[str, Any]",
                    "Generator[Any, None, None]",
                    "list"
                ]
            }
        },
        "GenCoroutineTest.test_async_return": {
            "name": "test_async_return",
            "location": 726,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "finished": [
                    "str",
                    "bool"
                ],
                "namespace": [
                    "List[slice]"
                ],
                "result": [
                    "list",
                    "List[object]"
                ]
            }
        },
        "GenCoroutineTest.test_async_early_return": {
            "name": "test_async_early_return",
            "location": 739,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "finished": [
                    "str",
                    "bool"
                ],
                "namespace": [
                    "List[slice]"
                ],
                "result": [
                    "list",
                    "List[object]"
                ]
            }
        },
        "GenCoroutineTest.test_async_await": {
            "name": "test_async_await",
            "location": 756,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "finished": [
                    "str",
                    "bool"
                ],
                "namespace": [
                    "List[slice]"
                ],
                "result": [
                    "list",
                    "List[object]"
                ]
            }
        },
        "GenCoroutineTest.test_asyncio_sleep_zero": {
            "name": "test_asyncio_sleep_zero",
            "location": 771,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "finished": [
                    "str",
                    "bool"
                ],
                "namespace": [
                    "List[slice]"
                ],
                "result": [
                    "list",
                    "List[object]"
                ]
            }
        },
        "GenCoroutineTest.f2": {
            "name": "f2",
            "location": 955,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "GenCoroutineTest.test_async_await_mixed_multi_native_future": {
            "name": "test_async_await_mixed_multi_native_future",
            "location": 786,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "finished": [
                    "str",
                    "bool"
                ],
                "namespace": [],
                "results": [
                    "str",
                    "List[Callable[[], Any]]",
                    "Generator[Any, None, None]"
                ]
            }
        },
        "GenCoroutineTest.test_async_await_mixed_multi_native_yieldpoint": {
            "name": "test_async_await_mixed_multi_native_yieldpoint",
            "location": 804,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "finished": [
                    "str",
                    "bool"
                ],
                "namespace": [
                    "str"
                ],
                "results": [
                    "str",
                    "list"
                ]
            }
        },
        "GenCoroutineTest.test_async_with_timeout": {
            "name": "test_async_with_timeout",
            "location": 823,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "finished": [
                    "str",
                    "bool"
                ],
                "namespace": [
                    "web.clases.PerfilActividad"
                ],
                "result": [
                    "datetime.datetime",
                    "datetime.datetime.timedelta",
                    "datetime.timedelta"
                ]
            }
        },
        "GenCoroutineTest.test_sync_return_no_value": {
            "name": "test_sync_return_no_value",
            "location": 835,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "finished": [
                    "str",
                    "bool"
                ],
                "result": [
                    "list",
                    "List[frozenset[Any]]"
                ]
            }
        },
        "GenCoroutineTest.test_async_return_no_value": {
            "name": "test_async_return_no_value",
            "location": 844,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "finished": [
                    "str",
                    "bool"
                ],
                "result": [
                    "list",
                    "List[frozenset[Any]]"
                ]
            }
        },
        "GenCoroutineTest.test_sync_raise": {
            "name": "test_sync_raise",
            "location": 855,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "finished": [
                    "str",
                    "bool"
                ],
                "future": [
                    "bool",
                    "dict",
                    "str",
                    "set",
                    "list",
                    "Type[str]",
                    "List[Tuple[str, Any, str]]",
                    "int"
                ]
            }
        },
        "GenCoroutineTest.test_async_raise": {
            "name": "test_async_raise",
            "location": 868,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "finished": [
                    "str",
                    "bool"
                ],
                "future": [
                    "bool",
                    "dict",
                    "str",
                    "set",
                    "list",
                    "Type[str]",
                    "List[Tuple[str, Any, str]]",
                    "int"
                ]
            }
        },
        "GenCoroutineTest.test_pass_callback": {
            "name": "test_pass_callback",
            "location": 879,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "finished": [
                    "str",
                    "bool"
                ],
                "result": [
                    "list",
                    "List[None]",
                    "List[int]"
                ]
            }
        },
        "GenCoroutineTest.f1": {
            "name": "f1",
            "location": 912,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "GenCoroutineTest.test_replace_yieldpoint_exception": {
            "name": "test_replace_yieldpoint_exception",
            "location": 888,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "finished": [
                    "str",
                    "bool"
                ],
                "future": [
                    "bool",
                    "dict",
                    "str",
                    "set",
                    "list",
                    "Type[str]",
                    "List[Tuple[str, Any, str]]",
                    "int"
                ]
            }
        },
        "GenCoroutineTest.test_swallow_yieldpoint_exception": {
            "name": "test_swallow_yieldpoint_exception",
            "location": 908,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "finished": [
                    "str",
                    "bool"
                ],
                "result": [
                    "dict",
                    "Dict[str, Any]",
                    "Generator[Any, None, None]",
                    "list"
                ]
            }
        },
        "GenCoroutineTest.test_replace_context_exception": {
            "name": "test_replace_context_exception",
            "location": 927,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "finished": [
                    "str",
                    "bool"
                ],
                "future": [
                    "bool",
                    "dict",
                    "str",
                    "set",
                    "list",
                    "Type[str]",
                    "List[Tuple[str, Any, str]]",
                    "int"
                ]
            }
        },
        "GenCoroutineTest.test_swallow_context_exception": {
            "name": "test_swallow_context_exception",
            "location": 951,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "finished": [
                    "str",
                    "bool"
                ],
                "result": [
                    "dict",
                    "Dict[str, Any]",
                    "Generator[Any, None, None]",
                    "list"
                ]
            }
        },
        "GenCoroutineTest.test_moment": {
            "name": "test_moment",
            "location": 970,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "calls": [
                    "list"
                ],
                "finished": [
                    "str",
                    "bool"
                ],
                "immediate": [
                    "list",
                    "dict",
                    "Tuple[int, int, int]",
                    "asyncio.futures.Future[Any]",
                    "DefaultDict[str, List[Any]]",
                    "Iterator[Any]"
                ]
            }
        },
        "GenCoroutineTest.test_sleep": {
            "name": "test_sleep",
            "location": 996,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "finished": [
                    "str",
                    "bool"
                ]
            }
        },
        "GenCoroutineTest.inner": {
            "name": "inner",
            "location": 1031,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "local_ref": [
                    "int",
                    "str",
                    "list",
                    "float",
                    "Dict[str, int]"
                ],
                "local_var": [
                    "int",
                    "List[str]",
                    "dict",
                    "list"
                ]
            }
        },
        "GenCoroutineTest.test_py3_leak_exception_context": {
            "name": "test_py3_leak_exception_context",
            "location": 1002,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "finished": [
                    "str",
                    "bool"
                ]
            }
        },
        "GenCoroutineTest.inner2": {
            "name": "inner2",
            "location": 1040,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "GenCoroutineTest.test_coroutine_refcounting": {
            "name": "test_coroutine_refcounting",
            "location": 1027,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "finished": [
                    "str",
                    "bool"
                ]
            }
        },
        "GenCoroutineTest.test_asyncio_future_debug_info": {
            "name": "test_asyncio_future_debug_info",
            "location": 1053,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "actual": [
                    "Pattern[str]",
                    "Dict[str, Type]",
                    "tuple",
                    "list",
                    "float",
                    "str",
                    "int",
                    "OrderedDict[str, int]"
                ],
                "asyncio_loop": [
                    "str",
                    "List[str]",
                    "int",
                    "Dict[str, List[Any]]",
                    "Tuple[str, str, str, str, str, str, str, str]"
                ],
                "coro": [
                    "list",
                    "int"
                ],
                "expected": [
                    "tuple",
                    "str",
                    "list",
                    "List[str]"
                ],
                "finished": [
                    "str",
                    "List[str]",
                    "int",
                    "Dict[str, List[Any]]",
                    "Tuple[str, str, str, str, str, str, str, str]"
                ]
            }
        },
        "GenCoroutineTest.test_asyncio_gather": {
            "name": "test_asyncio_gather",
            "location": 1074,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "finished": [
                    "str",
                    "bool"
                ],
                "ret": [
                    "bytearray",
                    "bytes"
                ]
            }
        },
        "GenSequenceHandler.get": {
            "name": "get",
            "location": 1090,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "io_loop": [
                    "str"
                ]
            }
        },
        "GenCoroutineSequenceHandler.get": {
            "name": "get",
            "location": 1106,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "io_loop": [
                    "str"
                ]
            }
        },
        "GenCoroutineUnfinishedSequenceHandler.get": {
            "name": "get",
            "location": 1123,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "io_loop": [
                    "str"
                ]
            }
        },
        "GenTaskHandler.get": {
            "name": "get",
            "location": 1141,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "client": [
                    "dict"
                ],
                "response": []
            }
        },
        "GenExceptionHandler.get": {
            "name": "get",
            "location": 1151,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "io_loop": []
            }
        },
        "GenCoroutineExceptionHandler.get": {
            "name": "get",
            "location": 1160,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "io_loop": []
            }
        },
        "GenYieldExceptionHandler.fail_task": {
            "name": "fail_task",
            "location": 1174,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "callback": [
                    "concurrenfutures.Future",
                    "T",
                    "bool",
                    "Awaitable[Any]",
                    "List[dict]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "GenYieldExceptionHandler.get": {
            "name": "get",
            "location": 1170,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "io_loop": [
                    "str",
                    "bool",
                    "float",
                    "Dict[str, Union[dict, str]]"
                ]
            }
        },
        "UndecoratedCoroutinesHandler.prepare": {
            "name": "prepare",
            "location": 1186,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "chunks": [
                    "str",
                    "Set[str]",
                    "List[int]",
                    "int"
                ]
            }
        },
        "UndecoratedCoroutinesHandler.get": {
            "name": "get",
            "location": 1192,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "AsyncPrepareErrorHandler.prepare": {
            "name": "prepare",
            "location": 1202,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "AsyncPrepareErrorHandler.get": {
            "name": "get",
            "location": 1206,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "GenWebTest.get_app": {
            "name": "get_app",
            "location": 1220,
            "return": [
                "str",
                "Optional[str]",
                "datetime.datetime"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "GenWebTest.test_sequence_handler": {
            "name": "test_sequence_handler",
            "location": 1235,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "str",
                    "List[str]",
                    "Tuple[str]",
                    "Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]"
                ]
            }
        },
        "GenWebTest.test_coroutine_sequence_handler": {
            "name": "test_coroutine_sequence_handler",
            "location": 1239,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "str",
                    "List[str]",
                    "Tuple[str]",
                    "Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]"
                ]
            }
        },
        "GenWebTest.test_coroutine_unfinished_sequence_handler": {
            "name": "test_coroutine_unfinished_sequence_handler",
            "location": 1243,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "str",
                    "List[str]",
                    "Tuple[str]",
                    "Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]"
                ]
            }
        },
        "GenWebTest.test_task_handler": {
            "name": "test_task_handler",
            "location": 1247,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "Dict[str, str]",
                    "str",
                    "OrderedDict[str, int]",
                    "Dict[str, Tuple[int, int, int]]",
                    "Dict[str, Tuple[float, float]]",
                    "Dict[str, Tuple[int, int]]",
                    "Dict[str, int]"
                ]
            }
        },
        "GenWebTest.test_exception_handler": {
            "name": "test_exception_handler",
            "location": 1251,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "str",
                    "List[str]",
                    "Tuple[str]",
                    "Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]"
                ]
            }
        },
        "GenWebTest.test_coroutine_exception_handler": {
            "name": "test_coroutine_exception_handler",
            "location": 1257,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "str",
                    "List[str]",
                    "Tuple[str]",
                    "Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]"
                ]
            }
        },
        "GenWebTest.test_yield_exception_handler": {
            "name": "test_yield_exception_handler",
            "location": 1263,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "str",
                    "List[str]",
                    "Tuple[str]",
                    "Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]"
                ]
            }
        },
        "GenWebTest.test_undecorated_coroutines": {
            "name": "test_undecorated_coroutines",
            "location": 1267,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "str",
                    "List[str]",
                    "Tuple[str]",
                    "Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]"
                ]
            }
        },
        "GenWebTest.test_async_prepare_error_handler": {
            "name": "test_async_prepare_error_handler",
            "location": 1271,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "str",
                    "List[str]",
                    "Tuple[str]",
                    "Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]"
                ]
            }
        },
        "GenWebTest.test_native_coroutine_handler": {
            "name": "test_native_coroutine_handler",
            "location": 1276,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "list",
                    "Dict[str, Union[Any, Any]]"
                ]
            }
        },
        "WithTimeoutTest.test_timeout": {
            "name": "test_timeout",
            "location": 1284,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "WithTimeoutTest.test_completes_before_timeout": {
            "name": "test_completes_before_timeout",
            "location": 1290,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "future": [
                    "List[int]"
                ],
                "result": [
                    "datetime.timedelta",
                    "datetime.datetime.timedelta",
                    "datetime.date.time.datetime"
                ]
            }
        },
        "WithTimeoutTest.test_fails_before_timeout": {
            "name": "test_fails_before_timeout",
            "location": 1299,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "future": [
                    "List[int]"
                ]
            }
        },
        "WithTimeoutTest.test_already_resolved": {
            "name": "test_already_resolved",
            "location": 1309,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "future": [
                    "str",
                    "List[Tuple[str, int]]",
                    "int",
                    "dict",
                    "list"
                ],
                "result": [
                    "datetime.timedelta",
                    "datetime.datetime.timedelta",
                    "datetime.date.time.datetime"
                ]
            }
        },
        "WithTimeoutTest.test_timeout_concurrent_future": {
            "name": "test_timeout_concurrent_future",
            "location": 1318,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "WithTimeoutTest.test_completed_concurrent_future": {
            "name": "test_completed_concurrent_future",
            "location": 1327,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "f": [
                    "str",
                    "Pattern[str]",
                    "Dict[str, Union[Any, Any, Any, Any]]",
                    "ImportError"
                ]
            }
        },
        "WithTimeoutTest.test_normal_concurrent_future": {
            "name": "test_normal_concurrent_future",
            "location": 1337,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "WaitIteratorTest.test_empty_iterator": {
            "name": "test_empty_iterator",
            "location": 1346,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "g": [
                    "List[int]"
                ]
            }
        },
        "WaitIteratorTest.test_already_done": {
            "name": "test_already_done",
            "location": 1357,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "dg": [
                    "str",
                    "Counter",
                    "Tuple[str, int]",
                    "int"
                ],
                "dr": [
                    "Tuple[str, int]"
                ],
                "f1": [
                    "functools.partial[Any]",
                    "Tuple[Any, Any]",
                    "list",
                    "Set[Tuple[Any, Any, Any]]"
                ],
                "f2": [
                    "functools.partial[Any]",
                    "Tuple[Any, Any]",
                    "list",
                    "Set[Tuple[Any, Any, Any]]"
                ],
                "f3": [
                    "weakref.WeakKeyDictionary[Any, Any]",
                    "functools.partial[Any]",
                    "Tuple[Any, Any]",
                    "list"
                ],
                "g": [
                    "Callable(chr)[[int], str]",
                    "Tuple[str, int]",
                    "Set[str]"
                ],
                "i": [
                    "int",
                    "float",
                    "str"
                ],
                "r": [
                    "Counter[Any]",
                    "functools.partial[Any]"
                ]
            }
        },
        "WaitIteratorTest.finish_coroutines": {
            "name": "finish_coroutines",
            "location": 1407,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "futures": [
                    "bool",
                    "str"
                ],
                "iteration": [
                    "dict",
                    "int"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "WaitIteratorTest.test_iterator": {
            "name": "test_iterator",
            "location": 1420,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "futures": [
                    "Set[Hashable]"
                ],
                "g": [
                    "list",
                    "tuple",
                    "Dict[str, int]",
                    "Pattern[str]",
                    "OrderedDict[str, int]"
                ],
                "i": [
                    "int",
                    "float",
                    "str"
                ],
                "r": [
                    "Counter[Any]",
                    "functools.partial[Any]"
                ]
            }
        },
        "WaitIteratorTest.test_iterator_async_await": {
            "name": "test_iterator_async_await",
            "location": 1448,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "finished": [
                    "str",
                    "int",
                    "float",
                    "Final"
                ],
                "futures": [
                    "Set[Hashable]"
                ],
                "namespace": [
                    "int",
                    "dict",
                    "List[int]",
                    "List[List[int]]",
                    "Callable(functools.wraps)[[Named(wrapped, Callable[..., Any]), Named(assigned, Sequence[str], default), Named(updated, Sequence[str], default)], Callable[Any, Any]]",
                    "str",
                    "datetime.timedelta"
                ]
            }
        },
        "WaitIteratorTest.test_no_ref": {
            "name": "test_no_ref",
            "location": 1486,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "RunnerGCTest.is_pypy3": {
            "name": "is_pypy3",
            "location": 1496,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "RunnerGCTest.callback": {
            "name": "callback",
            "location": 1506,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "RunnerGCTest.tester": {
            "name": "tester",
            "location": 1511,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "fut": [
                    "int",
                    "Tuple[int, int, int, int]",
                    "Callable(chr)[[int], str]",
                    "List[int]",
                    "float"
                ]
            }
        },
        "RunnerGCTest.test_gc": {
            "name": "test_gc",
            "location": 1501,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "weakref_scope": [
                    "str",
                    "List[str]",
                    "int",
                    "Dict[str, List[Any]]",
                    "Tuple[str, str, str, str, str, str, str, str]"
                ]
            }
        },
        "RunnerGCTest.infinite_coro": {
            "name": "infinite_coro",
            "location": 1534,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "RunnerGCTest.do_something": {
            "name": "do_something",
            "location": 1583,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_refcycle": [
                    "int",
                    "dict",
                    "List[int]",
                    "List[List[int]]",
                    "Callable(functools.wraps)[[Named(wrapped, Callable[..., Any]), Named(assigned, Sequence[str], default), Named(updated, Sequence[str], default)], Callable[Any, Any]]",
                    "str",
                    "datetime.timedelta"
                ],
                "fut": [
                    "weakref.WeakKeyDictionary[Any, Any]"
                ]
            }
        },
        "RunnerGCTest.test_gc_infinite_coro": {
            "name": "test_gc_infinite_coro",
            "location": 1522,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "loop": [
                    "asyncio.events.AbstractEventLoop"
                ],
                "result": [
                    "list",
                    "bytes",
                    "dict",
                    "List[int]"
                ],
                "wfut": [
                    "bytes",
                    "dict"
                ]
            }
        },
        "RunnerGCTest.test_gc_infinite_async_await": {
            "name": "test_gc_infinite_async_await",
            "location": 1562,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "infinite_coro": [
                    "str",
                    "List[str]",
                    "int",
                    "Dict[str, List[Any]]",
                    "Tuple[str, str, str, str, str, str, str, str]"
                ],
                "loop": [
                    "asyncio.events.AbstractEventLoop"
                ],
                "namespace": [
                    "str",
                    "List[str]",
                    "int",
                    "Dict[str, List[Any]]",
                    "Tuple[str, str, str, str, str, str, str, str]"
                ],
                "result": [
                    "list",
                    "bytes",
                    "dict",
                    "List[int]"
                ],
                "wfut": [
                    "bytes",
                    "dict"
                ]
            }
        },
        "RunnerGCTest.wait_a_moment": {
            "name": "wait_a_moment",
            "location": 1605,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "result": [
                    "list"
                ]
            }
        },
        "RunnerGCTest.test_multi_moment": {
            "name": "test_multi_moment",
            "location": 1601,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "loop": [
                    "asyncio.events.AbstractEventLoop",
                    "list",
                    "str",
                    "List[List[str]]"
                ],
                "result": [
                    "dict",
                    "bool",
                    "Optional[str]",
                    "asyncio.tasks.Task[None]",
                    "List[List[str]]"
                ]
            }
        },
        "global": {
            "asyncio": [
                "int",
                "float"
            ],
            "futures": [
                "str",
                "Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]",
                "functools.partial[Any]"
            ]
        }
    },
    "tornado-5.0.2/tornado/test/http1connection_test.py": {
        "Delegate.headers_received": {
            "name": "headers_received",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "headers": [
                    "tornado.httputil.HTTPHeaders",
                    "bytes",
                    "str"
                ],
                "kwargs": [],
                "self": [],
                "start_line": [
                    "bytes",
                    "Dict[\"core.Edge\", \"state.State\"]",
                    "List[dict]",
                    "Optional[int]"
                ]
            },
            "variables": {
                "code": [
                    "str",
                    "int",
                    "list",
                    "Set[int]",
                    "Dict[str, str]"
                ]
            }
        },
        "Delegate.data_received": {
            "name": "data_received",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "data": [
                    "Mapping[str, Any]",
                    "dict",
                    "Dict[str, Any]",
                    "float",
                    "List[List[Any]]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Delegate.finish": {
            "name": "finish",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "HTTP1ConnectionTest.setUp": {
            "name": "setUp",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "HTTP1ConnectionTest.accept_callback": {
            "name": "accept_callback",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "addr": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "args": [],
                "conn": [
                    "int",
                    "Callable",
                    "str"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "server_stream": [
                    "List[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "HTTP1ConnectionTest.asyncSetUp": {
            "name": "asyncSetUp",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "client_stream": [],
                "event": [
                    "str"
                ],
                "listener": [
                    "List[bool]",
                    "str",
                    "list",
                    "dict"
                ],
                "port": [
                    "int",
                    "Dict[str, Dict[str, int]]",
                    "List[Dict[str, Any]]",
                    "dict",
                    "tuple"
                ]
            }
        },
        "HTTP1ConnectionTest.test_http10_no_content_length": {
            "name": "test_http10_no_content_length",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "body": [
                    "List[str]",
                    "list"
                ],
                "conn": [
                    "dict",
                    "str",
                    "Dict[str, Any]",
                    "Dict[str, Dict[str, Any]]"
                ],
                "event": [
                    "asyncio.locks.Event",
                    "list",
                    "dict"
                ],
                "test": [
                    "List[Union[Any, Any]]",
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]",
                    "str",
                    "List[Union[Any, Any, Any]]",
                    "bool"
                ]
            }
        },
        "global": {}
    },
    "tornado-5.0.2/tornado/test/httpclient_test.py": {
        "HelloWorldHandler.get": {
            "name": "get",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "name": [
                    "str"
                ]
            }
        },
        "PostHandler.post": {
            "name": "post",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "PutHandler.put": {
            "name": "put",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "RedirectHandler.prepare": {
            "name": "prepare",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "ChunkHandler.get": {
            "name": "get",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "AuthHandler.get": {
            "name": "get",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "CountdownHandler.get": {
            "name": "get",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "count": [
                    "str",
                    "dict",
                    "bool",
                    "int"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "count": [
                    "Dict[str, str]",
                    "str",
                    "DefaultDict[Any, List]",
                    "bytes",
                    "Dict[Any, Dict[str, Any]]",
                    "Pattern[str]",
                    "Dict[str, Union[Any, Any, Any]]"
                ]
            }
        },
        "EchoPostHandler.post": {
            "name": "post",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "UserAgentHandler.get": {
            "name": "get",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "ContentLength304Handler.get": {
            "name": "get",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "ContentLength304Handler._clear_headers_for_304": {
            "name": "_clear_headers_for_304",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "PatchHandler.patch": {
            "name": "patch",
            "location": 101,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "AllMethodsHandler.method": {
            "name": "method",
            "location": 109,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "SetHeaderHandler.get": {
            "name": "get",
            "location": 116,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "HTTPClientCommonTestCase.get_app": {
            "name": "get_app",
            "location": 129,
            "return": [
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "HTTPClientCommonTestCase.test_patch_receives_payload": {
            "name": "test_patch_receives_payload",
            "location": 146,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "body": [
                    "Dict[str, Any]",
                    "Set[str]",
                    "bytes",
                    "List[str]",
                    "str",
                    "Dict[str, str]",
                    "Dict[str, Union[str, Any]]"
                ],
                "response": [
                    "Dict[str, str]",
                    "dict",
                    "Dict[str, List[str]]",
                    "Dict[Any, str]",
                    "Dict[str, Union[Any, Any, Any, Any, Any, Any, Any]]"
                ]
            }
        },
        "HTTPClientCommonTestCase.test_hello_world": {
            "name": "test_hello_world",
            "location": 153,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "Dict[str, Any]",
                    "Dict[str, Literal]",
                    "Dict[str, None]",
                    "dict"
                ]
            }
        },
        "HTTPClientCommonTestCase.test_streaming_callback": {
            "name": "test_streaming_callback",
            "location": 163,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "chunks": [
                    "list",
                    "List[str]",
                    "Pattern[str]",
                    "str"
                ],
                "response": [
                    "list",
                    "dict"
                ]
            }
        },
        "HTTPClientCommonTestCase.test_post": {
            "name": "test_post",
            "location": 172,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "Dict[str, str]",
                    "Dict[str, Dict[str, Any]]",
                    "Dict[str, Union[bytes, str]]",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "HTTPClientCommonTestCase.test_chunked": {
            "name": "test_chunked",
            "location": 178,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "chunks": [
                    "list",
                    "List[str]",
                    "Pattern[str]",
                    "str"
                ],
                "response": [
                    "list",
                    "Iterator[Any]",
                    "str",
                    "bytes",
                    "Dict[str, str]",
                    "Dict[Any, List[Any]]"
                ]
            }
        },
        "HTTPClientCommonTestCase.write_response": {
            "name": "write_response",
            "location": 388,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "request_data": [
                    "dict",
                    "Optional[IO[bytes]]",
                    "str",
                    "Optional[List[Dict]]",
                    "Dict[str, str]",
                    "List[bytes]"
                ],
                "self": [],
                "stream": [
                    "str",
                    "bytes",
                    "Optional[str]",
                    "bool",
                    "BinaryIO"
                ]
            },
            "variables": {}
        },
        "HTTPClientCommonTestCase.accept_callback": {
            "name": "accept_callback",
            "location": 398,
            "return": [
                ""
            ],
            "arguments": {
                "address": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "args": [],
                "conn": [
                    "int",
                    "Callable",
                    "str"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "stream": [
                    "Dict[Any, float]"
                ]
            }
        },
        "HTTPClientCommonTestCase.test_chunked_close": {
            "name": "test_chunked_close",
            "location": 188,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "port": [
                    "int",
                    "float"
                ],
                "resp": [
                    "str",
                    "bytes",
                    "List[str]",
                    "Dict[str, str]",
                    "DefaultDict[str, int]",
                    "Callable(hash)[[object], int]",
                    "Pattern[str]"
                ],
                "sock": [
                    "str",
                    "bytes",
                    "threading.Semaphore",
                    "Tuple[Literal, Literal]"
                ]
            }
        },
        "HTTPClientCommonTestCase.error_handler": {
            "name": "error_handler",
            "location": 343,
            "return": [
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "tb": [
                    "list",
                    "\"Frame\"",
                    "Optional['Frame']",
                    "bool",
                    "dict",
                    "str"
                ],
                "typ": [
                    "list",
                    "\"Frame\"",
                    "Optional['Frame']",
                    "bool",
                    "dict",
                    "str"
                ],
                "value": [
                    "list",
                    "\"Frame\"",
                    "Optional['Frame']",
                    "bool",
                    "dict",
                    "str"
                ]
            },
            "variables": {}
        },
        "HTTPClientCommonTestCase.streaming_cb": {
            "name": "streaming_cb",
            "location": 229,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "chunk": [
                    "int",
                    "str",
                    "T"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "HTTPClientCommonTestCase.test_streaming_stack_context": {
            "name": "test_streaming_stack_context",
            "location": 221,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "chunks": [
                    "list",
                    "Dict[str, object]",
                    "int",
                    "dict",
                    "str"
                ],
                "exc_info": [
                    "list",
                    "List[str]",
                    "tuple"
                ]
            }
        },
        "HTTPClientCommonTestCase.test_basic_auth": {
            "name": "test_basic_auth",
            "location": 241,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "HTTPClientCommonTestCase.test_basic_auth_explicit_mode": {
            "name": "test_basic_auth_explicit_mode",
            "location": 246,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "HTTPClientCommonTestCase.test_unsupported_auth_mode": {
            "name": "test_unsupported_auth_mode",
            "location": 252,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "dict",
                    "Dict[str, str]",
                    "bytes",
                    "Dict[int, Union[Any, Any]]",
                    "Dict[int, str]"
                ]
            }
        },
        "HTTPClientCommonTestCase.test_follow_redirect": {
            "name": "test_follow_redirect",
            "location": 263,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "HTTPClientCommonTestCase.test_credentials_in_url": {
            "name": "test_credentials_in_url",
            "location": 273,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "bytes",
                    "str"
                ],
                "url": [
                    "str",
                    "functools.partial[Any]"
                ]
            }
        },
        "HTTPClientCommonTestCase.test_body_encoding": {
            "name": "test_body_encoding",
            "location": 280,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "byte_body": [],
                "response": [
                    "Dict[str, str]",
                    "Dict[str, List[str]]",
                    "str",
                    "Generator[Any, None, None]",
                    "Dict[str, Any]"
                ],
                "unicode_body": [
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "bytes",
                    "str",
                    "Dict[int, Type[Any]]",
                    "List[str]"
                ]
            }
        },
        "HTTPClientCommonTestCase.test_types": {
            "name": "test_types",
            "location": 305,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "bytes",
                    "str"
                ]
            }
        },
        "HTTPClientCommonTestCase.header_callback": {
            "name": "header_callback",
            "location": 347,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "header_line": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "dict"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "HTTPClientCommonTestCase.streaming_callback": {
            "name": "streaming_callback",
            "location": 327,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "chunk": [
                    "int",
                    "str",
                    "T"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "HTTPClientCommonTestCase.test_header_callback": {
            "name": "test_header_callback",
            "location": 312,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "chunks": [
                    "list",
                    "Dict[str, object]",
                    "int",
                    "dict",
                    "str"
                ],
                "first_line": [
                    "list",
                    "str"
                ],
                "headers": [
                    "Mapping[str, str]",
                    "List[Tuple[str, str, str]]",
                    "list",
                    "Callable[[str], Tuple[str, str]]",
                    "property"
                ]
            }
        },
        "HTTPClientCommonTestCase.test_header_callback_stack_context": {
            "name": "test_header_callback_stack_context",
            "location": 340,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "exc_info": [
                    "list",
                    "List[str]",
                    "tuple"
                ]
            }
        },
        "HTTPClientCommonTestCase.test_configure_defaults": {
            "name": "test_configure_defaults",
            "location": 356,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "client": [
                    "str"
                ],
                "defaults": [
                    "str"
                ],
                "response": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "HTTPClientCommonTestCase.test_header_types": {
            "name": "test_header_types",
            "location": 368,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "headers": [
                    "Dict[str, str]",
                    "str",
                    "tuple"
                ],
                "resp": [
                    "Dict[Any, str]",
                    "Dict[str, bool]",
                    "int"
                ]
            }
        },
        "HTTPClientCommonTestCase.test_multi_line_headers": {
            "name": "test_multi_line_headers",
            "location": 383,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "port": [
                    "int",
                    "float"
                ],
                "resp": [
                    "Dict[str, str]",
                    "bytes",
                    "List[str]",
                    "Dict[str, list]",
                    "Callable(hash)[[object], int]",
                    "DefaultDict[str, int]"
                ],
                "sock": [
                    "str",
                    "bytes",
                    "threading.Semaphore",
                    "Tuple[Literal, Literal]"
                ]
            }
        },
        "HTTPClientCommonTestCase.test_304_with_content_length": {
            "name": "test_304_with_content_length",
            "location": 409,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "list",
                    "Dict[str, Union[Any, Any]]"
                ]
            }
        },
        "HTTPClientCommonTestCase.handle_callback_exception": {
            "name": "handle_callback_exception",
            "location": 429,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "callback": [
                    "int",
                    "str",
                    "Optional"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "HTTPClientCommonTestCase.test_final_callback_stack_context": {
            "name": "test_final_callback_stack_context",
            "location": 418,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "exc_info": [
                    "list",
                    "List[int]",
                    "int",
                    "Set[str]",
                    "List[List[int]]"
                ]
            }
        },
        "HTTPClientCommonTestCase.test_future_interface": {
            "name": "test_future_interface",
            "location": 440,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "str",
                    "bytes",
                    "dict"
                ]
            }
        },
        "HTTPClientCommonTestCase.test_future_http_error": {
            "name": "test_future_http_error",
            "location": 445,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "HTTPClientCommonTestCase.test_future_http_error_no_raise": {
            "name": "test_future_http_error_no_raise",
            "location": 452,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "HTTPClientCommonTestCase.test_reuse_request_from_response": {
            "name": "test_reuse_request_from_response",
            "location": 457,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [],
                "response2": [],
                "url": [
                    "str",
                    "Dict[str, str]",
                    "dict",
                    "Union[Literal, str]"
                ]
            }
        },
        "HTTPClientCommonTestCase.test_all_methods": {
            "name": "test_all_methods",
            "location": 469,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "Dict[str, str]"
                ]
            }
        },
        "HTTPClientCommonTestCase.test_body_sanity_checks": {
            "name": "test_body_sanity_checks",
            "location": 482,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "resp": [
                    "Dict[str, str]",
                    "dict",
                    "str"
                ]
            }
        },
        "HTTPClientCommonTestCase.test_put_307": {
            "name": "test_put_307",
            "location": 525,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "str"
                ]
            }
        },
        "HTTPClientCommonTestCase.test_non_ascii_header": {
            "name": "test_non_ascii_header",
            "location": 531,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "bytes",
                    "list",
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "RequestProxyTest.test_request_set": {
            "name": "test_request_set",
            "location": 539,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "proxy": []
            }
        },
        "RequestProxyTest.test_default_set": {
            "name": "test_default_set",
            "location": 545,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "proxy": [
                    "str"
                ]
            }
        },
        "RequestProxyTest.test_both_set": {
            "name": "test_both_set",
            "location": 550,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "proxy": [
                    "int"
                ]
            }
        },
        "RequestProxyTest.test_neither_set": {
            "name": "test_neither_set",
            "location": 556,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "proxy": [
                    "Dict[str, Union[float, str]]",
                    "Dict[str, Union[Any, Any, Any]]",
                    "Dict[str, str]",
                    "dict"
                ]
            }
        },
        "RequestProxyTest.test_bad_attribute": {
            "name": "test_bad_attribute",
            "location": 561,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "proxy": [
                    "dict",
                    "Dict[str, str]",
                    "str",
                    "list"
                ]
            }
        },
        "RequestProxyTest.test_defaults_none": {
            "name": "test_defaults_none",
            "location": 567,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "proxy": [
                    "bytes",
                    "Type[str]",
                    "str"
                ]
            }
        },
        "HTTPResponseTestCase.test_str": {
            "name": "test_str",
            "location": 573,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [],
                "s": [
                    "str"
                ]
            }
        },
        "SyncHTTPClientTest.init_server": {
            "name": "init_server",
            "location": 591,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "app": [
                    "aiohttp.web_app.Application"
                ],
                "port": [
                    "int",
                    "float",
                    "Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]",
                    "Final"
                ],
                "server": [
                    "int",
                    "str",
                    "list"
                ],
                "sock": [
                    "str",
                    "int"
                ]
            }
        },
        "SyncHTTPClientTest.setUp": {
            "name": "setUp",
            "location": 582,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "http_client": [
                    "str",
                    "set"
                ],
                "server_ioloop": [
                    "str",
                    "int",
                    "io.TextIOWrapper"
                ],
                "server_thread": [
                    "threading.Timer",
                    "Tuple[Union[int, str]]",
                    "threading.Semaphore"
                ]
            }
        },
        "SyncHTTPClientTest.slow_stop": {
            "name": "slow_stop",
            "location": 612,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "SyncHTTPClientTest.stop_server": {
            "name": "stop_server",
            "location": 604,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "SyncHTTPClientTest.tearDown": {
            "name": "tearDown",
            "location": 603,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "SyncHTTPClientTest.get_url": {
            "name": "get_url",
            "location": 624,
            "return": [
                "str",
                "dict",
                "List[List[str]]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "path": [
                    "str"
                ],
                "self": []
            },
            "variables": {}
        },
        "SyncHTTPClientTest.test_sync_client": {
            "name": "test_sync_client",
            "location": 627,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "str",
                    "bytes",
                    "dict"
                ]
            }
        },
        "SyncHTTPClientTest.test_sync_client_error": {
            "name": "test_sync_client_error",
            "location": 631,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "HTTPRequestTestCase.test_headers": {
            "name": "test_headers",
            "location": 640,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "request": []
            }
        },
        "HTTPRequestTestCase.test_headers_setter": {
            "name": "test_headers_setter",
            "location": 644,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "headers": [
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ],
                "request": []
            }
        },
        "HTTPRequestTestCase.test_null_headers_setter": {
            "name": "test_null_headers_setter",
            "location": 649,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "headers": [
                    "List[str]",
                    "Tuple[str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str]",
                    "Dict[str, bool]",
                    "Dict[Any, Dict[str, int]]",
                    "Dict[str, Dict[str, str]]",
                    "bytes",
                    "tuple",
                    "Dict[Tuple[str, ...], str]"
                ],
                "request": []
            }
        },
        "HTTPRequestTestCase.test_body": {
            "name": "test_body",
            "location": 654,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "request": [
                    "list"
                ]
            }
        },
        "HTTPRequestTestCase.test_body_setter": {
            "name": "test_body_setter",
            "location": 658,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "body": [
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "Dict[float, str]",
                    "Dict[str, Tuple[str]]",
                    "Dict[str, Union[str, Any]]",
                    "str",
                    "Dict[str, List[str]]"
                ],
                "request": []
            }
        },
        "HTTPRequestTestCase.test_if_modified_since": {
            "name": "test_if_modified_since",
            "location": 663,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "http_date": [
                    "datetime.datetime",
                    "datetime.date",
                    "datetime.datetime.datetime",
                    "datetime.datetime.date",
                    "datetime"
                ],
                "request": [
                    "list"
                ]
            }
        },
        "HTTPErrorTestCase.test_copy": {
            "name": "test_copy",
            "location": 671,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "e": [
                    "Dict[str, str]"
                ],
                "e2": [
                    "float"
                ]
            }
        },
        "HTTPErrorTestCase.test_plain_error": {
            "name": "test_plain_error",
            "location": 677,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "e": [
                    "bytes",
                    "threading.Event",
                    "io.TextIOWrapper",
                    "dict"
                ]
            }
        },
        "HTTPErrorTestCase.test_error_with_response": {
            "name": "test_error_with_response",
            "location": 682,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "e": [
                    "Generator[Any, None, None]"
                ],
                "resp": [
                    "Dict[str, str]",
                    "dict",
                    "Dict[str, Dict[str, Any]]",
                    "Dict[int, str]",
                    "Type[Callable[..., Any]]",
                    "Dict[str, Optional[str]]"
                ]
            }
        },
        "global": {}
    },
    "tornado-5.0.2/tornado/test/httpserver_test.py": {
        "read_stream_body": {
            "name": "read_stream_body",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "callback": [
                    "str",
                    "bool"
                ],
                "kwargs": [],
                "stream": [
                    "str",
                    "TextIO",
                    "Dict[str, Any]"
                ]
            },
            "variables": {
                "chunks": [
                    "str",
                    "List[str]",
                    "int",
                    "Dict[str, List[Any]]",
                    "Tuple[str, str, str, str, str, str, str, str]"
                ],
                "conn": [
                    "str",
                    "int",
                    "Dict[str, Union[Any, Any]]",
                    "List[int]",
                    "Dict[str, Any]"
                ]
            }
        },
        "Delegate.headers_received": {
            "name": "headers_received",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "headers": [
                    "str",
                    "Dict[\"core.Edge\", \"state.State\"]"
                ],
                "kwargs": [],
                "self": [],
                "start_line": [
                    "int",
                    "List[Optional[str]]",
                    "bool",
                    "datetime.tzinfo",
                    "Dict[str, Any]"
                ]
            },
            "variables": {
                "headers": [
                    "str",
                    "dict",
                    "Set[str]",
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ],
                "start_line": [
                    "int",
                    "float"
                ]
            }
        },
        "Delegate.data_received": {
            "name": "data_received",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "chunk": [
                    "int",
                    "str"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Delegate.finish": {
            "name": "finish",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "HandlerBaseTestCase.get_app": {
            "name": "get_app",
            "location": 50,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "HandlerBaseTestCase.fetch_json": {
            "name": "fetch_json",
            "location": 53,
            "return": [
                "str",
                "Optional[str]",
                "Dict[str, Any]",
                "Dict[str, dict]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "str"
                ]
            }
        },
        "HelloWorldRequestHandler.initialize": {
            "name": "initialize",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "protocol": [
                    "int",
                    "bool",
                    "AsyncGenerator",
                    "Coroutine",
                    "Pattern"
                ],
                "self": []
            },
            "variables": {
                "expected_protocol": [
                    "int",
                    "str",
                    "util.IDM",
                    "bytes"
                ]
            }
        },
        "HelloWorldRequestHandler.get": {
            "name": "get",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "HelloWorldRequestHandler.post": {
            "name": "post",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "BaseSSLTest.get_app": {
            "name": "get_app",
            "location": 83,
            "return": [
                "str",
                "Dict[str, Any]",
                "Dict[str, str]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "SSLTestMixin.get_ssl_options": {
            "name": "get_ssl_options",
            "location": 89,
            "return": [
                "Optional[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "SSLTestMixin.get_ssl_version": {
            "name": "get_ssl_version",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "SSLTestMixin.test_ssl": {
            "name": "test_ssl",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "str",
                    "List[str]",
                    "Tuple[str]",
                    "Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]"
                ]
            }
        },
        "SSLTestMixin.test_large_post": {
            "name": "test_large_post",
            "location": 100,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "Dict[str, str]",
                    "bytes",
                    "list",
                    "Dict[str, Dict[str, Any]]"
                ]
            }
        },
        "SSLTestMixin.test_non_ssl_request": {
            "name": "test_non_ssl_request",
            "location": 106,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "SSLTestMixin.test_error_logging": {
            "name": "test_error_logging",
            "location": 120,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "SSLv23Test.get_ssl_version": {
            "name": "get_ssl_version",
            "location": 137,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "SSLv3Test.get_ssl_version": {
            "name": "get_ssl_version",
            "location": 143,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TLSv1Test.get_ssl_version": {
            "name": "get_ssl_version",
            "location": 149,
            "return": [
                "list",
                "Callable",
                "str",
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "SSLContextTest.get_ssl_options": {
            "name": "get_ssl_options",
            "location": 154,
            "return": [
                "list",
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "context": [
                    "ssl.SSLContext"
                ]
            }
        },
        "BadSSLOptionsTest.test_missing_arguments": {
            "name": "test_missing_arguments",
            "location": 162,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "application": [
                    "Optional[str]",
                    "str",
                    "breakfasmain.Application"
                ]
            }
        },
        "BadSSLOptionsTest.test_missing_key": {
            "name": "test_missing_key",
            "location": 168,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "application": [
                    "str",
                    "io.TextIOWrapper"
                ],
                "existing_certificate": [
                    "str",
                    "os._ScandirIterator[str]"
                ],
                "existing_key": [
                    "str",
                    "int"
                ],
                "module_dir": [
                    "str"
                ]
            }
        },
        "MultipartTestHandler.post": {
            "name": "post",
            "location": 194,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "HTTPConnectionTest.get_handlers": {
            "name": "get_handlers",
            "location": 204,
            "return": [
                "str",
                "http.server.HTTPServer",
                "int"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "HTTPConnectionTest.get_app": {
            "name": "get_app",
            "location": 208,
            "return": [
                "str",
                "Optional[List[str]]",
                "Optional[str]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "HTTPConnectionTest.raw_fetch": {
            "name": "raw_fetch",
            "location": 211,
            "return": [
                "str",
                "Dict[str, str]",
                "MutableMapping[str, Any]",
                "int",
                "Optional[float]"
            ],
            "arguments": {
                "args": [],
                "body": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "Mapping[str, str]"
                ],
                "headers": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "Mapping[str, str]"
                ],
                "kwargs": [],
                "newline": [
                    "str",
                    "dict"
                ],
                "self": []
            },
            "variables": {
                "body": [
                    "str",
                    "Dict[str, str]",
                    "int",
                    "List[str]"
                ],
                "headers": [
                    "Dict[str, str]",
                    "Dict[str,str]",
                    "str"
                ],
                "start_line": [
                    "Dict[str, str]",
                    "Dict[str, Union[int, str]]",
                    "str",
                    "List[float]",
                    "int",
                    "Dict[str, List[Any]]"
                ]
            }
        },
        "HTTPConnectionTest.test_multipart_form": {
            "name": "test_multipart_form",
            "location": 223,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "data": [],
                "response": [
                    "str"
                ]
            }
        },
        "HTTPConnectionTest.test_newlines": {
            "name": "test_newlines",
            "location": 248,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "List[str]",
                    "Dict[bytes, str]",
                    "Set[str]",
                    "Dict[str, Tuple[Any, str]]",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "HTTPConnectionTest.test_100_continue": {
            "name": "test_100_continue",
            "location": 255,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "body": [
                    "int",
                    "list"
                ],
                "data": [
                    "str",
                    "List[int]"
                ],
                "first_line": [
                    "str"
                ],
                "header_data": [
                    "str"
                ],
                "headers": [
                    "str",
                    "bytes"
                ],
                "stream": [
                    "int"
                ]
            }
        },
        "EchoHandler.get": {
            "name": "get",
            "location": 285,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "EchoHandler.post": {
            "name": "post",
            "location": 288,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TypeCheckHandler.prepare": {
            "name": "prepare",
            "location": 293,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "errors": [
                    "str",
                    "int",
                    "bytes",
                    "Set[str]",
                    "float"
                ],
                "fields": [
                    "Dict[str, str]",
                    "str"
                ]
            }
        },
        "TypeCheckHandler.post": {
            "name": "post",
            "location": 318,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TypeCheckHandler.get": {
            "name": "get",
            "location": 322,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TypeCheckHandler.check_type": {
            "name": "check_type",
            "location": 325,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "expected_type": [
                    "Type"
                ],
                "kwargs": [],
                "name": [
                    "Optional[str]",
                    "str",
                    "Tuple[type]",
                    "type",
                    "Type",
                    "Mapping"
                ],
                "obj": [
                    "Tuple[Type]",
                    "Type",
                    "list",
                    "str"
                ],
                "self": []
            },
            "variables": {
                "actual_type": [
                    "List[str]",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "Dict[Type[Any], str]",
                    "str",
                    "Dict[str, List[Any]]",
                    "Dict[str, Union[Any, Any, Any, Any, Any, Any, Any, Any]]"
                ]
            }
        },
        "HTTPServerTest.get_app": {
            "name": "get_app",
            "location": 333,
            "return": [
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "HTTPServerTest.test_query_string_encoding": {
            "name": "test_query_string_encoding",
            "location": 339,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "data": [
                    "str",
                    "list"
                ],
                "response": [
                    "str",
                    "dict",
                    "bytes",
                    "Dict[str, str]",
                    "List[str]",
                    "Dict[str, Union[Any, Any, Any]]",
                    "Tuple[Literal, Literal, Literal]"
                ]
            }
        },
        "HTTPServerTest.test_empty_query_string": {
            "name": "test_empty_query_string",
            "location": 344,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "data": [
                    "str",
                    "list"
                ],
                "response": [
                    "str",
                    "dict",
                    "bytes",
                    "Dict[str, str]",
                    "List[str]",
                    "Dict[str, Union[Any, Any, Any]]",
                    "Tuple[Literal, Literal, Literal]"
                ]
            }
        },
        "HTTPServerTest.test_empty_post_parameters": {
            "name": "test_empty_post_parameters",
            "location": 349,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "data": [
                    "str",
                    "list"
                ],
                "response": [
                    "dict",
                    "list",
                    "bytes",
                    "str"
                ]
            }
        },
        "HTTPServerTest.test_types": {
            "name": "test_types",
            "location": 354,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "data": [
                    "int",
                    "str",
                    "Dict[str, Any]"
                ],
                "headers": [
                    "Dict[str, str]",
                    "bytes",
                    "Dict[str, Union[bytes, str]]"
                ],
                "response": [
                    "Dict[str, str]"
                ]
            }
        },
        "HTTPServerTest.test_double_slash": {
            "name": "test_double_slash",
            "location": 364,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "list"
                ]
            }
        },
        "HTTPServerTest.test_malformed_body": {
            "name": "test_malformed_body",
            "location": 372,
            "return": [],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "Dict[str, str]",
                    "Dict[str, List[Any]]",
                    "Dict[str, Dict[str, Any]]"
                ]
            }
        },
        "HTTPServerRawTest.get_app": {
            "name": "get_app",
            "location": 389,
            "return": [
                "str",
                "Optional[str]",
                "datetime.datetime"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "HTTPServerRawTest.setUp": {
            "name": "setUp",
            "location": 394,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "stream": [
                    "TextIO",
                    "io.StringIO",
                    "pymatgen.io.vasp.outputs.Vasprun"
                ]
            }
        },
        "HTTPServerRawTest.tearDown": {
            "name": "tearDown",
            "location": 400,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "HTTPServerRawTest.test_empty_request": {
            "name": "test_empty_request",
            "location": 404,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "HTTPServerRawTest.test_malformed_first_line_response": {
            "name": "test_malformed_first_line_response",
            "location": 409,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "headers": [
                    "bool"
                ],
                "response": [
                    "bool"
                ],
                "start_line": [
                    "Dict[str, int]"
                ]
            }
        },
        "HTTPServerRawTest.test_malformed_first_line_log": {
            "name": "test_malformed_first_line_log",
            "location": 418,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "HTTPServerRawTest.test_malformed_headers": {
            "name": "test_malformed_headers",
            "location": 427,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "HTTPServerRawTest.test_chunked_request_body": {
            "name": "test_chunked_request_body",
            "location": 434,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "headers": [
                    "bool"
                ],
                "response": [
                    "str"
                ],
                "start_line": [
                    "str",
                    "Dict[str, Union[Any, Any, Any]]",
                    "float",
                    "dict"
                ]
            }
        },
        "HTTPServerRawTest.test_chunked_request_uppercase": {
            "name": "test_chunked_request_uppercase",
            "location": 453,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "headers": [
                    "bool"
                ],
                "response": [
                    "str"
                ],
                "start_line": [
                    "str",
                    "Dict[str, Union[Any, Any, Any]]",
                    "float",
                    "dict"
                ]
            }
        },
        "HTTPServerRawTest.test_invalid_content_length": {
            "name": "test_invalid_content_length",
            "location": 472,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Handler.get": {
            "name": "get",
            "location": 595,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "XHeaderTest.get_httpserver_options": {
            "name": "get_httpserver_options",
            "location": 492,
            "return": [
                "Dict[str, str]",
                "Dict[str, Any]",
                "str",
                "int",
                "_typings.HTTPHeaders"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "XHeaderTest.test_ip_headers": {
            "name": "test_ip_headers",
            "location": 495,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "invalid_chars": [
                    "str",
                    "Dict[str, Tuple[float, float]]",
                    "List[str]"
                ],
                "invalid_chars_list": [
                    "str",
                    "Pattern[str]",
                    "io.TextIOWrapper"
                ],
                "invalid_host": [
                    "str",
                    "Dict[str, Union[Any, Any]]"
                ],
                "valid_ipv4": [
                    "Dict[str, str]",
                    "str",
                    "List[str]",
                    "Dict[str, Union[Any, Any, Any, Any, Any, Any, Any]]",
                    "List[Dict[str, str]]",
                    "Dict[str, List[Any]]"
                ],
                "valid_ipv4_list": [
                    "Dict[str, str]",
                    "str",
                    "List[str]",
                    "Dict[str, Union[Any, Any, Any, Any, Any, Any, Any]]",
                    "List[Dict[str, str]]",
                    "Dict[str, List[Any]]",
                    "Tuple[str]"
                ],
                "valid_ipv6": [
                    "Dict[str, str]",
                    "str",
                    "List[str]",
                    "Dict[str, Union[Any, Any, Any, Any, Any, Any, Any]]",
                    "List[Dict[str, str]]",
                    "Dict[str, List[Any]]"
                ],
                "valid_ipv6_list": [
                    "Dict[str, str]",
                    "str",
                    "List[str]",
                    "Dict[str, Union[Any, Any, Any, Any, Any, Any, Any]]",
                    "List[Dict[str, str]]",
                    "Dict[str, List[Any]]",
                    "Tuple[str]"
                ]
            }
        },
        "XHeaderTest.test_trusted_downstream": {
            "name": "test_trusted_downstream",
            "location": 533,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "resp": [
                    "Dict[int, str]",
                    "Type[Callable[..., Any]]",
                    "Dict[str, str]"
                ],
                "result": [
                    "Dict[str, List[str]]",
                    "list",
                    "Dict[str, str]",
                    "dict"
                ],
                "valid_ipv4_list": [
                    "str",
                    "Set[str]",
                    "Tuple[str]",
                    "io.TextIOWrapper",
                    "List[str]",
                    "Optional[str]",
                    "Tuple[Literal, Literal, Literal, Literal, Literal, Literal]"
                ]
            }
        },
        "XHeaderTest.test_scheme_headers": {
            "name": "test_scheme_headers",
            "location": 543,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "bad_forwarded": [
                    "str",
                    "Dict[str, Union[Any, Any]]"
                ],
                "http_multi_forwarded": [
                    "str",
                    "Dict[str, Union[Any, Any]]"
                ],
                "https_forwarded": [
                    "str",
                    "Dict[str, Union[Any, Any]]"
                ],
                "https_multi_forwarded": [
                    "str",
                    "Dict[str, Union[Any, Any]]"
                ],
                "https_scheme": [
                    "str",
                    "Dict[str, Union[Any, Any]]"
                ]
            }
        },
        "SSLXHeaderTest.get_app": {
            "name": "get_app",
            "location": 573,
            "return": [
                "int",
                "bool",
                "Dict[str, Any]",
                "Dict[str, str]",
                "str",
                "dict"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "SSLXHeaderTest.get_httpserver_options": {
            "name": "get_httpserver_options",
            "location": 576,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "output": [
                    "str",
                    "dict",
                    "Dict[str, int]",
                    "Tuple[Any, Any]"
                ]
            }
        },
        "SSLXHeaderTest.test_request_without_xprotocol": {
            "name": "test_request_without_xprotocol",
            "location": 581,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "bad_scheme": [
                    "str",
                    "Dict[str, Union[Any, Any]]"
                ],
                "http_scheme": [
                    "str",
                    "Dict[str, Union[Any, Any]]"
                ]
            }
        },
        "ManualProtocolTest.get_httpserver_options": {
            "name": "get_httpserver_options",
            "location": 598,
            "return": [
                "int",
                "dict",
                "str",
                "Optional[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "ManualProtocolTest.test_manual_protocol": {
            "name": "test_manual_protocol",
            "location": 601,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "UnixSocketTest.setUp": {
            "name": "setUp",
            "location": 617,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "app": [
                    "wdom.server._tornado.Application"
                ],
                "server": [
                    "int",
                    "str",
                    "list"
                ],
                "sock": [],
                "sockfile": [
                    "str"
                ],
                "stream": [],
                "tmpdir": [
                    "str"
                ]
            }
        },
        "UnixSocketTest.tearDown": {
            "name": "tearDown",
            "location": 629,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "UnixSocketTest.test_unix_socket": {
            "name": "test_unix_socket",
            "location": 636,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "body": [
                    "int",
                    "list"
                ],
                "headers": [
                    "os.stat_result",
                    "bytes"
                ],
                "response": [
                    "int",
                    "float"
                ]
            }
        },
        "UnixSocketTest.test_unix_socket_bad_request": {
            "name": "test_unix_socket_bad_request",
            "location": 647,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "int",
                    "float"
                ]
            }
        },
        "HelloHandler.get": {
            "name": "get",
            "location": 665,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "HelloHandler.post": {
            "name": "post",
            "location": 668,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "LargeHandler.get": {
            "name": "get",
            "location": 672,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "FinishOnCloseHandler.get": {
            "name": "get",
            "location": 679,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "FinishOnCloseHandler.on_connection_close": {
            "name": "on_connection_close",
            "location": 682,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "KeepAliveTest.get_app": {
            "name": "get_app",
            "location": 663,
            "return": [
                "str",
                "Optional[str]",
                "datetime.datetime"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "KeepAliveTest.setUp": {
            "name": "setUp",
            "location": 692,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "http_version": [
                    "str",
                    "Set[int]",
                    "int",
                    "List[str]"
                ]
            }
        },
        "KeepAliveTest.tearDown": {
            "name": "tearDown",
            "location": 696,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "KeepAliveTest.connect": {
            "name": "connect",
            "location": 707,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "stream": [
                    "TextIO",
                    "io.StringIO",
                    "pymatgen.io.vasp.outputs.Vasprun"
                ]
            }
        },
        "KeepAliveTest.read_headers": {
            "name": "read_headers",
            "location": 712,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Union[str, int]]",
                "dict",
                "Dict[str, Dict[str, str]]",
                "List[dict]",
                "Dict[str, Type]",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "first_line": [
                    "str"
                ],
                "header_bytes": [
                    "bytes",
                    "str",
                    "int",
                    "bool"
                ],
                "headers": [
                    "bytes",
                    "List[str]",
                    "Dict[str, bytes]"
                ]
            }
        },
        "KeepAliveTest.read_response": {
            "name": "read_response",
            "location": 721,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "body": [
                    "int",
                    "list"
                ],
                "headers": [
                    "int"
                ]
            }
        },
        "KeepAliveTest.close": {
            "name": "close",
            "location": 727,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "KeepAliveTest.test_two_requests": {
            "name": "test_two_requests",
            "location": 731,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "KeepAliveTest.test_request_close": {
            "name": "test_request_close",
            "location": 739,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "data": [
                    "str"
                ]
            }
        },
        "KeepAliveTest.test_http10": {
            "name": "test_http10",
            "location": 750,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "data": [
                    "str"
                ],
                "http_version": [
                    "str",
                    "Set[int]",
                    "int",
                    "List[str]"
                ]
            }
        },
        "KeepAliveTest.test_http10_keepalive": {
            "name": "test_http10_keepalive",
            "location": 761,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "http_version": [
                    "str",
                    "Set[int]",
                    "int",
                    "List[str]"
                ]
            }
        },
        "KeepAliveTest.test_http10_keepalive_extra_crlf": {
            "name": "test_http10_keepalive_extra_crlf",
            "location": 772,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "http_version": [
                    "str",
                    "Set[int]",
                    "int",
                    "List[str]"
                ]
            }
        },
        "KeepAliveTest.test_pipelined_requests": {
            "name": "test_pipelined_requests",
            "location": 783,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "KeepAliveTest.test_pipelined_cancel": {
            "name": "test_pipelined_cancel",
            "location": 790,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "KeepAliveTest.test_cancel_during_download": {
            "name": "test_cancel_during_download",
            "location": 797,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "KeepAliveTest.test_finish_while_closed": {
            "name": "test_finish_while_closed",
            "location": 805,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "KeepAliveTest.test_keepalive_chunked": {
            "name": "test_keepalive_chunked",
            "location": 811,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "http_version": [
                    "str",
                    "Set[int]",
                    "int",
                    "List[str]"
                ]
            }
        },
        "GzipBaseTest.get_app": {
            "name": "get_app",
            "location": 829,
            "return": [
                "str",
                "Optional[str]",
                "datetime.datetime"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "GzipBaseTest.post_gzip": {
            "name": "post_gzip",
            "location": 832,
            "return": [
                "Dict[str, str]",
                "dict",
                "Exception",
                "int"
            ],
            "arguments": {
                "args": [],
                "body": [
                    "str",
                    "Set[str]",
                    "bytes"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "bytesio": [
                    "str",
                    "io.StringIO",
                    "List[str]",
                    "TextIO",
                    "io.BytesIO",
                    "IO[bytes]"
                ],
                "compressed_body": [
                    "str",
                    "int",
                    "Type[Callable[Any, Any]]",
                    "dict",
                    "Pattern[str]",
                    "List[str]",
                    "bytes"
                ],
                "gzip_file": [
                    "str",
                    "Optional[str]",
                    "dict",
                    "io.BufferedWriter"
                ]
            }
        },
        "GzipBaseTest.test_uncompressed": {
            "name": "test_uncompressed",
            "location": 841,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "Dict[str, str]",
                    "str",
                    "Dict[str, Dict[str, str]]"
                ]
            }
        },
        "GzipTest.get_httpserver_options": {
            "name": "get_httpserver_options",
            "location": 847,
            "return": [
                "Dict[str, str]",
                "str",
                "Dict[str, Any]",
                "_typings.HTTPHeaders",
                "Dict[str, Dict[str, Any]]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "GzipTest.test_gzip": {
            "name": "test_gzip",
            "location": 850,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "list",
                    "str",
                    "bytes",
                    "Dict[str, str]"
                ]
            }
        },
        "GzipUnsupportedTest.test_gzip_unsupported": {
            "name": "test_gzip_unsupported",
            "location": 856,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "list",
                    "str",
                    "bytes",
                    "Dict[str, str]"
                ]
            }
        },
        "MessageDelegate.__init__": {
            "name": "__init__",
            "location": 879,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "connection": [
                    "int",
                    "bool",
                    "float"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "connection": [
                    "str",
                    "int",
                    "Optional[float]",
                    "bool"
                ]
            }
        },
        "MessageDelegate.headers_received": {
            "name": "headers_received",
            "location": 882,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "headers": [
                    "HTTPHeaders",
                    "tornado.httputil.HTTPHeaders",
                    "bytes",
                    "str"
                ],
                "kwargs": [],
                "self": [],
                "start_line": [
                    "HTTPHeaders",
                    "tornado.httputil.HTTPHeaders",
                    "bytes",
                    "str"
                ]
            },
            "variables": {
                "chunk_lengths": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ]
            }
        },
        "MessageDelegate.data_received": {
            "name": "data_received",
            "location": 885,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "chunk": [
                    "list",
                    "List[int]",
                    "str",
                    "List[str]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "MessageDelegate.finish": {
            "name": "finish",
            "location": 888,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response_body": [
                    "Dict[str, Any]",
                    "Dict[str, int]",
                    "int"
                ]
            }
        },
        "App.start_request": {
            "name": "start_request",
            "location": 898,
            "return": [
                "Callable",
                "int"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "request_conn": [
                    "str",
                    "flask.testing.FlaskClient",
                    "allennlp.common.util.JsonDict"
                ],
                "self": [],
                "server_conn": [
                    "dict",
                    "int",
                    "str",
                    "Optional[bytes]"
                ]
            },
            "variables": {}
        },
        "StreamingChunkSizeTest.get_http_client": {
            "name": "get_http_client",
            "location": 870,
            "return": [
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "StreamingChunkSizeTest.get_httpserver_options": {
            "name": "get_httpserver_options",
            "location": 875,
            "return": [
                "Dict[str, str]",
                "int",
                "_typings.HTTPHeaders",
                "Dict[str, Any]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "StreamingChunkSizeTest.get_app": {
            "name": "get_app",
            "location": 896,
            "return": [],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "StreamingChunkSizeTest.fetch_chunk_sizes": {
            "name": "fetch_chunk_sizes",
            "location": 902,
            "return": [
                "List[List[str]]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "chunks": [
                    "int",
                    "Dict[str, Union[Any, int, str]]"
                ],
                "response": [
                    "bytes",
                    "Dict[str, str]",
                    "str"
                ]
            }
        },
        "StreamingChunkSizeTest.compress": {
            "name": "compress",
            "location": 914,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "body": [
                    "str",
                    "Union[None, bytes]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "bytesio": [
                    "io.StringIO",
                    "List[str]",
                    "bytes",
                    "Tuple[str, str]"
                ],
                "compressed": [
                    "list",
                    "Dict[str, int]",
                    "int",
                    "Type[List[Any]]",
                    "List[Tuple[str, Any, Any]]",
                    "List[List[str]]",
                    "str"
                ],
                "gzfile": [
                    "Dict[str, int]",
                    "str",
                    "io.StringIO",
                    "gzip.GzipFile"
                ]
            }
        },
        "StreamingChunkSizeTest.test_regular_body": {
            "name": "test_regular_body",
            "location": 924,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "chunks": [
                    "int",
                    "list",
                    "str",
                    "Dict[str, Union[Any, str]]",
                    "List[List[Any]]",
                    "Set[str]"
                ]
            }
        },
        "StreamingChunkSizeTest.test_compressed_body": {
            "name": "test_compressed_body",
            "location": 929,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "StreamingChunkSizeTest.body_producer": {
            "name": "body_producer",
            "location": 947,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "write": [
                    "str",
                    "int",
                    "float"
                ]
            },
            "variables": {}
        },
        "StreamingChunkSizeTest.test_chunked_body": {
            "name": "test_chunked_body",
            "location": 935,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "chunks": [
                    "int",
                    "float"
                ]
            }
        },
        "StreamingChunkSizeTest.test_chunked_compressed": {
            "name": "test_chunked_compressed",
            "location": 943,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "compressed": [
                    "str",
                    "List[str]",
                    "int",
                    "Dict[str, List[Any]]",
                    "Tuple[str, str, str, str, str, str, str, str]"
                ]
            }
        },
        "MaxHeaderSizeTest.get_app": {
            "name": "get_app",
            "location": 955,
            "return": [
                "str",
                "int",
                "bytes"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "MaxHeaderSizeTest.get_httpserver_options": {
            "name": "get_httpserver_options",
            "location": 958,
            "return": [
                "Dict[str, str]",
                "int",
                "Dict[str, Any]",
                "_typings.HTTPHeaders"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "MaxHeaderSizeTest.test_small_headers": {
            "name": "test_small_headers",
            "location": 961,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "MaxHeaderSizeTest.test_large_headers": {
            "name": "test_large_headers",
            "location": 966,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "Set[str]",
                    "Dict[str, bool]",
                    "list",
                    "dict",
                    "Dict[Union[int, str], Union[int, str]]"
                ]
            }
        },
        "IdleTimeoutTest.get_app": {
            "name": "get_app",
            "location": 977,
            "return": [
                "str",
                "int",
                "bytes"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "IdleTimeoutTest.get_httpserver_options": {
            "name": "get_httpserver_options",
            "location": 980,
            "return": [
                "int",
                "str",
                "dict"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "IdleTimeoutTest.setUp": {
            "name": "setUp",
            "location": 983,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "streams": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ]
            }
        },
        "IdleTimeoutTest.tearDown": {
            "name": "tearDown",
            "location": 987,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "IdleTimeoutTest.connect": {
            "name": "connect",
            "location": 992,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "stream": [
                    "int"
                ]
            }
        },
        "IdleTimeoutTest.test_unused_connection": {
            "name": "test_unused_connection",
            "location": 999,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "stream": [
                    "int",
                    "str",
                    "dict",
                    "Dict[Any, str]",
                    "datetime.timedelta",
                    "DefaultDict[Any, dict]"
                ]
            }
        },
        "IdleTimeoutTest.test_idle_after_use": {
            "name": "test_idle_after_use",
            "location": 1004,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "data": [
                    "str",
                    "Dict[str, Dict[str, Any]]",
                    "Dict[str, str]",
                    "List[str]"
                ],
                "stream": [
                    "os.stat_result"
                ]
            }
        },
        "BufferedHandler.put": {
            "name": "put",
            "location": 1025,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "StreamingHandler.initialize": {
            "name": "initialize",
            "location": 1030,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "bytes_read": [
                    "float",
                    "int",
                    "Dict[Optional[str], str]",
                    "Dict[str, Union[Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any]]"
                ]
            }
        },
        "StreamingHandler.prepare": {
            "name": "prepare",
            "location": 1033,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "StreamingHandler.data_received": {
            "name": "data_received",
            "location": 1041,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "data": [
                    "Sequence[T]",
                    "List['cirq.Circuit']",
                    "Union[int, List[int]]",
                    "str",
                    "int",
                    "list"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "StreamingHandler.put": {
            "name": "put",
            "location": 1044,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "BodyLimitsTest.get_app": {
            "name": "get_app",
            "location": 1023,
            "return": [
                "str",
                "Optional[str]",
                "datetime.datetime"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "BodyLimitsTest.get_httpserver_options": {
            "name": "get_httpserver_options",
            "location": 1050,
            "return": [
                "Dict[str, str]",
                "_typings.HTTPHeaders",
                "str",
                "Exception"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "BodyLimitsTest.get_http_client": {
            "name": "get_http_client",
            "location": 1053,
            "return": [
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "BodyLimitsTest.test_small_body": {
            "name": "test_small_body",
            "location": 1058,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "Dict[str, str]"
                ]
            }
        },
        "BodyLimitsTest.test_large_body_buffered": {
            "name": "test_large_body_buffered",
            "location": 1064,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "Dict[str, str]",
                    "bytes",
                    "list",
                    "Dict[str, Dict[str, Any]]"
                ]
            }
        },
        "BodyLimitsTest.test_large_body_buffered_chunked": {
            "name": "test_large_body_buffered_chunked",
            "location": 1069,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "int",
                    "str",
                    "dict",
                    "Final",
                    "List[int]",
                    "Dict[int, Union[Any, Any]]",
                    "Dict[str, str]"
                ]
            }
        },
        "BodyLimitsTest.test_large_body_streaming": {
            "name": "test_large_body_streaming",
            "location": 1076,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "Dict[str, str]",
                    "bytes",
                    "list",
                    "Dict[str, Dict[str, Any]]"
                ]
            }
        },
        "BodyLimitsTest.test_large_body_streaming_chunked": {
            "name": "test_large_body_streaming_chunked",
            "location": 1081,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "int",
                    "str",
                    "dict",
                    "Final",
                    "List[int]",
                    "Dict[int, Union[Any, Any]]",
                    "Dict[str, str]"
                ]
            }
        },
        "BodyLimitsTest.test_large_body_streaming_override": {
            "name": "test_large_body_streaming_override",
            "location": 1088,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "Dict[str, str]",
                    "bytes",
                    "list",
                    "Dict[str, Dict[str, Any]]"
                ]
            }
        },
        "BodyLimitsTest.test_large_body_streaming_chunked_override": {
            "name": "test_large_body_streaming_chunked_override",
            "location": 1093,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "bytes",
                    "int",
                    "Final",
                    "str"
                ]
            }
        },
        "BodyLimitsTest.test_timeout": {
            "name": "test_timeout",
            "location": 1099,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, Union[Any, Any]]"
                ],
                "stream": [
                    "int"
                ]
            }
        },
        "BodyLimitsTest.test_body_size_override_reset": {
            "name": "test_body_size_override_reset",
            "location": 1114,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "data": [
                    "str",
                    "list",
                    "List[Tuple[int, int]]",
                    "dict",
                    "Iterator[Any]"
                ],
                "headers": [
                    "str",
                    "Dict[str, Type[Any]]",
                    "bytes",
                    "Dict[str, Any]"
                ],
                "response": [],
                "start_line": [
                    "int",
                    "str",
                    "dict",
                    "List[str]",
                    "float"
                ],
                "stream": [
                    "int"
                ]
            }
        },
        "LegacyInterfaceTest.handle_request": {
            "name": "handle_request",
            "location": 1140,
            "return": [
                "Iterable[Type]",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "request": [
                    "str",
                    "aiohttp.web.Request"
                ],
                "self": []
            },
            "variables": {
                "http1": [
                    "str"
                ],
                "message": [
                    "str"
                ]
            }
        },
        "LegacyInterfaceTest.get_app": {
            "name": "get_app",
            "location": 1136,
            "return": [
                "str",
                "dict",
                "int",
                "Optional[List[str]]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "LegacyInterfaceTest.test_legacy_interface": {
            "name": "test_legacy_interface",
            "location": 1157,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "str",
                    "List[str]",
                    "Tuple[str]",
                    "Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]"
                ]
            }
        },
        "global": {
            "skipIfOldSSL": [
                "str",
                "bool",
                "int",
                "ClassVar",
                "Type[OSError]"
            ]
        }
    },
    "tornado-5.0.2/tornado/test/ioloop_test.py": {
        "FakeTimeSelect.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_time": [
                    "deque",
                    "int",
                    "Callable(time.time)[[], float]",
                    "str",
                    "Type[int]",
                    "\"Point\""
                ]
            }
        },
        "FakeTimeSelect.time": {
            "name": "time",
            "location": 44,
            "return": [
                "str",
                "int",
                "float",
                "Dict[int, datetime.datetime]",
                "List[float]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "FakeTimeSelect.sleep": {
            "name": "sleep",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "t": [
                    "int",
                    "float"
                ]
            },
            "variables": {}
        },
        "FakeTimeSelect.poll": {
            "name": "poll",
            "location": 50,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "timeout": [
                    "float",
                    "Optional[float]",
                    "int",
                    "bool",
                    "Union[int, float]"
                ]
            },
            "variables": {
                "events": [
                    "int",
                    "str",
                    "list",
                    "Dict[str, Dict[str, Any]]",
                    "bool"
                ]
            }
        },
        "FakeTimeIOLoop.initialize": {
            "name": "initialize",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "fts": [
                    "str",
                    "int"
                ]
            }
        },
        "FakeTimeIOLoop.sleep": {
            "name": "sleep",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "t": [
                    "float",
                    "int",
                    "Collection[int]",
                    "list"
                ]
            },
            "variables": {}
        },
        "SocketWrapper.__init__": {
            "name": "__init__",
            "location": 302,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "sockobj": [
                    "int",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ]
            },
            "variables": {
                "closed": [
                    "dict",
                    "Set[str]"
                ],
                "sockobj": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ]
            }
        },
        "SocketWrapper.fileno": {
            "name": "fileno",
            "location": 306,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "SocketWrapper.close": {
            "name": "close",
            "location": 309,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "closed": [
                    "Optional[str]",
                    "int",
                    "str",
                    "asyncio.Queue",
                    "Dict[Any, Dict[Any, str]]",
                    "Optional[List[str]]",
                    "dict"
                ]
            }
        },
        "TestIOLoop.add_callback": {
            "name": "add_callback",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "callback": [
                    "list",
                    "Dict[str, Callable[[], None]]",
                    "str",
                    "Callable",
                    "tuple",
                    "List[str]",
                    "Dict[str, Any]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TestIOLoop.test_add_callback_return_sequence": {
            "name": "test_add_callback_return_sequence",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "add_callback": [
                    "List[str]",
                    "list",
                    "List[Dict[str, str]]",
                    "functools.partial[Any]",
                    "asyncio.locks.Event"
                ],
                "calls": [
                    "list"
                ],
                "loop": [
                    "str",
                    "list",
                    "List[str]",
                    "Tuple[bool, bool]",
                    "List[Dict[str, Any]]"
                ],
                "old_add_callback": [
                    "int",
                    "cmk.gui.plugins.openapi.livestatus_helpers.types.Column"
                ],
                "test": [
                    "List[Union[Any, Any]]",
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]",
                    "str",
                    "List[Union[Any, Any, Any]]",
                    "bool"
                ]
            }
        },
        "TestIOLoop.callback": {
            "name": "callback",
            "location": 389,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TestIOLoop.schedule_callback": {
            "name": "schedule_callback",
            "location": 103,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "called": [
                    "int",
                    "list",
                    "Set[int]"
                ],
                "start_time": [
                    "float",
                    "List[int]",
                    "list"
                ]
            }
        },
        "TestIOLoop.test_add_callback_wakeup": {
            "name": "test_add_callback_wakeup",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TestIOLoop.target": {
            "name": "target",
            "location": 177,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TestIOLoop.test_add_callback_wakeup_other_thread": {
            "name": "test_add_callback_wakeup_other_thread",
            "location": 114,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "delta": [
                    "int",
                    "float",
                    "list",
                    "str",
                    "asyncio.Queue"
                ],
                "thread": [
                    "threading.Thread"
                ]
            }
        },
        "TestIOLoop.test_add_timeout_timedelta": {
            "name": "test_add_timeout_timedelta",
            "location": 127,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TestIOLoop.test_multiple_add": {
            "name": "test_multiple_add",
            "location": 131,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "port": [
                    "int",
                    "Dict[str, int]"
                ],
                "sock": [
                    "asyncio.events.AbstractEventLoop",
                    "float",
                    "int",
                    "Tuple[str, int]"
                ]
            }
        },
        "TestIOLoop.test_remove_without_add": {
            "name": "test_remove_without_add",
            "location": 145,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "port": [
                    "int",
                    "Dict[str, int]"
                ],
                "sock": [
                    "int",
                    "tuple",
                    "str",
                    "threading._RLock",
                    "float",
                    "bool",
                    "asyncio.events.AbstractEventLoop"
                ]
            }
        },
        "TestIOLoop.test_add_callback_from_signal": {
            "name": "test_add_callback_from_signal",
            "location": 154,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TestIOLoop.test_add_callback_from_signal_other_thread": {
            "name": "test_add_callback_from_signal_other_thread",
            "location": 160,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "other_ioloop": [
                    "threading.Thread",
                    "threading.Event"
                ],
                "thread": [
                    "threading.Thread"
                ]
            }
        },
        "TestIOLoop.test_add_callback_while_closing": {
            "name": "test_add_callback_while_closing",
            "location": 171,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "closing": [
                    "int",
                    "dict",
                    "List[int]",
                    "List[List[int]]",
                    "Callable(functools.wraps)[[Named(wrapped, Callable[..., Any]), Named(assigned, Sequence[str], default), Named(updated, Sequence[str], default)], Callable[Any, Any]]",
                    "str",
                    "datetime.timedelta"
                ],
                "other_ioloop": [
                    "Dict[str, Any]",
                    "str"
                ],
                "thread": [
                    "threading.Thread"
                ]
            }
        },
        "TestIOLoop.handle_callback_exception": {
            "name": "handle_callback_exception",
            "location": 192,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "callback": [
                    "int",
                    "str",
                    "Optional"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TestIOLoop.test_handle_callback_exception": {
            "name": "test_handle_callback_exception",
            "location": 189,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TestIOLoop.handler": {
            "name": "handler",
            "location": 209,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "events": [
                    "list",
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]",
                    "Union[str, List[Any]]",
                    "List[str]"
                ],
                "fd": [
                    "str",
                    "int",
                    "List[Dict[str, Any]]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TestIOLoop.test_read_while_writeable": {
            "name": "test_read_while_writeable",
            "location": 203,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "client": [
                    "Dict[str, Union[int, str]]"
                ],
                "server": [
                    "int",
                    "List[int]",
                    "Final"
                ]
            }
        },
        "TestIOLoop.test_remove_timeout_after_fire": {
            "name": "test_remove_timeout_after_fire",
            "location": 221,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "handle": [
                    "int",
                    "str"
                ]
            }
        },
        "TestIOLoop.test_remove_timeout_cleanup": {
            "name": "test_remove_timeout_cleanup",
            "location": 227,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "timeout": [
                    "int",
                    "float",
                    "Tuple[Any, Any]"
                ]
            }
        },
        "TestIOLoop.t1": {
            "name": "t1",
            "location": 249,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TestIOLoop.t2": {
            "name": "t2",
            "location": 254,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TestIOLoop.test_remove_timeout_from_timeout": {
            "name": "test_remove_timeout_from_timeout",
            "location": 241,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "calls": [
                    "List[bool]",
                    "list",
                    "bool",
                    "List[float]",
                    "str"
                ],
                "now": [
                    "int",
                    "str",
                    "List[int]",
                    "float"
                ],
                "t2_handle": [
                    "float",
                    "Tuple[Literal, Literal]"
                ]
            }
        },
        "TestIOLoop.test_timeout_with_arguments": {
            "name": "test_timeout_with_arguments",
            "location": 262,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "results": [
                    "list",
                    "List[eggman.types.HandlerPkg]",
                    "Dict[int, float]"
                ]
            }
        },
        "TestIOLoop.test_add_timeout_return": {
            "name": "test_add_timeout_return",
            "location": 276,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "handle": [
                    "int",
                    "list",
                    "Optional[Match[str]]",
                    "Tuple[Literal, Any, Literal, Any, Literal, Any]",
                    "Tuple[Literal, Any, Literal, Any, Literal, Any, Literal, Any, Literal, Any, Literal, Any, Literal, Any, Literal, Any, Literal, Any]",
                    "dict"
                ]
            }
        },
        "TestIOLoop.test_call_at_return": {
            "name": "test_call_at_return",
            "location": 283,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "handle": [
                    "int",
                    "str",
                    "bytearray",
                    "Tuple[Literal, Any, Literal, Any, Literal, Any, Literal, Any, Literal, Any, Literal, Any, Literal, Any, Literal, Any, Literal, Any]",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "TestIOLoop.test_call_later_return": {
            "name": "test_call_later_return",
            "location": 288,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "handle": [
                    "int",
                    "Optional[int]",
                    "threading.Semaphore",
                    "float",
                    "Tuple[Any, Any, Any, Any, Any, Any, Any]"
                ]
            }
        },
        "TestIOLoop.test_close_file_object": {
            "name": "test_close_file_object",
            "location": 293,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "io_loop": [
                    "manager.api.types.PackageReference"
                ],
                "port": [
                    "int",
                    "Dict[str, int]"
                ],
                "socket_wrapper": [],
                "sockobj": [
                    "int",
                    "asyncio.streams.StreamReader"
                ]
            }
        },
        "TestIOLoop.handle_connection": {
            "name": "handle_connection",
            "location": 325,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "events": [
                    "str",
                    "int",
                    "List[Dict[str, Any]]"
                ],
                "fd": [
                    "str",
                    "dict",
                    "List[Dict]",
                    "int",
                    "Dict[str, Any]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "addr": [
                    "int",
                    "dict",
                    "List[int]",
                    "List[List[int]]",
                    "Callable(functools.wraps)[[Named(wrapped, Callable[..., Any]), Named(assigned, Sequence[str], default), Named(updated, Sequence[str], default)], Callable[Any, Any]]",
                    "str",
                    "datetime.timedelta"
                ],
                "conn": [
                    "str"
                ]
            }
        },
        "TestIOLoop.test_handler_callback_file_object": {
            "name": "test_handler_callback_file_object",
            "location": 320,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "fds": [
                    "list",
                    "Any[Any]",
                    "Tuple[Any, Any]",
                    "List[float]",
                    "float",
                    "List[str]"
                ],
                "port": [
                    "str",
                    "int",
                    "Union[Literal, str]",
                    "Optional[str]"
                ],
                "server_sock": [
                    "int",
                    "datetime.timedelta",
                    "float"
                ]
            }
        },
        "TestIOLoop.f": {
            "name": "f",
            "location": 348,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "events": [
                    "str",
                    "int",
                    "List[Dict[str, Any]]"
                ],
                "fd": [
                    "str",
                    "int",
                    "List[Dict[str, Any]]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TestIOLoop.test_mixed_fd_fileobj": {
            "name": "test_mixed_fd_fileobj",
            "location": 345,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "port": [
                    "str",
                    "List[str]",
                    "int",
                    "Dict[str, List[Any]]",
                    "Tuple[str, str, str, str, str, str, str, str]"
                ],
                "server_sock": [
                    "list",
                    "int",
                    "Dict[str, int]",
                    "busboy.util.Maybe[bool]",
                    "float",
                    "str"
                ]
            }
        },
        "TestIOLoop.test_reentrant": {
            "name": "test_reentrant",
            "location": 358,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "got_exception": [
                    "List[bool]",
                    "bool",
                    "List[int]",
                    "List[Dict[str, Any]]",
                    "Collection[int]",
                    "List[Tuple[Any, Any]]",
                    "str"
                ],
                "returned_from_start": [
                    "List[bool]",
                    "list",
                    "str",
                    "datetime.datetime.date",
                    "Dict[str, int]"
                ]
            }
        },
        "TestIOLoop.test_exception_logging": {
            "name": "test_exception_logging",
            "location": 375,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TestIOLoop.test_exception_logging_future": {
            "name": "test_exception_logging_future",
            "location": 385,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TestIOLoop.test_exception_logging_native_coro": {
            "name": "test_exception_logging_native_coro",
            "location": 397,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "namespace": []
            }
        },
        "TestIOLoop.test_spawn_callback": {
            "name": "test_spawn_callback",
            "location": 411,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TestIOLoop.handle_read": {
            "name": "handle_read",
            "location": 435,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "events": [
                    "str",
                    "int",
                    "List[Dict[str, Any]]"
                ],
                "fd": [
                    "str",
                    "dict",
                    "List[Dict]",
                    "int",
                    "Dict[str, Any]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TestIOLoop.test_remove_handler_from_handler": {
            "name": "test_remove_handler_from_handler",
            "location": 425,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "chunks": [
                    "list",
                    "Dict[str, object]",
                    "int",
                    "dict",
                    "str",
                    "asyncio.futures.Future[Any]"
                ],
                "client": [
                    "asyncio.Event",
                    "int"
                ],
                "server": [
                    "str",
                    "int",
                    "Union[Literal, str]",
                    "Dict[str, str]"
                ]
            }
        },
        "TestIOLoopCurrent.setUp": {
            "name": "setUp",
            "location": 456,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "io_loop": [
                    "bytes",
                    "bool",
                    "str"
                ]
            }
        },
        "TestIOLoopCurrent.tearDown": {
            "name": "tearDown",
            "location": 460,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TestIOLoopCurrent.test_default_current": {
            "name": "test_default_current",
            "location": 464,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "io_loop": [
                    "Dict[str, float]",
                    "Dict[str, Any]",
                    "Dict[int, str]",
                    "Pattern[str]",
                    "List[int]",
                    "float"
                ],
                "io_loop2": [
                    "Dict[str, Union[Any, Any]]"
                ]
            }
        },
        "TestIOLoopCurrent.f": {
            "name": "f",
            "location": 480,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "current_io_loop": [
                    "List[int]",
                    "str",
                    "Dict[str, Union[int, str]]",
                    "int",
                    "Dict[str, Any]",
                    "Tuple[Any, Any]",
                    "Optional[str]",
                    "float"
                ]
            }
        },
        "TestIOLoopCurrent.test_non_current": {
            "name": "test_non_current",
            "location": 473,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "io_loop": [
                    "int",
                    "float",
                    "Tuple[Tuple[Any, Any], Tuple[Any, Any], Tuple[Any, Any], Tuple[Any, Any]]",
                    "subprocess.CompletedProcess[bytes]"
                ]
            }
        },
        "TestIOLoopCurrent.test_force_current": {
            "name": "test_force_current",
            "location": 489,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "io_loop": [
                    "float",
                    "Dict[str, Union[Any, Any, Any, Any]]",
                    "functools.partial[Any]",
                    "dict",
                    "Pattern[str]",
                    "int",
                    "List[int]",
                    "str"
                ]
            }
        },
        "TestIOLoopCurrentAsync.test_clear_without_current": {
            "name": "test_clear_without_current",
            "location": 501,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TestIOLoopAddCallback.setUp": {
            "name": "setUp",
            "location": 510,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "active_contexts": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ]
            }
        },
        "TestIOLoopAddCallback.add_callback": {
            "name": "add_callback",
            "location": 514,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "callback": [
                    "str",
                    "Callable",
                    "Dict[str, object]",
                    "Callable[[str], None]",
                    "Dict[str, Any]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TestIOLoopAddCallback.context": {
            "name": "context",
            "location": 518,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "name": [
                    "str",
                    "list",
                    "List[str]",
                    "types.ModuleType",
                    "Set[str]"
                ],
                "self": []
            },
            "variables": {}
        },
        "TestIOLoopAddCallback.f1": {
            "name": "f1",
            "location": 544,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "bar": [
                    "float",
                    "int",
                    "str"
                ],
                "foo": [
                    "float",
                    "int",
                    "str"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TestIOLoopAddCallback.test_pre_wrap": {
            "name": "test_pre_wrap",
            "location": 523,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "wrapped": [
                    "str",
                    "int"
                ]
            }
        },
        "TestIOLoopAddCallback.test_pre_wrap_with_args": {
            "name": "test_pre_wrap_with_args",
            "location": 539,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "result": [
                    "OrderedDict[str, str]"
                ],
                "wrapped": [
                    "str",
                    "int"
                ]
            }
        },
        "TestIOLoopAddCallbackFromSignal.add_callback": {
            "name": "add_callback",
            "location": 561,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "callback": [
                    "str"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "MyExecutor.submit": {
            "name": "submit",
            "location": 661,
            "return": [
                "Dict[str, int]",
                "str",
                "int",
                "dict"
            ],
            "arguments": {
                "args": [],
                "func": [
                    "Callable",
                    "bool"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TestIOLoopFutures.test_add_future_threads": {
            "name": "test_add_future_threads",
            "location": 567,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "future": [
                    "Dict[str, str]",
                    "List[str]",
                    "str",
                    "dict",
                    "list",
                    "Iterator[str]"
                ]
            }
        },
        "TestIOLoopFutures.task": {
            "name": "task",
            "location": 578,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TestIOLoopFutures.callback": {
            "name": "callback",
            "location": 587,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "future": [
                    "int",
                    "Callable",
                    "str"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "future": [
                    "int",
                    "List[str]",
                    "list",
                    "List[float]"
                ]
            }
        },
        "TestIOLoopFutures.handle_exception": {
            "name": "handle_exception",
            "location": 591,
            "return": [
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "traceback": [
                    "str",
                    "list",
                    "List[int]"
                ],
                "typ": [
                    "str",
                    "list",
                    "List[int]"
                ],
                "value": [
                    "str",
                    "int",
                    "Callable[[object], Any]",
                    "Callable"
                ]
            },
            "variables": {
                "exception": [
                    "Dict[str, Union[int, str]]",
                    "Dict[str, str]",
                    "list",
                    "Dict[str, Union[Any, bool]]",
                    "Dict[int, Union[Any, Any]]",
                    "Dict[int, List[int]]",
                    "str",
                    "Dict[str, int]"
                ]
            }
        },
        "TestIOLoopFutures.test_add_future_stack_context": {
            "name": "test_add_future_stack_context",
            "location": 575,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "ready": [
                    "int",
                    "dict",
                    "List[int]",
                    "List[List[int]]",
                    "Callable(functools.wraps)[[Named(wrapped, Callable[..., Any]), Named(assigned, Sequence[str], default), Named(updated, Sequence[str], default)], Callable[Any, Any]]",
                    "str",
                    "datetime.timedelta"
                ]
            }
        },
        "TestIOLoopFutures.sync_func": {
            "name": "sync_func",
            "location": 667,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TestIOLoopFutures.test_run_in_executor_gen": {
            "name": "test_run_in_executor_gen",
            "location": 608,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "event1": [
                    "threading.Event",
                    "list",
                    "asyncio.events.AbstractEventLoop",
                    "str",
                    "Dict[str, int]"
                ],
                "event2": [
                    "threading.Event",
                    "list",
                    "asyncio.events.AbstractEventLoop",
                    "str",
                    "Dict[str, int]"
                ],
                "res": [
                    "list",
                    "str",
                    "Tuple[Type[Any]]",
                    "List[Union[Any, Any, Any, Any]]"
                ]
            }
        },
        "TestIOLoopFutures.test_run_in_executor_native": {
            "name": "test_run_in_executor_native",
            "location": 631,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "event1": [
                    "str",
                    "asyncio.events.AbstractEventLoop"
                ],
                "event2": [
                    "str",
                    "asyncio.events.AbstractEventLoop"
                ],
                "namespace": [
                    "str"
                ],
                "res": [
                    "str",
                    "Dict[int, None]",
                    "Type[str]"
                ]
            }
        },
        "TestIOLoopFutures.test_set_default_executor": {
            "name": "test_set_default_executor",
            "location": 657,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "count": [
                    "list",
                    "Dict[str, object]",
                    "int",
                    "dict",
                    "str",
                    "asyncio.futures.Future[Any]"
                ],
                "event": [
                    "list",
                    "Dict[int, Any]"
                ],
                "executor": [
                    "int",
                    "List[str]",
                    "datetime.timedelta",
                    "Dict[int, int]",
                    "float"
                ],
                "loop": [
                    "int",
                    "bool",
                    "set"
                ]
            }
        },
        "TestIOLoopRunSync.setUp": {
            "name": "setUp",
            "location": 679,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "io_loop": [
                    "int",
                    "List[str]",
                    "\"Point\"",
                    "float",
                    "str",
                    "Type[int]"
                ]
            }
        },
        "TestIOLoopRunSync.tearDown": {
            "name": "tearDown",
            "location": 682,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TestIOLoopRunSync.test_sync_result": {
            "name": "test_sync_result",
            "location": 685,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TestIOLoopRunSync.test_sync_exception": {
            "name": "test_sync_exception",
            "location": 689,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TestIOLoopRunSync.f": {
            "name": "f",
            "location": 715,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TestIOLoopRunSync.test_async_result": {
            "name": "test_async_result",
            "location": 693,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TestIOLoopRunSync.test_async_exception": {
            "name": "test_async_exception",
            "location": 700,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TestIOLoopRunSync.test_current": {
            "name": "test_current",
            "location": 708,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TestIOLoopRunSync.test_timeout": {
            "name": "test_timeout",
            "location": 713,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TestIOLoopRunSync.test_native_coroutine": {
            "name": "test_native_coroutine",
            "location": 720,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "namespace": []
            }
        },
        "TestPeriodicCallback.setUp": {
            "name": "setUp",
            "location": 731,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "io_loop": [
                    "int",
                    "bool"
                ]
            }
        },
        "TestPeriodicCallback.tearDown": {
            "name": "tearDown",
            "location": 735,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TestPeriodicCallback.cb": {
            "name": "cb",
            "location": 777,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TestPeriodicCallback.test_basic": {
            "name": "test_basic",
            "location": 738,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "calls": [
                    "list",
                    "List[None]"
                ],
                "pc": [
                    "int",
                    "dict",
                    "List[int]",
                    "List[List[int]]",
                    "Callable(functools.wraps)[[Named(wrapped, Callable[..., Any]), Named(assigned, Sequence[str], default), Named(updated, Sequence[str], default)], Callable[Any, Any]]",
                    "str",
                    "datetime.timedelta"
                ]
            }
        },
        "TestPeriodicCallback.test_overrun": {
            "name": "test_overrun",
            "location": 749,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "calls": [
                    "list",
                    "dict",
                    "int",
                    "List[None]"
                ],
                "expected": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "int",
                    "Dict[str, Union[Any, int, str]]",
                    "set",
                    "Set[str]",
                    "List[Tuple[str, float]]"
                ],
                "pc": [
                    "int",
                    "dict",
                    "List[int]",
                    "List[List[int]]",
                    "Callable(functools.wraps)[[Named(wrapped, Callable[..., Any]), Named(assigned, Sequence[str], default), Named(updated, Sequence[str], default)], Callable[Any, Any]]",
                    "str",
                    "datetime.timedelta"
                ],
                "sleep_durations": [
                    "str",
                    "List[str]",
                    "int",
                    "Dict[str, List[Any]]",
                    "Tuple[str, str, str, str, str, str, str, str]"
                ]
            }
        },
        "TestPeriodicCallback.test_io_loop_set_at_start": {
            "name": "test_io_loop_set_at_start",
            "location": 771,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "calls": [
                    "list",
                    "List[None]"
                ],
                "io_loop": [
                    "int"
                ],
                "pc": [
                    "int",
                    "dict",
                    "List[int]",
                    "List[List[int]]",
                    "Callable(functools.wraps)[[Named(wrapped, Callable[..., Any]), Named(assigned, Sequence[str], default), Named(updated, Sequence[str], default)], Callable[Any, Any]]",
                    "str",
                    "datetime.timedelta"
                ]
            }
        },
        "TestPeriodicCallbackMath.simulate_calls": {
            "name": "simulate_calls",
            "location": 789,
            "return": [
                "Union"
            ],
            "arguments": {
                "args": [],
                "durations": [
                    "bool",
                    "Exception",
                    "Callable",
                    "Optional[bool]"
                ],
                "kwargs": [],
                "pc": [
                    "bytes",
                    "float",
                    "int"
                ],
                "self": []
            },
            "variables": {
                "_next_timeout": [
                    "int",
                    "str",
                    "float"
                ],
                "calls": [
                    "list",
                    "List[Dict[str, Any]]",
                    "int"
                ],
                "now": [
                    "float",
                    "int",
                    "dict",
                    "functools.partial[Any]"
                ]
            }
        },
        "TestPeriodicCallbackMath.test_basic": {
            "name": "test_basic",
            "location": 806,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "pc": [
                    "int",
                    "Tuple[Any, Any, Any, Any, Any, Any, Any]"
                ]
            }
        },
        "TestPeriodicCallbackMath.test_overrun": {
            "name": "test_overrun",
            "location": 811,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "call_durations": [
                    "List[int]",
                    "list",
                    "Type[Iterable[Any]]",
                    "str",
                    "Callable[[str], bool]"
                ],
                "expected": [
                    "List[float]",
                    "str",
                    "List[str]",
                    "list",
                    "Dict[str, str]",
                    "List[List[Any]]"
                ],
                "pc": [
                    "int",
                    "Tuple[Any, Any, Any, Any, Any, Any, Any]"
                ]
            }
        },
        "TestPeriodicCallbackMath.test_clock_backwards": {
            "name": "test_clock_backwards",
            "location": 827,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "pc": []
            }
        },
        "TestIOLoopConfiguration.run_python": {
            "name": "run_python",
            "location": 845,
            "return": [
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "statements": [
                    "Type[object]",
                    "Mapping[str, Any]",
                    "str",
                    "denite.util.UserContext"
                ]
            },
            "variables": {
                "args": [
                    "List[str]"
                ],
                "statements": [
                    "list",
                    "List[bytes]",
                    "str",
                    "List[str]",
                    "Iterator[Any]"
                ]
            }
        },
        "TestIOLoopConfiguration.test_default": {
            "name": "test_default",
            "location": 853,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "cls": [
                    "Anaconda3.Lib.site-packages.astropy.time.core.Time",
                    "Type[bool]",
                    "Tuple[Any, Any]",
                    "datetime.datetime.datetime"
                ],
                "is_poll": [
                    "Dict[str, object]",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "TestIOLoopConfiguration.test_explicit_select": {
            "name": "test_explicit_select",
            "location": 868,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "default_class": [
                    "dict",
                    "T",
                    "Dict[str, Dict[str, str]]",
                    "asyncio.futures.Future[None]",
                    "tuple",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestIOLoopConfiguration.test_asyncio": {
            "name": "test_asyncio",
            "location": 876,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "cls": []
            }
        },
        "TestIOLoopConfiguration.test_asyncio_main": {
            "name": "test_asyncio_main",
            "location": 883,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "cls": []
            }
        },
        "TestIOLoopConfiguration.test_twisted": {
            "name": "test_twisted",
            "location": 893,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "cls": []
            }
        },
        "global": {
            "asyncio": [
                "list",
                "set",
                "Dict[str, Optional[bool]]",
                "Dict[str, Union[None, Any, Any]]",
                "Type[Optional[Any]]"
            ],
            "futures": [
                "str",
                "List[str]",
                "list",
                "List[Dict[str, Any]]",
                "List[int]"
            ],
            "twisted": [
                "str",
                "List[str]",
                "int",
                "Dict[str, List[Any]]",
                "Tuple[str, str, str, str, str, str, str, str]"
            ]
        }
    },
    "tornado-5.0.2/tornado/test/iostream_test.py": {
        "_server_ssl_options": {
            "name": "_server_ssl_options",
            "location": 33,
            "return": [
                "Dict[str, Any]",
                "dict",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": []
            },
            "variables": {}
        },
        "HelloHandler.get": {
            "name": "get",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TestIOStreamWebMixin._make_client_iostream": {
            "name": "_make_client_iostream",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TestIOStreamWebMixin.get_app": {
            "name": "get_app",
            "location": 49,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TestIOStreamWebMixin.test_connection_closed": {
            "name": "test_connection_closed",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "TestIOStreamWebMixin.test_read_until_close": {
            "name": "test_read_until_close",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "data": [
                    "str",
                    "Tuple[int]",
                    "bytes",
                    "Tuple[Dict, int]"
                ],
                "stream": [
                    "str",
                    "int"
                ]
            }
        },
        "TestIOStreamWebMixin.test_read_zero_bytes": {
            "name": "test_read_zero_bytes",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "data": [
                    "str",
                    "bytes",
                    "list",
                    "Tuple[str, str]"
                ],
                "stream": [
                    "int",
                    "str",
                    "Dict[str, int]"
                ]
            }
        },
        "TestIOStreamWebMixin.connected_callback": {
            "name": "connected_callback",
            "location": 101,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TestIOStreamWebMixin.write_callback": {
            "name": "write_callback",
            "location": 110,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TestIOStreamWebMixin.test_write_while_connecting": {
            "name": "test_write_while_connecting",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "connected": [
                    "str"
                ],
                "data": [
                    "str"
                ],
                "stream": [
                    "str"
                ],
                "written": [
                    "int",
                    "str",
                    "list",
                    "bool",
                    "Dict[str, int]"
                ]
            }
        },
        "TestIOStreamWebMixin.test_future_interface": {
            "name": "test_future_interface",
            "location": 130,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "body": [
                    "int",
                    "list",
                    "str"
                ],
                "connect_result": [
                    "dict",
                    "hashlib._Hash",
                    "str"
                ],
                "content_length": [
                    "int",
                    "list",
                    "bytes"
                ],
                "first_line": [
                    "dict",
                    "list",
                    "List[int]"
                ],
                "header_data": [
                    "str",
                    "Dict[str, str]",
                    "bytes"
                ],
                "headers": [
                    "dict",
                    "Dict[str, str]"
                ],
                "stream": [
                    "List[Tuple[int, int, int, int, int, int]]",
                    "int",
                    "Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestIOStreamWebMixin.test_future_close_while_reading": {
            "name": "test_future_close_while_reading",
            "location": 148,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "stream": [
                    "bytes",
                    "os.stat_result"
                ]
            }
        },
        "TestIOStreamWebMixin.test_future_read_until_close": {
            "name": "test_future_read_until_close",
            "location": 157,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "body": [
                    "List[int]",
                    "Dict[str, Any]",
                    "Tuple[str]",
                    "Dict[str, Union[int, str]]"
                ],
                "stream": [
                    "dict",
                    "os.stat_result"
                ]
            }
        },
        "TestReadWriteMixin.make_iostream_pair": {
            "name": "make_iostream_pair",
            "location": 176,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TestReadWriteMixin.test_write_zero_bytes": {
            "name": "test_write_zero_bytes",
            "location": 179,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "rs": [
                    "List[int]",
                    "Pattern[str]",
                    "Union[Literal, Literal]",
                    "frozenset[Any]"
                ],
                "ws": [
                    "os.stat_result",
                    "Tuple[str, str]",
                    "Dict[str, int]",
                    "list",
                    "Tuple[Literal, Literal]"
                ]
            }
        },
        "TestReadWriteMixin.streaming_callback": {
            "name": "streaming_callback",
            "location": 241,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "data": [
                    "Mapping[str, Any]",
                    "dict",
                    "Dict[str, Any]",
                    "float",
                    "List[List[Any]]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TestReadWriteMixin.final_callback": {
            "name": "final_callback",
            "location": 198,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "data": [
                    "dict",
                    "str",
                    "bytes"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TestReadWriteMixin.test_streaming_callback": {
            "name": "test_streaming_callback",
            "location": 188,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "chunks": [
                    "bytes",
                    "int",
                    "dict"
                ],
                "data": [
                    "str",
                    "Dict[str, Dict[str, Any]]",
                    "bytes",
                    "OrderedDict",
                    "Dict[str, str]",
                    "Dict[str, Dict[str, float]]"
                ],
                "final_called": [
                    "set",
                    "dict",
                    "list"
                ],
                "rs": [
                    "bytes",
                    "str",
                    "Counter[str]",
                    "List[int]",
                    "Final"
                ],
                "ws": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "TestReadWriteMixin.closed_callback": {
            "name": "closed_callback",
            "location": 225,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "chunk": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TestReadWriteMixin.test_streaming_callback_with_data_in_buffer": {
            "name": "test_streaming_callback_with_data_in_buffer",
            "location": 218,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "data": [
                    "str",
                    "Dict[str, Dict[str, Any]]",
                    "bytes",
                    "OrderedDict",
                    "Dict[str, str]",
                    "Dict[str, Dict[str, float]]"
                ],
                "rs": [
                    "str",
                    "hashlib._Hash",
                    "Dict[int, str]"
                ],
                "ws": [
                    "Generator[Any, None, None]"
                ]
            }
        },
        "TestReadWriteMixin.close_callback": {
            "name": "close_callback",
            "location": 455,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TestReadWriteMixin.test_streaming_until_close": {
            "name": "test_streaming_until_close",
            "location": 235,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "chunks": [
                    "List[int]",
                    "list",
                    "float",
                    "List[str]",
                    "str",
                    "int"
                ],
                "closed": [
                    "bytes",
                    "bool",
                    "int"
                ],
                "rs": [
                    "str",
                    "[str]"
                ],
                "ws": [
                    "str",
                    "os.stat_result",
                    "Dict[str, str]"
                ]
            }
        },
        "TestReadWriteMixin.rs_task": {
            "name": "rs_task",
            "location": 268,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TestReadWriteMixin.ws_task": {
            "name": "ws_task",
            "location": 272,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TestReadWriteMixin.f": {
            "name": "f",
            "location": 319,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "chunks": [
                    "list",
                    "List[int]",
                    "Dict[str, Union[Any, str]]"
                ]
            }
        },
        "TestReadWriteMixin.test_streaming_until_close_future": {
            "name": "test_streaming_until_close_future",
            "location": 262,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "chunks": [
                    "list",
                    "Dict[str, object]",
                    "int",
                    "dict",
                    "str",
                    "asyncio.futures.Future[Any]"
                ],
                "rs": [
                    "tuple",
                    "str",
                    "Dict[str, Union[float, str]]",
                    "float",
                    "int"
                ],
                "ws": [
                    "Generator[Any, None, None]"
                ]
            }
        },
        "TestReadWriteMixin.callback1": {
            "name": "callback1",
            "location": 298,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "data": [
                    "Mapping[str, Any]",
                    "dict",
                    "Dict[str, Any]",
                    "float",
                    "List[List[Any]]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TestReadWriteMixin.callback2": {
            "name": "callback2",
            "location": 303,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "data": [
                    "Mapping[str, Any]",
                    "dict",
                    "Dict[str, Any]",
                    "float",
                    "List[List[Any]]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TestReadWriteMixin.test_delayed_close_callback": {
            "name": "test_delayed_close_callback",
            "location": 287,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "chunks": [
                    "list",
                    "Dict[str, object]",
                    "int",
                    "dict",
                    "str",
                    "asyncio.futures.Future[Any]"
                ],
                "rs": [
                    "int",
                    "str",
                    "Counter[str]",
                    "List[List[int]]",
                    "List[int]",
                    "list"
                ],
                "ws": [
                    "Generator[Any, None, None]"
                ]
            }
        },
        "TestReadWriteMixin.test_future_delayed_close_callback": {
            "name": "test_future_delayed_close_callback",
            "location": 312,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "rs": [
                    "tuple",
                    "str",
                    "Dict[str, Union[float, str]]",
                    "float",
                    "int"
                ],
                "ws": [
                    "Generator[Any, None, None]"
                ]
            }
        },
        "TestReadWriteMixin.test_close_buffered_data": {
            "name": "test_close_buffered_data",
            "location": 332,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "data": [
                    "str",
                    "Dict[str, Dict[str, Any]]",
                    "Dict[str, str]",
                    "List[str]"
                ],
                "rs": [
                    "dict",
                    "List[Union[Any, int]]",
                    "float",
                    "int",
                    "Dict[str, int]"
                ],
                "ws": [
                    "int",
                    "dict",
                    "str",
                    "frozenset[str]",
                    "memoryview"
                ]
            }
        },
        "TestReadWriteMixin.test_read_until_close_after_close": {
            "name": "test_read_until_close_after_close",
            "location": 360,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "data": [
                    "str",
                    "Dict[str, Dict[str, Any]]",
                    "Dict[str, str]",
                    "List[str]"
                ],
                "rs": [
                    "int",
                    "dict",
                    "list"
                ],
                "ws": [
                    "Generator[Any, None, None]",
                    "Dict[str, int]",
                    "Tuple[Literal, Literal]"
                ]
            }
        },
        "TestReadWriteMixin.test_streaming_read_until_close_after_close": {
            "name": "test_streaming_read_until_close_after_close",
            "location": 380,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "data": [
                    "str",
                    "Dict[str, Dict[str, Any]]",
                    "Dict[str, str]",
                    "List[str]"
                ],
                "rs": [
                    "int"
                ],
                "streaming_data": [
                    "List[str]",
                    "Dict[str, Any]",
                    "list",
                    "Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]",
                    "Dict[str, Dict[str, Any]]",
                    "Dict[str, Union[Any, Any]]",
                    "Set[str]"
                ],
                "ws": [
                    "Generator[Any, None, None]",
                    "Dict[str, int]",
                    "Tuple[Literal, Literal]"
                ]
            }
        },
        "TestReadWriteMixin.test_large_read_until": {
            "name": "test_large_read_until",
            "location": 401,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "NUM_KB": [
                    "int",
                    "Dict[str, int]"
                ],
                "data": [
                    "int",
                    "str",
                    "bytes"
                ],
                "rs": [
                    "Counter[Any]",
                    "List[float]",
                    "int",
                    "List[List[Any]]"
                ],
                "ws": [
                    "str",
                    "Dict[str, int]",
                    "Tuple[Literal, Literal]",
                    "Tuple[str, str]"
                ]
            }
        },
        "TestReadWriteMixin.test_close_callback_with_pending_read": {
            "name": "test_close_callback_with_pending_read",
            "location": 425,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "OK": [
                    "list",
                    "str",
                    "DefaultDict[Any, List[Any]]",
                    "List[str]",
                    "Dict[str, Tuple[str, str]]"
                ],
                "res": [
                    "str",
                    "platform.Any",
                    "list",
                    "List[List[Any]]",
                    "List[Union[Any, Any]]"
                ],
                "rs": [
                    "int",
                    "str"
                ],
                "ws": [
                    "list",
                    "dict",
                    "os.stat_result"
                ]
            }
        },
        "TestReadWriteMixin.test_future_close_callback": {
            "name": "test_future_close_callback",
            "location": 449,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "closed": [
                    "list",
                    "str"
                ],
                "future": [],
                "rs": [
                    "int",
                    "Dict[str, Any]",
                    "dict"
                ],
                "ws": [
                    "List[str]",
                    "str",
                    "Dict[str, Type[Any]]"
                ]
            }
        },
        "TestReadWriteMixin.test_write_memoryview": {
            "name": "test_write_memoryview",
            "location": 472,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "data": [
                    "str",
                    "Dict[str, Dict[str, Any]]",
                    "bytes",
                    "OrderedDict",
                    "Dict[str, str]",
                    "Dict[str, Dict[str, float]]"
                ],
                "rs": [
                    "set",
                    "List[int]"
                ],
                "ws": [
                    "list",
                    "str",
                    "frozenset[str]",
                    "int"
                ]
            }
        },
        "TestReadWriteMixin.test_read_bytes_partial": {
            "name": "test_read_bytes_partial",
            "location": 483,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "data": [
                    "str",
                    "bytes",
                    "list",
                    "Tuple[str, str]"
                ],
                "rs": [
                    "List[Union[Any, int]]",
                    "int",
                    "List[slice]",
                    "float",
                    "list"
                ],
                "ws": [
                    "str",
                    "Dict[str, int]",
                    "Tuple[Literal, Literal]",
                    "Tuple[str, str]"
                ]
            }
        },
        "TestReadWriteMixin.test_read_until_max_bytes": {
            "name": "test_read_until_max_bytes",
            "location": 508,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "data": [
                    "str",
                    "bytes",
                    "list",
                    "Tuple[str, str]"
                ],
                "rs": [
                    "str",
                    "frozenset[str]"
                ],
                "ws": [
                    "Tuple[str, str]",
                    "Tuple[Literal, Literal]",
                    "os.stat_result",
                    "List[None]"
                ]
            }
        },
        "TestReadWriteMixin.test_read_until_max_bytes_inline": {
            "name": "test_read_until_max_bytes_inline",
            "location": 535,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "data": [
                    "str",
                    "Dict[str, Dict[str, Any]]",
                    "bytes",
                    "OrderedDict",
                    "Dict[str, str]",
                    "Dict[str, Dict[str, float]]"
                ],
                "rs": [
                    "int",
                    "List[str]",
                    "list",
                    "frozenset[Any]",
                    "Generator[Any, None, None]",
                    "str"
                ],
                "ws": [
                    "int",
                    "str",
                    "frozenset[str]",
                    "Optional[str]",
                    "tuple",
                    "list"
                ]
            }
        },
        "TestReadWriteMixin.test_read_until_max_bytes_ignores_extra": {
            "name": "test_read_until_max_bytes_ignores_extra",
            "location": 552,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "data": [
                    "str",
                    "Dict[str, Dict[str, Any]]",
                    "bytes",
                    "OrderedDict",
                    "Dict[str, str]",
                    "Dict[str, Dict[str, float]]"
                ],
                "rs": [
                    "int",
                    "List[str]",
                    "list",
                    "frozenset[Any]",
                    "Generator[Any, None, None]",
                    "str"
                ],
                "ws": [
                    "int",
                    "str",
                    "frozenset[str]",
                    "Optional[str]",
                    "tuple",
                    "list"
                ]
            }
        },
        "TestReadWriteMixin.test_read_until_regex_max_bytes": {
            "name": "test_read_until_regex_max_bytes",
            "location": 568,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "data": [
                    "str",
                    "bytes",
                    "list",
                    "Tuple[str, str]"
                ],
                "rs": [
                    "frozenset[str]",
                    "List[List[Any]]",
                    "list",
                    "frozenset[Any]"
                ],
                "ws": [
                    "Tuple[str, str]",
                    "Tuple[Literal, Literal]",
                    "os.stat_result",
                    "List[None]"
                ]
            }
        },
        "TestReadWriteMixin.test_read_until_regex_max_bytes_inline": {
            "name": "test_read_until_regex_max_bytes_inline",
            "location": 595,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "data": [
                    "str",
                    "Dict[str, Dict[str, Any]]",
                    "bytes",
                    "OrderedDict",
                    "Dict[str, str]",
                    "Dict[str, Dict[str, float]]"
                ],
                "rs": [
                    "int",
                    "str",
                    "list",
                    "frozenset[Any]"
                ],
                "ws": [
                    "int",
                    "str",
                    "frozenset[str]",
                    "Optional[str]",
                    "tuple",
                    "list"
                ]
            }
        },
        "TestReadWriteMixin.test_read_until_regex_max_bytes_ignores_extra": {
            "name": "test_read_until_regex_max_bytes_ignores_extra",
            "location": 612,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "data": [
                    "str",
                    "Dict[str, Dict[str, Any]]",
                    "bytes",
                    "OrderedDict",
                    "Dict[str, str]",
                    "Dict[str, Dict[str, float]]"
                ],
                "rs": [
                    "int",
                    "str",
                    "list",
                    "frozenset[Any]"
                ],
                "ws": [
                    "int",
                    "str",
                    "frozenset[str]",
                    "Optional[str]",
                    "tuple",
                    "list"
                ]
            }
        },
        "TestReadWriteMixin.test_small_reads_from_large_buffer": {
            "name": "test_small_reads_from_large_buffer",
            "location": 628,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "data": [
                    "str",
                    "Dict[str, Dict[str, Any]]",
                    "bytes",
                    "OrderedDict",
                    "Dict[str, str]",
                    "Dict[str, Dict[str, float]]"
                ],
                "rs": [
                    "List[int]",
                    "Iterator[float]"
                ],
                "ws": [
                    "int",
                    "Tuple[Any, Any, Any, Any]",
                    "hashlib._Hash",
                    "str",
                    "list"
                ]
            }
        },
        "TestReadWriteMixin.test_small_read_untils_from_large_buffer": {
            "name": "test_small_read_untils_from_large_buffer",
            "location": 643,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "data": [
                    "str",
                    "Dict[str, Dict[str, Any]]",
                    "bytes",
                    "OrderedDict",
                    "Dict[str, str]",
                    "Dict[str, Dict[str, float]]"
                ],
                "rs": [
                    "int",
                    "float"
                ],
                "ws": [
                    "int",
                    "Tuple[Any, Any, Any, Any]",
                    "hashlib._Hash",
                    "str",
                    "list"
                ]
            }
        },
        "TestReadWriteMixin.test_flow_control": {
            "name": "test_flow_control",
            "location": 658,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "MB": [
                    "int",
                    "str",
                    "list",
                    "Final"
                ],
                "rs": [
                    "str",
                    "int",
                    "float"
                ],
                "ws": [
                    "int",
                    "Tuple[Any, Any, Any, Any]",
                    "Dict[int, int]",
                    "list",
                    "str"
                ]
            }
        },
        "TestReadWriteMixin.sleep_some": {
            "name": "sleep_some",
            "location": 723,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TestReadWriteMixin.test_read_into": {
            "name": "test_read_into",
            "location": 678,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "buf": [
                    "os.stat_result",
                    "int",
                    "bytes"
                ],
                "data": [
                    "str",
                    "bytes"
                ],
                "rs": [
                    "bytes",
                    "slice",
                    "List[Tuple[Any, Any]]",
                    "os.stat_result",
                    "Counter[str]",
                    "float"
                ],
                "ws": [
                    "str"
                ]
            }
        },
        "TestReadWriteMixin.test_read_into_partial": {
            "name": "test_read_into_partial",
            "location": 720,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "buf": [
                    "bytes",
                    "int",
                    "os.stat_result"
                ],
                "data": [
                    "str",
                    "bytes",
                    "list",
                    "Tuple[str, str]"
                ],
                "rs": [
                    "int",
                    "List[bool]",
                    "Counter[str]",
                    "List[Tuple[Any, Any]]",
                    "float"
                ],
                "ws": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "TestReadWriteMixin.test_read_into_zero_bytes": {
            "name": "test_read_into_zero_bytes",
            "location": 752,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "buf": [
                    "str",
                    "List[str]",
                    "Dict[str, Dict[str, str]]",
                    "Union[Literal, str]"
                ],
                "fut": [
                    "int",
                    "Pattern[str]",
                    "Dict[int, bytes]",
                    "Set[str]"
                ],
                "rs": [
                    "Generator[Any, None, None]",
                    "float",
                    "Counter[Any]"
                ],
                "ws": [
                    "int",
                    "list",
                    "Dict[str, List[str]]",
                    "Dict[str, Dict[str, str]]",
                    "float",
                    "Tuple[int, Any]",
                    "Pattern[str]",
                    "Tuple[Literal, Literal, Literal]"
                ]
            }
        },
        "TestReadWriteMixin.produce": {
            "name": "produce",
            "location": 774,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "data": [
                    "int",
                    "dict",
                    "List[int]",
                    "Dict[str, int]",
                    "bytes",
                    "List[str]",
                    "str"
                ],
                "remaining": [
                    "list",
                    "Dict[str, Union[Literal, Any]]",
                    "float",
                    "List[str]",
                    "str",
                    "int",
                    "Tuple[Literal]"
                ],
                "size": [
                    "int"
                ]
            }
        },
        "TestReadWriteMixin.consume": {
            "name": "consume",
            "location": 785,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "buf": [
                    "int",
                    "List[int]",
                    "List[List[Any]]",
                    "Dict[str, Union[Any, Any, Any, Any]]"
                ],
                "data": [
                    "List[Tuple[Any, Any, Any, Any, str]]",
                    "List[Tuple[Any, Any, Any, Any, Any]]",
                    "bool",
                    "List[tuple]",
                    "List[Dict[Any, Any]]"
                ],
                "n": [
                    "str",
                    "bool",
                    "List[int]",
                    "Counter[str]",
                    "Set[str]",
                    "bytes"
                ],
                "remaining": [
                    "int",
                    "dict",
                    "Union[float, int]",
                    "tuple",
                    "str"
                ],
                "size": [
                    "int",
                    "Tuple[int, int]"
                ]
            }
        },
        "TestReadWriteMixin.main": {
            "name": "main",
            "location": 805,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TestReadWriteMixin.test_many_mixed_reads": {
            "name": "test_many_mixed_reads",
            "location": 762,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "consume_hash": [
                    "str",
                    "bytes",
                    "List[str]",
                    "int",
                    "Optional[str]"
                ],
                "nbytes": [
                    "str",
                    "List[str]",
                    "int",
                    "Dict[str, List[Any]]",
                    "Tuple[str, str, str, str, str, str, str, str]"
                ],
                "produce_hash": [
                    "str",
                    "bytes",
                    "List[str]",
                    "int",
                    "Optional[str]"
                ],
                "r": [
                    "int",
                    "str",
                    "list",
                    "List[float]",
                    "Pattern[str]"
                ],
                "rs": [
                    "tuple",
                    "str",
                    "Dict[str, Union[float, str]]",
                    "float",
                    "int"
                ],
                "ws": [
                    "Generator[Any, None, None]"
                ]
            }
        },
        "TestIOStreamMixin._make_server_iostream": {
            "name": "_make_server_iostream",
            "location": 817,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "connection": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TestIOStreamMixin._make_client_iostream": {
            "name": "_make_client_iostream",
            "location": 820,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "connection": [
                    "str",
                    "bool"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TestIOStreamMixin.accept_callback": {
            "name": "accept_callback",
            "location": 827,
            "return": [
                ""
            ],
            "arguments": {
                "address": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "args": [],
                "connection": [
                    "dict"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TestIOStreamMixin.connect_callback": {
            "name": "connect_callback",
            "location": 852,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "connect_called": [
                    "int",
                    "str",
                    "list",
                    "Set[int]",
                    "Dict[str, Any]",
                    "Dict[Any, set]"
                ]
            }
        },
        "TestIOStreamMixin.make_iostream_pair": {
            "name": "make_iostream_pair",
            "location": 823,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "client_stream": [],
                "listener": [
                    "str",
                    "int"
                ],
                "port": [
                    "int",
                    "str"
                ],
                "streams": [
                    "str",
                    "int",
                    "Type[Callable[Any, Any]]",
                    "Dict[str, List[int]]",
                    "Optional[str]",
                    "float",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "TestIOStreamMixin.test_connection_refused": {
            "name": "test_connection_refused",
            "location": 843,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_ERRNO_CONNREFUSED": [],
                "cleanup_func": [
                    "int",
                    "Callable",
                    "Type[Callable[..., Any]]",
                    "Type[Callable[[], Any]]",
                    "staticmethod"
                ],
                "connect_called": [
                    "List[float]",
                    "int",
                    "List[List[Any]]",
                    "str"
                ],
                "port": [
                    "tuple",
                    "int",
                    "float"
                ],
                "stream": [
                    "dict",
                    "logging.StreamHandler",
                    "logging.handlers.SMTPHandler",
                    "logging.Handler",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestIOStreamMixin.test_gaierror": {
            "name": "test_gaierror",
            "location": 870,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "s": [],
                "stream": [
                    "str",
                    "int",
                    "float",
                    "dict"
                ]
            }
        },
        "TestIOStreamMixin.test_read_callback_error": {
            "name": "test_read_callback_error",
            "location": 886,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "client": [
                    "set"
                ],
                "server": [
                    "Counter[str]"
                ]
            }
        },
        "TestIOStreamMixin.test_read_until_close_with_error": {
            "name": "test_read_until_close_with_error",
            "location": 905,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "client": [
                    "str"
                ],
                "server": [
                    "list",
                    "bool"
                ]
            }
        },
        "TestIOStreamMixin.test_inline_read_error": {
            "name": "test_inline_read_error",
            "location": 918,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "client": [
                    "bool"
                ],
                "server": [
                    "str",
                    "Tuple[Literal, Literal]",
                    "Dict[str, str]",
                    "Type[str]"
                ]
            }
        },
        "TestIOStreamMixin.fake_read_from_fd": {
            "name": "fake_read_from_fd",
            "location": 948,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TestIOStreamMixin.test_async_read_error_logging": {
            "name": "test_async_read_error_logging",
            "location": 937,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "client": [
                    "List[asyncio.futures.Future[Any]]",
                    "asyncio.futures.Future[Tuple[Any, Any]]"
                ],
                "read_from_fd": [
                    "str",
                    "Dict[str, Dict[str, Any]]"
                ],
                "server": [
                    "str"
                ]
            }
        },
        "TestIOStreamMixin.produce": {
            "name": "produce",
            "location": 971,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "data": [
                    "str",
                    "bytes"
                ]
            }
        },
        "TestIOStreamMixin.consume": {
            "name": "consume",
            "location": 977,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "nread": [
                    "int",
                    "Counter[int]",
                    "defaultdict",
                    "bytearray",
                    "list"
                ],
                "res": [
                    "list",
                    "str",
                    "List[List[Any]]",
                    "int"
                ]
            }
        },
        "TestIOStreamMixin.main": {
            "name": "main",
            "location": 984,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TestIOStreamMixin.test_future_write": {
            "name": "test_future_write",
            "location": 959,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "client": [
                    "List[asyncio.futures.Future[Any]]",
                    "asyncio.futures.Future[Tuple[Any, Any]]"
                ],
                "m": [
                    "str",
                    "List[str]",
                    "int",
                    "Dict[str, List[Any]]",
                    "Tuple[str, str, str, str, str, str, str, str]"
                ],
                "n": [
                    "int",
                    "str",
                    "bytes"
                ],
                "nproducers": [
                    "str",
                    "List[str]",
                    "int",
                    "Dict[str, List[Any]]",
                    "Tuple[str, str, str, str, str, str, str, str]"
                ],
                "server": [
                    "Generator[Any, None, None]"
                ],
                "total_bytes": [
                    "Callable(chr)[[int], str]",
                    "int",
                    "str",
                    "property"
                ]
            }
        },
        "TestIOStreamWebHTTP._make_client_iostream": {
            "name": "_make_client_iostream",
            "location": 995,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TestIOStreamWebHTTPS._make_client_iostream": {
            "name": "_make_client_iostream",
            "location": 1000,
            "return": [],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TestIOStream._make_server_iostream": {
            "name": "_make_server_iostream",
            "location": 1006,
            "return": [
                "str"
            ],
            "arguments": {
                "args": [],
                "connection": [
                    "Dict[str, float]",
                    "T"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TestIOStream._make_client_iostream": {
            "name": "_make_client_iostream",
            "location": 1009,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "args": [],
                "connection": [
                    "Callable"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TestIOStreamSSL._make_server_iostream": {
            "name": "_make_server_iostream",
            "location": 1014,
            "return": [
                "str"
            ],
            "arguments": {
                "args": [],
                "connection": [
                    "bool",
                    "int",
                    "dict"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "connection": []
            }
        },
        "TestIOStreamSSL._make_client_iostream": {
            "name": "_make_client_iostream",
            "location": 1021,
            "return": [
                "str"
            ],
            "arguments": {
                "args": [],
                "connection": [
                    "str"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TestIOStreamSSLContext._make_server_iostream": {
            "name": "_make_server_iostream",
            "location": 1031,
            "return": [
                "str"
            ],
            "arguments": {
                "args": [],
                "connection": [
                    "dict",
                    "int",
                    "List[util.Block]",
                    "util.XYZ",
                    "List[str]",
                    "bytes"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "connection": [],
                "context": [
                    "str",
                    "hashlib._BlakeHash"
                ]
            }
        },
        "TestIOStreamSSLContext._make_client_iostream": {
            "name": "_make_client_iostream",
            "location": 1041,
            "return": [],
            "arguments": {
                "args": [],
                "connection": [
                    "bool",
                    "Optional[str]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "context": [
                    "ssl.SSLContext"
                ]
            }
        },
        "TestIOStreamStartTLS.setUp": {
            "name": "setUp",
            "location": 1047,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "client_stream": [],
                "listener": [
                    "str",
                    "Dict[str, str]"
                ],
                "port": [
                    "str"
                ],
                "server_accepted": [
                    "Dict[str, int]",
                    "int",
                    "List[str]",
                    "Dict[Tuple[str, str], int]",
                    "str",
                    "float"
                ],
                "server_stream": [
                    "bool",
                    "int"
                ]
            }
        },
        "TestIOStreamStartTLS.tearDown": {
            "name": "tearDown",
            "location": 1064,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TestIOStreamStartTLS.accept": {
            "name": "accept",
            "location": 1072,
            "return": [
                ""
            ],
            "arguments": {
                "address": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "args": [],
                "connection": [
                    "int",
                    "Callable",
                    "str"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "server_stream": [
                    "int",
                    "list"
                ]
            }
        },
        "TestIOStreamStartTLS.client_send_line": {
            "name": "client_send_line",
            "location": 1079,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "line": [
                    "str",
                    "List[str]",
                    "IO"
                ],
                "self": []
            },
            "variables": {
                "recv_line": [
                    "int",
                    "List[Union[int, str]]",
                    "Tuple[str]",
                    "str",
                    "List[float]"
                ]
            }
        },
        "TestIOStreamStartTLS.server_send_line": {
            "name": "server_send_line",
            "location": 1085,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "line": [
                    "str",
                    "List[str]",
                    "dict",
                    "bool"
                ],
                "self": []
            },
            "variables": {
                "recv_line": [
                    "int",
                    "List[Union[int, str]]",
                    "Tuple[str]",
                    "str",
                    "List[float]"
                ]
            }
        },
        "TestIOStreamStartTLS.client_start_tls": {
            "name": "client_start_tls",
            "location": 1090,
            "return": [
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "server_hostname": [
                    "Optional[str]"
                ],
                "ssl_options": [
                    "Optional[str]"
                ]
            },
            "variables": {
                "client_stream": [
                    "Generator[Any, None, None]"
                ]
            }
        },
        "TestIOStreamStartTLS.server_start_tls": {
            "name": "server_start_tls",
            "location": 1095,
            "return": [
                "Optional[int]",
                "str",
                "int",
                "List[int]",
                "Optional[bool]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "ssl_options": [
                    "Optional[Sequence[str]]",
                    "list",
                    "List[str]",
                    "str",
                    "int",
                    "List[int]"
                ]
            },
            "variables": {
                "server_stream": [
                    "str",
                    "int",
                    "tuple",
                    "Dict[str, Dict[str, Any]]",
                    "list"
                ]
            }
        },
        "TestIOStreamStartTLS.test_start_tls_smtp": {
            "name": "test_start_tls_smtp",
            "location": 1101,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "client_future": [
                    "List[Union[Any, Any]]",
                    "Dict[str, Union[Any, str]]",
                    "Dict[str, Dict[str, Any]]"
                ],
                "client_stream": [
                    "int"
                ],
                "server_future": [
                    "int",
                    "Dict[str, Any]",
                    "list"
                ],
                "server_stream": [
                    "int",
                    "Type[Dict[str, Any]]",
                    "str",
                    "float"
                ]
            }
        },
        "TestIOStreamStartTLS.test_handshake_fail": {
            "name": "test_handshake_fail",
            "location": 1122,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "client_future": [
                    "qutebrowser.utils.log.ColoredFormatter",
                    "dict",
                    "int"
                ],
                "server_future": [
                    "Tuple[Literal, Literal, Literal, Literal, Literal]",
                    "float",
                    "tuple",
                    "str",
                    "List[float]",
                    "Tuple[Literal, Literal]"
                ]
            }
        },
        "TestIOStreamStartTLS.test_check_hostname": {
            "name": "test_check_hostname",
            "location": 1133,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "client_future": [],
                "server_future": [
                    "Tuple[Literal, Literal, Literal, Literal, Literal]",
                    "float",
                    "tuple",
                    "str",
                    "List[float]",
                    "Tuple[Literal, Literal]"
                ]
            }
        },
        "TestServer.handle_stream": {
            "name": "handle_stream",
            "location": 1228,
            "return": [
                ""
            ],
            "arguments": {
                "address": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "args": [],
                "kwargs": [],
                "self": [],
                "stream": [
                    "str",
                    "bytes",
                    "BinaryIO"
                ]
            },
            "variables": {
                "stream": [
                    "list",
                    "List[bytes]",
                    "dict",
                    "os._wrap_close",
                    "List[str]",
                    "bytes"
                ]
            }
        },
        "TestServer.handshake_done": {
            "name": "handshake_done",
            "location": 1232,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TestServer.handle_connection": {
            "name": "handle_connection",
            "location": 1200,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "stream": [
                    "int",
                    "Callable",
                    "str"
                ]
            },
            "variables": {}
        },
        "TestServer.handshake2_done": {
            "name": "handshake2_done",
            "location": 1235,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "WaitForHandshakeTest.connect_to_server": {
            "name": "connect_to_server",
            "location": 1152,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "server_cls": [
                    "dict",
                    "int",
                    "str"
                ]
            },
            "variables": {
                "client": [],
                "port": [
                    "str",
                    "TextIO"
                ],
                "server": [
                    "str",
                    "list",
                    "Dict[str, str]"
                ],
                "sock": [
                    "int",
                    "TextIO",
                    "str"
                ]
            }
        },
        "WaitForHandshakeTest.test_wait_for_handshake_callback": {
            "name": "test_wait_for_handshake_callback",
            "location": 1170,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "handshake_future": [
                    "str",
                    "List[str]",
                    "int",
                    "Dict[str, List[Any]]",
                    "Tuple[str, str, str, str, str, str, str, str]"
                ],
                "test": [
                    "List[Union[Any, Any]]",
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]",
                    "str",
                    "List[Union[Any, Any, Any]]",
                    "bool"
                ]
            }
        },
        "WaitForHandshakeTest.test_wait_for_handshake_future": {
            "name": "test_wait_for_handshake_future",
            "location": 1190,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "handshake_future": [
                    "str",
                    "List[str]",
                    "int",
                    "Dict[str, List[Any]]",
                    "Tuple[str, str, str, str, str, str, str, str]"
                ],
                "test": [
                    "List[Union[Any, Any]]",
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]",
                    "str",
                    "List[Union[Any, Any, Any]]",
                    "bool"
                ]
            }
        },
        "WaitForHandshakeTest.test_wait_for_handshake_already_waiting_error": {
            "name": "test_wait_for_handshake_already_waiting_error",
            "location": 1208,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "handshake_future": [
                    "str",
                    "List[str]",
                    "int",
                    "Dict[str, List[Any]]",
                    "Tuple[str, str, str, str, str, str, str, str]"
                ],
                "test": [
                    "List[Union[Any, Any]]",
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]",
                    "str",
                    "List[Union[Any, Any, Any]]",
                    "bool"
                ]
            }
        },
        "WaitForHandshakeTest.test_wait_for_handshake_already_connected": {
            "name": "test_wait_for_handshake_already_connected",
            "location": 1224,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "handshake_future": [
                    "str",
                    "List[str]",
                    "int",
                    "Dict[str, List[Any]]",
                    "Tuple[str, str, str, str, str, str, str, str]"
                ]
            }
        },
        "TestPipeIOStream.make_iostream_pair": {
            "name": "make_iostream_pair",
            "location": 1244,
            "return": [
                "str",
                "bytes",
                "int"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "r": [
                    "List[Tuple[Any, Any]]",
                    "float",
                    "T",
                    "Tuple[str, int]"
                ],
                "w": [
                    "int",
                    "float",
                    "str",
                    "list",
                    "dict"
                ]
            }
        },
        "TestPipeIOStream.test_pipe_iostream": {
            "name": "test_pipe_iostream",
            "location": 1249,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "data": [
                    "str",
                    "bytes",
                    "list",
                    "Tuple[str, str]"
                ],
                "rs": [
                    "frozenset[str]",
                    "list",
                    "int"
                ],
                "ws": [
                    "str",
                    "Dict[str, int]",
                    "Tuple[Literal, Literal]",
                    "Tuple[str, str]"
                ]
            }
        },
        "TestPipeIOStream.test_pipe_iostream_big_write": {
            "name": "test_pipe_iostream_big_write",
            "location": 1271,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "NUM_BYTES": [
                    "int",
                    "os.terminal_size",
                    "tuple"
                ],
                "data": [
                    "int",
                    "str",
                    "float"
                ],
                "rs": [
                    "os.stat_result"
                ],
                "ws": [
                    "int",
                    "Dict[int, bytes]",
                    "Pattern[str]",
                    "float"
                ]
            }
        },
        "TestStreamBuffer.setUp": {
            "name": "setUp",
            "location": 1292,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "random": [
                    "int",
                    "float",
                    "random.SystemRandom"
                ]
            }
        },
        "TestStreamBuffer.to_bytes": {
            "name": "to_bytes",
            "location": 1295,
            "return": [
                "dict",
                "str",
                "int"
            ],
            "arguments": {
                "args": [],
                "b": [
                    "bytes",
                    "int"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TestStreamBuffer.make_streambuffer": {
            "name": "make_streambuffer",
            "location": 1303,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "large_buf_threshold": [
                    "int",
                    "Callable",
                    "str"
                ],
                "self": []
            },
            "variables": {
                "_large_buf_threshold": [
                    "int",
                    "float",
                    "Type[Dict[str, Any]]"
                ],
                "buf": [
                    "List[int]",
                    "bytearray",
                    "str",
                    "int",
                    "list",
                    "memoryview"
                ]
            }
        },
        "TestStreamBuffer.check_peek": {
            "name": "check_peek",
            "location": 1309,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "buf": [
                    "str",
                    "bytes",
                    "Callable"
                ],
                "expected": [
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "Optional[str]",
                    "allennlp.common.util.JsonDict",
                    "dict",
                    "List[str]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "got": [
                    "int",
                    "str",
                    "List[str]",
                    "Dict[str, Any]",
                    "Dict[int, Any]"
                ],
                "size": [
                    "int",
                    "List[Tuple[str, float]]"
                ]
            }
        },
        "TestStreamBuffer.check_append_all_then_skip_all": {
            "name": "check_append_all_then_skip_all",
            "location": 1318,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "buf": [
                    "List[str]",
                    "int",
                    "list",
                    "bool",
                    "List[int]"
                ],
                "input_type": [
                    "int",
                    "bool",
                    "float",
                    "List['Photo']"
                ],
                "kwargs": [],
                "objs": [
                    "bool",
                    "Optional[str]",
                    "Union[float, Tuple[float, float]]",
                    "str"
                ],
                "self": []
            },
            "variables": {
                "expected": [
                    "str",
                    "list",
                    "Tuple[Literal, Literal, str]",
                    "List[Tuple[Any, Any]]",
                    "Tuple[int, int, Any, Any]"
                ],
                "n": [
                    "int",
                    "Dict[str, int]",
                    "float"
                ]
            }
        },
        "TestStreamBuffer.test_small": {
            "name": "test_small",
            "location": 1338,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "buf": [
                    "bytes",
                    "str"
                ],
                "objs": [
                    "str"
                ]
            }
        },
        "TestStreamBuffer.test_large": {
            "name": "test_large",
            "location": 1364,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "buf": [
                    "bytes",
                    "str"
                ],
                "objs": [
                    "str"
                ]
            }
        },
        "global": {
            "mock": []
        }
    },
    "tornado-5.0.2/tornado/test/locale_test.py": {
        "TranslationLoaderTest.clear_locale_cache": {
            "name": "clear_locale_cache",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TranslationLoaderTest.setUp": {
            "name": "setUp",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "saved": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "TranslationLoaderTest.tearDown": {
            "name": "tearDown",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TranslationLoaderTest.test_csv": {
            "name": "test_csv",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "locale": [
                    "str",
                    "int"
                ]
            }
        },
        "TranslationLoaderTest.test_csv_bom": {
            "name": "test_csv_bom",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "char_data": [
                    "str",
                    "Tuple[Dict, int]",
                    "bytes",
                    "List[List[str]]"
                ],
                "locale": [
                    "dict"
                ],
                "tmpdir": [
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "TranslationLoaderTest.test_gettext": {
            "name": "test_gettext",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "locale": [
                    "str",
                    "datetime.datetime.timedelta"
                ]
            }
        },
        "LocaleDataTest.test_non_ascii_name": {
            "name": "test_non_ascii_name",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "name": [
                    "dss.util.UrlBuilder",
                    "str",
                    "dict"
                ]
            }
        },
        "EnglishTest.test_format_date": {
            "name": "test_format_date",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "date": [
                    "datetime.date",
                    "datetime.datetime",
                    "datetime.datetime.date",
                    "datetime.datetime.datetime",
                    "datetime.date.time.datetime"
                ],
                "locale": [
                    "str"
                ],
                "now": [
                    "datetime.datetime",
                    "datetime.date",
                    "datetime.datetime.datetime"
                ]
            }
        },
        "EnglishTest.test_friendly_number": {
            "name": "test_friendly_number",
            "location": 116,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "locale": [
                    "Dict[str, str]",
                    "str",
                    "Dict[str, Union[Any, int, str]]"
                ]
            }
        },
        "EnglishTest.test_list": {
            "name": "test_list",
            "location": 120,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "locale": []
            }
        },
        "EnglishTest.test_format_day": {
            "name": "test_format_day",
            "location": 127,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "date": [
                    "datetime.date",
                    "datetime.datetime",
                    "datetime.datetime.date"
                ],
                "locale": [
                    "Dict[str, datetime.date]",
                    "Dict[str, datetime.datetime]"
                ]
            }
        },
        "global": {}
    },
    "tornado-5.0.2/tornado/test/locks_test.py": {
        "ConditionTest.setUp": {
            "name": "setUp",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "history": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ]
            }
        },
        "ConditionTest.callback": {
            "name": "callback",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "_": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "ConditionTest.record_done": {
            "name": "record_done",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "future": [
                    "str",
                    "Tuple[int, int]",
                    "int"
                ],
                "key": [
                    "str",
                    "bytes",
                    "int",
                    "Optional[bytes]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "ConditionTest.loop_briefly": {
            "name": "loop_briefly",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "ConditionTest.test_repr": {
            "name": "test_repr",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "c": [
                    "float",
                    "int",
                    "Tuple[Any, int]"
                ]
            }
        },
        "ConditionTest.test_notify": {
            "name": "test_notify",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "c": [
                    "Generator[Any, None, None]"
                ]
            }
        },
        "ConditionTest.test_notify_1": {
            "name": "test_notify_1",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "c": [
                    "int",
                    "float"
                ]
            }
        },
        "ConditionTest.test_notify_n": {
            "name": "test_notify_n",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "c": [
                    "float"
                ]
            }
        },
        "ConditionTest.test_notify_all": {
            "name": "test_notify_all",
            "location": 91,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "c": [
                    "float",
                    "dict",
                    "int"
                ]
            }
        },
        "ConditionTest.test_wait_timeout": {
            "name": "test_wait_timeout",
            "location": 106,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "c": [
                    "Generator[Any, None, None]"
                ],
                "wait": [
                    "int",
                    "float",
                    "Callable(chr)[[int], str]",
                    "Dict[str, Union[Any, str]]",
                    "str",
                    "Set[str]",
                    "T"
                ]
            }
        },
        "ConditionTest.test_wait_timeout_preempted": {
            "name": "test_wait_timeout_preempted",
            "location": 114,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "c": [
                    "Generator[Any, None, None]"
                ],
                "wait": [
                    "int",
                    "str"
                ]
            }
        },
        "ConditionTest.test_notify_n_with_timeout": {
            "name": "test_notify_n_with_timeout",
            "location": 124,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "c": [
                    "List[int]",
                    "list",
                    "Dict[str, int]",
                    "float"
                ]
            }
        },
        "ConditionTest.test_notify_all_with_timeout": {
            "name": "test_notify_all_with_timeout",
            "location": 148,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "c": [
                    "int",
                    "List[int]"
                ]
            }
        },
        "ConditionTest.test_nested_notify": {
            "name": "test_nested_notify",
            "location": 163,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "c": [
                    "int",
                    "List[str]"
                ],
                "futures": [
                    "Any[Any]",
                    "list",
                    "float"
                ]
            }
        },
        "ConditionTest.test_garbage_collection": {
            "name": "test_garbage_collection",
            "location": 179,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "c": [
                    "Iterator[Any]",
                    "List[str]",
                    "Generator[Any, None, None]"
                ],
                "future": [
                    "Tuple[Type[str], Type[bytes]]"
                ]
            }
        },
        "EventTest.test_repr": {
            "name": "test_repr",
            "location": 199,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "event": [
                    "str"
                ]
            }
        },
        "EventTest.test_event": {
            "name": "test_event",
            "location": 207,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "e": [
                    "int",
                    "list",
                    "Dict[str, Any]",
                    "List[int]",
                    "List[List[int]]",
                    "Callable(len)[[Sized], int]",
                    "DefaultDict[int, List[Any]]",
                    "DefaultDict"
                ],
                "future_0": [
                    "str",
                    "Dict[str, Type[Any]]",
                    "Dict[str, int]"
                ],
                "future_1": [
                    "str",
                    "Dict[str, Type[Any]]",
                    "Dict[str, int]"
                ],
                "future_2": [
                    "str",
                    "Dict[str, Type[Any]]",
                    "Dict[str, int]"
                ]
            }
        },
        "EventTest.test_event_timeout": {
            "name": "test_event_timeout",
            "location": 220,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "e": [
                    "int",
                    "DefaultDict[Any, dict]"
                ]
            }
        },
        "EventTest.test_event_set_multiple": {
            "name": "test_event_set_multiple",
            "location": 229,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "e": []
            }
        },
        "EventTest.test_event_wait_clear": {
            "name": "test_event_wait_clear",
            "location": 235,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "e": [
                    "int",
                    "T"
                ],
                "f0": [
                    "Tuple[Literal, Literal, Literal]",
                    "str",
                    "float"
                ],
                "f1": [
                    "Tuple[Literal, Literal, Literal]",
                    "str",
                    "float"
                ]
            }
        },
        "SemaphoreTest.test_negative_value": {
            "name": "test_negative_value",
            "location": 246,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "SemaphoreTest.test_repr": {
            "name": "test_repr",
            "location": 249,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "sem": [
                    "str",
                    "int"
                ]
            }
        },
        "SemaphoreTest.test_acquire": {
            "name": "test_acquire",
            "location": 259,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "f0": [],
                "f1": [],
                "f2": [],
                "sem": []
            }
        },
        "SemaphoreTest.test_acquire_timeout": {
            "name": "test_acquire_timeout",
            "location": 280,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "acquire": [],
                "f": [],
                "sem": [
                    "int",
                    "horizons.util.shapes.circle.Circle",
                    "float"
                ]
            }
        },
        "SemaphoreTest.test_acquire_timeout_preempted": {
            "name": "test_acquire_timeout_preempted",
            "location": 297,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "acquire": [
                    "int",
                    "dict",
                    "List[int]",
                    "List[List[int]]",
                    "str",
                    "datetime.timedelta"
                ],
                "sem": [
                    "List[str]"
                ]
            }
        },
        "SemaphoreTest.test_release_unacquired": {
            "name": "test_release_unacquired",
            "location": 307,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "sem": []
            }
        },
        "SemaphoreTest.test_garbage_collection": {
            "name": "test_garbage_collection",
            "location": 320,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "future": [
                    "int"
                ],
                "futures": [
                    "str",
                    "int"
                ],
                "sem": [
                    "List[str]",
                    "int",
                    "List[int]",
                    "dict"
                ]
            }
        },
        "SemaphoreContextManagerTest.test_context_manager": {
            "name": "test_context_manager",
            "location": 344,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "sem": []
            }
        },
        "SemaphoreContextManagerTest.test_context_manager_async_await": {
            "name": "test_context_manager_async_await",
            "location": 354,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "namespace": [
                    "int",
                    "dict",
                    "List[int]",
                    "List[List[int]]",
                    "str",
                    "datetime.timedelta"
                ],
                "sem": [
                    "int",
                    "Tuple[str, int]"
                ]
            }
        },
        "SemaphoreContextManagerTest.test_context_manager_exception": {
            "name": "test_context_manager_exception",
            "location": 369,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "sem": []
            }
        },
        "SemaphoreContextManagerTest.test_context_manager_timeout": {
            "name": "test_context_manager_timeout",
            "location": 379,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "sem": []
            }
        },
        "SemaphoreContextManagerTest.test_context_manager_timeout_error": {
            "name": "test_context_manager_timeout_error",
            "location": 388,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "sem": [
                    "dict",
                    "int",
                    "List[float]"
                ]
            }
        },
        "SemaphoreContextManagerTest.f": {
            "name": "f",
            "location": 403,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "index": [
                    "list",
                    "str",
                    "dict",
                    "List[List[Any]]",
                    "bytearray",
                    "int"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "SemaphoreContextManagerTest.test_context_manager_contended": {
            "name": "test_context_manager_contended",
            "location": 398,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "expected_history": [
                    "list"
                ],
                "history": [
                    "str",
                    "List[bytes]",
                    "list",
                    "int",
                    "Tuple[Literal, Literal, Literal, Literal, Literal, Literal]",
                    "dict",
                    "Dict[str, object]"
                ],
                "sem": [
                    "str",
                    "List[str]",
                    "int",
                    "Dict[str, List[Any]]",
                    "Tuple[str, str, str, str, str, str, str, str]"
                ]
            }
        },
        "SemaphoreContextManagerTest.test_yield_sem": {
            "name": "test_yield_sem",
            "location": 418,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "SemaphoreContextManagerTest.test_context_manager_misuse": {
            "name": "test_context_manager_misuse",
            "location": 425,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "BoundedSemaphoreTest.test_release_unacquired": {
            "name": "test_release_unacquired",
            "location": 434,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "future": [
                    "int"
                ],
                "sem": []
            }
        },
        "LockTests.test_repr": {
            "name": "test_repr",
            "location": 450,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "lock": [
                    "int",
                    "dict",
                    "List[int]",
                    "List[List[int]]",
                    "str",
                    "datetime.timedelta"
                ]
            }
        },
        "LockTests.test_acquire_release": {
            "name": "test_acquire_release",
            "location": 457,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "future": [
                    "int"
                ],
                "lock": [
                    "List[int]"
                ]
            }
        },
        "LockTests.f": {
            "name": "f",
            "location": 473,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "idx": [
                    "str"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "LockTests.test_acquire_fifo": {
            "name": "test_acquire_fifo",
            "location": 466,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "N": [
                    "int"
                ],
                "futures": [
                    "list",
                    "int",
                    "Tuple[Literal, Literal, Literal, Literal]",
                    "property"
                ],
                "history": [
                    "List[str]",
                    "list",
                    "List[bytes]",
                    "List[int]"
                ],
                "lock": [
                    "int",
                    "dict",
                    "List[int]",
                    "List[List[int]]",
                    "str",
                    "datetime.timedelta"
                ]
            }
        },
        "LockTests.test_acquire_fifo_async_with": {
            "name": "test_acquire_fifo_async_with",
            "location": 485,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "N": [
                    "int",
                    "List[int]"
                ],
                "futures": [
                    "int",
                    "List[int]",
                    "Tuple[Literal, Literal, Literal]",
                    "str"
                ],
                "history": [
                    "List[str]",
                    "list",
                    "List[bytes]",
                    "List[int]"
                ],
                "lock": [
                    "float",
                    "str",
                    "Dict[str, Any]"
                ],
                "namespace": [
                    "int",
                    "List[tuple]",
                    "str",
                    "float"
                ]
            }
        },
        "LockTests.test_acquire_timeout": {
            "name": "test_acquire_timeout",
            "location": 504,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "lock": []
            }
        },
        "LockTests.test_multi_release": {
            "name": "test_multi_release",
            "location": 513,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "lock": []
            }
        },
        "LockTests.test_yield_lock": {
            "name": "test_yield_lock",
            "location": 521,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "LockTests.test_context_manager_misuse": {
            "name": "test_context_manager_misuse",
            "location": 528,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "global": {}
    },
    "tornado-5.0.2/tornado/test/log_test.py": {
        "ignore_bytes_warning": {
            "name": "ignore_bytes_warning",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": []
            },
            "variables": {}
        },
        "LogFormatterTest.setUp": {
            "name": "setUp",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "filename": [
                    "str",
                    "Pattern[str]"
                ],
                "formatter": [
                    "str",
                    "int"
                ],
                "handler": [
                    "str",
                    "List[Dict[str, Any]]",
                    "Optional[str]",
                    "logging.Logger",
                    "Optional[int]"
                ],
                "logger": [
                    "logging.Logger"
                ],
                "tempdir": [
                    "str",
                    "int"
                ]
            }
        },
        "LogFormatterTest.tearDown": {
            "name": "tearDown",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "LogFormatterTest.make_handler": {
            "name": "make_handler",
            "location": 71,
            "return": [
                "str",
                "Callable",
                "IO",
                "Optional[str]",
                "IO[str]"
            ],
            "arguments": {
                "args": [],
                "filename": [
                    "str"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "LogFormatterTest.get_output": {
            "name": "get_output",
            "location": 78,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "line": [
                    "str",
                    "IO[bytes]",
                    "Callable[[bytes], bytes]",
                    "TextIO"
                ],
                "m": [
                    "str",
                    "int"
                ]
            }
        },
        "LogFormatterTest.test_basic_logging": {
            "name": "test_basic_logging",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "LogFormatterTest.test_bytes_logging": {
            "name": "test_bytes_logging",
            "location": 91,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "LogFormatterTest.test_utf8_logging": {
            "name": "test_utf8_logging",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "LogFormatterTest.test_bytes_exception_logging": {
            "name": "test_bytes_exception_logging",
            "location": 110,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "output": [
                    "str",
                    "bytes",
                    "Dict[str, Dict[str, Any]]",
                    "Dict[str, Any]",
                    "list"
                ]
            }
        },
        "UnicodeLogFormatterTest.make_handler": {
            "name": "make_handler",
            "location": 124,
            "return": [
                "str",
                "Callable",
                "IO",
                "Optional[str]",
                "IO[str]"
            ],
            "arguments": {
                "args": [],
                "filename": [
                    "str"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "UnicodeLogFormatterTest.test_unicode_logging": {
            "name": "test_unicode_logging",
            "location": 130,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "EnablePrettyLoggingTest.setUp": {
            "name": "setUp",
            "location": 136,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "logger": [
                    "logging.Logger"
                ],
                "options": [
                    "Dict[str, Union[Any, int]]",
                    "List[Dict[str, Any]]",
                    "Dict[str, Union[float, str]]",
                    "Dict[str, Any]",
                    "Dict[str, Literal[True]]",
                    "Dict[str, int]"
                ]
            }
        },
        "EnablePrettyLoggingTest.test_log_file": {
            "name": "test_log_file",
            "location": 143,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "filenames": [
                    "str",
                    "Optional[str]"
                ],
                "tmpdir": [
                    "str",
                    "Pattern[str]",
                    "List[str]",
                    "list"
                ]
            }
        },
        "EnablePrettyLoggingTest.test_log_file_with_timed_rotating": {
            "name": "test_log_file_with_timed_rotating",
            "location": 163,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "filenames": [
                    "str",
                    "Optional[str]"
                ],
                "tmpdir": [
                    "str",
                    "Pattern[str]",
                    "List[str]",
                    "list"
                ]
            }
        },
        "EnablePrettyLoggingTest.test_wrong_rotate_mode_value": {
            "name": "test_wrong_rotate_mode_value",
            "location": 185,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "LoggingOptionTest.logs_present": {
            "name": "logs_present",
            "location": 199,
            "return": [
                "bytes",
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "statement": [
                    "str"
                ]
            },
            "variables": {
                "IMPORT": [
                    "str"
                ],
                "LOG_INFO": [
                    "str"
                ],
                "proc": [
                    "subprocess.CompletedProcess[bytes]",
                    "subprocess.Popen[Any]"
                ],
                "program": [
                    "str",
                    "int",
                    "Dict[str, str]"
                ],
                "stderr": [
                    "subprocess.Popen[Any]",
                    "subprocess.CompletedProcess[bytes]",
                    "List[str]",
                    "subprocess.CompletedProcess[str]",
                    "str"
                ],
                "stdout": [
                    "subprocess.CompletedProcess[bytes]",
                    "subprocess.Popen[Any]"
                ]
            }
        },
        "LoggingOptionTest.test_default": {
            "name": "test_default",
            "location": 215,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "LoggingOptionTest.test_tornado_default": {
            "name": "test_tornado_default",
            "location": 218,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "LoggingOptionTest.test_disable_command_line": {
            "name": "test_disable_command_line",
            "location": 221,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "LoggingOptionTest.test_disable_command_line_case_insensitive": {
            "name": "test_disable_command_line_case_insensitive",
            "location": 225,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "LoggingOptionTest.test_disable_code_string": {
            "name": "test_disable_code_string",
            "location": 229,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "LoggingOptionTest.test_disable_code_none": {
            "name": "test_disable_code_none",
            "location": 233,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "LoggingOptionTest.test_disable_override": {
            "name": "test_disable_override",
            "location": 237,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "global": {}
    },
    "tornado-5.0.2/tornado/test/netutil_test.py": {
        "_failing_getaddrinfo": {
            "name": "_failing_getaddrinfo",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": []
            },
            "variables": {}
        },
        "_ResolverTestMixin.test_localhost": {
            "name": "test_localhost",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "result": [
                    "int",
                    "str",
                    "dict",
                    "Dict[str, int]",
                    "range",
                    "bytes"
                ]
            }
        },
        "_ResolverTestMixin.test_future_interface": {
            "name": "test_future_interface",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "addrinfo": [
                    "int"
                ]
            }
        },
        "_ResolverErrorTestMixin.handler": {
            "name": "handler",
            "location": 57,
            "return": [
                "bool"
            ],
            "arguments": {
                "args": [],
                "exc_tb": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "exc_typ": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "exc_val": [
                    "int",
                    "Callable",
                    "str"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "_ResolverErrorTestMixin.test_bad_host": {
            "name": "test_bad_host",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "result": [
                    "dict",
                    "Dict[Any, Dict[Any, Any]]",
                    "Dict[str, str]"
                ]
            }
        },
        "_ResolverErrorTestMixin.test_future_interface_bad_host": {
            "name": "test_future_interface_bad_host",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "BlockingResolverTest.setUp": {
            "name": "setUp",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "resolver": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ]
            }
        },
        "BlockingResolverErrorTest.setUp": {
            "name": "setUp",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "getaddrinfo": [
                    "int",
                    "float",
                    "bool"
                ],
                "real_getaddrinfo": [
                    "int",
                    "complex"
                ],
                "resolver": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ]
            }
        },
        "BlockingResolverErrorTest.tearDown": {
            "name": "tearDown",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "getaddrinfo": [
                    "Dict[str, str]",
                    "List[Tuple[str, str, Any]]",
                    "str",
                    "Dict[str, Union[dict, Any]]",
                    "int",
                    "List[str]"
                ]
            }
        },
        "OverrideResolverTest.setUp": {
            "name": "setUp",
            "location": 102,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "mapping": [
                    "os.stat_result",
                    "int",
                    "Dict[str, str]",
                    "str"
                ],
                "resolver": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ]
            }
        },
        "OverrideResolverTest.test_resolve_multiaddr": {
            "name": "test_resolve_multiaddr",
            "location": 111,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "result": [
                    "Counter[Any]",
                    "str",
                    "OrderedDict[str, Any]",
                    "List[float]",
                    "Dict[str, Optional[int]]",
                    "int"
                ]
            }
        },
        "ThreadedResolverTest.setUp": {
            "name": "setUp",
            "location": 124,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "resolver": [
                    "dict",
                    "float",
                    "str",
                    "int",
                    "Tuple[Any, Any]",
                    "list",
                    "Dict[str, str]"
                ]
            }
        },
        "ThreadedResolverTest.tearDown": {
            "name": "tearDown",
            "location": 128,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "ThreadedResolverErrorTest.setUp": {
            "name": "setUp",
            "location": 134,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "getaddrinfo": [
                    "int",
                    "float",
                    "bool"
                ],
                "real_getaddrinfo": [
                    "int",
                    "complex"
                ],
                "resolver": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ]
            }
        },
        "ThreadedResolverErrorTest.tearDown": {
            "name": "tearDown",
            "location": 140,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "getaddrinfo": [
                    "Dict[str, str]",
                    "List[Tuple[str, str, Any]]",
                    "str",
                    "Dict[str, Union[dict, Any]]",
                    "int",
                    "List[str]"
                ]
            }
        },
        "ThreadedResolverImportTest.test_import": {
            "name": "test_import",
            "location": 149,
            "return": [
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "TIMEOUT": [
                    "int",
                    "float"
                ],
                "command": [
                    "str"
                ],
                "popen": [
                    "int",
                    "Tuple[Any, Any]",
                    "Pattern[str]"
                ],
                "return_code": [
                    "int"
                ],
                "start": [
                    "float",
                    "Tuple[int, int, int]"
                ]
            }
        },
        "CaresResolverTest.setUp": {
            "name": "setUp",
            "location": 181,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "resolver": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ]
            }
        },
        "TwistedResolverTest.setUp": {
            "name": "setUp",
            "location": 197,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "resolver": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ]
            }
        },
        "IsValidIPTest.test_is_valid_ip": {
            "name": "test_is_valid_ip",
            "location": 203,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TestPortAllocation.test_same_port_allocation": {
            "name": "test_same_port_allocation",
            "location": 219,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "port": [
                    "List[int]",
                    "str",
                    "dict"
                ],
                "sockets": [
                    "bytes",
                    "dict",
                    "int"
                ]
            }
        },
        "TestPortAllocation.test_reuse_port": {
            "name": "test_reuse_port",
            "location": 232,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "port": [
                    "str"
                ],
                "socket": [
                    "str",
                    "int",
                    "Pattern[str]",
                    "Dict[int, str]"
                ],
                "sockets": []
            }
        },
        "global": {
            "futures": [
                "str",
                "List[str]",
                "int",
                "Dict[str, List[Any]]",
                "Tuple[str, str, str, str, str, str, str, str]"
            ],
            "pycares": [
                "str",
                "List[str]",
                "int",
                "Dict[str, List[Any]]",
                "Tuple[str, str, str, str, str, str, str, str]"
            ],
            "twisted": [
                "int",
                "dict",
                "List[int]",
                "List[List[int]]",
                "str"
            ]
        }
    },
    "tornado-5.0.2/tornado/test/process_test.py": {
        "skip_if_twisted": {
            "name": "skip_if_twisted",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": []
            },
            "variables": {}
        },
        "ProcessHandler.get": {
            "name": "get",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "ProcessTest.get_app": {
            "name": "get_app",
            "location": 34,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "ProcessTest.tearDown": {
            "name": "tearDown",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "ProcessTest.get_url": {
            "name": "get_url",
            "location": 71,
            "return": [
                "str",
                "dict",
                "List[List[str]]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "path": [
                    "str"
                ],
                "self": []
            },
            "variables": {}
        },
        "ProcessTest.fetch": {
            "name": "fetch",
            "location": 105,
            "return": [
                "bool",
                "Optional[str]",
                "List[str]",
                "Optional[asyncio.AbstractEventLoop]"
            ],
            "arguments": {
                "args": [],
                "fail_ok": [
                    "List[str]",
                    "str",
                    "List[int]"
                ],
                "kwargs": [],
                "self": [],
                "url": [
                    "str"
                ]
            },
            "variables": {}
        },
        "ProcessTest.test_multi_process": {
            "name": "test_multi_process",
            "location": 62,
            "return": [
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "client": [
                    "Dict[str, str]",
                    "str",
                    "bool"
                ],
                "id": [
                    "int",
                    "float",
                    "Type[Mapping[Any, Any]]",
                    "str",
                    "Dict[int, int]",
                    "logging.Logger",
                    "logging.StreamHandler"
                ],
                "pid": [
                    "int",
                    "list",
                    "Dict[str, str]",
                    "Dict[int, FrozenSet[int]]",
                    "float"
                ],
                "pid2": [
                    "int",
                    "list",
                    "Dict[str, str]",
                    "Dict[int, FrozenSet[int]]",
                    "float"
                ],
                "port": [
                    "str",
                    "List[str]",
                    "int",
                    "Dict[str, List[Any]]",
                    "Tuple[str, str, str, str, str, str, str, str]"
                ],
                "server": [
                    "str",
                    "List[str]",
                    "int",
                    "Dict[str, List[Any]]",
                    "Tuple[str, str, str, str, str, str, str, str]"
                ],
                "sock": [
                    "str",
                    "List[str]",
                    "int",
                    "Dict[str, List[Any]]",
                    "Tuple[str, str, str, str, str, str, str, str]"
                ]
            }
        },
        "SubprocessTest.test_subprocess": {
            "name": "test_subprocess",
            "location": 146,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "data": [
                    "str",
                    "Dict[str, Dict[str, Any]]",
                    "Dict[str, str]",
                    "List[str]"
                ],
                "subproc": [
                    "subprocess.CompletedProcess[str]",
                    "subprocess.Popen[Any]",
                    "subprocess.CompletedProcess[bytes]",
                    "subprocess.CalledProcessError"
                ]
            }
        },
        "SubprocessTest.test_close_stdin": {
            "name": "test_close_stdin",
            "location": 175,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "data": [
                    "str",
                    "Dict[str, Dict[str, Any]]",
                    "bytes",
                    "OrderedDict",
                    "Dict[str, str]",
                    "Dict[str, Dict[str, float]]"
                ],
                "subproc": [
                    "subprocess.CompletedProcess[str]",
                    "subprocess.Popen[Any]",
                    "subprocess.CompletedProcess[bytes]",
                    "subprocess.CalledProcessError"
                ]
            }
        },
        "SubprocessTest.test_stderr": {
            "name": "test_stderr",
            "location": 188,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "data": [
                    "str",
                    "Dict[str, Dict[str, Any]]",
                    "bytes",
                    "OrderedDict",
                    "Dict[str, str]",
                    "Dict[str, Dict[str, float]]"
                ],
                "subproc": [
                    "subprocess.Popen[Any]",
                    "subprocess.CalledProcessError",
                    "subprocess.CompletedProcess[str]"
                ]
            }
        },
        "SubprocessTest.test_sigchild": {
            "name": "test_sigchild",
            "location": 202,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "ret": [
                    "list",
                    "DefaultDict[Any, List[Any]]",
                    "bytearray",
                    "Dict[str, Any]"
                ],
                "subproc": [
                    "subprocess.Popen[Any]",
                    "subprocess.CalledProcessError",
                    "subprocess.CompletedProcess[bytes]",
                    "list"
                ]
            }
        },
        "SubprocessTest.test_sigchild_future": {
            "name": "test_sigchild_future",
            "location": 214,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "ret": [],
                "subproc": [
                    "subprocess.Popen[Any]",
                    "str",
                    "List[str]"
                ]
            }
        },
        "SubprocessTest.test_sigchild_signal": {
            "name": "test_sigchild_signal",
            "location": 223,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "ret": [
                    "list",
                    "List[float]",
                    "Generator[Any, None, None]",
                    "Dict[int, str]",
                    "int",
                    "str"
                ],
                "subproc": [
                    "subprocess.Popen[Any]",
                    "subprocess.CompletedProcess[str]",
                    "subprocess.CalledProcessError",
                    "subprocess.CompletedProcess[bytes]"
                ]
            }
        },
        "SubprocessTest.test_wait_for_exit_raise": {
            "name": "test_wait_for_exit_raise",
            "location": 254,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "subproc": [
                    "List[str]",
                    "asyncio.events.AbstractEventLoop",
                    "List[Union[Any, Any]]"
                ]
            }
        },
        "SubprocessTest.test_wait_for_exit_raise_disabled": {
            "name": "test_wait_for_exit_raise_disabled",
            "location": 264,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "ret": [
                    "dict"
                ],
                "subproc": [
                    "str",
                    "List[str]",
                    "subprocess.CompletedProcess[bytes]",
                    "subprocess.Popen[Any]"
                ]
            }
        },
        "global": {
            "asyncio": [
                "int",
                "list",
                "set",
                "str"
            ]
        }
    },
    "tornado-5.0.2/tornado/test/queues_test.py": {
        "QueueBasicTest.test_repr_and_str": {
            "name": "test_repr_and_str",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "q": []
            }
        },
        "QueueBasicTest.test_order": {
            "name": "test_order",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "items": [
                    "List[None]",
                    "int",
                    "tuple",
                    "list"
                ],
                "q": [
                    "tuple",
                    "Dict[str, Any]"
                ]
            }
        },
        "QueueBasicTest.test_maxsize": {
            "name": "test_maxsize",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "put2": [
                    "Generator[Any, None, None]"
                ],
                "q": [
                    "list",
                    "Tuple[Literal, Literal, Literal]"
                ]
            }
        },
        "QueueGetTest.test_blocking_get": {
            "name": "test_blocking_get",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "q": []
            }
        },
        "QueueGetTest.test_nonblocking_get": {
            "name": "test_nonblocking_get",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "q": []
            }
        },
        "QueueGetTest.test_nonblocking_get_exception": {
            "name": "test_nonblocking_get_exception",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "q": [
                    "str"
                ]
            }
        },
        "QueueGetTest.test_get_with_putters": {
            "name": "test_get_with_putters",
            "location": 94,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "put": [
                    "List[int]",
                    "DefaultDict[Any, int]",
                    "Counter[Any]"
                ],
                "q": [
                    "dict"
                ]
            }
        },
        "QueueGetTest.test_blocking_get_wait": {
            "name": "test_blocking_get_wait",
            "location": 102,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "q": [
                    "dict",
                    "str"
                ]
            }
        },
        "QueueGetTest.test_get_timeout": {
            "name": "test_get_timeout",
            "location": 111,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "get": [
                    "Dict[str, List[str]]",
                    "Dict[str, str]",
                    "List[Dict[str, str]]",
                    "Dict[str, Union[None, int, str]]"
                ],
                "get_timeout": [
                    "dict"
                ],
                "q": [
                    "str",
                    "Type[List[Any]]",
                    "int"
                ]
            }
        },
        "QueueGetTest.test_get_timeout_preempted": {
            "name": "test_get_timeout_preempted",
            "location": 122,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "get": [
                    "Dict[Any, List[Any]]",
                    "Dict[str, Union[None, int, str]]",
                    "Dict[int, str]",
                    "Dict[str, Literal]",
                    "dict",
                    "str",
                    "Dict[str, Union[Any, Any]]"
                ],
                "q": [
                    "Dict[str, str]",
                    "Dict[str, Union[Any, Any, Any]]",
                    "dict"
                ]
            }
        },
        "QueueGetTest.test_get_clears_timed_out_putters": {
            "name": "test_get_clears_timed_out_putters",
            "location": 130,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "put": [
                    "int",
                    "complex",
                    "slice",
                    "Counter[int]",
                    "bytes"
                ],
                "putters": [
                    "int",
                    "list",
                    "Dict[str, Dict[str, str]]",
                    "List[List[int]]",
                    "List[int]"
                ],
                "q": [
                    "memoryview"
                ]
            }
        },
        "QueueGetTest.test_get_clears_timed_out_getters": {
            "name": "test_get_clears_timed_out_getters",
            "location": 146,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "get": [
                    "Dict[str, Any]",
                    "dict",
                    "Dict[str, tuple]",
                    "Dict[str, str]",
                    "Dict[Union[int, str], int]"
                ],
                "getters": [
                    "str",
                    "Dict[str, str]",
                    "Dict[int, str]",
                    "dict",
                    "Dict[str, Callable[[Any, Any], Any]]"
                ],
                "q": [
                    "dict",
                    "Dict[str, str]",
                    "str"
                ]
            }
        },
        "QueueGetTest.test_async_for": {
            "name": "test_async_for",
            "location": 161,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "namespace": [
                    "List[slice]"
                ],
                "q": [
                    "int",
                    "Dict[str, int]",
                    "List[Tuple[int, int]]",
                    "Tuple[int, int, int]"
                ],
                "results": [
                    "list"
                ]
            }
        },
        "QueuePutTest.test_blocking_put": {
            "name": "test_blocking_put",
            "location": 180,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "q": []
            }
        },
        "QueuePutTest.test_nonblocking_put_exception": {
            "name": "test_nonblocking_put_exception",
            "location": 185,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "q": [
                    "int",
                    "Type[str]",
                    "bytes"
                ]
            }
        },
        "QueuePutTest.test_put_with_getters": {
            "name": "test_put_with_getters",
            "location": 191,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "get0": [
                    "str",
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "int"
                ],
                "get1": [
                    "str",
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "int"
                ],
                "q": [
                    "Dict[str, str]",
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, Tuple[Any, Any, Any]]",
                    "Dict[str, Tuple[int, int]]",
                    "KeysView[str]",
                    "Dict[str, int]"
                ]
            }
        },
        "QueuePutTest.test_nonblocking_put_with_getters": {
            "name": "test_nonblocking_put_with_getters",
            "location": 201,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "get0": [
                    "str",
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "int"
                ],
                "get1": [
                    "str",
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "int"
                ],
                "q": [
                    "Dict[str, str]",
                    "Dict[str, Tuple[Any, Any, Any]]",
                    "Dict[str, Tuple[int, int]]",
                    "Dict[str, int]",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "QueuePutTest.test_blocking_put_wait": {
            "name": "test_blocking_put_wait",
            "location": 214,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "futures": [
                    "dict",
                    "Set[int]",
                    "int",
                    "List[str]",
                    "str"
                ],
                "q": [
                    "list"
                ]
            }
        },
        "QueuePutTest.test_put_timeout": {
            "name": "test_put_timeout",
            "location": 224,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "put": [
                    "float",
                    "int",
                    "str",
                    "bool",
                    "Tuple[str, str, str, str]"
                ],
                "put_timeout": [
                    "int",
                    "Tuple[str, str, str, str]",
                    "str",
                    "float"
                ],
                "q": []
            }
        },
        "QueuePutTest.test_put_timeout_preempted": {
            "name": "test_put_timeout_preempted",
            "location": 240,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "put": [
                    "Tuple[Literal, Literal]",
                    "int",
                    "Type[Iterator[int]]",
                    "str"
                ],
                "q": [
                    "str"
                ]
            }
        },
        "QueuePutTest.test_put_clears_timed_out_putters": {
            "name": "test_put_clears_timed_out_putters",
            "location": 249,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "put": [
                    "int",
                    "complex",
                    "slice",
                    "Counter[int]",
                    "bytes"
                ],
                "putters": [
                    "int",
                    "list",
                    "Dict[str, Dict[str, str]]",
                    "List[List[int]]",
                    "List[int]"
                ],
                "q": [
                    "memoryview"
                ]
            }
        },
        "QueuePutTest.test_put_clears_timed_out_getters": {
            "name": "test_put_clears_timed_out_getters",
            "location": 264,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "get": [
                    "Dict[Any, str]",
                    "Dict[str, str]",
                    "str",
                    "Dict[str, int]"
                ],
                "getters": [
                    "str",
                    "Dict[str, str]",
                    "Dict[int, str]",
                    "dict",
                    "Dict[str, Callable[[Any, Any], Any]]"
                ],
                "q": [
                    "Dict[str, int]",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "Counter[Any]",
                    "dict",
                    "Dict[str, Dict[str, Any]]",
                    "str"
                ]
            }
        },
        "QueuePutTest.test_float_maxsize": {
            "name": "test_float_maxsize",
            "location": 280,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "put": [
                    "slice",
                    "List[bool]",
                    "bytes",
                    "oct"
                ],
                "q": [
                    "list"
                ]
            }
        },
        "QueueJoinTest.test_task_done_underflow": {
            "name": "test_task_done_underflow",
            "location": 305,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "q": [
                    "int",
                    "Optional[Match[str]]",
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "QueueJoinTest.worker": {
            "name": "worker",
            "location": 318,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "item": [
                    "Dict[str, str]",
                    "Dict[str, List[Any]]",
                    "Dict[Any, List[Any]]",
                    "str",
                    "list"
                ]
            }
        },
        "QueueJoinTest.test_task_done": {
            "name": "test_task_done",
            "location": 310,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "accumulator": [
                    "str",
                    "Dict[str, float]",
                    "list",
                    "Tuple[Literal, Literal]"
                ],
                "q": [
                    "int",
                    "dict",
                    "List[int]",
                    "List[List[int]]",
                    "str",
                    "datetime.timedelta"
                ]
            }
        },
        "QueueJoinTest.test_task_done_delay": {
            "name": "test_task_done_delay",
            "location": 332,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "join": [
                    "str",
                    "List[str]",
                    "list"
                ],
                "q": [
                    "Dict[int, Union[Any, Any, Any]]",
                    "Dict[Any, int]",
                    "str",
                    "list",
                    "frozenset[str]",
                    "Dict[str, Any]",
                    "Set[str]"
                ]
            }
        },
        "QueueJoinTest.test_join_empty_queue": {
            "name": "test_join_empty_queue",
            "location": 346,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "q": [
                    "str",
                    "List[str]",
                    "Dict[str, Tuple[str, str]]",
                    "Dict[str, List[str]]",
                    "Final[Dict[str, Any]]"
                ]
            }
        },
        "QueueJoinTest.test_join_timeout": {
            "name": "test_join_timeout",
            "location": 352,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "q": [
                    "Dict[str, str]",
                    "str",
                    "Set[str]",
                    "Dict[str, Union[Any, Any, Any]]"
                ]
            }
        },
        "PriorityQueueJoinTest.test_order": {
            "name": "test_order",
            "location": 363,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "q": [
                    "Counter",
                    "float"
                ]
            }
        },
        "LifoQueueJoinTest.test_order": {
            "name": "test_order",
            "location": 381,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "q": [
                    "Counter",
                    "float"
                ]
            }
        },
        "ProducerConsumerTest.consumer": {
            "name": "consumer",
            "location": 406,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "ProducerConsumerTest.producer": {
            "name": "producer",
            "location": 412,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "ProducerConsumerTest.test_producer_consumer": {
            "name": "test_producer_consumer",
            "location": 397,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "history": [
                    "list",
                    "str",
                    "int",
                    "set",
                    "List[str]",
                    "List[Tuple[str, Any]]"
                ],
                "q": [
                    "int",
                    "dict",
                    "List[int]",
                    "List[List[int]]",
                    "str",
                    "datetime.timedelta"
                ]
            }
        },
        "global": {}
    },
    "tornado-5.0.2/tornado/test/resolve_test_helper.py": {
        "global": {
            "resolver": [
                "str",
                "bool"
            ]
        }
    },
    "tornado-5.0.2/tornado/test/routing_test.py": {
        "_get_named_handler": {
            "name": "_get_named_handler",
            "location": 91,
            "return": [
                "str",
                "int",
                "Type[Any]",
                "IO",
                "complex",
                "Dict[str, Any]"
            ],
            "arguments": {
                "args": [],
                "handler_name": [
                    "str",
                    "List[str]",
                    "bool",
                    "Optional[str]"
                ],
                "kwargs": []
            },
            "variables": {}
        },
        "MessageDelegate.__init__": {
            "name": "__init__",
            "location": 155,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "connection": [
                    "int",
                    "apistar.interfaces.Router",
                    "bool",
                    "float"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "connection": [
                    "str",
                    "int",
                    "Optional[float]",
                    "bool"
                ]
            }
        },
        "MessageDelegate.finish": {
            "name": "finish",
            "location": 158,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response_body": [
                    "str",
                    "int",
                    "list"
                ]
            }
        },
        "BasicRouter.find_handler": {
            "name": "find_handler",
            "location": 24,
            "return": [
                "int",
                "List[str]",
                "List[Callable]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "request": [
                    "aiohttp.web.Request"
                ],
                "self": []
            },
            "variables": {}
        },
        "BasicRouterTestCase.get_app": {
            "name": "get_app",
            "location": 42,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "BasicRouterTestCase.test_basic_router": {
            "name": "test_basic_router",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "str",
                    "List[str]",
                    "Tuple[str]",
                    "Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]"
                ]
            }
        },
        "GetResource.get": {
            "name": "get",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "path": [
                    "bool",
                    "str",
                    "Optional[Tuple[str, ...]]"
                ],
                "self": []
            },
            "variables": {}
        },
        "PostResource.post": {
            "name": "post",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "path": [
                    "str",
                    "dict",
                    "IO[bytes]"
                ],
                "self": []
            },
            "variables": {}
        },
        "HTTPMethodRouter.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "app": [
                    "aiohttp.web.Application",
                    "aiohttp.web.Request"
                ],
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "app": [
                    "str"
                ]
            }
        },
        "HTTPMethodRouter.find_handler": {
            "name": "find_handler",
            "location": 70,
            "return": [
                "str",
                "List[str]",
                "Callable",
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "request": [
                    "aiohttp.web.Request"
                ],
                "self": []
            },
            "variables": {
                "handler": [
                    "str",
                    "Dict[str, int]",
                    "Dict[str, Union[Any, str]]"
                ]
            }
        },
        "HTTPMethodRouterTestCase.get_app": {
            "name": "get_app",
            "location": 76,
            "return": [
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "HTTPMethodRouterTestCase.test_http_method_router": {
            "name": "test_http_method_router",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "Dict[str, str]",
                    "Dict[str, Dict[str, Any]]",
                    "Dict[str, Dict[str, str]]"
                ]
            }
        },
        "Handler.get": {
            "name": "get",
            "location": 226,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "CustomRouter.__init__": {
            "name": "__init__",
            "location": 107,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "routes": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ]
            }
        },
        "CustomRouter.add_routes": {
            "name": "add_routes",
            "location": 111,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "routes": [
                    "str",
                    "bytes",
                    "dict",
                    "Dict[str, Any]",
                    "Optional[Dict[str, Any]]"
                ],
                "self": []
            },
            "variables": {}
        },
        "CustomRouter.find_handler": {
            "name": "find_handler",
            "location": 114,
            "return": [
                "bool",
                "Callable[[], str]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "request": [
                    "tornado.httputil.HTTPServerRequest"
                ],
                "self": []
            },
            "variables": {
                "app": [],
                "handler": [
                    "Dict[str, Union[Any, Any, Any, Any]]",
                    "Dict[str, Union[Any, Any, Any, Any, Any]]"
                ]
            }
        },
        "CustomRouter.reverse_url": {
            "name": "reverse_url",
            "location": 119,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "name": [
                    "str",
                    "Optional[str]"
                ],
                "self": []
            },
            "variables": {
                "handler_path": [
                    "str",
                    "list"
                ]
            }
        },
        "CustomApplication.reverse_url": {
            "name": "reverse_url",
            "location": 127,
            "return": [
                "bool",
                "int",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "name": [
                    "str"
                ],
                "self": []
            },
            "variables": {}
        },
        "CustomRouterTestCase.get_app": {
            "name": "get_app",
            "location": 125,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "app1": [
                    "grpy.web.app.GrpyApp"
                ],
                "app2": [
                    "grpy.web.app.GrpyApp"
                ],
                "router": [
                    "Dict[str, Union[Any, str]]",
                    "int"
                ]
            }
        },
        "CustomRouterTestCase.test_custom_router": {
            "name": "test_custom_router",
            "location": 142,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "Dict[bytes, List[bytes]]"
                ]
            }
        },
        "ConnectionDelegate.start_request": {
            "name": "start_request",
            "location": 152,
            "return": [
                "int",
                "List[str]",
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "request_conn": [
                    "Dict[str, str]",
                    "abilian.app.Application"
                ],
                "self": [],
                "server_conn": [
                    "dict",
                    "int",
                    "str",
                    "Optional[bytes]"
                ]
            },
            "variables": {}
        },
        "RuleRouterTest.request_callable": {
            "name": "request_callable",
            "location": 173,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "request": [],
                "self": []
            },
            "variables": {}
        },
        "RuleRouterTest.get_app": {
            "name": "get_app",
            "location": 170,
            "return": [],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "app": [],
                "router": []
            }
        },
        "RuleRouterTest.test_rule_based_router": {
            "name": "test_rule_based_router",
            "location": 198,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "bytes",
                    "Dict[str, bytes]"
                ]
            }
        },
        "WSGIContainerTestCase.get_app": {
            "name": "get_app",
            "location": 222,
            "return": [
                "str",
                "Tuple[str, str]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "wsgi_app": []
            }
        },
        "WSGIContainerTestCase.wsgi_app": {
            "name": "wsgi_app",
            "location": 234,
            "return": [
                "bool",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "args": [],
                "environ": [
                    "Callable[[str, List], None]",
                    "Dict[str, Any]",
                    "Callable"
                ],
                "kwargs": [],
                "self": [],
                "start_response": [
                    "Callable[[str, List], None]",
                    "Dict[str, Any]",
                    "Callable"
                ]
            },
            "variables": {}
        },
        "WSGIContainerTestCase.test_wsgi_container": {
            "name": "test_wsgi_container",
            "location": 238,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "list",
                    "bytes",
                    "Dict[str, Union[Any, Any]]"
                ]
            }
        },
        "WSGIContainerTestCase.test_delegate_not_found": {
            "name": "test_delegate_not_found",
            "location": 245,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "str",
                    "List[str]",
                    "Tuple[str]",
                    "Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]"
                ]
            }
        },
        "global": {
            "FirstHandler": [
                "Tuple[Any, Any]",
                "Union[Literal, str]",
                "str"
            ],
            "SecondHandler": [
                "Dict[str, Union[Any, str]]"
            ],
            "resources": [
                "Dict[str, bytes]",
                "str"
            ]
        }
    },
    "tornado-5.0.2/tornado/test/runtests.py": {
        "all": {
            "name": "all",
            "location": 64,
            "return": [
                "bool",
                "Tuple[int, int, int]"
            ],
            "arguments": {
                "args": [],
                "kwargs": []
            },
            "variables": {}
        },
        "test_runner_factory": {
            "name": "test_runner_factory",
            "location": 68,
            "return": [
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "stderr": [
                    "str",
                    "Mapping[str, Any]"
                ]
            },
            "variables": {}
        },
        "configure_ioloop": {
            "name": "configure_ioloop",
            "location": 170,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": []
            },
            "variables": {
                "kwargs": [
                    "dict",
                    "Tuple[Literal, Literal, Literal]",
                    "List[Dict[str, Any]]",
                    "List[str]",
                    "list"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 115,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": []
            },
            "variables": {
                "kwargs": [
                    "str",
                    "Type[ValueError]",
                    "Dict[str, Union[Any, str]]"
                ],
                "log_counter": [
                    "logging.Logger",
                    "logging.StreamHandler"
                ],
                "orig_stderr": [
                    "str",
                    "bool",
                    "List[str]",
                    "dict"
                ],
                "stderr": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "TornadoTextTestRunner.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TornadoTextTestRunner.run": {
            "name": "run",
            "location": 73,
            "return": [
                "str",
                "int",
                "Set[str]",
                "Mapping[str, int]",
                "bool",
                "\"Parameter\""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "test": [
                    "bool",
                    "str",
                    "dict"
                ]
            },
            "variables": {
                "result": [],
                "skip_reasons": [
                    "str",
                    "List[str]",
                    "list",
                    "Dict[str, int]",
                    "Dict[str, Union[Any, str]]",
                    "Dict[int, Union[Any, Any, Any, Any, Any, Any]]"
                ]
            }
        },
        "LogCounter.__init__": {
            "name": "__init__",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "error_count": [
                    "int"
                ],
                "info_count": [
                    "int",
                    "Dict[str, Any]",
                    "Dict[str, int]",
                    "Tuple[int, int]",
                    "List[Dict[str, float]]",
                    "float"
                ],
                "warning_count": [
                    "int",
                    "float"
                ]
            }
        },
        "LogCounter.filter": {
            "name": "filter",
            "location": 92,
            "return": [
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "record": [
                    "str",
                    "int",
                    "logging.LogRecord"
                ],
                "self": []
            },
            "variables": {}
        },
        "CountingStderr.__init__": {
            "name": "__init__",
            "location": 103,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "real": [
                    "int",
                    "bool",
                    "float"
                ],
                "self": []
            },
            "variables": {
                "byte_count": [
                    "int",
                    "float",
                    "Dict[str, Union[dict, Any, str]]",
                    "str"
                ],
                "real": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ]
            }
        },
        "CountingStderr.write": {
            "name": "write",
            "location": 107,
            "return": [
                "int",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "args": [],
                "data": [
                    "str",
                    "bytes",
                    "List[Union[int, float]]",
                    "List[Dict[str, Any]]",
                    "Dict[str, Any]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "CountingStderr.flush": {
            "name": "flush",
            "location": 111,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "global": {
            "TEST_MODULES": [
                "List[str]",
                "str"
            ]
        }
    },
    "tornado-5.0.2/tornado/test/simple_httpclient_test.py": {
        "SimpleHTTPClientCommonTestCase.get_http_client": {
            "name": "get_http_client",
            "location": 31,
            "return": [
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "client": []
            }
        },
        "TriggerHandler.initialize": {
            "name": "initialize",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "queue": [
                    "int",
                    "Callable",
                    "str"
                ],
                "self": [],
                "wake_callback": [
                    "int",
                    "Callable",
                    "str"
                ]
            },
            "variables": {
                "queue": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ],
                "wake_callback": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ]
            }
        },
        "TriggerHandler.get": {
            "name": "get",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "HangHandler.get": {
            "name": "get",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "ContentLengthHandler.get": {
            "name": "get",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "HeadHandler.head": {
            "name": "head",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "OptionsHandler.options": {
            "name": "options",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "NoContentHandler.get": {
            "name": "get",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "SeeOtherPostHandler.post": {
            "name": "post",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "redirect_code": [
                    "Dict[Any, Tuple[int, str]]",
                    "Dict[str, str]",
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "Dict[Any, str]"
                ]
            }
        },
        "SeeOtherGetHandler.get": {
            "name": "get",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "HostEchoHandler.get": {
            "name": "get",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "NoContentLengthHandler.get": {
            "name": "get",
            "location": 101,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "stream": []
            }
        },
        "EchoPostHandler.post": {
            "name": "post",
            "location": 115,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "RespondInPrepareHandler.prepare": {
            "name": "prepare",
            "location": 121,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TimeoutResolver.resolve": {
            "name": "resolve",
            "location": 244,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "SimpleHTTPClientTestMixin.get_app": {
            "name": "get_app",
            "location": 127,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "triggers": [
                    "str",
                    "Dict[str, str]",
                    "Dict[str, Tuple[str, str, str]]",
                    "Dict[str, Tuple[str, str]]"
                ]
            }
        },
        "SimpleHTTPClientTestMixin.test_singleton": {
            "name": "test_singleton",
            "location": 150,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "client1": [],
                "client2": []
            }
        },
        "SimpleHTTPClientTestMixin.test_connection_limit": {
            "name": "test_connection_limit",
            "location": 163,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "seen": [
                    "Set[str]",
                    "List[Dict[str, str]]",
                    "list",
                    "str",
                    "List[\"Rule\"]",
                    "List[Tuple[Any, Any]]",
                    "dict",
                    "range"
                ]
            }
        },
        "SimpleHTTPClientTestMixin.test_redirect_connection_limit": {
            "name": "test_redirect_connection_limit",
            "location": 190,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "str"
                ]
            }
        },
        "SimpleHTTPClientTestMixin.test_gzip": {
            "name": "test_gzip",
            "location": 198,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "f": [],
                "response": [
                    "str",
                    "Dict[str, str]",
                    "dict",
                    "bytes"
                ]
            }
        },
        "SimpleHTTPClientTestMixin.test_max_redirects": {
            "name": "test_max_redirects",
            "location": 213,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "dict",
                    "str"
                ]
            }
        },
        "SimpleHTTPClientTestMixin.test_header_reuse": {
            "name": "test_header_reuse",
            "location": 222,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "headers": [
                    "List[Dict[str, str]]",
                    "dict",
                    "list",
                    "Dict[str, Union[bytes, str]]"
                ]
            }
        },
        "SimpleHTTPClientTestMixin.test_see_other_redirect": {
            "name": "test_see_other_redirect",
            "location": 229,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "Dict[str, str]"
                ]
            }
        },
        "SimpleHTTPClientTestMixin.test_connect_timeout": {
            "name": "test_connect_timeout",
            "location": 239,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "Dict[int, Any]",
                    "dict",
                    "float"
                ],
                "timeout": [
                    "int"
                ],
                "timeout_max": [
                    "list",
                    "Dict[str, str]",
                    "int",
                    "Dict[Any, int]",
                    "dict",
                    "Dict[str, List[Any]]",
                    "Dict[str, Tuple[int, int]]"
                ],
                "timeout_min": [
                    "list",
                    "Dict[str, str]",
                    "int",
                    "Dict[Any, int]",
                    "dict",
                    "Dict[str, List[Any]]",
                    "Dict[str, Tuple[int, int]]"
                ]
            }
        },
        "SimpleHTTPClientTestMixin.test_request_timeout": {
            "name": "test_request_timeout",
            "location": 257,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "Dict[str, Any]",
                    "Dict[str, List[str]]"
                ],
                "timeout": [
                    "int"
                ],
                "timeout_max": [],
                "timeout_min": []
            }
        },
        "SimpleHTTPClientTestMixin.test_ipv6": {
            "name": "test_ipv6",
            "location": 273,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "port": [
                    "Dict[str, str]",
                    "str",
                    "dict"
                ],
                "response": [
                    "list",
                    "bytes",
                    "Dict[str, int]"
                ],
                "url": [
                    "str",
                    "Dict[str, Dict[str, Any]]"
                ]
            }
        },
        "SimpleHTTPClientTestMixin.xtest_multiple_content_length_accepted": {
            "name": "xtest_multiple_content_length_accepted",
            "location": 288,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "Dict[bytes, List[bytes]]"
                ]
            }
        },
        "SimpleHTTPClientTestMixin.test_head_request": {
            "name": "test_head_request",
            "location": 299,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "dict",
                    "Dict[str, Union[int, str]]",
                    "Dict[str, str]",
                    "Dict[str, Union[bytes, str]]",
                    "Dict[int, str]"
                ]
            }
        },
        "SimpleHTTPClientTestMixin.test_options_request": {
            "name": "test_options_request",
            "location": 305,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "str",
                    "Dict[str, None]",
                    "Dict[str, str]"
                ]
            }
        },
        "SimpleHTTPClientTestMixin.test_no_content": {
            "name": "test_no_content",
            "location": 312,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "list",
                    "List[int]",
                    "List[str]",
                    "bytes",
                    "set"
                ]
            }
        },
        "SimpleHTTPClientTestMixin.test_host_header": {
            "name": "test_host_header",
            "location": 321,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "host_re": [
                    "Set[str]",
                    "Dict[Any, str]",
                    "str",
                    "Dict[str, str]",
                    "list"
                ],
                "response": [
                    "dict",
                    "Dict[str, str]"
                ],
                "url": [
                    "str"
                ]
            }
        },
        "SimpleHTTPClientTestMixin.test_connection_refused": {
            "name": "test_connection_refused",
            "location": 331,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "cleanup_func": [
                    "str",
                    "list"
                ],
                "contains_errno": [
                    "str",
                    "bool",
                    "Dict[str, Union[Any, Any]]",
                    "Dict[str, str]",
                    "Dict[str, float]"
                ],
                "expected_message": [
                    "str",
                    "List[str]",
                    "dict",
                    "int"
                ],
                "port": [
                    "int",
                    "str",
                    "Tuple[str, int]"
                ],
                "response": [
                    "set",
                    "List[dict]",
                    "Dict[str, str]",
                    "List[str]",
                    "str",
                    "Set[str]"
                ]
            }
        },
        "SimpleHTTPClientTestMixin.test_queue_timeout": {
            "name": "test_queue_timeout",
            "location": 351,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": []
            }
        },
        "SimpleHTTPClientTestMixin.test_no_content_length": {
            "name": "test_no_content_length",
            "location": 367,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "List[Tuple[str, str]]",
                    "Dict[str, str]",
                    "Dict[str, dict]"
                ]
            }
        },
        "SimpleHTTPClientTestMixin.sync_body_producer": {
            "name": "sync_body_producer",
            "location": 374,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "write": [
                    "bool",
                    "str",
                    "Iterable[str]",
                    "dict",
                    "List[dict]"
                ]
            },
            "variables": {}
        },
        "SimpleHTTPClientTestMixin.async_body_producer": {
            "name": "async_body_producer",
            "location": 379,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "write": [
                    "bool",
                    "str",
                    "Iterable[str]",
                    "dict",
                    "List[dict]"
                ]
            },
            "variables": {}
        },
        "SimpleHTTPClientTestMixin.test_sync_body_producer_chunked": {
            "name": "test_sync_body_producer_chunked",
            "location": 384,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "bytes",
                    "Dict[str, Union[Any, Any, str]]",
                    "str",
                    "Dict[str, Union[Any, Any, Any, Any]]"
                ]
            }
        },
        "SimpleHTTPClientTestMixin.test_sync_body_producer_content_length": {
            "name": "test_sync_body_producer_content_length",
            "location": 390,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "bytes",
                    "Dict[str, Union[Any, Any, str]]",
                    "dict",
                    "Dict[str, Union[Any, Any, Any, Any]]",
                    "str",
                    "Dict[int, str]"
                ]
            }
        },
        "SimpleHTTPClientTestMixin.test_async_body_producer_chunked": {
            "name": "test_async_body_producer_chunked",
            "location": 397,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "bytes",
                    "Dict[str, Union[Any, Any, str]]",
                    "str",
                    "Dict[str, Union[Any, Any, Any, Any]]"
                ]
            }
        },
        "SimpleHTTPClientTestMixin.test_async_body_producer_content_length": {
            "name": "test_async_body_producer_content_length",
            "location": 403,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "bytes",
                    "Dict[str, Union[Any, Any, str]]",
                    "dict",
                    "Dict[str, Union[Any, Any, Any, Any]]",
                    "str",
                    "Dict[int, str]"
                ]
            }
        },
        "SimpleHTTPClientTestMixin.test_native_body_producer_chunked": {
            "name": "test_native_body_producer_chunked",
            "location": 411,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "namespace": [
                    "int"
                ],
                "response": []
            }
        },
        "SimpleHTTPClientTestMixin.test_native_body_producer_content_length": {
            "name": "test_native_body_producer_content_length",
            "location": 424,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "namespace": [
                    "int"
                ],
                "response": []
            }
        },
        "SimpleHTTPClientTestMixin.test_100_continue": {
            "name": "test_100_continue",
            "location": 437,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "List[str]",
                    "int",
                    "T"
                ]
            }
        },
        "SimpleHTTPClientTestMixin.body_producer": {
            "name": "body_producer",
            "location": 444,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "write": [
                    "int",
                    "Callable[[], None]",
                    "str",
                    "bool",
                    "IO[str]"
                ]
            },
            "variables": {}
        },
        "SimpleHTTPClientTestMixin.test_100_continue_early_response": {
            "name": "test_100_continue_early_response",
            "location": 443,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "int",
                    "DefaultDict[Any, int]",
                    "List[str]",
                    "Dict[int, Union[Any, Any]]",
                    "DefaultDict[Any, List[Any]]",
                    "dict",
                    "Dict[str, Union[Any, bool, str]]"
                ]
            }
        },
        "SimpleHTTPClientTestMixin.test_streaming_follow_redirects": {
            "name": "test_streaming_follow_redirects",
            "location": 451,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "chunks": [
                    "list",
                    "str"
                ],
                "headers": [
                    "list"
                ],
                "num_start_lines": [
                    "int",
                    "List[str]",
                    "Pattern[str]",
                    "Dict[int, int]"
                ]
            }
        },
        "SimpleHTTPClientTestCase.setUp": {
            "name": "setUp",
            "location": 471,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "http_client": [
                    "str",
                    "int"
                ]
            }
        },
        "SimpleHTTPClientTestCase.create_client": {
            "name": "create_client",
            "location": 475,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "SimpleHTTPSClientTestCase.setUp": {
            "name": "setUp",
            "location": 480,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "http_client": [
                    "str",
                    "int"
                ]
            }
        },
        "SimpleHTTPSClientTestCase.create_client": {
            "name": "create_client",
            "location": 484,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "SimpleHTTPSClientTestCase.test_ssl_options": {
            "name": "test_ssl_options",
            "location": 489,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "resp": [
                    "int",
                    "Dict[str, str]",
                    "DefaultDict[Any, int]"
                ]
            }
        },
        "SimpleHTTPSClientTestCase.test_ssl_context": {
            "name": "test_ssl_context",
            "location": 493,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "resp": [
                    "Dict[str, List[Any]]",
                    "int"
                ]
            }
        },
        "SimpleHTTPSClientTestCase.test_ssl_options_handshake_fail": {
            "name": "test_ssl_options_handshake_fail",
            "location": 498,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "resp": [
                    "dict",
                    "Dict[str, str]",
                    "Generator[Any, None, None]",
                    "List[Tuple[str, str]]",
                    "OrderedDict"
                ]
            }
        },
        "SimpleHTTPSClientTestCase.test_ssl_context_handshake_fail": {
            "name": "test_ssl_context_handshake_fail",
            "location": 505,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "ctx": [
                    "ssl.SSLContext"
                ],
                "resp": [
                    "int",
                    "str",
                    "dict",
                    "OrderedDict[str, int]",
                    "Dict[str, str]",
                    "List[str]"
                ],
                "verify_mode": [
                    "bool",
                    "int",
                    "str",
                    "float",
                    "List[str]",
                    "Dict[str, Tuple[str, int, int]]"
                ]
            }
        },
        "SimpleHTTPSClientTestCase.test_error_logging": {
            "name": "test_error_logging",
            "location": 512,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "set",
                    "Iterator[Any]",
                    "Callable[[List[Any]], List[Any]]",
                    "str"
                ]
            }
        },
        "CreateAsyncHTTPClientTestCase.setUp": {
            "name": "setUp",
            "location": 524,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "saved": [
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "CreateAsyncHTTPClientTestCase.tearDown": {
            "name": "tearDown",
            "location": 528,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "CreateAsyncHTTPClientTestCase.test_max_clients": {
            "name": "test_max_clients",
            "location": 532,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "HTTP100ContinueTestCase.respond_100": {
            "name": "respond_100",
            "location": 554,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "request": [
                    "aiohttp.web.Request"
                ],
                "self": []
            },
            "variables": {
                "http1": [
                    "str"
                ],
                "request": [
                    "str",
                    "Dict[str, str]",
                    "tornado.httputil.HTTPHeaders"
                ]
            }
        },
        "HTTP100ContinueTestCase.respond_200": {
            "name": "respond_200",
            "location": 566,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "HTTP100ContinueTestCase.get_app": {
            "name": "get_app",
            "location": 571,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "HTTP100ContinueTestCase.test_100_continue": {
            "name": "test_100_continue",
            "location": 575,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "res": [
                    "Pattern[str]",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "HTTP204NoContentTestCase.respond_204": {
            "name": "respond_204",
            "location": 583,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "request": [
                    "aiohttp.web.Request"
                ],
                "self": []
            },
            "variables": {
                "http1": [
                    "str"
                ],
                "stream": [
                    "Dict[str, str]",
                    "List[str]",
                    "str"
                ]
            }
        },
        "HTTP204NoContentTestCase.get_app": {
            "name": "get_app",
            "location": 607,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "HTTP204NoContentTestCase.test_204_no_content": {
            "name": "test_204_no_content",
            "location": 610,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "resp": [
                    "int",
                    "Tuple[Any, Any]",
                    "dict",
                    "Dict[str, int]"
                ]
            }
        },
        "HTTP204NoContentTestCase.test_204_invalid_content_length": {
            "name": "test_204_invalid_content_length",
            "location": 617,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "str",
                    "List[str]",
                    "Tuple[str]",
                    "Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]"
                ]
            }
        },
        "HostnameMappingTestCase.setUp": {
            "name": "setUp",
            "location": 629,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "http_client": []
            }
        },
        "HostnameMappingTestCase.get_app": {
            "name": "get_app",
            "location": 637,
            "return": [
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "HostnameMappingTestCase.test_hostname_mapping": {
            "name": "test_hostname_mapping",
            "location": 640,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "str"
                ]
            }
        },
        "HostnameMappingTestCase.test_port_mapping": {
            "name": "test_port_mapping",
            "location": 647,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "str"
                ]
            }
        },
        "BadResolver.resolve": {
            "name": "resolve",
            "location": 658,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "ResolveTimeoutTestCase.setUp": {
            "name": "setUp",
            "location": 655,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "http_client": [
                    "str"
                ]
            }
        },
        "ResolveTimeoutTestCase.get_app": {
            "name": "get_app",
            "location": 665,
            "return": [
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "ResolveTimeoutTestCase.test_resolve_timeout": {
            "name": "test_resolve_timeout",
            "location": 668,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "str",
                    "list",
                    "List[str]",
                    "List[float]",
                    "List[None]",
                    "Dict[str, None]"
                ]
            }
        },
        "SmallHeaders.get": {
            "name": "get",
            "location": 676,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "LargeHeaders.get": {
            "name": "get",
            "location": 681,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "MaxHeaderSizeTest.get_app": {
            "name": "get_app",
            "location": 674,
            "return": [
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "MaxHeaderSizeTest.get_http_client": {
            "name": "get_http_client",
            "location": 688,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "MaxHeaderSizeTest.test_small_headers": {
            "name": "test_small_headers",
            "location": 691,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "Dict[str, str]",
                    "bytes",
                    "str",
                    "dict"
                ]
            }
        },
        "MaxHeaderSizeTest.test_large_headers": {
            "name": "test_large_headers",
            "location": 696,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "str",
                    "List[str]",
                    "Tuple[str]",
                    "Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]"
                ]
            }
        },
        "SmallBody.get": {
            "name": "get",
            "location": 705,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "LargeBody.get": {
            "name": "get",
            "location": 733,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "MaxBodySizeTest.get_app": {
            "name": "get_app",
            "location": 703,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "MaxBodySizeTest.get_http_client": {
            "name": "get_http_client",
            "location": 715,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "MaxBodySizeTest.test_small_body": {
            "name": "test_small_body",
            "location": 718,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "Dict[str, str]",
                    "bytes",
                    "str",
                    "dict"
                ]
            }
        },
        "MaxBodySizeTest.test_large_body": {
            "name": "test_large_body",
            "location": 723,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "str",
                    "List[str]",
                    "Tuple[str]",
                    "Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]"
                ]
            }
        },
        "MaxBufferSizeTest.get_app": {
            "name": "get_app",
            "location": 730,
            "return": [
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "MaxBufferSizeTest.get_http_client": {
            "name": "get_http_client",
            "location": 738,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "MaxBufferSizeTest.test_large_body": {
            "name": "test_large_body",
            "location": 742,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "Dict[str, str]",
                    "bytes",
                    "str",
                    "dict"
                ]
            }
        },
        "ChunkedWithContentLength.get": {
            "name": "get",
            "location": 752,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "ChunkedWithContentLengthTest.get_app": {
            "name": "get_app",
            "location": 749,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "ChunkedWithContentLengthTest.get_http_client": {
            "name": "get_http_client",
            "location": 759,
            "return": [
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "ChunkedWithContentLengthTest.test_chunked_with_content_length": {
            "name": "test_chunked_with_content_length",
            "location": 762,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "str",
                    "List[str]",
                    "Tuple[str]",
                    "Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]"
                ]
            }
        },
        "global": {}
    },
    "tornado-5.0.2/tornado/test/stack_context_test.py": {
        "TestRequestHandler.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "app": [
                    "aiohttp.web.Request",
                    "Exception",
                    "application.Application"
                ],
                "args": [],
                "kwargs": [],
                "request": [
                    "aiohttp.web.Request",
                    "Exception",
                    "application.Application"
                ],
                "self": []
            },
            "variables": {}
        },
        "TestRequestHandler.get": {
            "name": "get",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TestRequestHandler.part2": {
            "name": "part2",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TestRequestHandler.part3": {
            "name": "part3",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TestRequestHandler.write_error": {
            "name": "write_error",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "status_code": [
                    "int",
                    "bool",
                    "list",
                    "Optional[int]",
                    "Optional[str]"
                ]
            },
            "variables": {}
        },
        "HTTPStackContextTest.get_app": {
            "name": "get_app",
            "location": 45,
            "return": [
                "bool",
                "Dict[str, Type[Any]]",
                "dict",
                "Dict[str, Dict[str, str]]",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "HTTPStackContextTest.test_stack_context": {
            "name": "test_stack_context",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "HTTPStackContextTest.handle_response": {
            "name": "handle_response",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "response": [
                    "List[Dict[str, Any]]",
                    "faustypes.web.Response",
                    "dict"
                ],
                "self": []
            },
            "variables": {
                "response": [
                    "Dict[str, str]",
                    "Dict[str, Optional[str]]",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "StackContextTest.setUp": {
            "name": "setUp",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "active_contexts": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ]
            }
        },
        "StackContextTest.context": {
            "name": "context",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "name": [
                    "str",
                    "list",
                    "List[str]",
                    "Set[str]"
                ],
                "self": []
            },
            "variables": {}
        },
        "StackContextTest.library_function": {
            "name": "library_function",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "callback": [
                    "Dict[str, Any]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "callback": [
                    "dict"
                ]
            }
        },
        "StackContextTest.library_inner_callback": {
            "name": "library_inner_callback",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "callback": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "StackContextTest.final_callback": {
            "name": "final_callback",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "StackContextTest.test_exit_library_context": {
            "name": "test_exit_library_context",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "StackContextTest.f1": {
            "name": "f1",
            "location": 266,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "StackContextTest.f2": {
            "name": "f2",
            "location": 274,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "StackContextTest.f3": {
            "name": "f3",
            "location": 210,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "StackContextTest.f4": {
            "name": "f4",
            "location": 115,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "StackContextTest.f5": {
            "name": "f5",
            "location": 123,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "StackContextTest.test_deactivate": {
            "name": "test_deactivate",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "deactivate_callbacks": [
                    "str",
                    "List[str]",
                    "int",
                    "Dict[str, List[Any]]",
                    "Tuple[str, str, str, str, str, str, str, str]"
                ]
            }
        },
        "StackContextTest.check_contexts": {
            "name": "check_contexts",
            "location": 132,
            "return": [
                "List[Dict]",
                "List[str]",
                "List[int]",
                "str",
                "List[List[Any]]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "chain": [
                    "str"
                ],
                "exception_contexts": [
                    "list",
                    "Type[Tuple[Any, Any]]",
                    "int"
                ],
                "full_contexts": [
                    "str"
                ]
            }
        },
        "StackContextTest.make_wrapped_function": {
            "name": "make_wrapped_function",
            "location": 143,
            "return": [],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "partial": []
            }
        },
        "StackContextTest.test_deactivate_order": {
            "name": "test_deactivate_order",
            "location": 129,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "deactivate_callbacks": [
                    "Dict[str, Any]"
                ],
                "func": []
            }
        },
        "StackContextTest.test_isolation_nonempty": {
            "name": "test_isolation_nonempty",
            "location": 175,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "StackContextTest.test_isolation_empty": {
            "name": "test_isolation_empty",
            "location": 197,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "StackContextTest.f": {
            "name": "f",
            "location": 248,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "StackContextTest.test_yield_in_with": {
            "name": "test_yield_in_with",
            "location": 217,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "StackContextTest.test_yield_outside_with": {
            "name": "test_yield_outside_with",
            "location": 238,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "cb": [
                    "dict"
                ]
            }
        },
        "StackContextTest.test_yield_in_with_exception_stack_context": {
            "name": "test_yield_in_with_exception_stack_context",
            "location": 245,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "StackContextTest.test_yield_outside_with_exception_stack_context": {
            "name": "test_yield_outside_with_exception_stack_context",
            "location": 257,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "cb": [
                    "dict"
                ]
            }
        },
        "StackContextTest.test_run_with_stack_context": {
            "name": "test_run_with_stack_context",
            "location": 264,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "global": {}
    },
    "tornado-5.0.2/tornado/test/tcpclient_test.py": {
        "TestTCPServer.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "family": [
                    "Optional[int]",
                    "Optional[float]",
                    "Optional[str]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "port": [
                    "int",
                    "Tuple[str, str]",
                    "Dict[int, str]",
                    "str",
                    "float"
                ],
                "queue": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ],
                "sockets": [
                    "str",
                    "int",
                    "tuple"
                ],
                "streams": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ]
            }
        },
        "TestTCPServer.handle_stream": {
            "name": "handle_stream",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "address": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "args": [],
                "kwargs": [],
                "self": [],
                "stream": [
                    "int",
                    "bytearray",
                    "List[int]",
                    "List[List[str]]",
                    "str",
                    "list"
                ]
            },
            "variables": {}
        },
        "TestTCPServer.stop": {
            "name": "stop",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TimeoutResolver.resolve": {
            "name": "resolve",
            "location": 166,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TCPClientTest.setUp": {
            "name": "setUp",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "client": [
                    "\"Client\"",
                    "int",
                    "Dict[str, Any]"
                ],
                "server": [
                    "List[str]",
                    "int",
                    "str",
                    "IO[str]",
                    "Optional[float]"
                ]
            }
        },
        "TCPClientTest.start_server": {
            "name": "start_server",
            "location": 61,
            "return": [
                "int",
                "Tuple[str, str]",
                "str",
                "list"
            ],
            "arguments": {
                "args": [],
                "family": [
                    "int",
                    "str",
                    "bool"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "server": [
                    "int",
                    "socketserver.TCPServer",
                    "Tuple[str, int]",
                    "str",
                    "dict"
                ]
            }
        },
        "TCPClientTest.stop_server": {
            "name": "stop_server",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "server": [
                    "Dict[Optional[str], str]",
                    "dict",
                    "Dict[str, Type[Any]]",
                    "int",
                    "Tuple[Any, Any, Any]"
                ]
            }
        },
        "TCPClientTest.tearDown": {
            "name": "tearDown",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TCPClientTest.skipIfLocalhostV4": {
            "name": "skipIfLocalhostV4",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "addrinfo": [
                    "Set[str]",
                    "set",
                    "tuple",
                    "List[int]",
                    "dict",
                    "int",
                    "str"
                ],
                "families": [
                    "str",
                    "Set[str]",
                    "Tuple[str, str]",
                    "Tuple[str]",
                    "Tuple[str, str, str, str]"
                ]
            }
        },
        "TCPClientTest.do_test_connect": {
            "name": "do_test_connect",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "family": [
                    "Optional[str]",
                    "float"
                ],
                "host": [
                    "str",
                    "Callable",
                    "int"
                ],
                "kwargs": [],
                "self": [],
                "source_ip": [
                    "str",
                    "Callable",
                    "int"
                ],
                "source_port": [
                    "str",
                    "Callable",
                    "int"
                ]
            },
            "variables": {
                "data": [
                    "bytes",
                    "List[int]",
                    "int",
                    "str",
                    "Tuple[int]",
                    "Tuple[int, int, int, int]"
                ],
                "port": [
                    "int",
                    "str",
                    "float",
                    "Dict[str, Union[Any, Any, Any]]"
                ],
                "server_stream": [
                    "str",
                    "int",
                    "bool"
                ],
                "stream": [
                    "list",
                    "Dict[bytes, multiprocessing.queues.Queue[Any]]",
                    "dict",
                    "Optional[str]"
                ]
            }
        },
        "TCPClientTest.test_connect_ipv4_ipv4": {
            "name": "test_connect_ipv4_ipv4",
            "location": 98,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TCPClientTest.test_connect_ipv4_dual": {
            "name": "test_connect_ipv4_dual",
            "location": 101,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TCPClientTest.test_connect_ipv6_ipv6": {
            "name": "test_connect_ipv6_ipv6",
            "location": 105,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TCPClientTest.test_connect_ipv6_dual": {
            "name": "test_connect_ipv6_dual",
            "location": 110,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TCPClientTest.test_connect_unspec_ipv4": {
            "name": "test_connect_unspec_ipv4",
            "location": 116,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TCPClientTest.test_connect_unspec_ipv6": {
            "name": "test_connect_unspec_ipv6",
            "location": 120,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TCPClientTest.test_connect_unspec_dual": {
            "name": "test_connect_unspec_dual",
            "location": 124,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TCPClientTest.test_refused_ipv4": {
            "name": "test_refused_ipv4",
            "location": 128,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "cleanup_func": [
                    "str",
                    "list"
                ],
                "port": [
                    "int",
                    "str",
                    "list",
                    "float"
                ]
            }
        },
        "TCPClientTest.test_source_ip_fail": {
            "name": "test_source_ip_fail",
            "location": 134,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TCPClientTest.test_source_ip_success": {
            "name": "test_source_ip_success",
            "location": 144,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TCPClientTest.test_source_port_fail": {
            "name": "test_source_port_fail",
            "location": 151,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TCPClientTest.test_connect_timeout": {
            "name": "test_connect_timeout",
            "location": 162,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "timeout": [
                    "float",
                    "int",
                    "Set[str]",
                    "str"
                ]
            }
        },
        "TestConnectorSplit.test_one_family": {
            "name": "test_one_family",
            "location": 174,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "primary": [
                    "float",
                    "str",
                    "Dict[str, Union[Any, Any, Any]]",
                    "Tuple[Literal, Literal]",
                    "dict",
                    "int"
                ],
                "secondary": [
                    "memoryview",
                    "bytearray",
                    "str",
                    "frozenset[int]"
                ]
            }
        },
        "TestConnectorSplit.test_mixed": {
            "name": "test_mixed",
            "location": 183,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "primary": [
                    "Pattern[str]",
                    "enumerate[Any]",
                    "Dict[int, str]"
                ],
                "secondary": [
                    "Pattern[str]",
                    "frozenset[Any]",
                    "int"
                ]
            }
        },
        "FakeStream.__init__": {
            "name": "__init__",
            "location": 195,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "closed": [
                    "dict",
                    "Set[str]"
                ]
            }
        },
        "FakeStream.close": {
            "name": "close",
            "location": 198,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "closed": [
                    "Optional[str]",
                    "int",
                    "str",
                    "asyncio.Queue",
                    "Dict[Any, Dict[Any, str]]",
                    "Optional[List[str]]",
                    "dict"
                ]
            }
        },
        "ConnectorTest.setUp": {
            "name": "setUp",
            "location": 201,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "addrinfo": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ],
                "connect_futures": [
                    "Callable[[], None]",
                    "TextIO",
                    "Iterable[Any]"
                ],
                "streams": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ]
            }
        },
        "ConnectorTest.tearDown": {
            "name": "tearDown",
            "location": 208,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "ConnectorTest.create_stream": {
            "name": "create_stream",
            "location": 215,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "addr": [
                    "str"
                ],
                "af": [
                    "bool",
                    "float"
                ],
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "future": [
                    "TextIO",
                    "queue.Queue",
                    "str",
                    "socket"
                ],
                "stream": []
            }
        },
        "ConnectorTest.assert_pending": {
            "name": "assert_pending",
            "location": 222,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "keys": [
                    "str",
                    "List[str]",
                    "bool",
                    "Sequence[str]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "ConnectorTest.resolve_connect": {
            "name": "resolve_connect",
            "location": 225,
            "return": [
                ""
            ],
            "arguments": {
                "addr": [
                    "str",
                    "int"
                ],
                "af": [
                    "bool",
                    "str",
                    "int"
                ],
                "args": [],
                "kwargs": [],
                "self": [],
                "success": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            },
            "variables": {
                "future": [
                    "concurrenfutures._base.Future[Any]",
                    "list"
                ]
            }
        },
        "ConnectorTest.assert_connector_streams_closed": {
            "name": "assert_connector_streams_closed",
            "location": 236,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "conn": [
                    "int",
                    "Callable",
                    "str"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "ConnectorTest.start_connect": {
            "name": "start_connect",
            "location": 240,
            "return": [
                "int",
                "Tuple[str, str]",
                "str",
                "list"
            ],
            "arguments": {
                "addrinfo": [
                    "str",
                    "int",
                    "list"
                ],
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "conn": [],
                "future": [
                    "float",
                    "int"
                ]
            }
        },
        "ConnectorTest.test_immediate_success": {
            "name": "test_immediate_success",
            "location": 246,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "conn": [
                    "int",
                    "float",
                    "str",
                    "Type[Dict[str, Any]]",
                    "Final",
                    "Tuple[int, int, int]"
                ],
                "future": [
                    "int",
                    "float",
                    "list"
                ]
            }
        },
        "ConnectorTest.test_immediate_failure": {
            "name": "test_immediate_failure",
            "location": 253,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "conn": [
                    "str",
                    "bool",
                    "int",
                    "Pattern[str]",
                    "List[str]"
                ],
                "future": [
                    "list",
                    "str"
                ]
            }
        },
        "ConnectorTest.test_one_family_second_try": {
            "name": "test_one_family_second_try",
            "location": 260,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "conn": [
                    "str",
                    "bool",
                    "int",
                    "Pattern[str]",
                    "List[str]"
                ],
                "future": [
                    "float",
                    "Pattern[str]",
                    "list"
                ]
            }
        },
        "ConnectorTest.test_one_family_second_try_failure": {
            "name": "test_one_family_second_try_failure",
            "location": 268,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "conn": [
                    "str",
                    "bool",
                    "int",
                    "Pattern[str]",
                    "List[str]"
                ],
                "future": [
                    "concurrenfutures._base.Future[Any]",
                    "Dict[str, Dict[str, Any]]",
                    "venv.Lib.site-packages.sqlalchemy.util.langhelpers.symbol",
                    "str",
                    "List[str]"
                ]
            }
        },
        "ConnectorTest.test_one_family_second_try_timeout": {
            "name": "test_one_family_second_try_timeout",
            "location": 276,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "conn": [
                    "str",
                    "bool",
                    "int",
                    "Pattern[str]",
                    "List[str]"
                ],
                "future": [
                    "float",
                    "Pattern[str]",
                    "list"
                ]
            }
        },
        "ConnectorTest.test_two_families_immediate_failure": {
            "name": "test_two_families_immediate_failure",
            "location": 288,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "conn": [
                    "int",
                    "float",
                    "str",
                    "Type[Dict[str, Any]]",
                    "Final",
                    "Tuple[int, int, int]"
                ],
                "future": [
                    "int",
                    "float",
                    "list"
                ]
            }
        },
        "ConnectorTest.test_two_families_timeout": {
            "name": "test_two_families_timeout",
            "location": 297,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "conn": [
                    "int",
                    "float",
                    "str",
                    "Type[Dict[str, Any]]",
                    "Final",
                    "Tuple[int, int, int]"
                ],
                "future": [
                    "int",
                    "float",
                    "list"
                ]
            }
        },
        "ConnectorTest.test_success_after_timeout": {
            "name": "test_success_after_timeout",
            "location": 308,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "conn": [
                    "int",
                    "float",
                    "str",
                    "Type[Dict[str, Any]]",
                    "Final",
                    "Tuple[int, int, int]"
                ],
                "future": [
                    "int",
                    "float",
                    "list"
                ]
            }
        },
        "ConnectorTest.test_all_fail": {
            "name": "test_all_fail",
            "location": 319,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "conn": [
                    "int",
                    "float",
                    "str",
                    "Type[Dict[str, Any]]",
                    "Final",
                    "Tuple[int, int, int]"
                ],
                "future": [
                    "int",
                    "List[Union[Any, Any]]",
                    "float",
                    "List[int]"
                ]
            }
        },
        "ConnectorTest.test_one_family_timeout_after_connect_timeout": {
            "name": "test_one_family_timeout_after_connect_timeout",
            "location": 335,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "conn": [],
                "future": [
                    "concurrenfutures._base.Future[Any]",
                    "Dict[str, Dict[str, Any]]",
                    "venv.Lib.site-packages.sqlalchemy.util.langhelpers.symbol",
                    "str",
                    "List[str]"
                ]
            }
        },
        "ConnectorTest.test_one_family_success_before_connect_timeout": {
            "name": "test_one_family_success_before_connect_timeout",
            "location": 351,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "conn": [
                    "int",
                    "Tuple[int, int, int]"
                ],
                "future": [
                    "float",
                    "Pattern[str]",
                    "list"
                ]
            }
        },
        "ConnectorTest.test_one_family_second_try_after_connect_timeout": {
            "name": "test_one_family_second_try_after_connect_timeout",
            "location": 364,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "conn": [
                    "int",
                    "Tuple[int, int, int]"
                ],
                "future": [
                    "concurrenfutures._base.Future[Any]",
                    "Dict[str, Dict[str, Any]]",
                    "venv.Lib.site-packages.sqlalchemy.util.langhelpers.symbol",
                    "str",
                    "List[str]"
                ]
            }
        },
        "ConnectorTest.test_one_family_second_try_failure_before_connect_timeout": {
            "name": "test_one_family_second_try_failure_before_connect_timeout",
            "location": 377,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "conn": [
                    "int",
                    "Tuple[int, int, int]"
                ],
                "future": [
                    "concurrenfutures._base.Future[Any]",
                    "Dict[str, Dict[str, Any]]",
                    "venv.Lib.site-packages.sqlalchemy.util.langhelpers.symbol",
                    "str",
                    "List[str]"
                ]
            }
        },
        "ConnectorTest.test_two_family_timeout_before_connect_timeout": {
            "name": "test_two_family_timeout_before_connect_timeout",
            "location": 389,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "conn": [
                    "int",
                    "float",
                    "list",
                    "List[int]",
                    "Union[float, int]"
                ],
                "future": [
                    "int",
                    "bool",
                    "Type[Callable[..., Any]]",
                    "str"
                ]
            }
        },
        "ConnectorTest.test_two_family_success_after_timeout": {
            "name": "test_two_family_success_after_timeout",
            "location": 404,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "conn": [
                    "float",
                    "list",
                    "int",
                    "Dict[str, Union[Any, Any, bool, int, str]]",
                    "str"
                ],
                "future": [
                    "int",
                    "float",
                    "list"
                ]
            }
        },
        "ConnectorTest.test_two_family_timeout_after_connect_timeout": {
            "name": "test_two_family_timeout_after_connect_timeout",
            "location": 418,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "conn": [
                    "List[str]",
                    "venv.Lib.site-packages.sqlalchemy.util.langhelpers.symbol",
                    "List[List[None]]",
                    "int"
                ],
                "future": [
                    "int",
                    "bool",
                    "Type[Callable[..., Any]]",
                    "str"
                ]
            }
        },
        "global": {
            "AF1": [
                "str",
                "Dict[str, int]",
                "List[str]",
                "bytes",
                "Tuple[Literal, Literal, Literal]",
                "int",
                "List[bytes]"
            ],
            "AF2": [
                "str",
                "List[str]",
                "float",
                "int"
            ]
        }
    },
    "tornado-5.0.2/tornado/test/tcpserver_test.py": {
        "TestServer.handle_stream": {
            "name": "handle_stream",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {
                "address": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "args": [],
                "kwargs": [],
                "self": [],
                "stream": [
                    "int",
                    "str",
                    "bool"
                ]
            },
            "variables": {}
        },
        "TCPServerTest.test_handle_stream_coroutine_logging": {
            "name": "test_handle_stream_coroutine_logging",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "client": [],
                "port": [
                    "str",
                    "TextIO"
                ],
                "server": [
                    "str"
                ],
                "sock": [
                    "int",
                    "TextIO",
                    "str"
                ]
            }
        },
        "TCPServerTest.test_handle_stream_native_coroutine": {
            "name": "test_handle_stream_native_coroutine",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "client": [],
                "namespace": [
                    "int",
                    "dict",
                    "Counter[Any]",
                    "List[List[int]]",
                    "List[Union[Any, Any]]",
                    "list",
                    "List[List[Any]]",
                    "str"
                ],
                "port": [
                    "str",
                    "TextIO"
                ],
                "result": [
                    "str",
                    "List[Tuple[str, str]]",
                    "Generator[Any, None, None]"
                ],
                "server": [
                    "str",
                    "List[str]"
                ],
                "sock": [
                    "int",
                    "TextIO",
                    "str"
                ]
            }
        },
        "TCPServerTest.test_stop_twice": {
            "name": "test_stop_twice",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "port": [
                    "int",
                    "Dict[str, int]"
                ],
                "server": [
                    "str",
                    "TextIO",
                    "Dict[str, Any]",
                    "list",
                    "int"
                ],
                "sock": [
                    "int",
                    "TextIO",
                    "str"
                ]
            }
        },
        "TCPServerTest.connect": {
            "name": "connect",
            "location": 98,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "c": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TCPServerTest.test_stop_in_callback": {
            "name": "test_stop_in_callback",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "N": [
                    "float"
                ],
                "clients": [
                    "int",
                    "str"
                ],
                "connected_clients": [
                    "int",
                    "List[List[int]]",
                    "Final",
                    "Set[int]"
                ],
                "port": [
                    "str",
                    "List[str]",
                    "int",
                    "Dict[str, List[Any]]",
                    "Tuple[str, str, str, str, str, str, str, str]"
                ],
                "server": [
                    "str",
                    "List[str]",
                    "int",
                    "Dict[str, List[Any]]",
                    "Tuple[str, str, str, str, str, str, str, str]"
                ],
                "server_addr": [
                    "str",
                    "List[str]",
                    "int",
                    "Dict[str, List[Any]]",
                    "Tuple[str, str, str, str, str, str, str, str]"
                ],
                "sock": [
                    "str",
                    "List[str]",
                    "int",
                    "Dict[str, List[Any]]",
                    "Tuple[str, str, str, str, str, str, str, str]"
                ]
            }
        },
        "TestMultiprocess.run_subproc": {
            "name": "run_subproc",
            "location": 130,
            "return": [
                "str",
                "Union[int, str]",
                "dict",
                "List[str]"
            ],
            "arguments": {
                "args": [],
                "code": [
                    "str",
                    "bytes"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "proc": [
                    "subprocess.CompletedProcess[bytes]",
                    "subprocess.Popen[Any]",
                    "str"
                ],
                "stdout": [
                    "subprocess.CompletedProcess[bytes]",
                    "subprocess.Popen[Any]",
                    "str",
                    "List[str]"
                ]
            }
        },
        "TestMultiprocess.test_single": {
            "name": "test_single",
            "location": 144,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "code": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]"
                ],
                "out": [
                    "list",
                    "List[str]",
                    "int"
                ]
            }
        },
        "TestMultiprocess.test_simple": {
            "name": "test_simple",
            "location": 160,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "code": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]"
                ],
                "out": [
                    "list",
                    "List[str]",
                    "int"
                ]
            }
        },
        "TestMultiprocess.test_advanced": {
            "name": "test_advanced",
            "location": 176,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "code": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]"
                ],
                "out": [
                    "list",
                    "List[str]",
                    "int"
                ]
            }
        },
        "global": {}
    },
    "tornado-5.0.2/tornado/test/template_test.py": {
        "TemplateTest.test_simple": {
            "name": "test_simple",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "template": [
                    "dict",
                    "list",
                    "T",
                    "List[str]",
                    "allennlp.common.util.JsonDict"
                ]
            }
        },
        "TemplateTest.test_bytes": {
            "name": "test_bytes",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "template": [
                    "Dict[str, Any]",
                    "List[List[None]]",
                    "str",
                    "Union[bytes, str]",
                    "dict"
                ]
            }
        },
        "TemplateTest.test_expressions": {
            "name": "test_expressions",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "template": [
                    "list",
                    "gute.template.Template",
                    "handrigh_template.Template"
                ]
            }
        },
        "TemplateTest.test_comment": {
            "name": "test_comment",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "template": [
                    "Dict[str, Any]",
                    "List[List[None]]",
                    "str",
                    "Union[bytes, str]",
                    "dict"
                ]
            }
        },
        "TemplateTest.test_include": {
            "name": "test_include",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "loader": [
                    "dict"
                ]
            }
        },
        "TemplateTest.test_extends": {
            "name": "test_extends",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "loader": [
                    "dict"
                ]
            }
        },
        "TemplateTest.test_relative_load": {
            "name": "test_relative_load",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "loader": [
                    "dict"
                ]
            }
        },
        "TemplateTest.test_escaping": {
            "name": "test_escaping",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TemplateTest.test_unicode_template": {
            "name": "test_unicode_template",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "template": [
                    "List[str]",
                    "bytes"
                ]
            }
        },
        "TemplateTest.test_unicode_literal_expression": {
            "name": "test_unicode_literal_expression",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "template": [
                    "jinja2.Template",
                    "int",
                    "Dict[str, Union[bool, str]]"
                ]
            }
        },
        "TemplateTest.test_custom_namespace": {
            "name": "test_custom_namespace",
            "location": 91,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "loader": [
                    "list",
                    "dict",
                    "int",
                    "Set[str]",
                    "Tuple[Any, Any]",
                    "Dict[str, Any]",
                    "Dict[str, Dict[str, Any]]"
                ]
            }
        },
        "TemplateTest.upper": {
            "name": "upper",
            "location": 108,
            "return": [
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "s": [
                    "str",
                    "Type[object]"
                ],
                "self": []
            },
            "variables": {}
        },
        "TemplateTest.test_apply": {
            "name": "test_apply",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "template": [
                    "handrigh_template.Template",
                    "gute.template.Template",
                    "list"
                ]
            }
        },
        "TemplateTest.test_unicode_apply": {
            "name": "test_unicode_apply",
            "location": 101,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "template": [
                    "handrigh_template.Template",
                    "gute.template.Template"
                ]
            }
        },
        "TemplateTest.test_bytes_apply": {
            "name": "test_bytes_apply",
            "location": 107,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "template": [
                    "handrigh_template.Template",
                    "gute.template.Template"
                ]
            }
        },
        "TemplateTest.test_if": {
            "name": "test_if",
            "location": 113,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "template": [
                    "gute.template.Template",
                    "handrigh_template.Template",
                    "List[int]",
                    "list",
                    "List[str]",
                    "str"
                ]
            }
        },
        "TemplateTest.test_if_empty_body": {
            "name": "test_if_empty_body",
            "location": 118,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "template": [
                    "List[str]",
                    "bytes"
                ]
            }
        },
        "TemplateTest.test_try": {
            "name": "test_try",
            "location": 122,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "template": [
                    "gute.template.Template",
                    "handrigh_template.Template",
                    "List[int]",
                    "list",
                    "List[str]",
                    "str"
                ]
            }
        },
        "TemplateTest.test_comment_directive": {
            "name": "test_comment_directive",
            "location": 132,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "template": [
                    "List[str]",
                    "bytes"
                ]
            }
        },
        "TemplateTest.test_break_continue": {
            "name": "test_break_continue",
            "location": 136,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "result": [
                    "Dict[str, str]",
                    "Dict[str, int]",
                    "Tuple[Any, Any]",
                    "Dict[str, Union[int, str]]",
                    "Dict[str, float]",
                    "List[int]"
                ],
                "template": [
                    "str",
                    "Dict[str, Dict[str, str]]",
                    "Dict[str, Any]",
                    "dict",
                    "Dict[Any, List[Any]]",
                    "Dict[Any, Dict[str, Any]]"
                ]
            }
        },
        "TemplateTest.test_break_outside_loop": {
            "name": "test_break_outside_loop",
            "location": 152,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TemplateTest.test_break_in_apply": {
            "name": "test_break_in_apply",
            "location": 159,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TemplateTest.test_no_inherit_future": {
            "name": "test_no_inherit_future",
            "location": 170,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "template": [
                    "list",
                    "gute.template.Template",
                    "handrigh_template.Template"
                ]
            }
        },
        "TemplateTest.test_non_ascii_name": {
            "name": "test_non_ascii_name",
            "location": 177,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "loader": [
                    "dict"
                ]
            }
        },
        "StackTraceTest.test_error_line_number_expression": {
            "name": "test_error_line_number_expression",
            "location": 183,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "loader": [
                    "str",
                    "Dict[str, Dict[Any, Any]]",
                    "list",
                    "Counter"
                ]
            }
        },
        "StackTraceTest.test_error_line_number_directive": {
            "name": "test_error_line_number_directive",
            "location": 194,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "loader": [
                    "str",
                    "Dict[str, Dict[Any, Any]]",
                    "list",
                    "Counter"
                ]
            }
        },
        "StackTraceTest.load_generate": {
            "name": "load_generate",
            "location": 208,
            "return": [
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "path": [
                    "str"
                ],
                "self": []
            },
            "variables": {}
        },
        "StackTraceTest.test_error_line_number_module": {
            "name": "test_error_line_number_module",
            "location": 205,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "exc_stack": [],
                "loader": [
                    "Dict[str, Any]",
                    "Pattern[str]",
                    "Dict[str, Dict[str, Any]]",
                    "Dict[str, str]"
                ]
            }
        },
        "StackTraceTest.test_error_line_number_include": {
            "name": "test_error_line_number_include",
            "location": 223,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "loader": [
                    "str",
                    "Dict[str, Dict[Any, Any]]",
                    "list",
                    "Counter"
                ]
            }
        },
        "StackTraceTest.test_error_line_number_extends_base_error": {
            "name": "test_error_line_number_extends_base_error",
            "location": 235,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "exc_stack": [
                    "dict"
                ],
                "loader": [
                    "str",
                    "Dict[str, Dict[Any, Any]]",
                    "list",
                    "Counter"
                ]
            }
        },
        "StackTraceTest.test_error_line_number_extends_sub_error": {
            "name": "test_error_line_number_extends_sub_error",
            "location": 247,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "loader": [
                    "str",
                    "Dict[str, Dict[Any, Any]]",
                    "list",
                    "Counter"
                ]
            }
        },
        "StackTraceTest.test_multi_includes": {
            "name": "test_multi_includes",
            "location": 263,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "loader": [
                    "str",
                    "Dict[str, Dict[Any, Any]]",
                    "list",
                    "Counter"
                ]
            }
        },
        "ParseErrorDetailTest.test_details": {
            "name": "test_details",
            "location": 278,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "loader": [
                    "int",
                    "dict",
                    "List[int]",
                    "List[List[int]]",
                    "str"
                ]
            }
        },
        "ParseErrorDetailTest.test_custom_parse_error": {
            "name": "test_custom_parse_error",
            "location": 289,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "AutoEscapeTest.setUp": {
            "name": "setUp",
            "location": 296,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "templates": [
                    "str",
                    "Dict[str, Any]",
                    "Callable",
                    "bytes",
                    "int"
                ]
            }
        },
        "AutoEscapeTest.test_default_off": {
            "name": "test_default_off",
            "location": 338,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "loader": [],
                "name": [
                    "str"
                ]
            }
        },
        "AutoEscapeTest.test_default_on": {
            "name": "test_default_on",
            "location": 353,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "loader": [
                    "str",
                    "Tuple[str, str, str]"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "AutoEscapeTest.test_unextended_block": {
            "name": "test_unextended_block",
            "location": 368,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "loader": [],
                "name": [
                    "str",
                    "list"
                ]
            }
        },
        "AutoEscapeTest.render": {
            "name": "render",
            "location": 408,
            "return": [
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "self": [],
                "template": [
                    "str",
                    "Optional[str]",
                    "int"
                ]
            },
            "variables": {}
        },
        "AutoEscapeTest.test_extended_block": {
            "name": "test_extended_block",
            "location": 376,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "loader": [
                    "str",
                    "List[str]",
                    "int",
                    "Dict[str, List[Any]]",
                    "Tuple[str, str, str, str, str, str, str, str]"
                ]
            }
        },
        "AutoEscapeTest.test_raw_expression": {
            "name": "test_raw_expression",
            "location": 391,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "loader": [
                    "str",
                    "List[str]",
                    "int",
                    "Dict[str, List[Any]]",
                    "Tuple[str, str, str, str, str, str, str, str]"
                ]
            }
        },
        "AutoEscapeTest.py_escape": {
            "name": "py_escape",
            "location": 404,
            "return": [
                "str",
                "Union[str, List[str]]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "s": [
                    "str",
                    "KT",
                    "bytes"
                ],
                "self": []
            },
            "variables": {}
        },
        "AutoEscapeTest.test_custom_escape": {
            "name": "test_custom_escape",
            "location": 400,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "loader": [
                    "str",
                    "List[str]",
                    "int",
                    "Dict[str, List[Any]]",
                    "Tuple[str, str, str, str, str, str, str, str]"
                ]
            }
        },
        "AutoEscapeTest.test_manual_minimize_whitespace": {
            "name": "test_manual_minimize_whitespace",
            "location": 418,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "loader": [
                    "str"
                ]
            }
        },
        "AutoEscapeTest.test_whitespace_by_filename": {
            "name": "test_whitespace_by_filename",
            "location": 432,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "loader": []
            }
        },
        "AutoEscapeTest.test_whitespace_by_loader": {
            "name": "test_whitespace_by_loader",
            "location": 458,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "loader": [],
                "templates": [
                    "str",
                    "Dict[str, List[str]]",
                    "List[Dict[str, str]]",
                    "Dict[str, Union[Any, Any, Any, str]]",
                    "Tuple[str]"
                ]
            }
        },
        "AutoEscapeTest.test_whitespace_directive": {
            "name": "test_whitespace_directive",
            "location": 475,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "loader": [
                    "dict"
                ]
            }
        },
        "TemplateLoaderTest.setUp": {
            "name": "setUp",
            "location": 490,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "loader": [
                    "str"
                ]
            }
        },
        "TemplateLoaderTest.test_utf8_in_file": {
            "name": "test_utf8_in_file",
            "location": 493,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "result": [],
                "tmpl": [
                    "Type[str]",
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "global": {}
    },
    "tornado-5.0.2/tornado/test/testing_test.py": {
        "set_environ": {
            "name": "set_environ",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "name": [
                    "str",
                    "Iterable[str]"
                ],
                "value": [
                    "str"
                ]
            },
            "variables": {
                "old_value": [
                    "str",
                    "List[Union[Any, Any, Any]]",
                    "Dict[str, str]",
                    "Optional[str]",
                    "list"
                ]
            }
        },
        "AsyncTestCaseTest.test_exception_in_callback": {
            "name": "test_exception_in_callback",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "AsyncTestCaseTest.test_wait_timeout": {
            "name": "test_wait_timeout",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "time": [
                    "int",
                    "Optional[str]",
                    "str",
                    "property"
                ]
            }
        },
        "AsyncTestCaseTest.test_subsequent_wait_calls": {
            "name": "test_subsequent_wait_calls",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "AsyncTestCaseTest.fail": {
            "name": "fail",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "message": [
                    "int",
                    "Callable",
                    "str"
                ],
                "self": []
            },
            "variables": {}
        },
        "AsyncTestCaseTest.test_multiple_errors": {
            "name": "test_multiple_errors",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "AsyncHTTPTestCaseTest.setUpClass": {
            "name": "setUpClass",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "cls": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "external_port": [
                    "Dict[Any, List[str]]",
                    "int",
                    "dict",
                    "Dict[str, Dict[str, int]]"
                ],
                "external_sock": [
                    "Dict[Any, List[str]]",
                    "int",
                    "dict",
                    "Dict[str, Dict[str, int]]"
                ]
            }
        },
        "AsyncHTTPTestCaseTest.get_app": {
            "name": "get_app",
            "location": 91,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "AsyncHTTPTestCaseTest.test_fetch_segment": {
            "name": "test_fetch_segment",
            "location": 94,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "path": [
                    "str",
                    "dict",
                    "list",
                    "List[str]"
                ],
                "response": [
                    "bytes",
                    "Dict[str, Union[bytes, str]]"
                ]
            }
        },
        "AsyncHTTPTestCaseTest.test_fetch_full_http_url": {
            "name": "test_fetch_full_http_url",
            "location": 99,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "path": [
                    "str"
                ],
                "response": [
                    "dict",
                    "Pattern[str]",
                    "List[Union[Any, Any]]"
                ]
            }
        },
        "AsyncHTTPTestCaseTest.test_fetch_full_https_url": {
            "name": "test_fetch_full_https_url",
            "location": 105,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "path": [
                    "str"
                ],
                "response": [
                    "dict",
                    "Pattern[str]",
                    "List[Union[Any, Any]]"
                ]
            }
        },
        "AsyncHTTPTestCaseTest.tearDownClass": {
            "name": "tearDownClass",
            "location": 112,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "cls": [
                    "str",
                    "bool",
                    "Dict[str, Any]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Test.test_gen": {
            "name": "test_gen",
            "location": 153,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Test.test_other_return": {
            "name": "test_other_return",
            "location": 163,
            "return": [
                "asyncio.StreamWriter",
                "asyncio.StreamReader",
                "str",
                "Callable"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "AsyncTestCaseWrapperTest.test_undecorated_generator": {
            "name": "test_undecorated_generator",
            "location": 118,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "result": [
                    "click.testing.Result"
                ],
                "test": [
                    "asyncio.locks.Lock",
                    "frozenset[str]",
                    "List[str]",
                    "bool",
                    "str"
                ]
            }
        },
        "AsyncTestCaseWrapperTest.test_undecorated_coroutine": {
            "name": "test_undecorated_coroutine",
            "location": 131,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "namespace": [
                    "int",
                    "float",
                    "List[int]",
                    "str"
                ],
                "result": [
                    "click.testing.Result"
                ],
                "test": [
                    "str",
                    "List[str]"
                ],
                "test_class": [
                    "bool",
                    "str",
                    "Callable[..., None]",
                    "List[Tuple[str, str, bytes]]",
                    "list",
                    "int",
                    "List[str]"
                ]
            }
        },
        "AsyncTestCaseWrapperTest.test_undecorated_generator_with_skip": {
            "name": "test_undecorated_generator_with_skip",
            "location": 150,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "result": [
                    "click.testing.Result"
                ],
                "test": [
                    "asyncio.locks.Lock",
                    "frozenset[str]",
                    "List[str]",
                    "bool",
                    "str"
                ]
            }
        },
        "AsyncTestCaseWrapperTest.test_other_return": {
            "name": "test_other_return",
            "location": 161,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "result": [
                    "click.testing.Result"
                ],
                "test": [
                    "asyncio.locks.Lock",
                    "frozenset[str]",
                    "List[str]",
                    "bool",
                    "str"
                ]
            }
        },
        "SetUpTearDown.setUp": {
            "name": "setUp",
            "location": 186,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "SetUpTearDown.tearDown": {
            "name": "tearDown",
            "location": 189,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "InheritBoth.test": {
            "name": "test",
            "location": 193,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "SetUpTearDownTest.test_set_up_tear_down": {
            "name": "test_set_up_tear_down",
            "location": 173,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "events": [
                    "list",
                    "List[object]"
                ],
                "expected": [
                    "str",
                    "List[str]",
                    "int",
                    "Dict[str, Union[Any, int, str]]",
                    "set",
                    "Dict[str, Any]",
                    "List[Tuple[str, float]]",
                    "Set[str]"
                ],
                "result": [
                    "asyncio.locks.Event",
                    "str",
                    "Generator[Any, None, None]",
                    "List[Dict[str, str]]",
                    "List[str]"
                ]
            }
        },
        "GenTest.setUp": {
            "name": "setUp",
            "location": 202,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "finished": [
                    "int",
                    "float"
                ]
            }
        },
        "GenTest.tearDown": {
            "name": "tearDown",
            "location": 206,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "GenTest.test_sync": {
            "name": "test_sync",
            "location": 211,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "finished": [
                    "str",
                    "bool"
                ]
            }
        },
        "GenTest.test_async": {
            "name": "test_async",
            "location": 215,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "finished": [
                    "str",
                    "bool"
                ]
            }
        },
        "GenTest.test": {
            "name": "test",
            "location": 242,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "time": [
                    "int"
                ]
            }
        },
        "GenTest.test_timeout": {
            "name": "test_timeout",
            "location": 219,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "finished": [
                    "str",
                    "bool"
                ]
            }
        },
        "GenTest.test_no_timeout": {
            "name": "test_no_timeout",
            "location": 239,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "finished": [
                    "str",
                    "bool"
                ]
            }
        },
        "GenTest.test_long_timeout": {
            "name": "test_long_timeout",
            "location": 251,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "time": [
                    "int"
                ]
            }
        },
        "GenTest.test_timeout_environment_variable": {
            "name": "test_timeout_environment_variable",
            "location": 249,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "finished": [
                    "str",
                    "bool"
                ]
            }
        },
        "GenTest.test_short_timeout": {
            "name": "test_short_timeout",
            "location": 263,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "time": [
                    "int"
                ]
            }
        },
        "GenTest.test_no_timeout_environment_variable": {
            "name": "test_no_timeout_environment_variable",
            "location": 261,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "finished": [
                    "str",
                    "bool"
                ]
            }
        },
        "GenTest.test_with_args": {
            "name": "test_with_args",
            "location": 276,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "GenTest.test_with_method_args": {
            "name": "test_with_method_args",
            "location": 274,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "finished": [
                    "str",
                    "bool"
                ]
            }
        },
        "GenTest.test_with_kwargs": {
            "name": "test_with_kwargs",
            "location": 285,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "GenTest.test_with_method_kwargs": {
            "name": "test_with_method_kwargs",
            "location": 283,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "finished": [
                    "str",
                    "bool"
                ]
            }
        },
        "GenTest.test_native_coroutine": {
            "name": "test_native_coroutine",
            "location": 293,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "namespace": [
                    "str",
                    "tuple"
                ]
            }
        },
        "GenTest.test_native_coroutine_timeout": {
            "name": "test_native_coroutine_timeout",
            "location": 303,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "finished": [
                    "str",
                    "bool"
                ],
                "namespace": [
                    "str",
                    "tuple"
                ]
            }
        },
        "GetNewIOLoopTest.get_new_ioloop": {
            "name": "get_new_ioloop",
            "location": 320,
            "return": [
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "GetNewIOLoopTest.setUp": {
            "name": "setUp",
            "location": 324,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "new_loop": [
                    "str",
                    "List[Hashable]"
                ],
                "orig_loop": [
                    "int"
                ]
            }
        },
        "GetNewIOLoopTest.tearDown": {
            "name": "tearDown",
            "location": 332,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "GetNewIOLoopTest.test_loop": {
            "name": "test_loop",
            "location": 339,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "global": {
            "asyncio": [
                "list"
            ]
        }
    },
    "tornado-5.0.2/tornado/test/twisted_test.py": {
        "save_signal_handlers": {
            "name": "save_signal_handlers",
            "location": 81,
            "return": [
                "str",
                "Optional[str]",
                "List[int]"
            ],
            "arguments": {
                "args": [],
                "kwargs": []
            },
            "variables": {
                "saved": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "int",
                    "List[str]",
                    "Type[set]"
                ]
            }
        },
        "restore_signal_handlers": {
            "name": "restore_signal_handlers",
            "location": 94,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "saved": [
                    "Mapping[str, Dict[str, Any]]",
                    "dict",
                    "Dict[str, Dict[str, str]]",
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "Iterable[str]"
                ]
            },
            "variables": {}
        },
        "make_test_subclass": {
            "name": "make_test_subclass",
            "location": 619,
            "return": [
                "bool",
                "str",
                "Dict[str, Tuple[str, str]]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "test_class": [
                    "str",
                    "Dict[str, object]"
                ]
            },
            "variables": {
                "__name__": [
                    "str"
                ],
                "_reactors": [
                    "str",
                    "List[str]",
                    "int",
                    "Dict[str, List[Any]]",
                    "Tuple[str, str, str, str, str, str, str, str]"
                ]
            }
        },
        "ReactorTestCase.setUp": {
            "name": "setUp",
            "location": 100,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_io_loop": [
                    "Optional[str]",
                    "int",
                    "str",
                    "List[List[int]]",
                    "List[str]"
                ],
                "_reactor": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ],
                "_saved_signals": [
                    "str",
                    "int"
                ]
            }
        },
        "ReactorTestCase.tearDown": {
            "name": "tearDown",
            "location": 107,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "ReactorWhenRunningTest.test_whenRunning": {
            "name": "test_whenRunning",
            "location": 114,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_anotherWhenRunningCalled": [
                    "int",
                    "float"
                ],
                "_whenRunningCalled": [
                    "int",
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "ReactorWhenRunningTest.whenRunningCallback": {
            "name": "whenRunningCallback",
            "location": 122,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_whenRunningCalled": [
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "ReactorWhenRunningTest.anotherWhenRunningCallback": {
            "name": "anotherWhenRunningCallback",
            "location": 127,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_anotherWhenRunningCalled": [
                    "str",
                    "Sequence[int]",
                    "int",
                    "bool",
                    "Union[str, Tuple[str, ...]]"
                ]
            }
        },
        "ReactorCallLaterTest.test_callLater": {
            "name": "test_callLater",
            "location": 133,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_laterCalled": [
                    "int",
                    "float",
                    "Dict[str, bool]"
                ],
                "_now": [
                    "int",
                    "float",
                    "list"
                ],
                "_timeout": [
                    "int"
                ],
                "dc": [
                    "int",
                    "Dict[str, str]",
                    "Pattern[str]",
                    "Optional[Match[str]]"
                ]
            }
        },
        "ReactorCallLaterTest.callLaterCallback": {
            "name": "callLaterCallback",
            "location": 144,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_called": [
                    "int",
                    "Set[str]",
                    "List[str]",
                    "list",
                    "str",
                    "Dict[int, str]"
                ],
                "_laterCalled": [
                    "sqlalchemy.engine.interfaces.Dialect",
                    "dict",
                    "str",
                    "int"
                ]
            }
        },
        "ReactorTwoCallLaterTest.test_callLater": {
            "name": "test_callLater",
            "location": 152,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_later1Called": [
                    "int",
                    "float",
                    "Dict[str, bool]"
                ],
                "_later2Called": [
                    "int",
                    "float",
                    "Dict[str, bool]"
                ],
                "_now": [
                    "int",
                    "bool",
                    "float",
                    "str",
                    "T"
                ],
                "_timeout1": [
                    "int"
                ],
                "_timeout2": [
                    "int"
                ],
                "dc1": [
                    "str",
                    "bool",
                    "Dict[str, str]",
                    "int"
                ],
                "dc2": [
                    "str",
                    "bool",
                    "Dict[str, str]",
                    "int"
                ]
            }
        },
        "ReactorTwoCallLaterTest.callLaterCallback1": {
            "name": "callLaterCallback1",
            "location": 169,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_called1": [
                    "int",
                    "Set[str]",
                    "List[str]",
                    "list",
                    "str",
                    "Dict[int, str]"
                ],
                "_later1Called": [
                    "sqlalchemy.engine.interfaces.Dialect",
                    "dict",
                    "str",
                    "int"
                ]
            }
        },
        "ReactorTwoCallLaterTest.callLaterCallback2": {
            "name": "callLaterCallback2",
            "location": 173,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_called2": [
                    "int",
                    "Set[str]",
                    "List[str]",
                    "list",
                    "str",
                    "Dict[int, str]"
                ],
                "_later2Called": [
                    "sqlalchemy.engine.interfaces.Dialect",
                    "dict",
                    "str",
                    "int"
                ]
            }
        },
        "ReactorCallFromThreadTest.setUp": {
            "name": "setUp",
            "location": 181,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_mainThread": [
                    "int",
                    "List[str]",
                    "twisted.internedefer.Deferred",
                    "Optional[int]"
                ]
            }
        },
        "ReactorCallFromThreadTest.tearDown": {
            "name": "tearDown",
            "location": 185,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "ReactorCallFromThreadTest._newThreadRun": {
            "name": "_newThreadRun",
            "location": 189,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "ReactorCallFromThreadTest._fnCalledFromThread": {
            "name": "_fnCalledFromThread",
            "location": 195,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "ReactorCallFromThreadTest._whenRunningCallback": {
            "name": "_whenRunningCallback",
            "location": 199,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_thread": [
                    "threading.Thread",
                    "str"
                ]
            }
        },
        "ReactorCallFromThreadTest.testCallFromThread": {
            "name": "testCallFromThread",
            "location": 203,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "ReactorCallInThread.setUp": {
            "name": "setUp",
            "location": 210,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_mainThread": [
                    "int",
                    "List[str]",
                    "twisted.internedefer.Deferred",
                    "Optional[int]"
                ]
            }
        },
        "ReactorCallInThread._fnCalledInThread": {
            "name": "_fnCalledInThread",
            "location": 214,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "ReactorCallInThread._whenRunningCallback": {
            "name": "_whenRunningCallback",
            "location": 218,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "ReactorCallInThread.testCallInThread": {
            "name": "testCallInThread",
            "location": 221,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Reader.__init__": {
            "name": "__init__",
            "location": 229,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "callback": [
                    "int",
                    "apistar.interfaces.Router",
                    "bool",
                    "float"
                ],
                "fd": [
                    "int",
                    "apistar.interfaces.Router",
                    "bool",
                    "float"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_callback": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ],
                "_fd": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ]
            }
        },
        "Reader.logPrefix": {
            "name": "logPrefix",
            "location": 233,
            "return": [
                "str",
                "List[bytes]",
                "Iterable[float]",
                "int",
                "float"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Reader.close": {
            "name": "close",
            "location": 236,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Reader.fileno": {
            "name": "fileno",
            "location": 239,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Reader.readConnectionLost": {
            "name": "readConnectionLost",
            "location": 242,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "reason": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "self": []
            },
            "variables": {}
        },
        "Reader.connectionLost": {
            "name": "connectionLost",
            "location": 245,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "reason": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "self": []
            },
            "variables": {}
        },
        "Reader.doRead": {
            "name": "doRead",
            "location": 248,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Writer.__init__": {
            "name": "__init__",
            "location": 253,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "callback": [
                    "int",
                    "apistar.interfaces.Router",
                    "bool",
                    "float"
                ],
                "fd": [
                    "int",
                    "apistar.interfaces.Router",
                    "bool",
                    "float"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_callback": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ],
                "_fd": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ]
            }
        },
        "Writer.logPrefix": {
            "name": "logPrefix",
            "location": 257,
            "return": [
                "str",
                "List[bytes]",
                "Iterable[float]",
                "int",
                "float"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Writer.close": {
            "name": "close",
            "location": 260,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Writer.fileno": {
            "name": "fileno",
            "location": 263,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Writer.connectionLost": {
            "name": "connectionLost",
            "location": 266,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "reason": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "self": []
            },
            "variables": {}
        },
        "Writer.doWrite": {
            "name": "doWrite",
            "location": 269,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "ReactorReaderWriterTest._set_nonblocking": {
            "name": "_set_nonblocking",
            "location": 275,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "fd": [
                    "Sequence[int]",
                    "bool",
                    "int"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "flags": [
                    "str",
                    "float"
                ]
            }
        },
        "ReactorReaderWriterTest.setUp": {
            "name": "setUp",
            "location": 279,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_p1": [
                    "str",
                    "bool"
                ],
                "_p2": [
                    "str",
                    "bool"
                ],
                "r": [
                    "Counter[Any]",
                    "platform.Any",
                    "list"
                ],
                "w": [
                    "Optional[str]",
                    "bool",
                    "int",
                    "Dict[str, Dict[str, Any]]"
                ]
            }
        },
        "ReactorReaderWriterTest.tearDown": {
            "name": "tearDown",
            "location": 289,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "ReactorReaderWriterTest.checkReadInput": {
            "name": "checkReadInput",
            "location": 328,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "fd": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "ReactorReaderWriterTest.writeOnce": {
            "name": "writeOnce",
            "location": 305,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "fd": [
                    "int",
                    "Callable",
                    "str"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "shouldWrite": [
                    "int"
                ]
            }
        },
        "ReactorReaderWriterTest._testReadWrite": {
            "name": "_testReadWrite",
            "location": 294,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_reader": [
                    "str",
                    "Tuple[Literal, Literal, Literal]"
                ],
                "_writer": [
                    "Dict[str, int]",
                    "str",
                    "int",
                    "Dict[str, List[str]]"
                ],
                "shouldWrite": [
                    "str",
                    "List[str]",
                    "int",
                    "Dict[str, List[Any]]",
                    "Tuple[str, str, str, str, str, str, str, str]"
                ]
            }
        },
        "ReactorReaderWriterTest.testReadWrite": {
            "name": "testReadWrite",
            "location": 319,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "ReactorReaderWriterTest.stopTest": {
            "name": "stopTest",
            "location": 331,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "ReactorReaderWriterTest._testNoWriter": {
            "name": "_testNoWriter",
            "location": 323,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_reader": [
                    "str",
                    "Tuple[Literal, Literal, Literal]"
                ],
                "_writer": [
                    "str",
                    "int"
                ]
            }
        },
        "ReactorReaderWriterTest.testNoWriter": {
            "name": "testNoWriter",
            "location": 352,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "HelloResource.render_GET": {
            "name": "render_GET",
            "location": 379,
            "return": [
                "int",
                "List[str]",
                "bytes"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "request": [
                    "Dict[str, Any]",
                    "aiohttp.web.Request"
                ],
                "self": []
            },
            "variables": {}
        },
        "HelloHandler.get": {
            "name": "get",
            "location": 387,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Accumulator.__init__": {
            "name": "__init__",
            "location": 425,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "finished": [
                    "int",
                    "apistar.interfaces.Router",
                    "bool",
                    "float"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "finished": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ]
            }
        },
        "Accumulator.dataReceived": {
            "name": "dataReceived",
            "location": 428,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "data": [
                    "Mapping[str, Any]",
                    "dict",
                    "Dict[str, Any]",
                    "float",
                    "List[List[Any]]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Accumulator.connectionLost": {
            "name": "connectionLost",
            "location": 431,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "reason": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "self": []
            },
            "variables": {}
        },
        "CompatibilityTests.setUp": {
            "name": "setUp",
            "location": 363,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "io_loop": [
                    "int",
                    "bytes",
                    "\"Point\"",
                    "str",
                    "Type[int]"
                ],
                "reactor": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ],
                "saved_signals": [
                    "str",
                    "int"
                ]
            }
        },
        "CompatibilityTests.tearDown": {
            "name": "tearDown",
            "location": 369,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "CompatibilityTests.start_twisted_server": {
            "name": "start_twisted_server",
            "location": 375,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "isLeaf": [
                    "bool",
                    "int"
                ],
                "port": [
                    "float",
                    "int",
                    "bool",
                    "asyncio.Queue",
                    "str"
                ],
                "site": [
                    "int",
                    "str"
                ],
                "twisted_port": [
                    "int",
                    "float",
                    "denite.util.Candidate",
                    "bool"
                ]
            }
        },
        "CompatibilityTests.start_tornado_server": {
            "name": "start_tornado_server",
            "location": 385,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "app": [
                    "aiohttp.web_app.Application"
                ],
                "server": [
                    "Dict[str, Union[Any, str]]",
                    "asyncio.events.AbstractEventLoop",
                    "Dict[str, Any]",
                    "str"
                ],
                "sock": [
                    "float",
                    "str",
                    "threading.local",
                    "int",
                    "List[str]"
                ],
                "tornado_port": [
                    "int",
                    "Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]",
                    "bool",
                    "Type[str]"
                ]
            }
        },
        "CompatibilityTests.run_ioloop": {
            "name": "run_ioloop",
            "location": 395,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "stop_loop": [
                    "int",
                    "str",
                    "Tuple[int, int, int, int]",
                    "dict",
                    "List[str]",
                    "Tuple[Any, int]"
                ]
            }
        },
        "CompatibilityTests.run_reactor": {
            "name": "run_reactor",
            "location": 400,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "stop": [
                    "int",
                    "Dict[str, int]",
                    "str",
                    "Dict[str, Union[None, bool, str]]"
                ],
                "stop_loop": [
                    "int",
                    "str",
                    "Tuple[int, int, int, int]",
                    "dict",
                    "List[str]",
                    "Tuple[Any, int]"
                ]
            }
        },
        "CompatibilityTests.callback": {
            "name": "callback",
            "location": 434,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "response": [
                    "List[dict]",
                    "Dict[str, Any]",
                    "aiohttp.web.Response",
                    "str"
                ],
                "self": []
            },
            "variables": {
                "finished": [
                    "str",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "Dict[str, Union[Any, int, str]]",
                    "Dict[str, Union[Any, Any, Any, Any]]"
                ]
            }
        },
        "CompatibilityTests.tornado_fetch": {
            "name": "tornado_fetch",
            "location": 405,
            "return": [
                "bytes",
                "dict"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "runner": [
                    "Dict[str, Union[str, int]]",
                    "str",
                    "Optional[str]"
                ],
                "self": [],
                "url": [
                    "str"
                ]
            },
            "variables": {
                "client": [
                    "str",
                    "List[str]",
                    "Dict[str, str]"
                ],
                "responses": [
                    "list",
                    "List[List[str]]",
                    "List[str]",
                    "Dict[str, Dict[str, str]]"
                ]
            }
        },
        "CompatibilityTests.shutdown": {
            "name": "shutdown",
            "location": 440,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "failure": [
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[float]",
                    "bool"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "CompatibilityTests.twisted_fetch": {
            "name": "twisted_fetch",
            "location": 418,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "runner": [
                    "Dict[str, Union[str, int]]",
                    "str",
                    "Optional[str]"
                ],
                "self": [],
                "url": [
                    "Dict[str, Union[str, int]]",
                    "str",
                    "Optional[str]"
                ]
            },
            "variables": {
                "chunks": [
                    "list",
                    "str",
                    "List[str]"
                ],
                "client": [
                    "Dict[str, str]",
                    "str",
                    "bool"
                ],
                "d": [
                    "str",
                    "set",
                    "bool",
                    "list",
                    "dict",
                    "Set[T]"
                ]
            }
        },
        "CompatibilityTests.f": {
            "name": "f",
            "location": 460,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "client": [
                    "str",
                    "flask.testing.FlaskClient[flask.wrappers.Response]"
                ],
                "response": [
                    "list"
                ]
            }
        },
        "CompatibilityTests.twisted_coroutine_fetch": {
            "name": "twisted_coroutine_fetch",
            "location": 456,
            "return": [
                "str",
                "Dict[str, str]",
                "MutableMapping[str, Any]",
                "int",
                "Optional[float]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "runner": [
                    "Dict[str, Union[str, int]]",
                    "str",
                    "Optional[str]"
                ],
                "self": [],
                "url": [
                    "Dict[str, Union[str, int]]",
                    "str",
                    "Optional[str]"
                ]
            },
            "variables": {
                "body": [
                    "str",
                    "Dict[str, List[str]]",
                    "bool",
                    "Optional[Dict]",
                    "bytes",
                    "Union[None, str, bytes]"
                ]
            }
        },
        "CompatibilityTests.testTwistedServerTornadoClientIOLoop": {
            "name": "testTwistedServerTornadoClientIOLoop",
            "location": 476,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "int",
                    "range",
                    "List[List[Any]]"
                ]
            }
        },
        "CompatibilityTests.testTwistedServerTornadoClientReactor": {
            "name": "testTwistedServerTornadoClientReactor",
            "location": 482,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "int",
                    "range",
                    "List[List[Any]]"
                ]
            }
        },
        "CompatibilityTests.testTornadoServerTwistedClientIOLoop": {
            "name": "testTornadoServerTwistedClientIOLoop",
            "location": 488,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "int",
                    "Final",
                    "float"
                ]
            }
        },
        "CompatibilityTests.testTornadoServerTwistedClientReactor": {
            "name": "testTornadoServerTwistedClientReactor",
            "location": 494,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "int",
                    "Final",
                    "float"
                ]
            }
        },
        "CompatibilityTests.testTornadoServerTwistedCoroutineClientIOLoop": {
            "name": "testTornadoServerTwistedCoroutineClientIOLoop",
            "location": 500,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "bytes",
                    "int",
                    "List[str]",
                    "str",
                    "Dict[str, Tuple[Any, str]]",
                    "dict"
                ]
            }
        },
        "ConvertDeferredTest.fn": {
            "name": "fn",
            "location": 522,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "ConvertDeferredTest.test_success": {
            "name": "test_success",
            "location": 509,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "f": [
                    "Generator[Any, None, None]",
                    "Callable(hash)[[object], int]"
                ]
            }
        },
        "ConvertDeferredTest.test_failure": {
            "name": "test_failure",
            "location": 520,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "f": [
                    "Generator[Any, None, None]"
                ]
            }
        },
        "TornadoTest.setUp": {
            "name": "setUp",
            "location": 623,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "__curdir": [
                    "str",
                    "bool"
                ],
                "__tempdir": [
                    "int",
                    "Dict[str, str]",
                    "Tuple[str, str]",
                    "list",
                    "str"
                ]
            }
        },
        "TornadoTest.tearDown": {
            "name": "tearDown",
            "location": 632,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TornadoTest.flushWarnings": {
            "name": "flushWarnings",
            "location": 637,
            "return": [
                "float",
                "int",
                "asyncio.BaseEventLoop"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "filtered": [
                    "str",
                    "list",
                    "Dict[str, Union[int, str]]",
                    "List[str]"
                ]
            }
        },
        "TornadoTest.buildReactor": {
            "name": "buildReactor",
            "location": 655,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "__saved_signals": [
                    "str",
                    "int"
                ]
            }
        },
        "TornadoTest.unbuildReactor": {
            "name": "unbuildReactor",
            "location": 659,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "reactor": [
                    "bool",
                    "asyncio.AbstractEventLoop"
                ],
                "self": []
            },
            "variables": {}
        },
        "LayeredTwistedIOLoop.initialize": {
            "name": "initialize",
            "location": 700,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "reactor": [
                    "int"
                ],
                "real_io_loop": [
                    "str",
                    "List[bool]",
                    "int",
                    "bool",
                    "threading.Event"
                ]
            }
        },
        "LayeredTwistedIOLoop.close": {
            "name": "close",
            "location": 706,
            "return": [
                ""
            ],
            "arguments": {
                "all_fds": [
                    "str",
                    "int",
                    "asyncio.streams.StreamWriter",
                    "bool"
                ],
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "LayeredTwistedIOLoop.f": {
            "name": "f",
            "location": 721,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "LayeredTwistedIOLoop.stop": {
            "name": "stop",
            "location": 714,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "global": {
            "ResourceWarning": [
                "List[str]",
                "Tuple[str, str]",
                "int"
            ],
            "asyncio": [
                "str",
                "List[str]",
                "int",
                "Dict[str, List[Any]]",
                "Tuple[str, str, str, str, str, str, str, str]"
            ],
            "have_twisted": [
                "list",
                "Dict[str, Optional[Any]]",
                "List[int]"
            ],
            "have_twisted_web": [
                "str",
                "List[str]",
                "int",
                "Dict[str, List[Any]]",
                "Tuple[str, str, str, str, str, str, str, str]"
            ],
            "skipIfNoTwisted": [
                "str",
                "int",
                "bool",
                "Callable"
            ],
            "test_class": [
                "asyncio.events.AbstractEventLoop",
                "List[str]",
                "Tuple[Any, Any, Any]",
                "Dict[str, None]"
            ],
            "test_subclass": [
                "Union[Literal, str]",
                "str",
                "Dict[str, Any]",
                "dict",
                "Dict[Any, str]"
            ],
            "twisted_tests": [
                "Dict[str, str]",
                "List[str]",
                "List[int]",
                "Tuple[Tuple[Any, Any, Any, Any, Any, Any], Tuple[Any], Tuple[Any], Tuple[Any, Any, Any], Tuple[Any], Tuple[Any], Tuple[Any, Any, Any], Tuple[Any], Tuple[Any], Tuple[Any, Any, Any]]",
                "Type[int]"
            ]
        }
    },
    "tornado-5.0.2/tornado/test/util.py": {
        "_detect_ipv6": {
            "name": "_detect_ipv6",
            "location": 45,
            "return": [
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": []
            },
            "variables": {
                "sock": [
                    "int"
                ]
            }
        },
        "refusing_port": {
            "name": "refusing_port",
            "location": 65,
            "return": [
                "Callable",
                "Callable[[str], None]"
            ],
            "arguments": {
                "args": [],
                "kwargs": []
            },
            "variables": {
                "client_addr": [],
                "client_socket": [],
                "conn": [
                    "str",
                    "int"
                ],
                "port": [
                    "dict",
                    "int",
                    "str"
                ],
                "server_socket": [
                    "int",
                    "str"
                ]
            }
        },
        "exec_test": {
            "name": "exec_test",
            "location": 85,
            "return": [
                "int",
                "str",
                "Dict[str, int]"
            ],
            "arguments": {
                "args": [],
                "caller_globals": [
                    "bool",
                    "Dict[str, Any]",
                    "bytes"
                ],
                "caller_locals": [
                    "bool",
                    "Dict[str, Any]",
                    "bytes"
                ],
                "kwargs": [],
                "s": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "float",
                    "list",
                    "List[str]"
                ]
            },
            "variables": {
                "global_namespace": [
                    "bool",
                    "int"
                ],
                "local_namespace": [
                    "str",
                    "Tuple[Any, Any]",
                    "Pattern[str]",
                    "int"
                ]
            }
        },
        "subTest": {
            "name": "subTest",
            "location": 100,
            "return": [
                "bool",
                "dict"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "test": [
                    "str",
                    "List[str]"
                ]
            },
            "variables": {
                "subTest": [
                    "contextlib.ExitStack",
                    "cirq.testing.equals_tester.EqualsTester"
                ]
            }
        },
        "global": {
            "skipBefore33": [
                "str",
                "List[str]",
                "int",
                "Dict[str, List[Any]]",
                "Tuple[str, str, str, str, str, str, str, str]"
            ],
            "skipBefore35": [
                "str",
                "List[str]",
                "int",
                "Dict[str, List[Any]]",
                "Tuple[str, str, str, str, str, str, str, str]"
            ],
            "skipIfNoIPv6": [
                "Callable",
                "int",
                "str"
            ],
            "skipIfNoNetwork": [
                "str",
                "int",
                "bool",
                "Callable"
            ],
            "skipIfNonUnix": [
                "int",
                "str",
                "Callable",
                "Optional[str]",
                "Optional[int]"
            ],
            "skipNotCPython": [
                "str",
                "int",
                "Tuple[Tuple[str, str], Tuple[str, str]]",
                "List[bytes]"
            ],
            "skipOnAppEngine": [
                "str",
                "int",
                "Optional[str]"
            ],
            "skipOnTravis": [
                "str",
                "List[str]",
                "int",
                "Dict[str, List[Any]]",
                "Tuple[str, str, str, str, str, str, str, str]"
            ],
            "skipPypy3V58": [
                "int",
                "str"
            ]
        }
    },
    "tornado-5.0.2/tornado/test/util_test.py": {
        "TwoArgException.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "a": [
                    "float",
                    "str",
                    "int",
                    "Optional[int]",
                    "Counter"
                ],
                "args": [],
                "b": [
                    "float",
                    "str",
                    "int",
                    "Optional[int]",
                    "Counter"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "a": [
                    "list",
                    "Type",
                    "str",
                    "int"
                ],
                "b": [
                    "List[List[int]]",
                    "List[Exception]",
                    "list",
                    "Tuple[float, int]",
                    "List[str]",
                    "str"
                ]
            }
        },
        "RaiseExcInfoTest.test_two_arg_exception": {
            "name": "test_two_arg_exception",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "exc_info": [
                    "Dict[str, str]"
                ]
            }
        },
        "TestConfigurable.configurable_base": {
            "name": "configurable_base",
            "location": 44,
            "return": [
                "bool",
                "str",
                "Optional[Any]",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "args": [],
                "cls": [
                    "bool",
                    "List[int]",
                    "str",
                    "Callable[[Any], T]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TestConfigurable.configurable_default": {
            "name": "configurable_default",
            "location": 48,
            "return": [
                "bool",
                "str",
                "Dict[str, Any]",
                "Mapping[str, int]"
            ],
            "arguments": {
                "args": [],
                "cls": [
                    "bool",
                    "str",
                    "Type",
                    "List[dict]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TestConfig1.initialize": {
            "name": "initialize",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "a": [
                    "int",
                    "Tuple[int, int]",
                    "float",
                    "str"
                ],
                "args": [],
                "kwargs": [],
                "pos_arg": [
                    "str",
                    "Collection[int]",
                    "float",
                    "int",
                    "Dict[int, Tuple[int, int]]"
                ],
                "self": []
            },
            "variables": {
                "a": [
                    "float",
                    "int",
                    "List[int]"
                ],
                "pos_arg": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ]
            }
        },
        "TestConfig2.initialize": {
            "name": "initialize",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "b": [
                    "int",
                    "bool",
                    "str",
                    "bytes",
                    "float"
                ],
                "kwargs": [],
                "pos_arg": [
                    "int",
                    "bool",
                    "str",
                    "bytes",
                    "float"
                ],
                "self": []
            },
            "variables": {
                "b": [
                    "str",
                    "int"
                ],
                "pos_arg": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ]
            }
        },
        "TestConfig3.configurable_base": {
            "name": "configurable_base",
            "location": 67,
            "return": [
                "bool",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "args": [],
                "cls": [
                    "bool",
                    "List[int]",
                    "str",
                    "Callable[[Any], T]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TestConfig3.configurable_default": {
            "name": "configurable_default",
            "location": 71,
            "return": [
                "bool",
                "Mapping[str, str]",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "args": [],
                "cls": [
                    "bool",
                    "str",
                    "Type",
                    "List[dict]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TestConfig3A.initialize": {
            "name": "initialize",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "a": [
                    "int",
                    "float"
                ],
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "a": [
                    "float",
                    "int",
                    "List[int]"
                ]
            }
        },
        "TestConfig3B.initialize": {
            "name": "initialize",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "b": [
                    "bytes",
                    "str",
                    "Optional[str]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "b": [
                    "str",
                    "int"
                ]
            }
        },
        "ConfigurableTest.setUp": {
            "name": "setUp",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "saved": [
                    "str",
                    "int",
                    "dict"
                ],
                "saved3": [
                    "str",
                    "list",
                    "int"
                ]
            }
        },
        "ConfigurableTest.tearDown": {
            "name": "tearDown",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "ConfigurableTest.checkSubclasses": {
            "name": "checkSubclasses",
            "location": 94,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "obj": [
                    "Dict[int, Dict[int, Any]]",
                    "tuple",
                    "int"
                ]
            }
        },
        "ConfigurableTest.test_default": {
            "name": "test_default",
            "location": 105,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "obj": [
                    "Tuple[str, str, str, str]",
                    "Pattern[str]",
                    "List[None]"
                ]
            }
        },
        "ConfigurableTest.test_config_class": {
            "name": "test_config_class",
            "location": 116,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "obj": [
                    "Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]",
                    "List[str]"
                ]
            }
        },
        "ConfigurableTest.test_config_args": {
            "name": "test_config_args",
            "location": 128,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "obj": [
                    "str",
                    "Iterator[int]",
                    "List[str]",
                    "list"
                ]
            }
        },
        "ConfigurableTest.test_config_class_args": {
            "name": "test_config_class_args",
            "location": 144,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "obj": []
            }
        },
        "ConfigurableTest.test_config_multi_level": {
            "name": "test_config_multi_level",
            "location": 160,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "obj": [
                    "List[str]",
                    "list"
                ]
            }
        },
        "ConfigurableTest.test_config_inner_level": {
            "name": "test_config_inner_level",
            "location": 172,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "obj": []
            }
        },
        "UnicodeLiteralTest.test_unicode_escapes": {
            "name": "test_unicode_escapes",
            "location": 195,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "ExecInTest.test_no_inherit_future": {
            "name": "test_no_inherit_future",
            "location": 204,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "f": [
                    "io.TextIOWrapper",
                    "io.StringIO"
                ]
            }
        },
        "ArgReplacerTest.function": {
            "name": "function",
            "location": 215,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "callback": [
                    "int",
                    "Callable[[], None]",
                    "bool",
                    "type"
                ],
                "kwargs": [],
                "self": [],
                "x": [
                    "int",
                    "Callable[[], None]",
                    "bool",
                    "type"
                ],
                "y": [
                    "int",
                    "Callable[[], None]",
                    "bool",
                    "type"
                ],
                "z": [
                    "int",
                    "Callable[[], None]",
                    "bool",
                    "type"
                ]
            },
            "variables": {}
        },
        "ArgReplacerTest.setUp": {
            "name": "setUp",
            "location": 214,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "replacer": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ]
            }
        },
        "ArgReplacerTest.test_omitted": {
            "name": "test_omitted",
            "location": 219,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "args": [
                    "List[str]"
                ],
                "kwargs": [
                    "Dict[str, Any]"
                ]
            }
        },
        "ArgReplacerTest.test_position": {
            "name": "test_position",
            "location": 226,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "args": [
                    "list",
                    "List[bytes]",
                    "List[str]"
                ],
                "kwargs": [
                    "list",
                    "dict",
                    "Exception",
                    "List[Tuple[int, int]]"
                ]
            }
        },
        "ArgReplacerTest.test_keyword": {
            "name": "test_keyword",
            "location": 233,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "args": [
                    "List[bytes]",
                    "List[str]"
                ],
                "kwargs": [
                    "Counter[Any]",
                    "dict",
                    "str",
                    "list"
                ]
            }
        },
        "TimedeltaToSecondsTest.test_timedelta_to_seconds": {
            "name": "test_timedelta_to_seconds",
            "location": 242,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "time_delta": [
                    "datetime.timedelta",
                    "datetime.datetime"
                ]
            }
        },
        "ImportObjectTest.test_import_member": {
            "name": "test_import_member",
            "location": 248,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "ImportObjectTest.test_import_member_unicode": {
            "name": "test_import_member_unicode",
            "location": 251,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "ImportObjectTest.test_import_module": {
            "name": "test_import_module",
            "location": 254,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "ImportObjectTest.test_import_module_unicode": {
            "name": "test_import_module_unicode",
            "location": 257,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "ReUnescapeTest.test_re_unescape": {
            "name": "test_re_unescape",
            "location": 265,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "test_strings": [
                    "List[Tuple[str, bool]]",
                    "Tuple[Tuple[str, str, str], Tuple[str, str, str]]",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "ReUnescapeTest.test_re_unescape_raises_error_on_invalid_input": {
            "name": "test_re_unescape_raises_error_on_invalid_input",
            "location": 275,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "IsFinalizingTest.test_basic": {
            "name": "test_basic",
            "location": 285,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "global": {}
    },
    "tornado-5.0.2/tornado/test/websocket_test.py": {
        "TestWebSocketHandler.initialize": {
            "name": "initialize",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "close_future": [
                    "bool",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "str"
                ],
                "compression_options": [
                    "str",
                    "Callable",
                    "int",
                    "Callable[[str], T]",
                    "bool"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "close_future": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ],
                "compression_options": [
                    "Dict[str, Dict[str, Any]]",
                    "Dict[str, dict]",
                    "functools.partial[None]",
                    "Dict[str, Any]",
                    "Dict[str, Dict[str, str]]"
                ]
            }
        },
        "TestWebSocketHandler.get_compression_options": {
            "name": "get_compression_options",
            "location": 45,
            "return": [
                "str",
                "bool",
                "int",
                "List[str]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TestWebSocketHandler.on_close": {
            "name": "on_close",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "EchoHandler.on_message": {
            "name": "on_message",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "message": [
                    "str",
                    "dict",
                    "Dict[str, str]",
                    "Optional[Exception]"
                ],
                "self": []
            },
            "variables": {}
        },
        "ErrorInOnMessageHandler.on_message": {
            "name": "on_message",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "message": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "self": []
            },
            "variables": {}
        },
        "HeaderHandler.open": {
            "name": "open",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "methods_to_test": [
                    "dict",
                    "str"
                ]
            }
        },
        "HeaderEchoHandler.set_default_headers": {
            "name": "set_default_headers",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "HeaderEchoHandler.prepare": {
            "name": "prepare",
            "location": 92,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "NonWebSocketHandler.get": {
            "name": "get",
            "location": 99,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "CloseReasonHandler.open": {
            "name": "open",
            "location": 104,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "on_close_called": [
                    "int",
                    "str",
                    "Dict[str, str]",
                    "List[str]"
                ]
            }
        },
        "AsyncPrepareHandler.prepare": {
            "name": "prepare",
            "location": 111,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "AsyncPrepareHandler.on_message": {
            "name": "on_message",
            "location": 114,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "message": [
                    "int",
                    "Callable",
                    "str"
                ],
                "self": []
            },
            "variables": {}
        },
        "PathArgsHandler.open": {
            "name": "open",
            "location": 119,
            "return": [
                ""
            ],
            "arguments": {
                "arg": [
                    "str",
                    "bool",
                    "int"
                ],
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "CoroutineOnMessageHandler.initialize": {
            "name": "initialize",
            "location": 124,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "close_future": [
                    "int",
                    "asyncio.Future",
                    "str"
                ],
                "compression_options": [
                    "int",
                    "asyncio.Future",
                    "str"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "sleeping": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ]
            }
        },
        "CoroutineOnMessageHandler.on_message": {
            "name": "on_message",
            "location": 130,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "message": [
                    "int",
                    "Callable",
                    "str"
                ],
                "self": []
            },
            "variables": {}
        },
        "RenderMessageHandler.on_message": {
            "name": "on_message",
            "location": 140,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "message": [
                    "str",
                    "int",
                    "bool"
                ],
                "self": []
            },
            "variables": {}
        },
        "WebSocketBaseTestCase.ws_connect": {
            "name": "ws_connect",
            "location": 146,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "path": [
                    "str",
                    "bool"
                ],
                "self": []
            },
            "variables": {
                "ws": [
                    "str",
                    "dict"
                ]
            }
        },
        "WebSocketBaseTestCase.close": {
            "name": "close",
            "location": 153,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "ws": [
                    "bool",
                    "Iterable[str]"
                ]
            },
            "variables": {}
        },
        "WebSocketTest.get_app": {
            "name": "get_app",
            "location": 164,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "close_future": [
                    "str",
                    "bool"
                ]
            }
        },
        "WebSocketTest.get_http_client": {
            "name": "get_http_client",
            "location": 188,
            "return": [
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "WebSocketTest.tearDown": {
            "name": "tearDown",
            "location": 192,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "WebSocketTest.test_http_request": {
            "name": "test_http_request",
            "location": 196,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "str",
                    "List[str]",
                    "Tuple[str]",
                    "Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]"
                ]
            }
        },
        "WebSocketTest.test_missing_websocket_key": {
            "name": "test_missing_websocket_key",
            "location": 201,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "str",
                    "Dict[str, str]",
                    "Dict[str, List[str]]",
                    "dict",
                    "Dict[str, bool]"
                ]
            }
        },
        "WebSocketTest.test_bad_websocket_version": {
            "name": "test_bad_websocket_version",
            "location": 208,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "str",
                    "Dict[str, str]",
                    "Dict[str, List[str]]",
                    "dict",
                    "Dict[str, bool]"
                ]
            }
        },
        "WebSocketTest.test_websocket_gen": {
            "name": "test_websocket_gen",
            "location": 216,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "list",
                    "str"
                ],
                "ws": [
                    "int"
                ]
            }
        },
        "WebSocketTest.test_websocket_callbacks": {
            "name": "test_websocket_callbacks",
            "location": 223,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "dict",
                    "List[int]",
                    "OrderedDict[str, int]"
                ],
                "ws": [
                    "str",
                    "List[str]",
                    "Dict[str, str]"
                ]
            }
        },
        "WebSocketTest.test_binary_message": {
            "name": "test_binary_message",
            "location": 237,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "list",
                    "str"
                ],
                "ws": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "WebSocketTest.test_unicode_message": {
            "name": "test_unicode_message",
            "location": 245,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "list",
                    "str"
                ],
                "ws": [
                    "int"
                ]
            }
        },
        "WebSocketTest.test_render_message": {
            "name": "test_render_message",
            "location": 253,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "list",
                    "str"
                ],
                "ws": [
                    "int"
                ]
            }
        },
        "WebSocketTest.test_error_in_on_message": {
            "name": "test_error_in_on_message",
            "location": 261,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "str",
                    "Dict[str, str]",
                    "dict"
                ],
                "ws": [
                    "int"
                ]
            }
        },
        "WebSocketTest.test_websocket_http_fail": {
            "name": "test_websocket_http_fail",
            "location": 270,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "WebSocketTest.test_websocket_http_success": {
            "name": "test_websocket_http_success",
            "location": 276,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "WebSocketTest.test_websocket_network_fail": {
            "name": "test_websocket_network_fail",
            "location": 281,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "port": [
                    "int",
                    "str",
                    "float"
                ],
                "sock": [
                    "str",
                    "int",
                    "Tuple[str, int]"
                ]
            }
        },
        "WebSocketTest.test_websocket_close_buffered_data": {
            "name": "test_websocket_close_buffered_data",
            "location": 291,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "ws": [
                    "dict"
                ]
            }
        },
        "WebSocketTest.test_websocket_headers": {
            "name": "test_websocket_headers",
            "location": 301,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "list",
                    "str"
                ],
                "ws": []
            }
        },
        "WebSocketTest.test_websocket_header_echo": {
            "name": "test_websocket_header_echo",
            "location": 311,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "ws": []
            }
        },
        "WebSocketTest.test_server_close_reason": {
            "name": "test_server_close_reason",
            "location": 323,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "code": [
                    "Dict[int, str]",
                    "int",
                    "Dict[str, Any]"
                ],
                "msg": [
                    "str"
                ],
                "reason": [
                    "str",
                    "int",
                    "Dict[str, int]"
                ],
                "ws": [
                    "str",
                    "Counter[str]",
                    "List[str]",
                    "int"
                ]
            }
        },
        "WebSocketTest.test_client_close_reason": {
            "name": "test_client_close_reason",
            "location": 338,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "code": [
                    "Dict[int, str]",
                    "int",
                    "Dict[str, Any]"
                ],
                "reason": [
                    "str",
                    "Dict[str, str]",
                    "float"
                ],
                "ws": [
                    "int",
                    "float",
                    "list",
                    "List[Callable[[], bool]]"
                ]
            }
        },
        "WebSocketTest.test_write_after_close": {
            "name": "test_write_after_close",
            "location": 346,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "msg": [
                    "str"
                ],
                "ws": [
                    "int",
                    "float"
                ]
            }
        },
        "WebSocketTest.test_async_prepare": {
            "name": "test_async_prepare",
            "location": 354,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "res": [
                    "Optional[List[str]]"
                ],
                "ws": [
                    "int",
                    "Dict[str, str]",
                    "List[int]",
                    "float",
                    "list"
                ]
            }
        },
        "WebSocketTest.test_path_args": {
            "name": "test_path_args",
            "location": 363,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "res": [
                    "Optional[List[str]]"
                ],
                "ws": [
                    "bool",
                    "int",
                    "TextIO"
                ]
            }
        },
        "WebSocketTest.test_coroutine": {
            "name": "test_coroutine",
            "location": 369,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "res": [],
                "ws": [
                    "int",
                    "float",
                    "list"
                ]
            }
        },
        "WebSocketTest.test_check_origin_valid_no_path": {
            "name": "test_check_origin_valid_no_path",
            "location": 380,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "headers": [
                    "Dict[str, str]",
                    "str",
                    "List[str]",
                    "list"
                ],
                "port": [
                    "str"
                ],
                "response": [
                    "list",
                    "str"
                ],
                "url": [
                    "str",
                    "Dict[str, str]"
                ],
                "ws": []
            }
        },
        "WebSocketTest.test_check_origin_valid_with_path": {
            "name": "test_check_origin_valid_with_path",
            "location": 393,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "headers": [
                    "Dict[str, str]",
                    "str",
                    "List[str]",
                    "list"
                ],
                "port": [
                    "str"
                ],
                "response": [
                    "list",
                    "str"
                ],
                "url": [
                    "str",
                    "Dict[str, str]"
                ],
                "ws": []
            }
        },
        "WebSocketTest.test_check_origin_invalid_partial_url": {
            "name": "test_check_origin_invalid_partial_url",
            "location": 406,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "headers": [
                    "Dict[str, str]",
                    "str"
                ],
                "port": [
                    "str"
                ],
                "url": [
                    "str"
                ]
            }
        },
        "WebSocketTest.test_check_origin_invalid": {
            "name": "test_check_origin_invalid",
            "location": 417,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "headers": [
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "list",
                    "str"
                ],
                "port": [
                    "str"
                ],
                "url": [
                    "str"
                ]
            }
        },
        "WebSocketTest.test_check_origin_invalid_subdomains": {
            "name": "test_check_origin_invalid_subdomains",
            "location": 431,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "headers": [
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "list",
                    "str"
                ],
                "port": [
                    "str"
                ],
                "url": [
                    "str"
                ]
            }
        },
        "WebSocketNativeCoroutineTest.get_app": {
            "name": "get_app",
            "location": 462,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "close_future": [
                    "str"
                ]
            }
        },
        "WebSocketNativeCoroutineTest.test_native_coroutine": {
            "name": "test_native_coroutine",
            "location": 470,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "res": [],
                "ws": [
                    "int",
                    "float",
                    "list"
                ]
            }
        },
        "CompressionTestMixin.get_app": {
            "name": "get_app",
            "location": 484,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "close_future": [
                    "str"
                ]
            }
        },
        "CompressionTestMixin.get_server_compression_options": {
            "name": "get_server_compression_options",
            "location": 492,
            "return": [
                "Optional[int]",
                "Optional[str]",
                "bool",
                "str",
                "Optional[Literal[\"only_clustered\", \"include_clustered\"]]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "CompressionTestMixin.get_client_compression_options": {
            "name": "get_client_compression_options",
            "location": 495,
            "return": [
                "Optional[int]",
                "bool",
                "Optional[str]",
                "Optional[bool]",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "CompressionTestMixin.test_message_sizes": {
            "name": "test_message_sizes",
            "location": 499,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "bytes",
                    "functools.partial[Any]",
                    "Pattern[str]",
                    "List[str]"
                ],
                "ws": [
                    "str",
                    "Dict[str, List[str]]"
                ]
            }
        },
        "UncompressedTestMixin.verify_wire_bytes": {
            "name": "verify_wire_bytes",
            "location": 518,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "bytes_in": [
                    "int",
                    "List[int]",
                    "List[float]",
                    "List[str]",
                    "list",
                    "Sequence",
                    "Union[List[int], float, str]"
                ],
                "bytes_out": [
                    "int",
                    "List[int]",
                    "List[float]",
                    "List[str]",
                    "list",
                    "Sequence",
                    "Union[List[int], float, str]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "ServerOnlyCompressionTest.get_server_compression_options": {
            "name": "get_server_compression_options",
            "location": 530,
            "return": [
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "ClientOnlyCompressionTest.get_client_compression_options": {
            "name": "get_client_compression_options",
            "location": 535,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "DefaultCompressionTest.get_server_compression_options": {
            "name": "get_server_compression_options",
            "location": 540,
            "return": [
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "DefaultCompressionTest.get_client_compression_options": {
            "name": "get_client_compression_options",
            "location": 543,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "DefaultCompressionTest.verify_wire_bytes": {
            "name": "verify_wire_bytes",
            "location": 546,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "bytes_in": [
                    "int",
                    "bool",
                    "Optional[slp.util.types.Device]",
                    "List[bytes]"
                ],
                "bytes_out": [
                    "int",
                    "bool",
                    "Optional[slp.util.types.Device]",
                    "List[bytes]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "MaskFunctionMixin.test_mask": {
            "name": "test_mask",
            "location": 555,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "PythonMaskFunctionTest.mask": {
            "name": "mask",
            "location": 572,
            "return": [
                "bool"
            ],
            "arguments": {
                "args": [],
                "data": [
                    "Dict[str, Any]",
                    "str",
                    "int",
                    "bytes",
                    "List[int]"
                ],
                "kwargs": [],
                "mask": [
                    "Dict[str, Any]",
                    "str",
                    "int",
                    "bytes",
                    "List[int]"
                ],
                "self": []
            },
            "variables": {}
        },
        "CythonMaskFunctionTest.mask": {
            "name": "mask",
            "location": 578,
            "return": [
                "bool"
            ],
            "arguments": {
                "args": [],
                "data": [
                    "Dict[str, Any]",
                    "str",
                    "int",
                    "bytes",
                    "List[int]"
                ],
                "kwargs": [],
                "mask": [
                    "Dict[str, Any]",
                    "str",
                    "int",
                    "bytes",
                    "List[int]"
                ],
                "self": []
            },
            "variables": {}
        },
        "PingHandler.on_pong": {
            "name": "on_pong",
            "location": 585,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "data": [
                    "int",
                    "bytes",
                    "bool",
                    "dict"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "ServerPeriodicPingTest.get_app": {
            "name": "get_app",
            "location": 583,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "close_future": [
                    "str"
                ]
            }
        },
        "ServerPeriodicPingTest.test_server_ping": {
            "name": "test_server_ping",
            "location": 594,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "list",
                    "str"
                ],
                "ws": [
                    "str"
                ]
            }
        },
        "PingHandler.on_ping": {
            "name": "on_ping",
            "location": 606,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "data": [
                    "int",
                    "bytes",
                    "bool",
                    "dict"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "ClientPeriodicPingTest.get_app": {
            "name": "get_app",
            "location": 604,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "close_future": [
                    "str"
                ]
            }
        },
        "ClientPeriodicPingTest.test_client_ping": {
            "name": "test_client_ping",
            "location": 615,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "list",
                    "str"
                ],
                "ws": [
                    "bool",
                    "str",
                    "Dict[str, str]",
                    "Dict[str, Union[Any, Any]]"
                ]
            }
        },
        "MaxMessageSizeTest.get_app": {
            "name": "get_app",
            "location": 625,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "close_future": [
                    "str"
                ]
            }
        },
        "MaxMessageSizeTest.test_large_message": {
            "name": "test_large_message",
            "location": 632,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "msg": [
                    "Dict[str, Any]",
                    "deque",
                    "List[str]"
                ],
                "resp": [],
                "ws": [
                    "int",
                    "str",
                    "Dict[str, Union[float, str]]"
                ]
            }
        },
        "global": {
            "NativeCoroutineOnMessageHandler": [
                "Dict[str, list]",
                "str",
                "Dict[str, Any]",
                "Dict[str, str]"
            ],
            "speedups": [
                "str",
                "Dict[str, List[str]]",
                "Dict[str, str]",
                "dict"
            ]
        }
    },
    "tornado-5.0.2/tornado/test/web_test.py": {
        "relpath": {
            "name": "relpath",
            "location": 44,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "a": [
                    "str",
                    "bool"
                ],
                "args": [],
                "kwargs": []
            },
            "variables": {}
        },
        "wsgi_safe": {
            "name": "wsgi_safe",
            "location": 48,
            "return": [
                "str",
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "args": [],
                "cls": [
                    "int",
                    "str",
                    "Callable",
                    "list",
                    "Dict[str, Any]"
                ],
                "kwargs": []
            },
            "variables": {}
        },
        "WebTestCase.get_app": {
            "name": "get_app",
            "location": 59,
            "return": [],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "app": []
            }
        },
        "WebTestCase.get_handlers": {
            "name": "get_handlers",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "WebTestCase.get_app_kwargs": {
            "name": "get_app_kwargs",
            "location": 66,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "SimpleHandlerTestCase.get_handlers": {
            "name": "get_handlers",
            "location": 75,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "HelloHandler.get": {
            "name": "get",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "CookieTestRequestHandler.__init__": {
            "name": "__init__",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "cookie_secret": [
                    "Dict[str, Any]",
                    "str"
                ],
                "key_version": [
                    "Optional[str]",
                    "Optional[dict]",
                    "Optional[Dict[str, str]]",
                    "Dict[str, Any]",
                    "bool",
                    "str",
                    "dict"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_cookies": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ],
                "application": [
                    "Dict[str, str]",
                    "str",
                    "Dict[str, Union[Any, Any]]",
                    "list",
                    "List[str]"
                ]
            }
        },
        "CookieTestRequestHandler.get_cookie": {
            "name": "get_cookie",
            "location": 95,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "name": [
                    "str"
                ],
                "self": []
            },
            "variables": {}
        },
        "CookieTestRequestHandler.set_cookie": {
            "name": "set_cookie",
            "location": 98,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "expires_days": [
                    "bool",
                    "str",
                    "Optional[datetime.datetime]"
                ],
                "kwargs": [],
                "name": [
                    "str",
                    "bool"
                ],
                "self": [],
                "value": [
                    "str",
                    "bool"
                ]
            },
            "variables": {}
        },
        "SecureCookieV1Test.test_round_trip": {
            "name": "test_round_trip",
            "location": 104,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "handler": [
                    "Optional[bool]"
                ]
            }
        },
        "SecureCookieV1Test.test_cookie_tampering_future_timestamp": {
            "name": "test_cookie_tampering_future_timestamp",
            "location": 110,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "cookie": [
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "Dict[Any, str]"
                ],
                "handler": [
                    "str",
                    "Dict[str, Any]",
                    "Mapping"
                ],
                "match": [
                    "Pattern[str]"
                ],
                "sig": [
                    "List[str]",
                    "float",
                    "int",
                    "list",
                    "str"
                ],
                "timestamp": [
                    "List[str]",
                    "float",
                    "int",
                    "list",
                    "str"
                ]
            }
        },
        "SecureCookieV1Test.test_arbitrary_bytes": {
            "name": "test_arbitrary_bytes",
            "location": 139,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "handler": [
                    "Optional[bool]"
                ]
            }
        },
        "SecureCookieV2Test.test_round_trip": {
            "name": "test_round_trip",
            "location": 154,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "handler": [
                    "Optional[bool]"
                ]
            }
        },
        "SecureCookieV2Test.test_key_version_roundtrip": {
            "name": "test_key_version_roundtrip",
            "location": 159,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "handler": []
            }
        },
        "SecureCookieV2Test.test_key_version_roundtrip_differing_version": {
            "name": "test_key_version_roundtrip_differing_version",
            "location": 165,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "handler": []
            }
        },
        "SecureCookieV2Test.test_key_version_increment_version": {
            "name": "test_key_version_increment_version",
            "location": 171,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_cookies": [
                    "dict",
                    "List[Dict[str, Any]]"
                ],
                "handler": [
                    "contextlib.AsyncExitStack"
                ],
                "new_handler": [
                    "str"
                ]
            }
        },
        "SecureCookieV2Test.test_key_version_invalidate_version": {
            "name": "test_key_version_invalidate_version",
            "location": 180,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_cookies": [
                    "dict",
                    "List[Dict[str, Any]]"
                ],
                "handler": [
                    "contextlib.AsyncExitStack"
                ],
                "new_handler": [],
                "new_key_versions": [
                    "Type[bytes]",
                    "Pattern[str]",
                    "int",
                    "dict",
                    "List[str]",
                    "Set[bytes]"
                ]
            }
        },
        "SetCookieHandler.get": {
            "name": "get",
            "location": 195,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "GetCookieHandler.get": {
            "name": "get",
            "location": 203,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "SetCookieDomainHandler.get": {
            "name": "get",
            "location": 207,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "SetCookieSpecialCharHandler.get": {
            "name": "get",
            "location": 214,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "SetCookieOverwriteHandler.get": {
            "name": "get",
            "location": 220,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "SetCookieMaxAgeHandler.get": {
            "name": "get",
            "location": 228,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "SetCookieExpiresDaysHandler.get": {
            "name": "get",
            "location": 232,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "SetCookieFalsyFlags.get": {
            "name": "get",
            "location": 236,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "CookieTest.get_handlers": {
            "name": "get_handlers",
            "location": 193,
            "return": [
                "str",
                "Set[str]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "CookieTest.test_set_cookie": {
            "name": "test_set_cookie",
            "location": 252,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "Dict[str, Union[Any, Any, str]]",
                    "dict",
                    "List[str]",
                    "list",
                    "bytes"
                ]
            }
        },
        "CookieTest.test_get_cookie": {
            "name": "test_get_cookie",
            "location": 260,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "Dict[str, str]",
                    "Dict[str, dict]",
                    "bytes",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "CookieTest.test_set_cookie_domain": {
            "name": "test_set_cookie_domain",
            "location": 270,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "Dict[str, int]",
                    "str",
                    "Optional[bytes]",
                    "list",
                    "Dict[str, Any]"
                ]
            }
        },
        "CookieTest.test_cookie_special_char": {
            "name": "test_cookie_special_char",
            "location": 275,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "data": [
                    "str",
                    "bool",
                    "list",
                    "dict"
                ],
                "headers": [
                    "Dict[str, Any]"
                ],
                "response": []
            }
        },
        "CookieTest.test_set_cookie_overwrite": {
            "name": "test_set_cookie_overwrite",
            "location": 298,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "headers": [
                    "Dict[str, str]",
                    "Dict[str, Union[Any, Any, Any, Any, Any, Any, Any]]"
                ],
                "response": [
                    "str",
                    "Dict[str, str]",
                    "bytes",
                    "list",
                    "Tuple[Literal, Literal]"
                ]
            }
        },
        "CookieTest.test_set_cookie_max_age": {
            "name": "test_set_cookie_max_age",
            "location": 304,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "headers": [
                    "Dict[str, str]",
                    "Dict[str, Union[Any, Any, Any, Any, Any, Any, Any]]"
                ],
                "response": [
                    "str",
                    "Dict[str, str]",
                    "bytes",
                    "list",
                    "Tuple[Literal, Literal]"
                ]
            }
        },
        "CookieTest.test_set_cookie_expires_days": {
            "name": "test_set_cookie_expires_days",
            "location": 310,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "expires": [
                    "datetime.datetime.timedelta",
                    "datetime.datetime"
                ],
                "header": [
                    "Dict[str, Union[Any, str]]",
                    "Dict[str, str]",
                    "str"
                ],
                "header_expires": [
                    "datetime.datetime",
                    "datetime.datetime.timedelta",
                    "datetime.date.time",
                    "datetime.datetime.datetime"
                ],
                "match": [
                    "Dict[str, Any]",
                    "Dict[str, Union[None, int, str]]",
                    "Pattern[str]",
                    "Dict[int, None]"
                ],
                "response": [
                    "Dict[str, str]",
                    "dict",
                    "str",
                    "Dict[str, List[str]]",
                    "Type[Dict[str, Any]]"
                ]
            }
        },
        "CookieTest.test_set_cookie_false_flags": {
            "name": "test_set_cookie_false_flags",
            "location": 321,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "headers": [
                    "Dict[str, str]",
                    "Generator[Any, None, None]"
                ],
                "response": [
                    "dict",
                    "urllib.requesProxyHandler",
                    "str",
                    "int"
                ]
            }
        },
        "AuthRedirectRequestHandler.initialize": {
            "name": "initialize",
            "location": 333,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "login_url": [
                    "str",
                    "Iterable[str]"
                ],
                "self": []
            },
            "variables": {
                "login_url": [
                    "str",
                    "dict",
                    "int"
                ]
            }
        },
        "AuthRedirectRequestHandler.get_login_url": {
            "name": "get_login_url",
            "location": 336,
            "return": [
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "AuthRedirectRequestHandler.get": {
            "name": "get",
            "location": 340,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "AuthRedirectTest.get_handlers": {
            "name": "get_handlers",
            "location": 346,
            "return": [
                "bool",
                "str",
                "logging.Logger",
                "Optional[bool]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "AuthRedirectTest.test_relative_auth_redirect": {
            "name": "test_relative_auth_redirect",
            "location": 352,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "list",
                    "bytes"
                ]
            }
        },
        "AuthRedirectTest.test_absolute_auth_redirect": {
            "name": "test_absolute_auth_redirect",
            "location": 359,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "Dict[str, str]"
                ]
            }
        },
        "ConnectionCloseHandler.initialize": {
            "name": "initialize",
            "location": 370,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "test": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, Any]",
                    "bool",
                    "Tuple[str, str]",
                    "int"
                ]
            },
            "variables": {
                "test": [
                    "int",
                    "List[List[str]]",
                    "io.TextIOWrapper",
                    "List[List[Any]]",
                    "bytes",
                    "Dict[str, Any]",
                    "str",
                    "List[str]"
                ]
            }
        },
        "ConnectionCloseHandler.get": {
            "name": "get",
            "location": 374,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "ConnectionCloseHandler.on_connection_close": {
            "name": "on_connection_close",
            "location": 377,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "ConnectionCloseTest.get_handlers": {
            "name": "get_handlers",
            "location": 382,
            "return": [
                "Callable",
                "int",
                "str",
                "Optional[Mapping[str, Any]]",
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "ConnectionCloseTest.test_connection_close": {
            "name": "test_connection_close",
            "location": 385,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "s": [],
                "stream": [
                    "bytes",
                    "str",
                    "io.TextIOWrapper",
                    "int"
                ]
            }
        },
        "ConnectionCloseTest.on_handler_waiting": {
            "name": "on_handler_waiting",
            "location": 392,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "ConnectionCloseTest.on_connection_close": {
            "name": "on_connection_close",
            "location": 396,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "EchoHandler.get": {
            "name": "get",
            "location": 1431,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "path": [
                    "str"
                ],
                "self": []
            },
            "variables": {}
        },
        "RequestEncodingTest.get_handlers": {
            "name": "get_handlers",
            "location": 427,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "RequestEncodingTest.fetch_json": {
            "name": "fetch_json",
            "location": 432,
            "return": [
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "path": [
                    "str",
                    "bool"
                ],
                "self": []
            },
            "variables": {}
        },
        "RequestEncodingTest.test_group_question_mark": {
            "name": "test_group_question_mark",
            "location": 435,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "RequestEncodingTest.test_group_encoding": {
            "name": "test_group_encoding",
            "location": 442,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "RequestEncodingTest.test_slashes": {
            "name": "test_slashes",
            "location": 449,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "RequestEncodingTest.test_error": {
            "name": "test_error",
            "location": 461,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "TypeCheckHandler.prepare": {
            "name": "prepare",
            "location": 469,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "errors": [
                    "str",
                    "int",
                    "bytes",
                    "Set[str]",
                    "float"
                ]
            }
        },
        "TypeCheckHandler.get": {
            "name": "get",
            "location": 495,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "path_component": [
                    "str",
                    "Mapping",
                    "Optional[Exception]",
                    "Optional[Callable]"
                ],
                "self": []
            },
            "variables": {}
        },
        "TypeCheckHandler.post": {
            "name": "post",
            "location": 501,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "path_component": [
                    "List[str]",
                    "str",
                    "int",
                    "bytes",
                    "Callable[[str], bool]",
                    "Iterable[str]"
                ],
                "self": []
            },
            "variables": {}
        },
        "TypeCheckHandler.check_type": {
            "name": "check_type",
            "location": 505,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "expected_type": [
                    "Type"
                ],
                "kwargs": [],
                "name": [
                    "Optional[str]",
                    "str",
                    "Tuple[type]",
                    "type",
                    "Type",
                    "Mapping"
                ],
                "obj": [
                    "Tuple[Type]",
                    "Type",
                    "list",
                    "str"
                ],
                "self": []
            },
            "variables": {
                "actual_type": [
                    "List[str]",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "Dict[Type[Any], str]",
                    "str",
                    "Dict[str, List[Any]]",
                    "Dict[str, Union[Any, Any, Any, Any, Any, Any, Any, Any]]"
                ]
            }
        },
        "DecodeArgHandler.decode_argument": {
            "name": "decode_argument",
            "location": 513,
            "return": [
                "str",
                "float",
                "Optional[int]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "name": [
                    "str",
                    "Iterable[str]",
                    "bool"
                ],
                "self": [],
                "value": [
                    "str",
                    "bytes",
                    "dict"
                ]
            },
            "variables": {}
        },
        "DecodeArgHandler.describe": {
            "name": "describe",
            "location": 523,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "s": [
                    "str",
                    "bytes",
                    "AnyStr"
                ],
                "self": []
            },
            "variables": {}
        },
        "DecodeArgHandler.get": {
            "name": "get",
            "location": 522,
            "return": [
                ""
            ],
            "arguments": {
                "arg": [
                    "str",
                    "Tuple[int, int]",
                    "Tuple[int]",
                    "Callable"
                ],
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "LinkifyHandler.get": {
            "name": "get",
            "location": 535,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "UIModuleResourceHandler.get": {
            "name": "get",
            "location": 540,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "OptionalPathHandler.get": {
            "name": "get",
            "location": 545,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "path": [
                    "str"
                ],
                "self": []
            },
            "variables": {}
        },
        "FlowControlHandler.get": {
            "name": "get",
            "location": 553,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "FlowControlHandler.step2": {
            "name": "step2",
            "location": 557,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "FlowControlHandler.step3": {
            "name": "step3",
            "location": 561,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "MultiHeaderHandler.get": {
            "name": "get",
            "location": 567,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "RedirectHandler.get": {
            "name": "get",
            "location": 575,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "EmptyFlushCallbackHandler.get": {
            "name": "get",
            "location": 587,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "HeaderInjectionHandler.get": {
            "name": "get",
            "location": 600,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "GetArgumentHandler.prepare": {
            "name": "prepare",
            "location": 612,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "method": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "GetArgumentsHandler.prepare": {
            "name": "prepare",
            "location": 623,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "WSGISafeWebTest.get_app_kwargs": {
            "name": "get_app_kwargs",
            "location": 634,
            "return": [
                "str",
                "Union[str, bytes]",
                "dict"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "loader": [
                    "dict",
                    "str",
                    "Dict[str, dict]",
                    "bytes"
                ]
            }
        },
        "WSGISafeWebTest.tearDown": {
            "name": "tearDown",
            "location": 656,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "WSGISafeWebTest.get_handlers": {
            "name": "get_handlers",
            "location": 660,
            "return": [
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "urls": [
                    "str",
                    "Union[str, List[str]]",
                    "List[str]"
                ]
            }
        },
        "WSGISafeWebTest.fetch_json": {
            "name": "fetch_json",
            "location": 681,
            "return": [
                "str",
                "Optional[str]",
                "Dict[str, Any]",
                "Dict[str, dict]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "str"
                ]
            }
        },
        "WSGISafeWebTest.test_types": {
            "name": "test_types",
            "location": 686,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "cookie_value": [
                    "dict",
                    "int",
                    "Tuple[str, str]",
                    "str",
                    "tuple"
                ],
                "data": [
                    "str",
                    "list"
                ],
                "response": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "WSGISafeWebTest.test_decode_argument": {
            "name": "test_decode_argument",
            "location": 698,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "data": [
                    "int",
                    "str",
                    "Dict[str, Any]"
                ],
                "response": [
                    "list",
                    "bytes"
                ],
                "urls": [
                    "str",
                    "ClassVar[str]"
                ]
            }
        },
        "WSGISafeWebTest.test_decode_argument_invalid_unicode": {
            "name": "test_decode_argument_invalid_unicode",
            "location": 719,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "list",
                    "Type[Dict[str, Any]]",
                    "bytes"
                ]
            }
        },
        "WSGISafeWebTest.test_decode_argument_plus": {
            "name": "test_decode_argument_plus",
            "location": 727,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "data": [
                    "str",
                    "list"
                ],
                "response": [
                    "Dict[str, Union[Any, Any, str]]",
                    "dict",
                    "Dict[str, str]",
                    "Dict[str, int]",
                    "bytes",
                    "Dict[str, Any]",
                    "Pattern[str]"
                ],
                "urls": [
                    "str",
                    "ClassVar[str]"
                ]
            }
        },
        "WSGISafeWebTest.test_reverse_url": {
            "name": "test_reverse_url",
            "location": 739,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "WSGISafeWebTest.test_uimodule_unescaped": {
            "name": "test_uimodule_unescaped",
            "location": 751,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "str",
                    "List[str]",
                    "Tuple[str]",
                    "Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]"
                ]
            }
        },
        "WSGISafeWebTest.test_uimodule_resources": {
            "name": "test_uimodule_resources",
            "location": 756,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "str",
                    "List[str]",
                    "Tuple[str]",
                    "Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]"
                ]
            }
        },
        "WSGISafeWebTest.test_optional_path": {
            "name": "test_optional_path",
            "location": 781,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "WSGISafeWebTest.test_multi_header": {
            "name": "test_multi_header",
            "location": 787,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "Dict[str, Any]",
                    "bytes",
                    "list",
                    "Dict[str, Union[Any, Any, str]]",
                    "Dict[str, float]",
                    "str"
                ]
            }
        },
        "WSGISafeWebTest.test_redirect": {
            "name": "test_redirect",
            "location": 792,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "Dict[str, Union[Any, str]]",
                    "dict"
                ]
            }
        },
        "WSGISafeWebTest.test_web_redirect": {
            "name": "test_web_redirect",
            "location": 800,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "bytes",
                    "Dict[str, Union[Any, Any, str]]",
                    "dict"
                ]
            }
        },
        "WSGISafeWebTest.test_web_redirect_double_slash": {
            "name": "test_web_redirect_double_slash",
            "location": 808,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "Dict[Tuple[int, int], str]",
                    "set",
                    "Dict[str, List[str]]",
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "Dict[str, Union[Any, Any, str]]"
                ]
            }
        },
        "WSGISafeWebTest.test_header_injection": {
            "name": "test_header_injection",
            "location": 813,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "str",
                    "List[str]",
                    "Tuple[str]",
                    "Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]"
                ]
            }
        },
        "WSGISafeWebTest.test_get_argument": {
            "name": "test_get_argument",
            "location": 817,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "body": [
                    "list",
                    "str",
                    "int",
                    "Dict[str, Union[Any, Any, Any, Any]]",
                    "Dict[str, None]"
                ],
                "response": [
                    "Dict[bytes, List[bytes]]"
                ]
            }
        },
        "WSGISafeWebTest.test_get_query_arguments": {
            "name": "test_get_query_arguments",
            "location": 838,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "body": [
                    "dict",
                    "str",
                    "Dict[str, Any]"
                ],
                "response": [
                    "Dict[str, str]"
                ]
            }
        },
        "WSGISafeWebTest.test_get_body_arguments": {
            "name": "test_get_body_arguments",
            "location": 852,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "body": [
                    "dict",
                    "str",
                    "bool",
                    "int",
                    "Dict[str, Any]"
                ],
                "response": [
                    "Dict[str, str]"
                ]
            }
        },
        "WSGISafeWebTest.test_no_gzip": {
            "name": "test_no_gzip",
            "location": 868,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "Dict[str, str]",
                    "Dict[str, dict]",
                    "Dict[Any, Dict[str, str]]",
                    "dict"
                ]
            }
        },
        "NonWSGIWebTests.get_handlers": {
            "name": "get_handlers",
            "location": 875,
            "return": [
                "bool",
                "int",
                "Optional[int]",
                "Optional[str]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "NonWSGIWebTests.test_flow_control": {
            "name": "test_flow_control",
            "location": 880,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "NonWSGIWebTests.test_empty_flush": {
            "name": "test_empty_flush",
            "location": 883,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "str",
                    "List[str]",
                    "Tuple[str]",
                    "Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]"
                ]
            }
        },
        "DefaultHandler.get": {
            "name": "get",
            "location": 892,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "WriteErrorHandler.get": {
            "name": "get",
            "location": 898,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "WriteErrorHandler.write_error": {
            "name": "write_error",
            "location": 904,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "status_code": [
                    "int",
                    "str"
                ]
            },
            "variables": {}
        },
        "FailedWriteErrorHandler.get": {
            "name": "get",
            "location": 912,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "FailedWriteErrorHandler.write_error": {
            "name": "write_error",
            "location": 915,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "status_code": [
                    "int",
                    "bool",
                    "list",
                    "Optional[int]",
                    "Optional[str]"
                ]
            },
            "variables": {}
        },
        "ErrorResponseTest.get_handlers": {
            "name": "get_handlers",
            "location": 890,
            "return": [
                "str",
                "datetime.datetime",
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "ErrorResponseTest.test_default": {
            "name": "test_default",
            "location": 923,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "list",
                    "Iterator[Any]",
                    "str"
                ]
            }
        },
        "ErrorResponseTest.test_write_error": {
            "name": "test_write_error",
            "location": 937,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "Dict[str, List[str]]",
                    "list",
                    "Iterator[Any]",
                    "Dict[str, Union[Any, Any]]",
                    "dict"
                ]
            }
        },
        "ErrorResponseTest.test_failed_write_error": {
            "name": "test_failed_write_error",
            "location": 947,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "list",
                    "Dict[str, Union[Any, Any]]"
                ]
            }
        },
        "StaticUrlHandler.get": {
            "name": "get",
            "location": 1335,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "path": [
                    "str"
                ],
                "self": []
            },
            "variables": {}
        },
        "OverrideStaticUrlHandler.get": {
            "name": "get",
            "location": 971,
            "return": [
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "path": [
                    "str"
                ],
                "self": []
            },
            "variables": {
                "check_override": [
                    "List[str]",
                    "list",
                    "str",
                    "Optional[str]"
                ],
                "check_regular": [
                    "List[str]",
                    "list",
                    "str",
                    "Optional[str]"
                ],
                "do_include": [
                    "str",
                    "List[List[Any]]"
                ],
                "include_host": [
                    "Dict[str, str]",
                    "str",
                    "dict",
                    "bool",
                    "List[Tuple[str, str, str]]",
                    "Set[str]"
                ],
                "override_url": [
                    "str",
                    "Dict[str, str]",
                    "bool"
                ],
                "protocol": [
                    "str"
                ],
                "protocol_length": [
                    "list",
                    "int",
                    "Dict[str, Any]",
                    "Callable(len)[[Sized], int]",
                    "Tuple[Any, Any]",
                    "Dict[str, str]"
                ],
                "regular_url": [
                    "str",
                    "dict",
                    "bytes"
                ],
                "result": [
                    "str",
                    "Optional[str]",
                    "Union[Literal, Literal]",
                    "Dict[str, Dict[str, Any]]"
                ]
            }
        },
        "StaticFileTest.get_handlers": {
            "name": "get_handlers",
            "location": 961,
            "return": [
                "str",
                "Type[Any]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "include_host": [
                    "str",
                    "List[str]",
                    "int",
                    "Dict[str, List[Any]]",
                    "Tuple[str, str, str, str, str, str, str, str]"
                ]
            }
        },
        "StaticFileTest.get_app_kwargs": {
            "name": "get_app_kwargs",
            "location": 996,
            "return": [
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "StaticFileTest.test_static_files": {
            "name": "test_static_files",
            "location": 999,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "Generator[Any, None, None]"
                ]
            }
        },
        "StaticFileTest.test_static_compressed_files": {
            "name": "test_static_compressed_files",
            "location": 1007,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "Dict[str, str]"
                ]
            }
        },
        "StaticFileTest.test_static_url": {
            "name": "test_static_url",
            "location": 1019,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "str",
                    "List[float]",
                    "Generator[Any, None, None]",
                    "Optional[Match[str]]",
                    "dict"
                ]
            }
        },
        "StaticFileTest.test_absolute_static_url": {
            "name": "test_absolute_static_url",
            "location": 1024,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "OrderedDict[str, Any]",
                    "dict",
                    "bytes",
                    "list",
                    "Callable[[List[Any]], List[Any]]"
                ]
            }
        },
        "StaticFileTest.test_relative_version_exclusion": {
            "name": "test_relative_version_exclusion",
            "location": 1032,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "str",
                    "List[str]",
                    "Tuple[str]",
                    "Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]"
                ]
            }
        },
        "StaticFileTest.test_absolute_version_exclusion": {
            "name": "test_absolute_version_exclusion",
            "location": 1036,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "str",
                    "Dict[Any, str]",
                    "List[str]",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "StaticFileTest.test_include_host_override": {
            "name": "test_include_host_override",
            "location": 1041,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "StaticFileTest._trigger_include_host_check": {
            "name": "_trigger_include_host_check",
            "location": 1045,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "include_host": [
                    "str",
                    "int"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "path": [
                    "str",
                    "venv.Lib.site-packages.sqlalchemy.util.langhelpers.symbol",
                    "Optional[\"Node\"]"
                ],
                "response": [
                    "str",
                    "dict",
                    "bytes",
                    "Pattern[str]",
                    "Set[str]",
                    "List[str]"
                ]
            }
        },
        "StaticFileTest.get_and_head": {
            "name": "get_and_head",
            "location": 1050,
            "return": [
                "Optional[str]",
                "dict",
                "int",
                "bool",
                "Dict[str, Union[str, int]]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "content_headers": [
                    "Dict[int, str]",
                    "Dict[Any, Dict[str, int]]",
                    "List[int]",
                    "list",
                    "Dict[Union[Any, str], Any]",
                    "List[Dict[str, Any]]"
                ],
                "get_response": [
                    "Dict[str, Union[Any, Any, Any, Any]]",
                    "Dict[Any, Dict[str, Any]]",
                    "str",
                    "Dict[str, Union[Any, Any]]",
                    "Dict[Any, str]",
                    "Dict[str, List[str]]",
                    "Dict[str, str]",
                    "dict"
                ],
                "head_response": [
                    "Dict[Any, str]",
                    "Dict[str, str]",
                    "Dict[str, Union[int, str]]",
                    "Dict[str, Any]",
                    "str",
                    "dict"
                ]
            }
        },
        "StaticFileTest.test_static_304_if_modified_since": {
            "name": "test_static_304_if_modified_since",
            "location": 1070,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response1": [
                    "str",
                    "bytes"
                ],
                "response2": []
            }
        },
        "StaticFileTest.test_static_304_if_none_match": {
            "name": "test_static_304_if_none_match",
            "location": 1078,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response1": [
                    "str",
                    "bytes"
                ],
                "response2": []
            }
        },
        "StaticFileTest.test_static_304_etag_modified_bug": {
            "name": "test_static_304_etag_modified_bug",
            "location": 1084,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response1": [
                    "str",
                    "bytes"
                ],
                "response2": []
            }
        },
        "StaticFileTest.test_static_if_modified_since_pre_epoch": {
            "name": "test_static_if_modified_since_pre_epoch",
            "location": 1091,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "Dict[str, Any]",
                    "str",
                    "list"
                ]
            }
        },
        "StaticFileTest.test_static_if_modified_since_time_zone": {
            "name": "test_static_if_modified_since_time_zone",
            "location": 1099,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "dict",
                    "bytes",
                    "Dict[str, str]",
                    "Tuple[bytes, bytes, bytes]",
                    "Dict[str, Any]"
                ],
                "stat": [
                    "dict",
                    "bytes"
                ]
            }
        },
        "StaticFileTest.test_static_etag": {
            "name": "test_static_etag",
            "location": 1113,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "Dict[str, str]",
                    "dict",
                    "Dict[str, int]",
                    "Dict[int, bool]",
                    "Dict[str, Union[Any, Any]]"
                ]
            }
        },
        "StaticFileTest.test_static_with_range": {
            "name": "test_static_with_range",
            "location": 1118,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "Generator[Any, None, None]"
                ]
            }
        },
        "StaticFileTest.test_static_with_range_full_file": {
            "name": "test_static_with_range_full_file",
            "location": 1129,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "urllib.requesRequest"
                ],
                "robots_file_path": [
                    "str"
                ]
            }
        },
        "StaticFileTest.test_static_with_range_full_past_end": {
            "name": "test_static_with_range_full_past_end",
            "location": 1141,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "urllib.requesRequest"
                ],
                "robots_file_path": [
                    "str"
                ]
            }
        },
        "StaticFileTest.test_static_with_range_partial_past_end": {
            "name": "test_static_with_range_partial_past_end",
            "location": 1151,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "urllib.requesRequest"
                ],
                "robots_file_path": [
                    "str"
                ]
            }
        },
        "StaticFileTest.test_static_with_range_end_edge": {
            "name": "test_static_with_range_end_edge",
            "location": 1161,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": []
            }
        },
        "StaticFileTest.test_static_with_range_neg_end": {
            "name": "test_static_with_range_neg_end",
            "location": 1169,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": []
            }
        },
        "StaticFileTest.test_static_invalid_range": {
            "name": "test_static_invalid_range",
            "location": 1177,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "Dict[str, Any]",
                    "str",
                    "list"
                ]
            }
        },
        "StaticFileTest.test_static_unsatisfiable_range_zero_suffix": {
            "name": "test_static_unsatisfiable_range_zero_suffix",
            "location": 1182,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "Dict[str, str]"
                ]
            }
        },
        "StaticFileTest.test_static_unsatisfiable_range_invalid_start": {
            "name": "test_static_unsatisfiable_range_invalid_start",
            "location": 1189,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": []
            }
        },
        "StaticFileTest.test_static_head": {
            "name": "test_static_head",
            "location": 1196,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "str",
                    "Dict[str, None]",
                    "Dict[str, str]"
                ]
            }
        },
        "StaticFileTest.test_static_head_range": {
            "name": "test_static_head_range",
            "location": 1205,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "str",
                    "Dict[str, str]",
                    "dict"
                ]
            }
        },
        "StaticFileTest.test_static_range_if_none_match": {
            "name": "test_static_range_if_none_match",
            "location": 1214,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "Dict[str, str]",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "StaticFileTest.test_static_404": {
            "name": "test_static_404",
            "location": 1224,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "str",
                    "List[Tuple[Any, Any, None]]",
                    "dict",
                    "Final[Dict[str, Any]]"
                ]
            }
        },
        "StaticFileTest.test_path_traversal_protection": {
            "name": "test_path_traversal_protection",
            "location": 1228,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "http_client": [
                    "str",
                    "int",
                    "\"Client\""
                ],
                "response": [
                    "str",
                    "List[Tuple[Any, Any, None]]",
                    "dict",
                    "Final[Dict[str, Any]]"
                ]
            }
        },
        "StaticFileTest.test_root_static_path": {
            "name": "test_root_static_path",
            "location": 1242,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "path": [
                    "str"
                ],
                "response": [
                    "Dict[str, str]",
                    "Dict[str, int]",
                    "Dict[str, Optional[int]]",
                    "str",
                    "List[str]",
                    "Dict[str, Union[int, str]]"
                ]
            }
        },
        "StaticDefaultFilenameTest.get_app_kwargs": {
            "name": "get_app_kwargs",
            "location": 1255,
            "return": [
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "StaticDefaultFilenameTest.get_handlers": {
            "name": "get_handlers",
            "location": 1259,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "StaticDefaultFilenameTest.test_static_default_filename": {
            "name": "test_static_default_filename",
            "location": 1262,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "dict",
                    "Dict[str, List[str]]",
                    "Dict[str, Union[None, int, str]]",
                    "bravado_core.util.AliasKeyDict"
                ]
            }
        },
        "StaticDefaultFilenameTest.test_static_default_redirect": {
            "name": "test_static_default_redirect",
            "location": 1267,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "dict",
                    "bytes",
                    "Dict[str, List[str]]",
                    "Dict[str, Any]",
                    "list"
                ]
            }
        },
        "StaticFileWithPathTest.get_app_kwargs": {
            "name": "get_app_kwargs",
            "location": 1275,
            "return": [
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "StaticFileWithPathTest.get_handlers": {
            "name": "get_handlers",
            "location": 1279,
            "return": [
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "StaticFileWithPathTest.test_serve": {
            "name": "test_serve",
            "location": 1284,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "str",
                    "List[str]",
                    "Tuple[str]",
                    "Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]"
                ]
            }
        },
        "MyStaticFileHandler.make_static_url": {
            "name": "make_static_url",
            "location": 1294,
            "return": [
                "str"
            ],
            "arguments": {
                "args": [],
                "cls": [
                    "str",
                    "dict",
                    "Optional[Dict]"
                ],
                "kwargs": [],
                "path": [
                    "str",
                    "Union[str, bytes]",
                    "Optional[str]"
                ],
                "self": [],
                "settings": [
                    "str",
                    "dict",
                    "Optional[Dict]"
                ]
            },
            "variables": {
                "after_version": [
                    "str",
                    "Type[str]",
                    "List[List[float]]",
                    "Tuple[Literal, Literal, Literal]",
                    "int",
                    "List[str]"
                ],
                "before_version": [
                    "str",
                    "Type[str]",
                    "List[List[float]]",
                    "Tuple[Literal, Literal, Literal]",
                    "int",
                    "List[str]"
                ],
                "extension_index": [
                    "str",
                    "Tuple[Any, Any, Any, Any, Any, Any]",
                    "TextIO",
                    "list",
                    "int"
                ],
                "version_hash": [
                    "str",
                    "dict",
                    "Dict[str, str]",
                    "int"
                ]
            }
        },
        "MyStaticFileHandler.parse_url_path": {
            "name": "parse_url_path",
            "location": 1302,
            "return": [
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "url_path": [
                    "int",
                    "str"
                ]
            },
            "variables": {
                "extension_index": [
                    "str",
                    "list",
                    "Dict[str, Dict[str, str]]",
                    "Dict[str, str]"
                ],
                "version_index": [
                    "str",
                    "List[str]",
                    "set",
                    "Dict[str, str]"
                ]
            }
        },
        "MyStaticFileHandler.get_absolute_path": {
            "name": "get_absolute_path",
            "location": 1309,
            "return": [
                "str",
                "Tuple[str]",
                "Dict[str, str]",
                "dict"
            ],
            "arguments": {
                "args": [],
                "cls": [
                    "int",
                    "str",
                    "bytes"
                ],
                "kwargs": [],
                "path": [
                    "int",
                    "str",
                    "bytes"
                ],
                "self": [],
                "settings": [
                    "int",
                    "str",
                    "bytes"
                ]
            },
            "variables": {}
        },
        "MyStaticFileHandler.validate_absolute_path": {
            "name": "validate_absolute_path",
            "location": 1312,
            "return": [
                "str"
            ],
            "arguments": {
                "absolute_path": [
                    "List[str]",
                    "BinaryIO",
                    "bool"
                ],
                "args": [],
                "kwargs": [],
                "root": [
                    "List[str]",
                    "BinaryIO",
                    "bool"
                ],
                "self": []
            },
            "variables": {}
        },
        "MyStaticFileHandler.get_content": {
            "name": "get_content",
            "location": 1316,
            "return": [
                "str",
                "Dict[str, str]",
                "bool",
                "IO[bytes]"
            ],
            "arguments": {
                "args": [],
                "end": [
                    "Optional[str]",
                    "str",
                    "Optional[int]",
                    "Optional[List[str]]"
                ],
                "kwargs": [],
                "path": [
                    "Optional[str]",
                    "int",
                    "bool",
                    "str"
                ],
                "self": [],
                "start": [
                    "Optional[str]",
                    "str",
                    "Optional[int]",
                    "Optional[List[str]]"
                ]
            },
            "variables": {}
        },
        "MyStaticFileHandler.get_content_size": {
            "name": "get_content_size",
            "location": 1322,
            "return": [
                "str",
                "Optional[str]",
                "int",
                "Optional[Dict]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "MyStaticFileHandler.get_modified_time": {
            "name": "get_modified_time",
            "location": 1327,
            "return": [
                "Optional[str]",
                "Optional[bool]",
                "Optional[float]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "MyStaticFileHandler.get_version": {
            "name": "get_version",
            "location": 1331,
            "return": [
                "str",
                "float",
                "Optional[int]",
                "Optional[Dict]"
            ],
            "arguments": {
                "args": [],
                "cls": [
                    "str",
                    "Tuple[str]"
                ],
                "kwargs": [],
                "path": [
                    "str",
                    "Tuple[str]"
                ],
                "self": [],
                "settings": [
                    "str",
                    "Tuple[str]"
                ]
            },
            "variables": {}
        },
        "CustomStaticFileTest.get_handlers": {
            "name": "get_handlers",
            "location": 1291,
            "return": [
                "str",
                "Type[Any]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "static_handler_class": [
                    "Set[str]",
                    "str",
                    "Dict[str, List[str]]",
                    "list",
                    "Iterator[Dict[str, str]]",
                    "Dict[str, str]",
                    "List[int]",
                    "Optional[str]"
                ]
            }
        },
        "CustomStaticFileTest.get_app_kwargs": {
            "name": "get_app_kwargs",
            "location": 1342,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "CustomStaticFileTest.test_serve": {
            "name": "test_serve",
            "location": 1346,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "str",
                    "List[str]",
                    "Tuple[str]",
                    "Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]"
                ]
            }
        },
        "CustomStaticFileTest.test_static_url": {
            "name": "test_static_url",
            "location": 1350,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "str",
                    "List[str]",
                    "Tuple[str]",
                    "Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]"
                ]
            }
        },
        "Handler.initialize": {
            "name": "initialize",
            "location": 1359,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "reply": [
                    "int",
                    "Callable",
                    "str"
                ],
                "self": []
            },
            "variables": {
                "reply": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ]
            }
        },
        "Handler.get": {
            "name": "get",
            "location": 2843,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "HostMatchingTest.get_handlers": {
            "name": "get_handlers",
            "location": 1365,
            "return": [
                "str",
                "bool",
                "List[str]",
                "bytes",
                "set"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "HostMatchingTest.test_host_matching": {
            "name": "test_host_matching",
            "location": 1368,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "Dict[bytes, List[bytes]]"
                ]
            }
        },
        "DefaultHostMatchingTest.get_handlers": {
            "name": "get_handlers",
            "location": 1397,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "DefaultHostMatchingTest.get_app_kwargs": {
            "name": "get_app_kwargs",
            "location": 1400,
            "return": [
                "Tuple[str, int]",
                "Optional[bool]",
                "str",
                "FrozenSet[str]",
                "set",
                "dict"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "DefaultHostMatchingTest.test_default_host_matching": {
            "name": "test_default_host_matching",
            "location": 1403,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "Dict[bytes, List[bytes]]"
                ]
            }
        },
        "NamedURLSpecGroupsTest.get_handlers": {
            "name": "get_handlers",
            "location": 1429,
            "return": [
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "NamedURLSpecGroupsTest.test_named_urlspec_groups": {
            "name": "test_named_urlspec_groups",
            "location": 1437,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "list",
                    "bytes",
                    "Dict[str, Union[Any, Any]]"
                ]
            }
        },
        "ClearHeaderTest.test_clear_header": {
            "name": "test_clear_header",
            "location": 1454,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "str",
                    "bytes",
                    "list"
                ]
            }
        },
        "Header204Test.test_204_headers": {
            "name": "test_204_headers",
            "location": 1466,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "dict",
                    "set",
                    "Dict[str, dict]",
                    "Dict[Any, int]",
                    "Dict[int, str]"
                ]
            }
        },
        "Header304Test.test_304_headers": {
            "name": "test_304_headers",
            "location": 1480,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response1": [
                    "Dict[str, List[Any]]",
                    "Dict[str, Dict[str, Any]]",
                    "str"
                ],
                "response2": [
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "Generator[Any, None, None]",
                    "str",
                    "dict"
                ]
            }
        },
        "StatusReasonTest.get_http_client": {
            "name": "get_http_client",
            "location": 1502,
            "return": [
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "StatusReasonTest.test_status": {
            "name": "test_status",
            "location": 1506,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "Dict[str, Union[Any, str]]",
                    "Dict[str, str]",
                    "str",
                    "dict"
                ]
            }
        },
        "DateHeaderTest.test_date_header": {
            "name": "test_date_header",
            "location": 1527,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "header_date": [
                    "datetime.datetime",
                    "datetime.datetime.datetime",
                    "datetime.date"
                ],
                "response": [
                    "datetime.datetime.datetime",
                    "datetime.datetime",
                    "datetime.datetime.timedelta",
                    "datetime.tzinfo",
                    "datetime.timedelta"
                ]
            }
        },
        "RaiseWithReasonTest.get_http_client": {
            "name": "get_http_client",
            "location": 1541,
            "return": [
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "RaiseWithReasonTest.test_raise_with_reason": {
            "name": "test_raise_with_reason",
            "location": 1545,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "list",
                    "Dict[str, datetime.datetime]",
                    "Iterator[Any]",
                    "set",
                    "Dict[Any, int]"
                ]
            }
        },
        "RaiseWithReasonTest.test_httperror_str": {
            "name": "test_httperror_str",
            "location": 1551,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "RaiseWithReasonTest.test_httperror_str_from_httputil": {
            "name": "test_httperror_str_from_httputil",
            "location": 1554,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "ErrorHandlerXSRFTest.get_handlers": {
            "name": "get_handlers",
            "location": 1560,
            "return": [
                "Optional[str]",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "ErrorHandlerXSRFTest.get_app_kwargs": {
            "name": "get_app_kwargs",
            "location": 1566,
            "return": [
                "str",
                "dict",
                "Dict[str, Any]",
                "Dict[str, Dict[str, Any]]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "ErrorHandlerXSRFTest.test_error_xsrf": {
            "name": "test_error_xsrf",
            "location": 1569,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "Dict[str, str]",
                    "bytes",
                    "list",
                    "Dict[str, Dict[str, Any]]"
                ]
            }
        },
        "ErrorHandlerXSRFTest.test_404_xsrf": {
            "name": "test_404_xsrf",
            "location": 1573,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "Dict[str, str]",
                    "bytes",
                    "list",
                    "Dict[str, Dict[str, Any]]"
                ]
            }
        },
        "GzipTestCase.get_app_kwargs": {
            "name": "get_app_kwargs",
            "location": 1587,
            "return": [
                "Dict[str, str]",
                "dict",
                "Dict[str, Any]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "GzipTestCase.assert_compressed": {
            "name": "assert_compressed",
            "location": 1592,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "response": [
                    "Dict[str, Any]",
                    "dict"
                ],
                "self": []
            },
            "variables": {}
        },
        "GzipTestCase.test_gzip": {
            "name": "test_gzip",
            "location": 1601,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "Dict[str, Any]",
                    "Dict[Any, str]",
                    "str",
                    "Pattern[str]"
                ]
            }
        },
        "GzipTestCase.test_gzip_static": {
            "name": "test_gzip_static",
            "location": 1606,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "Dict[str, Any]",
                    "Dict[Any, str]",
                    "str",
                    "Pattern[str]"
                ]
            }
        },
        "GzipTestCase.test_gzip_not_requested": {
            "name": "test_gzip_not_requested",
            "location": 1613,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "str"
                ]
            }
        },
        "GzipTestCase.test_vary_already_present": {
            "name": "test_vary_already_present",
            "location": 1618,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "Dict[str, Any]",
                    "Pattern[str]",
                    "dict",
                    "bytes",
                    "urllib.requesRequest"
                ]
            }
        },
        "GzipTestCase.test_vary_already_present_multiple": {
            "name": "test_vary_already_present_multiple",
            "location": 1624,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "Dict[str, Any]",
                    "Pattern[str]",
                    "dict",
                    "bytes",
                    "urllib.requesRequest"
                ]
            }
        },
        "Handler.prepare": {
            "name": "prepare",
            "location": 2018,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "PathArgsInPrepareTest.get_handlers": {
            "name": "get_handlers",
            "location": 1642,
            "return": [
                "str",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "PathArgsInPrepareTest.test_pos": {
            "name": "test_pos",
            "location": 1646,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "data": [
                    "str",
                    "list"
                ],
                "response": [
                    "Dict[str, Union[Any, Any, str]]",
                    "Dict[str, str]",
                    "List[Tuple[Any, Any]]",
                    "Dict[str, Union[Any, Any, Any, Any, Any, Any, Any]]",
                    "Tuple[Literal, Literal, Literal]",
                    "urllib.requesProxyHandler"
                ]
            }
        },
        "PathArgsInPrepareTest.test_kw": {
            "name": "test_kw",
            "location": 1652,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "data": [
                    "str",
                    "list"
                ],
                "response": [
                    "Dict[str, Union[Any, Any, str]]",
                    "Dict[str, str]",
                    "List[Tuple[Any, Any]]",
                    "Dict[str, Union[Any, Any, Any, Any, Any, Any, Any]]",
                    "Tuple[Literal, Literal, Literal]",
                    "urllib.requesProxyHandler"
                ]
            }
        },
        "ClearAllCookiesTest.test_clear_all_cookies": {
            "name": "test_clear_all_cookies",
            "location": 1666,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "bytes",
                    "dict",
                    "str"
                ],
                "set_cookies": []
            }
        },
        "Handler.write_error": {
            "name": "write_error",
            "location": 1692,
            "return": [],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "status_code": [
                    "str",
                    "bytes",
                    "Union[str, bytes]",
                    "Callable"
                ]
            },
            "variables": {
                "tb": [
                    "Tuple[int, Literal]",
                    "int",
                    "Dict[str, List[str]]",
                    "Pattern[str]",
                    "Set[str]",
                    "tuple",
                    "str",
                    "Dict[str, Any]"
                ],
                "typ": [
                    "Tuple[int, Literal]",
                    "int",
                    "Dict[str, List[str]]",
                    "Pattern[str]",
                    "Set[str]",
                    "tuple",
                    "str",
                    "Dict[str, Any]"
                ],
                "value": [
                    "int",
                    "dict",
                    "list",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "Handler.log_exception": {
            "name": "log_exception",
            "location": 1815,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "tb": [
                    "str",
                    "dict",
                    "List[int]",
                    "list"
                ],
                "typ": [
                    "str",
                    "dict",
                    "List[int]",
                    "list"
                ],
                "value": [
                    "str",
                    "dict",
                    "List[int]",
                    "list"
                ]
            },
            "variables": {}
        },
        "ExceptionHandlerTest.test_http_error": {
            "name": "test_http_error",
            "location": 1708,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "str",
                    "List[str]",
                    "Tuple[str]",
                    "Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]"
                ]
            }
        },
        "ExceptionHandlerTest.test_unknown_error": {
            "name": "test_unknown_error",
            "location": 1715,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "str",
                    "List[str]",
                    "Tuple[str]",
                    "Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]"
                ]
            }
        },
        "ExceptionHandlerTest.test_known_error": {
            "name": "test_known_error",
            "location": 1721,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "str",
                    "List[str]",
                    "Tuple[str]",
                    "Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]"
                ]
            }
        },
        "BuggyLoggingTest.test_buggy_log_exception": {
            "name": "test_buggy_log_exception",
            "location": 1739,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Handler.value": {
            "name": "value",
            "location": 1755,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[float]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "MyModule.render": {
            "name": "render",
            "location": 1764,
            "return": [
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "x": [
                    "str",
                    "bytes"
                ]
            },
            "variables": {}
        },
        "UIMethodUIModuleTest.my_ui_method": {
            "name": "my_ui_method",
            "location": 1759,
            "return": [
                "bool"
            ],
            "arguments": {
                "args": [],
                "handler": [
                    "str",
                    "Callable[[None], bool]",
                    "bytes",
                    "int"
                ],
                "kwargs": [],
                "self": [],
                "x": [
                    "str",
                    "Callable[[None], bool]",
                    "bytes",
                    "int"
                ]
            },
            "variables": {}
        },
        "UIMethodUIModuleTest.get_app_kwargs": {
            "name": "get_app_kwargs",
            "location": 1758,
            "return": [
                "str",
                "Dict[str, Any]",
                "Union[str, bytes]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "loader": [
                    "str",
                    "list",
                    "Dict[str, dict]",
                    "Tuple[Any, Literal]",
                    "dict"
                ]
            }
        },
        "UIMethodUIModuleTest.tearDown": {
            "name": "tearDown",
            "location": 1775,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "UIMethodUIModuleTest.test_ui_method": {
            "name": "test_ui_method",
            "location": 1780,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "str",
                    "List[str]",
                    "Tuple[str]",
                    "Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]"
                ]
            }
        },
        "GetArgumentErrorTest.test_catch_error": {
            "name": "test_catch_error",
            "location": 1798,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "str",
                    "Dict[str, str]",
                    "bytes",
                    "list"
                ]
            }
        },
        "MultipleExceptionTest.test_multi_exception": {
            "name": "test_multi_exception",
            "location": 1818,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "list",
                    "Type[Dict[str, Any]]",
                    "bytes"
                ]
            }
        },
        "Handler.get_user_locale": {
            "name": "get_user_locale",
            "location": 1840,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Handler.get_current_user": {
            "name": "get_current_user",
            "location": 1843,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "SetLazyPropertiesTest.test_set_properties": {
            "name": "test_set_properties",
            "location": 1849,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "str",
                    "List[str]",
                    "Tuple[str]",
                    "Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]"
                ]
            }
        },
        "WithoutUserModule.render": {
            "name": "render",
            "location": 1860,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "WithUserModule.render": {
            "name": "render",
            "location": 1864,
            "return": [
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "CurrentUserHandler.prepare": {
            "name": "prepare",
            "location": 1883,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "has_loaded_current_user": [
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "CurrentUserHandler.get_current_user": {
            "name": "get_current_user",
            "location": 1886,
            "return": [
                "str",
                "list",
                "List[str]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "has_loaded_current_user": [
                    "int",
                    "dict",
                    "Optional[str]",
                    "Iterable"
                ]
            }
        },
        "WithoutUserHandler.get": {
            "name": "get",
            "location": 1891,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "WithUserHandler.get": {
            "name": "get",
            "location": 1896,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "CurrentUserModuleHandler.get_template_namespace": {
            "name": "get_template_namespace",
            "location": 1901,
            "return": [
                "str",
                "List[str]",
                "int",
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "WithoutUserModuleHandler.get": {
            "name": "get",
            "location": 1908,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "WithUserModuleHandler.get": {
            "name": "get",
            "location": 1913,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "GetCurrentUserTest.get_app_kwargs": {
            "name": "get_app_kwargs",
            "location": 1858,
            "return": [
                "str",
                "Dict[str, Any]",
                "Type[Any]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "loader": [
                    "dict",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "GetCurrentUserTest.tearDown": {
            "name": "tearDown",
            "location": 1877,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "GetCurrentUserTest.get_handlers": {
            "name": "get_handlers",
            "location": 1881,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "GetCurrentUserTest.test_get_current_user_is_lazy": {
            "name": "test_get_current_user_is_lazy",
            "location": 1923,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "str",
                    "List[str]",
                    "Tuple[str]",
                    "Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]"
                ]
            }
        },
        "GetCurrentUserTest.test_get_current_user_works": {
            "name": "test_get_current_user_works",
            "location": 1928,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "str",
                    "List[str]",
                    "Tuple[str]",
                    "Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]"
                ]
            }
        },
        "GetCurrentUserTest.test_get_current_user_from_ui_module_is_lazy": {
            "name": "test_get_current_user_from_ui_module_is_lazy",
            "location": 1932,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "str",
                    "List[str]",
                    "Tuple[str]",
                    "Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]"
                ]
            }
        },
        "GetCurrentUserTest.test_get_current_user_from_ui_module_works": {
            "name": "test_get_current_user_from_ui_module_works",
            "location": 1936,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "str",
                    "List[str]",
                    "Tuple[str]",
                    "Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]"
                ]
            }
        },
        "UnimplementedHTTPMethodsTest.test_unimplemented_standard_methods": {
            "name": "test_unimplemented_standard_methods",
            "location": 1946,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "Dict[str, str]",
                    "Generator[Any, None, None]"
                ]
            }
        },
        "Handler.other": {
            "name": "other",
            "location": 2002,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "UnimplementedNonStandardMethodsTest.test_unimplemented_patch": {
            "name": "test_unimplemented_patch",
            "location": 1964,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "Dict[str, str]",
                    "bytes",
                    "list",
                    "Dict[str, Dict[str, Any]]"
                ]
            }
        },
        "UnimplementedNonStandardMethodsTest.test_unimplemented_other": {
            "name": "test_unimplemented_other",
            "location": 1970,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "Dict[str, str]",
                    "Dict[Any, str]",
                    "bytes",
                    "list"
                ]
            }
        },
        "Handler.method": {
            "name": "method",
            "location": 1979,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "AllHTTPMethodsTest.test_standard_methods": {
            "name": "test_standard_methods",
            "location": 1984,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "Dict[str, str]"
                ]
            }
        },
        "Handler.patch": {
            "name": "patch",
            "location": 1999,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "PatchMethodTest.test_patch": {
            "name": "test_patch",
            "location": 2005,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "Dict[str, str]",
                    "bytes",
                    "list",
                    "Dict[str, Dict[str, Any]]"
                ]
            }
        },
        "PatchMethodTest.test_other": {
            "name": "test_other",
            "location": 2009,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "Dict[str, str]",
                    "Dict[Any, str]",
                    "bytes",
                    "list"
                ]
            }
        },
        "FinishInPrepareTest.test_finish_in_prepare": {
            "name": "test_finish_in_prepare",
            "location": 2027,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "str",
                    "List[str]",
                    "Tuple[str]",
                    "Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]"
                ]
            }
        },
        "Default404Test.get_handlers": {
            "name": "get_handlers",
            "location": 2034,
            "return": [
                "int",
                "bytes",
                "Optional[Dict]",
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Default404Test.test_404": {
            "name": "test_404",
            "location": 2038,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "list",
                    "Dict[str, Union[Any, Any]]"
                ]
            }
        },
        "Custom404Handler.get": {
            "name": "get",
            "location": 2053,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Custom404Test.get_handlers": {
            "name": "get_handlers",
            "location": 2048,
            "return": [
                "int",
                "bytes",
                "Optional[Dict]",
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Custom404Test.get_app_kwargs": {
            "name": "get_app_kwargs",
            "location": 2051,
            "return": [
                "Optional[str]",
                "Mapping[str, Any]",
                "Dict[str, Any]",
                "Dict[str, str]",
                "List[str]",
                "str",
                "dict"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Custom404Test.test_404": {
            "name": "test_404",
            "location": 2059,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "list",
                    "Dict[str, Union[Any, Any]]"
                ]
            }
        },
        "DefaultHandlerArgumentsTest.get_handlers": {
            "name": "get_handlers",
            "location": 2067,
            "return": [
                "int",
                "bytes",
                "Optional[Dict]",
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "DefaultHandlerArgumentsTest.get_app_kwargs": {
            "name": "get_app_kwargs",
            "location": 2070,
            "return": [
                "bool",
                "Dict[str, str]",
                "int"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "DefaultHandlerArgumentsTest.test_403": {
            "name": "test_403",
            "location": 2074,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "str",
                    "List[str]",
                    "Tuple[str]",
                    "Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]"
                ]
            }
        },
        "HandlerByNameTest.get_handlers": {
            "name": "get_handlers",
            "location": 2081,
            "return": [
                "str",
                "bool",
                "bytes",
                "int"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "HandlerByNameTest.test_handler_by_name": {
            "name": "test_handler_by_name",
            "location": 2088,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "resp": [
                    "dict",
                    "Generator[Any, None, None]",
                    "Dict[str, str]",
                    "ChainMap[str, str]",
                    "List[str]"
                ]
            }
        },
        "StreamingBodyHandler.initialize": {
            "name": "initialize",
            "location": 2101,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "test": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, Any]",
                    "bool",
                    "Tuple[str, str]",
                    "int"
                ]
            },
            "variables": {
                "test": [
                    "int",
                    "List[List[str]]",
                    "io.TextIOWrapper",
                    "List[List[Any]]",
                    "bytes",
                    "Dict[str, Any]",
                    "str",
                    "List[str]"
                ]
            }
        },
        "StreamingBodyHandler.prepare": {
            "name": "prepare",
            "location": 2104,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "StreamingBodyHandler.data_received": {
            "name": "data_received",
            "location": 2107,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "data": [
                    "dict",
                    "bytes",
                    "Dict[str, Any]",
                    "Mapping[str, Any]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "StreamingBodyHandler.get": {
            "name": "get",
            "location": 2110,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "EarlyReturnHandler.prepare": {
            "name": "prepare",
            "location": 2116,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "CloseDetectionHandler.initialize": {
            "name": "initialize",
            "location": 2123,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "test": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, Any]",
                    "bool",
                    "Tuple[str, str]",
                    "int"
                ]
            },
            "variables": {
                "test": [
                    "int",
                    "List[List[str]]",
                    "io.TextIOWrapper",
                    "List[List[Any]]",
                    "bytes",
                    "Dict[str, Any]",
                    "str",
                    "List[str]"
                ]
            }
        },
        "CloseDetectionHandler.on_connection_close": {
            "name": "on_connection_close",
            "location": 2126,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "StreamingRequestBodyTest.get_handlers": {
            "name": "get_handlers",
            "location": 2098,
            "return": [
                "str",
                "Iterable[int]",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "StreamingRequestBodyTest.connect": {
            "name": "connect",
            "location": 2134,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "connection_close": [
                    "Dict[str, Union[str, int]]",
                    "str",
                    "Optional[str]"
                ],
                "kwargs": [],
                "self": [],
                "url": [
                    "str",
                    "Optional[str]",
                    "bytes"
                ]
            },
            "variables": {
                "s": [],
                "stream": [
                    "str",
                    "urllib.requesOpenerDirector",
                    "Tuple[str, str]",
                    "int"
                ]
            }
        },
        "StreamingRequestBodyTest.test_streaming_body": {
            "name": "test_streaming_body",
            "location": 2146,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "data": [
                    "Generator[Any, None, None]",
                    "dict",
                    "Dict[str, List[Any]]",
                    "Dict[str, int]",
                    "list",
                    "Dict[str, Union[Any, Any]]",
                    "List[str]",
                    "List[int]"
                ],
                "finished": [
                    "int",
                    "Type[str]",
                    "str",
                    "float",
                    "Dict[str, str]"
                ],
                "prepared": [
                    "int",
                    "Type[str]",
                    "str",
                    "float",
                    "Dict[str, str]"
                ],
                "stream": [
                    "os.stat_result",
                    "io.StringIO",
                    "io.BytesIO",
                    "pymatgen.io.vasp.outputs.Vasprun"
                ]
            }
        },
        "StreamingRequestBodyTest.test_early_return": {
            "name": "test_early_return",
            "location": 2169,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "data": [
                    "str",
                    "bytes",
                    "int"
                ],
                "stream": [
                    "int",
                    "Dict[str, Union[Any, Any, Any]]"
                ]
            }
        },
        "StreamingRequestBodyTest.test_early_return_with_data": {
            "name": "test_early_return_with_data",
            "location": 2175,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "data": [
                    "str",
                    "bytes",
                    "int"
                ],
                "stream": [
                    "str",
                    "dict"
                ]
            }
        },
        "StreamingRequestBodyTest.test_close_during_upload": {
            "name": "test_close_during_upload",
            "location": 2182,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "close_future": [
                    "int",
                    "float",
                    "str"
                ],
                "stream": [
                    "str",
                    "io.TextIOWrapper"
                ]
            }
        },
        "BaseFlowControlHandler.initialize": {
            "name": "initialize",
            "location": 2195,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "test": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, Any]",
                    "bool",
                    "Tuple[str, str]",
                    "int"
                ]
            },
            "variables": {
                "method": [
                    "str",
                    "Mapping[str, Any]",
                    "dict",
                    "T"
                ],
                "methods": [
                    "str",
                    "List[str]",
                    "int"
                ],
                "test": [
                    "int",
                    "List[List[str]]",
                    "io.TextIOWrapper",
                    "List[List[Any]]",
                    "bytes",
                    "Dict[str, Any]",
                    "str",
                    "List[str]"
                ]
            }
        },
        "BaseFlowControlHandler.in_method": {
            "name": "in_method",
            "location": 2201,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "method": [
                    "Optional[dict]",
                    "Mapping",
                    "Tuple[List[str], Optional[Any], Optional[Any]]",
                    "bool",
                    "Optional[str]",
                    "str"
                ],
                "self": []
            },
            "variables": {
                "method": [
                    "Pattern[Any]",
                    "Tuple[Any, Literal]",
                    "Type[Dict[str, Any]]"
                ]
            }
        },
        "BaseFlowControlHandler.prepare": {
            "name": "prepare",
            "location": 2213,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "BaseFlowControlHandler.post": {
            "name": "post",
            "location": 2220,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "BaseStreamingRequestFlowControlTest.get_httpserver_options": {
            "name": "get_httpserver_options",
            "location": 2227,
            "return": [
                "Dict[str, str]",
                "dict",
                "Dict[str, Any]",
                "int",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "BaseStreamingRequestFlowControlTest.get_http_client": {
            "name": "get_http_client",
            "location": 2232,
            "return": [
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "BaseStreamingRequestFlowControlTest.test_flow_control_fixed_body": {
            "name": "test_flow_control_fixed_body",
            "location": 2237,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "Dict[str, Any]",
                    "bytes"
                ]
            }
        },
        "BaseStreamingRequestFlowControlTest.body_producer": {
            "name": "body_producer",
            "location": 2250,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "write": [
                    "Callable",
                    "Callable[[T], bool]",
                    "Callable[[int], bool]",
                    "Union[int, float]",
                    "str",
                    "Iterator"
                ]
            },
            "variables": {}
        },
        "BaseStreamingRequestFlowControlTest.test_flow_control_chunked_body": {
            "name": "test_flow_control_chunked_body",
            "location": 2246,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "chunks": [
                    "str",
                    "List[str]",
                    "int",
                    "Dict[str, List[Any]]",
                    "Tuple[str, str, str, str, str, str, str, str]"
                ],
                "response": []
            }
        },
        "BaseStreamingRequestFlowControlTest.test_flow_control_compressed_body": {
            "name": "test_flow_control_compressed_body",
            "location": 2260,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "bytesio": [
                    "str",
                    "io.StringIO",
                    "List[str]",
                    "TextIO",
                    "io.BytesIO",
                    "IO[bytes]"
                ],
                "compressed_body": [
                    "dict",
                    "bytes"
                ],
                "gzip_file": [
                    "str",
                    "gzip.GzipFile",
                    "Optional[str]"
                ],
                "response": []
            }
        },
        "DecoratedFlowControlHandler.data_received": {
            "name": "data_received",
            "location": 2281,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "data": [
                    "bytes",
                    "Iterable[bytes]",
                    "List[Dict]",
                    "List[List[Any]]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "DecoratedStreamingRequestFlowControlTest.get_handlers": {
            "name": "get_handlers",
            "location": 2278,
            "return": [
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "NativeStreamingRequestFlowControlTest.get_handlers": {
            "name": "get_handlers",
            "location": 2291,
            "return": [
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "data_received": [
                    "str",
                    "Tuple[str]",
                    "List[int]",
                    "List[str]",
                    "List[Tuple[float, float]]",
                    "bool",
                    "List[List[int]]",
                    "list"
                ]
            }
        },
        "TooHigh.get": {
            "name": "get",
            "location": 2309,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "server_error": [
                    "int",
                    "Optional[str]",
                    "Optional[int]",
                    "Type[Dict[Any, Any]]",
                    "RuntimeError"
                ]
            }
        },
        "TooLow.get": {
            "name": "get",
            "location": 2318,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "server_error": [
                    "ImportError",
                    "str",
                    "bool"
                ]
            }
        },
        "IncorrectContentLengthTest.get_handlers": {
            "name": "get_handlers",
            "location": 2303,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "server_error": [
                    "int",
                    "str",
                    "bool"
                ],
                "test": [
                    "List[Union[Any, Any]]",
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]",
                    "str",
                    "List[Union[Any, Any, Any]]",
                    "bool"
                ]
            }
        },
        "IncorrectContentLengthTest.test_content_length_too_high": {
            "name": "test_content_length_too_high",
            "location": 2329,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "str",
                    "List[str]",
                    "Tuple[str]",
                    "Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]"
                ]
            }
        },
        "IncorrectContentLengthTest.test_content_length_too_low": {
            "name": "test_content_length_too_low",
            "location": 2342,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "str",
                    "List[str]",
                    "Tuple[str]",
                    "Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]"
                ]
            }
        },
        "ClientCloseTest.test_client_close": {
            "name": "test_client_close",
            "location": 2371,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "List[Tuple[str, str]]",
                    "Dict[str, str]",
                    "Dict[str, dict]"
                ]
            }
        },
        "SignedValueTest.past": {
            "name": "past",
            "location": 2382,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "SignedValueTest.present": {
            "name": "present",
            "location": 2385,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "SignedValueTest.test_known_values": {
            "name": "test_known_values",
            "location": 2388,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "decoded_v1": [
                    "str"
                ],
                "decoded_v2": [
                    "str"
                ],
                "signed_default": [
                    "str"
                ],
                "signed_v1": [
                    "str"
                ],
                "signed_v2": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "SignedValueTest.test_name_swap": {
            "name": "test_name_swap",
            "location": 2416,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "decoded1": [
                    "str"
                ],
                "decoded2": [
                    "str"
                ],
                "signed1": [
                    "str",
                    "int"
                ],
                "signed2": [
                    "str",
                    "int"
                ]
            }
        },
        "SignedValueTest.test_expired": {
            "name": "test_expired",
            "location": 2429,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "decoded_past": [
                    "Type[str]",
                    "str"
                ],
                "decoded_present": [
                    "str"
                ],
                "signed": [
                    "str",
                    "int"
                ]
            }
        },
        "SignedValueTest.validate": {
            "name": "validate",
            "location": 2458,
            "return": [
                "str",
                "int",
                "Tuple[float, float, float]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "sig": [
                    "str",
                    "authorityspoke.io.schemas.RawFactor",
                    "Callable",
                    "Type"
                ]
            },
            "variables": {}
        },
        "SignedValueTest.test_payload_tampering": {
            "name": "test_payload_tampering",
            "location": 2439,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "sig": [
                    "str",
                    "List[str]",
                    "int",
                    "Dict[str, List[Any]]",
                    "Tuple[str, str, str, str, str, str, str, str]"
                ]
            }
        },
        "SignedValueTest.test_signature_tampering": {
            "name": "test_signature_tampering",
            "location": 2455,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "prefix": [
                    "str",
                    "List[str]",
                    "int",
                    "Dict[str, List[Any]]",
                    "Tuple[str, str, str, str, str, str, str, str]"
                ]
            }
        },
        "SignedValueTest.test_non_ascii": {
            "name": "test_non_ascii",
            "location": 2479,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "decoded": [
                    "str"
                ],
                "signed": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "SignedValueTest.test_key_versioning_read_write_default_key": {
            "name": "test_key_versioning_read_write_default_key",
            "location": 2487,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "decoded": [
                    "str",
                    "Tuple[str, str]",
                    "float"
                ],
                "signed": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "SignedValueTest.test_key_versioning_read_write_non_default_key": {
            "name": "test_key_versioning_read_write_non_default_key",
            "location": 2496,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "decoded": [
                    "str",
                    "Tuple[str, str]",
                    "float"
                ],
                "signed": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "SignedValueTest.test_key_versioning_invalid_key": {
            "name": "test_key_versioning_invalid_key",
            "location": 2505,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "decoded": [
                    "Tuple[float, float]"
                ],
                "newkeys": [
                    "dict",
                    "str",
                    "int"
                ],
                "signed": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "SignedValueTest.test_key_version_retrieval": {
            "name": "test_key_version_retrieval",
            "location": 2516,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "key_version": [
                    "str"
                ],
                "signed": [
                    "str",
                    "bool"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "Handler.post": {
            "name": "post",
            "location": 2535,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "XSRFTest.get_app_kwargs": {
            "name": "get_app_kwargs",
            "location": 2538,
            "return": [
                "str",
                "dict",
                "Dict[str, Any]",
                "Dict[str, Dict[str, Any]]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "XSRFTest.setUp": {
            "name": "setUp",
            "location": 2541,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "xsrf_token": [
                    "int",
                    "str"
                ]
            }
        },
        "XSRFTest.get_token": {
            "name": "get_token",
            "location": 2545,
            "return": [
                "str",
                "Type[Any]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "old_token": [
                    "Optional[str]",
                    "str",
                    "int",
                    "Optional[bool]",
                    "Optional[Union[int, str]]"
                ],
                "self": [],
                "version": [
                    "str",
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[Dict[str, Any]]"
                ]
            },
            "variables": {
                "headers": [
                    "dict",
                    "Union[List[Any], List[str]]",
                    "Dict[str, str]",
                    "str",
                    "Counter[Any]",
                    "Generator[Any, None, None]"
                ],
                "response": []
            }
        },
        "XSRFTest.cookie_headers": {
            "name": "cookie_headers",
            "location": 2556,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "token": [
                    "Optional[str]",
                    "Optional[Callable]",
                    "Optional[Dict[str, str]]",
                    "bool",
                    "str",
                    "Optional[Tuple[float, float]]"
                ]
            },
            "variables": {
                "token": [
                    "str",
                    "Optional[str]",
                    "Dict[str, str]",
                    "List[Union[Any, Any, Any]]"
                ]
            }
        },
        "XSRFTest.test_xsrf_fail_no_token": {
            "name": "test_xsrf_fail_no_token",
            "location": 2561,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "Dict[str, str]",
                    "bytes",
                    "list",
                    "Dict[str, Dict[str, Any]]"
                ]
            }
        },
        "XSRFTest.test_xsrf_fail_body_no_cookie": {
            "name": "test_xsrf_fail_body_no_cookie",
            "location": 2566,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "Dict[int, Any]",
                    "Dict[str, str]"
                ]
            }
        },
        "XSRFTest.test_xsrf_fail_argument_invalid_format": {
            "name": "test_xsrf_fail_argument_invalid_format",
            "location": 2573,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "Dict[Any, str]",
                    "dict",
                    "Dict[str, str]",
                    "Dict[str, List[str]]",
                    "str",
                    "Dict[str, Union[Any, str]]"
                ]
            }
        },
        "XSRFTest.test_xsrf_fail_cookie_invalid_format": {
            "name": "test_xsrf_fail_cookie_invalid_format",
            "location": 2581,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "Dict[str, Union[Any, Any]]",
                    "Dict[int, Any]",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "List[str]"
                ]
            }
        },
        "XSRFTest.test_xsrf_fail_cookie_no_body": {
            "name": "test_xsrf_fail_cookie_no_body",
            "location": 2589,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "Dict[str, str]",
                    "Dict[str, List[Any]]"
                ]
            }
        },
        "XSRFTest.test_xsrf_success_short_token": {
            "name": "test_xsrf_success_short_token",
            "location": 2596,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "dict",
                    "Dict[KT, VT]",
                    "Dict[str, bool]",
                    "Dict[str, List[str]]",
                    "Optional[str]",
                    "Dict[str, List[Any]]"
                ]
            }
        },
        "XSRFTest.test_xsrf_success_non_hex_token": {
            "name": "test_xsrf_success_non_hex_token",
            "location": 2603,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "dict",
                    "Dict[KT, VT]",
                    "Dict[str, bool]",
                    "Dict[str, List[str]]",
                    "Optional[str]",
                    "Dict[str, List[Any]]"
                ]
            }
        },
        "XSRFTest.test_xsrf_success_post_body": {
            "name": "test_xsrf_success_post_body",
            "location": 2610,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "Dict[str, str]"
                ]
            }
        },
        "XSRFTest.test_xsrf_success_query_string": {
            "name": "test_xsrf_success_query_string",
            "location": 2617,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "dict",
                    "Dict[str, str]",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "XSRFTest.test_xsrf_success_header": {
            "name": "test_xsrf_success_header",
            "location": 2624,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "Dict[str, str]",
                    "Dict[str,str]"
                ]
            }
        },
        "XSRFTest.test_distinct_tokens": {
            "name": "test_distinct_tokens",
            "location": 2630,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "NUM_TOKENS": [
                    "Set[str]",
                    "int",
                    "str"
                ],
                "tokens": [
                    "List[int]",
                    "int",
                    "list",
                    "str",
                    "List[dict]"
                ]
            }
        },
        "XSRFTest.test_cross_user": {
            "name": "test_cross_user",
            "location": 2638,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "Dict[str, Any]",
                    "Dict[str, List[str]]",
                    "Tuple[dict, int, dict]",
                    "List[Dict[str, Any]]",
                    "Dict[str, Optional[str]]",
                    "list",
                    "dict",
                    "Dict[str, str]"
                ],
                "token2": [
                    "dict",
                    "Optional[Literal[False]]",
                    "str",
                    "Type[str]"
                ]
            }
        },
        "XSRFTest.test_refresh_token": {
            "name": "test_refresh_token",
            "location": 2657,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "Dict[str, Dict[str, Any]]",
                    "Dict[Any, str]"
                ],
                "token": [
                    "dict",
                    "Optional[bytes]",
                    "datetime.datetime",
                    "Iterable[str]"
                ],
                "tokens_seen": [
                    "list",
                    "Counter[Any]",
                    "str"
                ]
            }
        },
        "XSRFTest.test_versioning": {
            "name": "test_versioning",
            "location": 2675,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "Dict[Any, str]",
                    "Dict[str, str]",
                    "dict",
                    "int"
                ],
                "v1_token": [
                    "float",
                    "Union[Sequence, 'SweepFixedValues']",
                    "Optional[Any]"
                ],
                "v2_token": [
                    "str",
                    "datetime.datetime.datetime",
                    "Pattern[str]",
                    "int",
                    "Tuple[FrozenSet[int]]",
                    "List[str]",
                    "List[Tuple[str, bool, Any]]"
                ]
            }
        },
        "XSRFCookieKwargsTest.get_app_kwargs": {
            "name": "get_app_kwargs",
            "location": 2707,
            "return": [
                "str",
                "dict",
                "Dict[str, Any]",
                "Dict[str, Dict[str, Any]]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "XSRFCookieKwargsTest.test_xsrf_httponly": {
            "name": "test_xsrf_httponly",
            "location": 2711,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "Dict[int, str]",
                    "Dict[str, str]",
                    "Dict[int, Any]",
                    "OrderedDict[str, int]",
                    "int",
                    "Pattern[str]",
                    "Dict[str, Union[Any, Any, str]]"
                ]
            }
        },
        "FinishExceptionTest.test_finish_exception": {
            "name": "test_finish_exception",
            "location": 2728,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "str",
                    "Dict[str, str]",
                    "dict"
                ]
            }
        },
        "RemoveSlashHandler.get": {
            "name": "get",
            "location": 2742,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "AddSlashHandler.get": {
            "name": "get",
            "location": 2747,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "DecoratorTest.get_handlers": {
            "name": "get_handlers",
            "location": 2739,
            "return": [
                "bool",
                "bytes",
                "dict"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "DecoratorTest.test_removeslash": {
            "name": "test_removeslash",
            "location": 2754,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "bytes",
                    "Dict[str, Union[Any, Any, str]]",
                    "dict"
                ]
            }
        },
        "DecoratorTest.test_addslash": {
            "name": "test_addslash",
            "location": 2763,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "bytes",
                    "Dict[str, Union[Any, Any, str]]",
                    "dict"
                ]
            }
        },
        "EtagHandler.get": {
            "name": "get",
            "location": 2777,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "computed_etag": [
                    "str",
                    "bool"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "EtagHandler.compute_etag": {
            "name": "compute_etag",
            "location": 2780,
            "return": [
                "str",
                "float",
                "deque"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "CacheTest.get_handlers": {
            "name": "get_handlers",
            "location": 2775,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "CacheTest.test_wildcard_etag": {
            "name": "test_wildcard_etag",
            "location": 2787,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "computed_etag": [
                    "str",
                    "int"
                ],
                "etags": [
                    "int",
                    "list",
                    "str"
                ]
            }
        },
        "CacheTest.test_strong_etag_match": {
            "name": "test_strong_etag_match",
            "location": 2792,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "computed_etag": [
                    "str",
                    "int"
                ],
                "etags": [
                    "int",
                    "list",
                    "str"
                ]
            }
        },
        "CacheTest.test_multiple_strong_etag_match": {
            "name": "test_multiple_strong_etag_match",
            "location": 2797,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "computed_etag": [
                    "str",
                    "int"
                ],
                "etags": [
                    "int",
                    "list",
                    "str"
                ]
            }
        },
        "CacheTest.test_strong_etag_not_match": {
            "name": "test_strong_etag_not_match",
            "location": 2802,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "computed_etag": [
                    "str",
                    "int"
                ],
                "etags": [
                    "int",
                    "list",
                    "str"
                ]
            }
        },
        "CacheTest.test_multiple_strong_etag_not_match": {
            "name": "test_multiple_strong_etag_not_match",
            "location": 2807,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "computed_etag": [
                    "str",
                    "int"
                ],
                "etags": [
                    "int",
                    "list",
                    "str"
                ]
            }
        },
        "CacheTest.test_weak_etag_match": {
            "name": "test_weak_etag_match",
            "location": 2812,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "computed_etag": [
                    "str",
                    "int"
                ],
                "etags": [
                    "int",
                    "list",
                    "str"
                ]
            }
        },
        "CacheTest.test_multiple_weak_etag_match": {
            "name": "test_multiple_weak_etag_match",
            "location": 2817,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "computed_etag": [
                    "str",
                    "int"
                ],
                "etags": [
                    "int",
                    "list",
                    "str"
                ]
            }
        },
        "CacheTest.test_weak_etag_not_match": {
            "name": "test_weak_etag_not_match",
            "location": 2822,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "computed_etag": [
                    "str",
                    "int"
                ],
                "etags": [
                    "int",
                    "list",
                    "str"
                ]
            }
        },
        "CacheTest.test_multiple_weak_etag_not_match": {
            "name": "test_multiple_weak_etag_not_match",
            "location": 2827,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "computed_etag": [
                    "str",
                    "int"
                ],
                "etags": [
                    "int",
                    "list",
                    "str"
                ]
            }
        },
        "CacheTest._test_etag": {
            "name": "_test_etag",
            "location": 2832,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "computed_etag": [
                    "str",
                    "List[List[int]]",
                    "Optional[Mapping[str, Any]]",
                    "Dict[str, Any]",
                    "bytes"
                ],
                "etags": [
                    "str",
                    "List[List[int]]",
                    "Optional[Mapping[str, Any]]",
                    "Dict[str, Any]",
                    "bytes"
                ],
                "kwargs": [],
                "self": [],
                "status_code": [
                    "int",
                    "float",
                    "bool"
                ]
            },
            "variables": {
                "response": [
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "dict",
                    "Dict[str, Union[Any, Any, str]]"
                ]
            }
        },
        "RequestSummaryTest.test_missing_remote_ip": {
            "name": "test_missing_remote_ip",
            "location": 2850,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "resp": [
                    "int",
                    "Dict[str, str]",
                    "List[int]"
                ]
            }
        },
        "HTTPErrorTest.test_copy": {
            "name": "test_copy",
            "location": 2856,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "e": [
                    "str",
                    "int",
                    "Type[List[str]]",
                    "dict"
                ],
                "e2": [
                    "int",
                    "List[str]",
                    "\"OrderedDict[str, float]\""
                ]
            }
        },
        "ApplicationTest.test_listen": {
            "name": "test_listen",
            "location": 2865,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "app": [],
                "server": [
                    "Dict[str, Dict[str, str]]"
                ]
            }
        },
        "URLSpecReverseTest.test_reverse": {
            "name": "test_reverse",
            "location": 2872,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "URLSpecReverseTest.test_non_reversible": {
            "name": "test_non_reversible",
            "location": 2876,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "paths": [
                    "str",
                    "List[Tuple[str, str]]",
                    "set",
                    "Type[Callable[Any, Any]]"
                ],
                "result": [
                    "List[str]",
                    "str",
                    "List[Dict[str, Any]]"
                ],
                "url_spec": [
                    "str",
                    "Optional[str]",
                    "Dict[int, str]",
                    "Pattern[str]",
                    "Type[str]",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "URLSpecReverseTest.test_reverse_arguments": {
            "name": "test_reverse_arguments",
            "location": 2894,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "RedirectHandlerTest.get_handlers": {
            "name": "get_handlers",
            "location": 2900,
            "return": [
                "bool",
                "Dict[str, str]",
                "bytes"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "RedirectHandlerTest.test_basic_redirect": {
            "name": "test_basic_redirect",
            "location": 2906,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "Dict[Tuple[int, int], str]",
                    "set",
                    "Dict[str, List[str]]",
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "Dict[str, Union[Any, Any, str]]"
                ]
            }
        },
        "RedirectHandlerTest.test_redirect_with_argument": {
            "name": "test_redirect_with_argument",
            "location": 2911,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "Dict[Tuple[int, int], str]",
                    "set",
                    "Dict[str, List[str]]",
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "Dict[str, Union[Any, Any, str]]"
                ]
            }
        },
        "RedirectHandlerTest.test_redirect_with_appending_argument": {
            "name": "test_redirect_with_appending_argument",
            "location": 2916,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "Dict[Tuple[int, int], str]",
                    "set",
                    "Dict[str, List[str]]",
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "Dict[str, Union[Any, Any, str]]"
                ]
            }
        },
        "RedirectHandlerTest.test_redirect_pattern": {
            "name": "test_redirect_pattern",
            "location": 2921,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "Dict[Tuple[int, int], str]",
                    "set",
                    "Dict[str, List[str]]",
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "Dict[str, Union[Any, Any, str]]"
                ]
            }
        },
        "global": {
            "wsgi_safe_tests": [
                "list",
                "int",
                "List[str]"
            ]
        }
    },
    "tornado-5.0.2/tornado/test/windows_test.py": {
        "WindowsTest.test_set_close_exec": {
            "name": "test_set_close_exec",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "r": [
                    "str",
                    "bool",
                    "Dict[str, str]",
                    "RuntimeError",
                    "staticmethod"
                ],
                "s": [],
                "w": [
                    "str"
                ]
            }
        },
        "global": {
            "skipIfNonWindows": [
                "str",
                "Type[List[Any]]",
                "int"
            ]
        }
    },
    "tornado-5.0.2/tornado/test/wsgi_test.py": {
        "wrap_web_tests_application": {
            "name": "wrap_web_tests_application",
            "location": 76,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[str]",
                "Sequence[str]"
            ],
            "arguments": {
                "args": [],
                "kwargs": []
            },
            "variables": {
                "result": [
                    "dict",
                    "Generator[Any, None, None]",
                    "list",
                    "List[str]",
                    "List[Callable[[], Any]]"
                ]
            }
        },
        "wrap_web_tests_adapter": {
            "name": "wrap_web_tests_adapter",
            "location": 91,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[str]",
                "Sequence[str]"
            ],
            "arguments": {
                "args": [],
                "kwargs": []
            },
            "variables": {
                "result": [
                    "dict",
                    "Generator[Any, None, None]",
                    "list",
                    "List[str]",
                    "List[Callable[[], Any]]"
                ]
            }
        },
        "WSGIContainerTest.wsgi_app": {
            "name": "wsgi_app",
            "location": 15,
            "return": [
                "bool",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "args": [],
                "environ": [
                    "Callable[[str, List], None]",
                    "Dict[str, Any]",
                    "Callable"
                ],
                "kwargs": [],
                "self": [],
                "start_response": []
            },
            "variables": {
                "response_headers": [
                    "int",
                    "Dict[str, None]",
                    "Dict[str, str]",
                    "str",
                    "Dict[str, Union[Any, int]]",
                    "dict",
                    "Dict[str, bool]"
                ],
                "status": [
                    "Dict[str, str]",
                    "Type[Tuple[str, Any]]",
                    "bytes",
                    "set",
                    "int",
                    "Type[str]"
                ]
            }
        },
        "WSGIContainerTest.get_app": {
            "name": "get_app",
            "location": 21,
            "return": [],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "WSGIContainerTest.test_simple": {
            "name": "test_simple",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "str",
                    "List[str]",
                    "Tuple[str]",
                    "Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]"
                ]
            }
        },
        "HelloHandler.get": {
            "name": "get",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "PathQuotingHandler.get": {
            "name": "get",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "path": [
                    "str"
                ],
                "self": []
            },
            "variables": {}
        },
        "WSGIApplicationTest.get_app": {
            "name": "get_app",
            "location": 30,
            "return": [
                "str",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "WSGIApplicationTest.test_simple": {
            "name": "test_simple",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "str",
                    "List[str]",
                    "Tuple[str]",
                    "Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]"
                ]
            }
        },
        "WSGIApplicationTest.test_path_quoting": {
            "name": "test_path_quoting",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "response": [
                    "List[str]",
                    "Set[str]",
                    "str",
                    "list",
                    "tuple",
                    "Callable"
                ]
            }
        },
        "WSGIApplicationTest.test_types": {
            "name": "test_types",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "data": [
                    "int",
                    "str",
                    "Dict[str, Any]"
                ],
                "headers": [
                    "Dict[str, str]",
                    "bytes",
                    "Dict[str, Union[bytes, str]]"
                ],
                "response": [
                    "Dict[str, str]"
                ]
            }
        },
        "WSGIConnectionTest.get_app": {
            "name": "get_app",
            "location": 72,
            "return": [
                "str",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "WSGIApplicationWrappedTest.get_app": {
            "name": "get_app",
            "location": 80,
            "return": [],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "app": []
            }
        },
        "WSGIAdapterWrappedTest.get_app": {
            "name": "get_app",
            "location": 95,
            "return": [
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "app": []
            }
        },
        "global": {}
    },
    "tornado-5.0.2/tornado/test/__main__.py": {
        "global": {
            "all": [
                "List[str]",
                "Tuple[str]",
                "Tuple[str, str, str]"
            ]
        }
    }
}