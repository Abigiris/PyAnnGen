{
    "requests-2.22.0/imports/default.py": {
        "__getattr__": {
            "name": "__getattr__",
            "location": 3,
            "return": [
                "Any"
            ],
            "arguments": {
                "name": []
            }
        },
        "global": {}
    },
    "requests-2.22.0/pyi/conf.py": {
        "global": {
            "add_function_parentheses": [
                "bool"
            ],
            "add_module_names": [
                "bool"
            ],
            "author": [
                "str"
            ],
            "copyright": [
                "str"
            ],
            "epub_author": [
                "str"
            ],
            "epub_copyright": [
                "str"
            ],
            "epub_exclude_files": [
                "List[str]"
            ],
            "epub_publisher": [
                "str"
            ],
            "epub_title": [
                "str"
            ],
            "exclude_patterns": [
                "List[str]"
            ],
            "extensions": [
                "List[str]"
            ],
            "html_show_copyright": [
                "bool"
            ],
            "html_show_sourcelink": [
                "bool"
            ],
            "html_show_sphinx": [
                "bool"
            ],
            "html_sidebars": [
                "Dict[(str, List[str])]"
            ],
            "html_static_path": [
                "List[str]"
            ],
            "html_theme": [
                "str"
            ],
            "html_theme_options": [
                "Dict[(str, Union[(bool, str)])]"
            ],
            "html_use_smartypants": [
                "bool"
            ],
            "htmlhelp_basename": [
                "str"
            ],
            "intersphinx_mapping": [
                "Dict[(str, Tuple[(str, None)])]"
            ],
            "language": [
                "None"
            ],
            "latex_documents": [
                "List[Tuple[(str, str, str, str, str)]]"
            ],
            "latex_elements": [
                "Dict[(nothing, nothing)]"
            ],
            "man_pages": [
                "List[Tuple[(str, str, str, List[str], int)]]"
            ],
            "master_doc": [
                "str"
            ],
            "project": [
                "str"
            ],
            "pygments_style": [
                "str"
            ],
            "release": [
                "Any"
            ],
            "source_suffix": [
                "str"
            ],
            "templates_path": [
                "List[str]"
            ],
            "texinfo_documents": [
                "List[Tuple[(str, str, str, str, str, str, str)]]"
            ],
            "todo_include_todos": [
                "bool"
            ],
            "version": [
                "Any"
            ]
        }
    },
    "requests-2.22.0/pyi/flask_theme_support.py": {
        "global": {
            "Comment": [
                "pygments.token._TokenType"
            ],
            "Error": [
                "pygments.token._TokenType"
            ],
            "Generic": [
                "pygments.token._TokenType"
            ],
            "Keyword": [
                "pygments.token._TokenType"
            ],
            "Literal": [
                "pygments.token._TokenType"
            ],
            "Name": [
                "pygments.token._TokenType"
            ],
            "Number": [
                "pygments.token._TokenType"
            ],
            "Operator": [
                "pygments.token._TokenType"
            ],
            "Other": [
                "pygments.token._TokenType"
            ],
            "Punctuation": [
                "pygments.token._TokenType"
            ],
            "String": [
                "pygments.token._TokenType"
            ],
            "Style": [
                "Type[pygments.style.Style]"
            ],
            "Whitespace": [
                "pygments.token._TokenType"
            ]
        },
        "FlaskyStyle": {
            "background_color": [
                "str"
            ],
            "default_style": [
                "str"
            ],
            "styles": [
                "Dict[(pygments.token._TokenType, str)]"
            ]
        }
    },
    "requests-2.22.0/pyi/setup.py": {
        "open": {
            "name": "open",
            "location": 32,
            "return": [
                "codecs.StreamReaderWriter"
            ],
            "arguments": {
                "filename": [
                    "str"
                ],
                "mode": [
                    "str"
                ],
                "encoding": [
                    "Optional[str]"
                ],
                "errors": [
                    "str"
                ],
                "buffering": [
                    "int"
                ]
            }
        },
        "setup": {
            "name": "setup",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "PyTest.finalize_options": {
            "name": "finalize_options",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PyTest.initialize_options": {
            "name": "initialize_options",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PyTest.run_tests": {
            "name": "run_tests",
            "location": 30,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "global": {
            "TestCommand": [
                "Type[setuptools.command.test.test]"
            ],
            "about": [
                "Dict[(nothing, nothing)]"
            ],
            "f": [
                "codecs.StreamReaderWriter"
            ],
            "here": [
                "str"
            ],
            "history": [
                "str"
            ],
            "packages": [
                "List[str]"
            ],
            "readme": [
                "str"
            ],
            "requires": [
                "List[str]"
            ],
            "test_requirements": [
                "List[str]"
            ]
        },
        "PyTest": {
            "pytest_args": [
                "List[str]"
            ],
            "test_args": [
                "List[nothing]"
            ],
            "test_suite": [
                "bool"
            ],
            "user_options": [
                "List[Tuple[(str, str, str)]]"
            ]
        }
    },
    "requests-2.22.0/pyi/requests/adapters.py": {
        "parse_url": {
            "name": "parse_url",
            "location": 85,
            "return": [
                "Any"
            ],
            "arguments": {
                "url": []
            }
        },
        "proxy_from_url": {
            "name": "proxy_from_url",
            "location": 86,
            "return": [
                "Any"
            ],
            "arguments": {
                "url": []
            }
        },
        "BaseAdapter.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseAdapter.close": {
            "name": "close",
            "location": 58,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseAdapter.send": {
            "name": "send",
            "location": 59,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "stream": [],
                "timeout": [],
                "verify": [],
                "cert": [],
                "proxies": []
            }
        },
        "HTTPAdapter.__getstate__": {
            "name": "__getstate__",
            "location": 71,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPAdapter.__init__": {
            "name": "__init__",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pool_connections": [],
                "pool_maxsize": [],
                "max_retries": [],
                "pool_block": []
            }
        },
        "HTTPAdapter.__setstate__": {
            "name": "__setstate__",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "HTTPAdapter.add_headers": {
            "name": "add_headers",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "HTTPAdapter.build_response": {
            "name": "build_response",
            "location": 75,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "req": [],
                "resp": []
            }
        },
        "HTTPAdapter.cert_verify": {
            "name": "cert_verify",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conn": [],
                "url": [],
                "verify": [],
                "cert": []
            }
        },
        "HTTPAdapter.close": {
            "name": "close",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPAdapter.get_connection": {
            "name": "get_connection",
            "location": 78,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "url": [],
                "proxies": []
            }
        },
        "HTTPAdapter.init_poolmanager": {
            "name": "init_poolmanager",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connections": [],
                "maxsize": [],
                "block": []
            }
        },
        "HTTPAdapter.proxy_headers": {
            "name": "proxy_headers",
            "location": 80,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "proxy": []
            }
        },
        "HTTPAdapter.proxy_manager_for": {
            "name": "proxy_manager_for",
            "location": 81,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "proxy": []
            }
        },
        "HTTPAdapter.request_url": {
            "name": "request_url",
            "location": 82,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "proxies": []
            }
        },
        "HTTPAdapter.send": {
            "name": "send",
            "location": 83,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "stream": [],
                "timeout": [],
                "verify": [],
                "cert": [],
                "proxies": []
            }
        },
        "global": {
            "CaseInsensitiveDict": [
                "Any"
            ],
            "ClosedPoolError": [
                "Type[urllib3.exceptions.ClosedPoolError]"
            ],
            "ConnectTimeout": [
                "Any"
            ],
            "ConnectTimeoutError": [
                "Type[urllib3.exceptions.ConnectTimeoutError]"
            ],
            "ConnectionError": [
                "Any"
            ],
            "DEFAULT_CA_BUNDLE_PATH": [
                "Any"
            ],
            "DEFAULT_POOLBLOCK": [
                "bool"
            ],
            "DEFAULT_POOLSIZE": [
                "int"
            ],
            "DEFAULT_POOL_TIMEOUT": [
                "None"
            ],
            "DEFAULT_RETRIES": [
                "int"
            ],
            "HTTPResponse": [
                "Type[urllib3.response.HTTPResponse]"
            ],
            "InvalidProxyURL": [
                "Any"
            ],
            "InvalidSchema": [
                "Any"
            ],
            "InvalidURL": [
                "Any"
            ],
            "LocationValueError": [
                "Type[urllib3.exceptions.LocationValueError]"
            ],
            "MaxRetryError": [
                "Type[urllib3.exceptions.MaxRetryError]"
            ],
            "NewConnectionError": [
                "Type[urllib3.exceptions.NewConnectionError]"
            ],
            "PoolManager": [
                "Type[urllib3.poolmanager.PoolManager]"
            ],
            "ProtocolError": [
                "Type[urllib3.exceptions.ProtocolError]"
            ],
            "ProxyError": [
                "Any"
            ],
            "ReadTimeout": [
                "Any"
            ],
            "ReadTimeoutError": [
                "Type[urllib3.exceptions.ReadTimeoutError]"
            ],
            "Response": [
                "Any"
            ],
            "ResponseError": [
                "Type[urllib3.exceptions.ResponseError]"
            ],
            "Retry": [
                "Type[urllib3.util.retry.Retry]"
            ],
            "RetryError": [
                "Any"
            ],
            "SOCKSProxyManager": [
                "Any"
            ],
            "SSLError": [
                "Any"
            ],
            "TimeoutSauce": [
                "Type[urllib3.util.timeout.Timeout]"
            ],
            "_HTTPError": [
                "Type[urllib3.exceptions.HTTPError]"
            ],
            "_ProxyError": [
                "Type[urllib3.exceptions.ProxyError]"
            ],
            "_SSLError": [
                "Type[urllib3.exceptions.SSLError]"
            ],
            "_basic_auth_str": [
                "Any"
            ],
            "basestring": [
                "Any"
            ],
            "extract_cookies_to_jar": [
                "Any"
            ],
            "extract_zipped_paths": [
                "Any"
            ],
            "get_auth_from_url": [
                "Any"
            ],
            "get_encoding_from_headers": [
                "Any"
            ],
            "prepend_scheme_if_needed": [
                "Any"
            ],
            "select_proxy": [
                "Any"
            ],
            "urldefragauth": [
                "Any"
            ],
            "urlparse": [
                "Any"
            ]
        },
        "BaseAdapter": {
            "__doc__": [
                "str"
            ]
        },
        "HTTPAdapter": {
            "__attrs__": [
                "List[str]"
            ],
            "__doc__": [
                "str"
            ],
            "_pool_block": [
                "Any"
            ],
            "_pool_connections": [
                "Any"
            ],
            "_pool_maxsize": [
                "Any"
            ],
            "config": [
                "Dict[(nothing, nothing)]"
            ],
            "max_retries": [
                "urllib3.util.retry.Retry"
            ],
            "poolmanager": [
                "urllib3.poolmanager.PoolManager"
            ],
            "proxy_manager": [
                "dict"
            ]
        }
    },
    "requests-2.22.0/pyi/requests/api.py": {
        "delete": {
            "name": "delete",
            "location": 7,
            "return": [
                "Any"
            ],
            "arguments": {
                "url": []
            }
        },
        "get": {
            "name": "get",
            "location": 8,
            "return": [
                "Any"
            ],
            "arguments": {
                "url": [],
                "params": []
            }
        },
        "head": {
            "name": "head",
            "location": 9,
            "return": [
                "Any"
            ],
            "arguments": {
                "url": []
            }
        },
        "options": {
            "name": "options",
            "location": 10,
            "return": [
                "Any"
            ],
            "arguments": {
                "url": []
            }
        },
        "patch": {
            "name": "patch",
            "location": 11,
            "return": [
                "Any"
            ],
            "arguments": {
                "url": [],
                "data": []
            }
        },
        "post": {
            "name": "post",
            "location": 12,
            "return": [
                "Any"
            ],
            "arguments": {
                "url": [],
                "data": [],
                "json": []
            }
        },
        "put": {
            "name": "put",
            "location": 13,
            "return": [
                "Any"
            ],
            "arguments": {
                "url": [],
                "data": []
            }
        },
        "request": {
            "name": "request",
            "location": 14,
            "return": [
                "Any"
            ],
            "arguments": {
                "method": [],
                "url": []
            }
        },
        "global": {
            "sessions": [
                "Any"
            ]
        }
    },
    "requests-2.22.0/pyi/requests/auth.py": {
        "_basic_auth_str": {
            "name": "_basic_auth_str",
            "location": 59,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "username": [],
                "password": []
            }
        },
        "b64encode": {
            "name": "b64encode",
            "location": 60,
            "return": [
                "bytes"
            ],
            "arguments": {
                "s": [
                    "Union[(array.array, bytes, ctypes._CData, mmap.mmap)]"
                ],
                "altchars": [
                    "Optional[Union[(array.array, bytes, ctypes._CData, mmap.mmap)]]"
                ]
            }
        },
        "AuthBase.__call__": {
            "name": "__call__",
            "location": 28,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "r": []
            }
        },
        "HTTPBasicAuth.__call__": {
            "name": "__call__",
            "location": 34,
            "return": [
                "_T0"
            ],
            "arguments": {
                "self": [],
                "r": [
                    "_T0"
                ]
            }
        },
        "HTTPBasicAuth.__eq__": {
            "name": "__eq__",
            "location": 35,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "HTTPBasicAuth.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "username": [],
                "password": []
            }
        },
        "HTTPBasicAuth.__ne__": {
            "name": "__ne__",
            "location": 37,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "HTTPDigestAuth.__call__": {
            "name": "__call__",
            "location": 44,
            "return": [
                "_T0"
            ],
            "arguments": {
                "self": [],
                "r": [
                    "_T0"
                ]
            }
        },
        "HTTPDigestAuth.__eq__": {
            "name": "__eq__",
            "location": 45,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "HTTPDigestAuth.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "username": [],
                "password": []
            }
        },
        "HTTPDigestAuth.__ne__": {
            "name": "__ne__",
            "location": 47,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "HTTPDigestAuth.build_digest_header": {
            "name": "build_digest_header",
            "location": 48,
            "return": [
                "Optional[builtins.str]"
            ],
            "arguments": {
                "self": [],
                "method": [],
                "url": []
            }
        },
        "HTTPDigestAuth.handle_401": {
            "name": "handle_401",
            "location": 49,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "r": []
            }
        },
        "HTTPDigestAuth.handle_redirect": {
            "name": "handle_redirect",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "r": []
            }
        },
        "HTTPDigestAuth.init_per_thread_state": {
            "name": "init_per_thread_state",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPProxyAuth.__call__": {
            "name": "__call__",
            "location": 57,
            "return": [
                "_T0"
            ],
            "arguments": {
                "self": [],
                "r": [
                    "_T0"
                ]
            }
        },
        "global": {
            "CONTENT_TYPE_FORM_URLENCODED": [
                "builtins.str"
            ],
            "CONTENT_TYPE_MULTI_PART": [
                "builtins.str"
            ],
            "basestring": [
                "Any"
            ],
            "extract_cookies_to_jar": [
                "Any"
            ],
            "parse_dict_header": [
                "Any"
            ],
            "str": [
                "Any"
            ],
            "to_native_string": [
                "Any"
            ],
            "urlparse": [
                "Any"
            ]
        },
        "AuthBase": {
            "__doc__": [
                "builtins.str"
            ]
        },
        "HTTPBasicAuth": {
            "__doc__": [
                "builtins.str"
            ],
            "password": [
                "Any"
            ],
            "username": [
                "Any"
            ]
        },
        "HTTPDigestAuth": {
            "__doc__": [
                "builtins.str"
            ],
            "_thread_local": [
                "threading.local"
            ],
            "password": [
                "Any"
            ],
            "username": [
                "Any"
            ]
        },
        "HTTPProxyAuth": {
            "__doc__": [
                "builtins.str"
            ],
            "password": [
                "Any"
            ],
            "username": [
                "Any"
            ]
        }
    },
    "requests-2.22.0/pyi/requests/certs.py": {
        "where": {
            "name": "where",
            "location": 3,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "global": {}
    },
    "requests-2.22.0/pyi/requests/compat.py": {
        "getproxies": {
            "name": "getproxies",
            "location": 35,
            "return": [
                "Dict[(builtins.str, builtins.str)]"
            ],
            "arguments": {}
        },
        "parse_http_list": {
            "name": "parse_http_list",
            "location": 36,
            "return": [
                "List[builtins.str]"
            ],
            "arguments": {
                "s": [
                    "builtins.str"
                ]
            }
        },
        "proxy_bypass": {
            "name": "proxy_bypass",
            "location": 37,
            "return": [
                "Any"
            ],
            "arguments": {
                "host": [
                    "builtins.str"
                ],
                "proxies": [
                    "Optional[typing.Mapping[(builtins.str, builtins.str)]]"
                ]
            }
        },
        "quote": {
            "name": "quote",
            "location": 41,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "string": [
                    "Union[(bytearray, builtins.bytes, memoryview)]"
                ],
                "safe": [
                    "Union[(bytearray, builtins.bytes, memoryview, builtins.str)]"
                ]
            }
        },
        "quote_plus": {
            "name": "quote_plus",
            "location": 45,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "string": [
                    "Union[(bytearray, builtins.bytes, memoryview)]"
                ],
                "safe": [
                    "Union[(bytearray, builtins.bytes, memoryview, builtins.str)]"
                ]
            }
        },
        "unquote": {
            "name": "unquote",
            "location": 46,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "string": [
                    "builtins.str"
                ],
                "encoding": [
                    "builtins.str"
                ],
                "errors": [
                    "builtins.str"
                ]
            }
        },
        "unquote_plus": {
            "name": "unquote_plus",
            "location": 47,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "string": [
                    "builtins.str"
                ],
                "encoding": [
                    "builtins.str"
                ],
                "errors": [
                    "builtins.str"
                ]
            }
        },
        "urldefrag": {
            "name": "urldefrag",
            "location": 51,
            "return": [
                "urllib.parse.DefragResultBytes"
            ],
            "arguments": {
                "url": [
                    "Optional[Union[(bytearray, builtins.bytes, memoryview)]]"
                ]
            }
        },
        "urlencode": {
            "name": "urlencode",
            "location": 52,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "query": [
                    "Union[(typing.Mapping, Sequence[Tuple[(Any, Any)]])]"
                ],
                "doseq": [
                    "bool"
                ],
                "safe": [
                    "Union[(bytearray, builtins.bytes, memoryview, builtins.str)]"
                ],
                "encoding": [
                    "builtins.str"
                ],
                "errors": [
                    "builtins.str"
                ],
                "quote_via": [
                    "typing.Callable[([AnyStr, Union[(bytearray, builtins.bytes, memoryview, builtins.str)], builtins.str, builtins.str], builtins.str)]"
                ]
            }
        },
        "urljoin": {
            "name": "urljoin",
            "location": 53,
            "return": [
                "AnyStr"
            ],
            "arguments": {
                "base": [
                    "AnyStr"
                ],
                "url": [
                    "Optional[AnyStr]"
                ],
                "allow_fragments": [
                    "bool"
                ]
            }
        },
        "urlparse": {
            "name": "urlparse",
            "location": 57,
            "return": [
                "urllib.parse.ParseResultBytes"
            ],
            "arguments": {
                "url": [
                    "Optional[Union[(bytearray, builtins.bytes, memoryview)]]"
                ],
                "scheme": [
                    "Optional[Union[(bytearray, builtins.bytes, memoryview)]]"
                ],
                "allow_fragments": [
                    "bool"
                ]
            }
        },
        "urlsplit": {
            "name": "urlsplit",
            "location": 61,
            "return": [
                "urllib.parse.SplitResultBytes"
            ],
            "arguments": {
                "url": [
                    "Optional[Union[(bytearray, builtins.bytes, memoryview)]]"
                ],
                "scheme": [
                    "Optional[Union[(bytearray, builtins.bytes, memoryview)]]"
                ],
                "allow_fragments": [
                    "bool"
                ]
            }
        },
        "urlunparse": {
            "name": "urlunparse",
            "location": 62,
            "return": [
                "AnyStr"
            ],
            "arguments": {
                "components": [
                    "Union[(Sequence[Optional[AnyStr]], Tuple[(Optional[AnyStr], Optional[AnyStr], Optional[AnyStr], Optional[AnyStr], Optional[AnyStr], Optional[AnyStr])])]"
                ]
            }
        },
        "global": {
            "Callable": [
                "type"
            ],
            "Mapping": [
                "type"
            ],
            "Morsel": [
                "Type[http.cookies.Morsel]"
            ],
            "MutableMapping": [
                "type"
            ],
            "OrderedDict": [
                "Type[collections.OrderedDict]"
            ],
            "StringIO": [
                "Type[io.StringIO]"
            ],
            "_ver": [
                "Tuple[(int, int, int, builtins.str, int)]"
            ],
            "basestring": [
                "Tuple[(Type[builtins.str], Type[builtins.bytes])]"
            ],
            "builtin_str": [
                "Type[builtins.str]"
            ],
            "bytes": [
                "Type[builtins.bytes]"
            ],
            "getproxies_environment": [
                "Any"
            ],
            "integer_types": [
                "Tuple[Type[int]]"
            ],
            "is_py2": [
                "bool"
            ],
            "is_py3": [
                "bool"
            ],
            "json": [
                "module"
            ],
            "numeric_types": [
                "Tuple[(Type[int], Type[float])]"
            ],
            "proxy_bypass_environment": [
                "Any"
            ],
            "str": [
                "Type[builtins.str]"
            ]
        }
    },
    "requests-2.22.0/pyi/requests/cookies.py": {
        "_copy_cookie_jar": {
            "name": "_copy_cookie_jar",
            "location": 78,
            "return": [
                "Any"
            ],
            "arguments": {
                "jar": []
            }
        },
        "cookiejar_from_dict": {
            "name": "cookiejar_from_dict",
            "location": 79,
            "return": [
                "Union[(RequestsCookieJar, _T1)]"
            ],
            "arguments": {
                "cookie_dict": [],
                "cookiejar": [
                    "_T1"
                ],
                "overwrite": []
            }
        },
        "create_cookie": {
            "name": "create_cookie",
            "location": 80,
            "return": [
                "cookielib.Cookie"
            ],
            "arguments": {
                "name": [],
                "value": []
            }
        },
        "extract_cookies_to_jar": {
            "name": "extract_cookies_to_jar",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "jar": [],
                "request": [],
                "response": []
            }
        },
        "get_cookie_header": {
            "name": "get_cookie_header",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "jar": [],
                "request": []
            }
        },
        "merge_cookies": {
            "name": "merge_cookies",
            "location": 83,
            "return": [
                "Union[(RequestsCookieJar, _T0)]"
            ],
            "arguments": {
                "cookiejar": [
                    "_T0"
                ],
                "cookies": []
            }
        },
        "morsel_to_cookie": {
            "name": "morsel_to_cookie",
            "location": 84,
            "return": [
                "cookielib.Cookie"
            ],
            "arguments": {
                "morsel": []
            }
        },
        "remove_cookie_by_name": {
            "name": "remove_cookie_by_name",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "cookiejar": [],
                "name": [],
                "domain": [],
                "path": []
            }
        },
        "to_native_string": {
            "name": "to_native_string",
            "location": 86,
            "return": [
                "Any"
            ],
            "arguments": {
                "string": [],
                "encoding": []
            }
        },
        "urlparse": {
            "name": "urlparse",
            "location": 90,
            "return": [
                "urllib.parse.ParseResultBytes"
            ],
            "arguments": {
                "url": [
                    "Optional[bytes]"
                ],
                "scheme": [
                    "Optional[bytes]"
                ],
                "allow_fragments": [
                    "bool"
                ]
            }
        },
        "urlunparse": {
            "name": "urlunparse",
            "location": 91,
            "return": [
                "AnyStr"
            ],
            "arguments": {
                "components": [
                    "Union[(Sequence[Optional[AnyStr]], Tuple[(Optional[AnyStr], Optional[AnyStr], Optional[AnyStr], Optional[AnyStr], Optional[AnyStr], Optional[AnyStr])])]"
                ]
            }
        },
        "MockRequest.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "MockRequest.add_header": {
            "name": "add_header",
            "location": 32,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "val": []
            }
        },
        "MockRequest.add_unredirected_header": {
            "name": "add_unredirected_header",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "value": []
            }
        },
        "MockRequest.get_full_url": {
            "name": "get_full_url",
            "location": 34,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockRequest.get_header": {
            "name": "get_header",
            "location": 35,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "default": []
            }
        },
        "MockRequest.get_host": {
            "name": "get_host",
            "location": 36,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockRequest.get_new_headers": {
            "name": "get_new_headers",
            "location": 37,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockRequest.get_origin_req_host": {
            "name": "get_origin_req_host",
            "location": 38,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockRequest.get_type": {
            "name": "get_type",
            "location": 39,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockRequest.has_header": {
            "name": "has_header",
            "location": 40,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "MockRequest.is_unverifiable": {
            "name": "is_unverifiable",
            "location": 41,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockResponse.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "headers": []
            }
        },
        "MockResponse.getheaders": {
            "name": "getheaders",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "MockResponse.info": {
            "name": "info",
            "location": 48,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestsCookieJar.__contains__": {
            "name": "__contains__",
            "location": 53,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "RequestsCookieJar.__delitem__": {
            "name": "__delitem__",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "RequestsCookieJar.__getitem__": {
            "name": "__getitem__",
            "location": 55,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "RequestsCookieJar.__getstate__": {
            "name": "__getstate__",
            "location": 56,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestsCookieJar.__setitem__": {
            "name": "__setitem__",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "value": []
            }
        },
        "RequestsCookieJar.__setstate__": {
            "name": "__setstate__",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "RequestsCookieJar._find": {
            "name": "_find",
            "location": 59,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "domain": [],
                "path": []
            }
        },
        "RequestsCookieJar._find_no_duplicates": {
            "name": "_find_no_duplicates",
            "location": 60,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "domain": [],
                "path": []
            }
        },
        "RequestsCookieJar.copy": {
            "name": "copy",
            "location": 61,
            "return": [
                "_TRequestsCookieJar"
            ],
            "arguments": {
                "self": [
                    "_TRequestsCookieJar"
                ]
            }
        },
        "RequestsCookieJar.get": {
            "name": "get",
            "location": 62,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "default": [],
                "domain": [],
                "path": []
            }
        },
        "RequestsCookieJar.get_dict": {
            "name": "get_dict",
            "location": 63,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "domain": [],
                "path": []
            }
        },
        "RequestsCookieJar.get_policy": {
            "name": "get_policy",
            "location": 64,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestsCookieJar.items": {
            "name": "items",
            "location": 65,
            "return": [
                "List[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestsCookieJar.iteritems": {
            "name": "iteritems",
            "location": 66,
            "return": [
                "Generator[(Tuple[(Any, Any)], Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestsCookieJar.iterkeys": {
            "name": "iterkeys",
            "location": 67,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestsCookieJar.itervalues": {
            "name": "itervalues",
            "location": 68,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestsCookieJar.keys": {
            "name": "keys",
            "location": 69,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestsCookieJar.list_domains": {
            "name": "list_domains",
            "location": 70,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestsCookieJar.list_paths": {
            "name": "list_paths",
            "location": 71,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestsCookieJar.multiple_domains": {
            "name": "multiple_domains",
            "location": 72,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestsCookieJar.set": {
            "name": "set",
            "location": 73,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "value": []
            }
        },
        "RequestsCookieJar.set_cookie": {
            "name": "set_cookie",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cookie": []
            }
        },
        "RequestsCookieJar.update": {
            "name": "update",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "RequestsCookieJar.values": {
            "name": "values",
            "location": 76,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "global": {
            "Morsel": [
                "Type[http.cookies.Morsel]"
            ],
            "MutableMapping": [
                "Any"
            ],
            "threading": [
                "Any"
            ]
        },
        "CookieConflictError": {
            "__doc__": [
                "str"
            ]
        },
        "MockRequest": {
            "__doc__": [
                "str"
            ],
            "_new_headers": [
                "dict"
            ],
            "_r": [
                "Any"
            ],
            "host": [
                "Annotated[(Any, 'property')]"
            ],
            "origin_req_host": [
                "Annotated[(Any, 'property')]"
            ],
            "type": [
                "Any"
            ],
            "unverifiable": [
                "Annotated[(bool, 'property')]"
            ]
        },
        "MockResponse": {
            "__doc__": [
                "str"
            ],
            "_headers": [
                "Any"
            ]
        },
        "RequestsCookieJar": {
            "__doc__": [
                "str"
            ],
            "_cookies_lock": [
                "Any"
            ]
        }
    },
    "requests-2.22.0/pyi/requests/exceptions.py": {
        "RequestException.__init__": {
            "name": "__init__",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "global": {
            "BaseHTTPError": [
                "Type[urllib3.exceptions.HTTPError]"
            ]
        },
        "ChunkedEncodingError": {
            "__doc__": [
                "str"
            ],
            "request": [
                "Any"
            ],
            "response": [
                "Any"
            ]
        },
        "ConnectTimeout": {
            "__doc__": [
                "str"
            ],
            "request": [
                "Any"
            ],
            "response": [
                "Any"
            ]
        },
        "ConnectionError": {
            "__doc__": [
                "str"
            ],
            "request": [
                "Any"
            ],
            "response": [
                "Any"
            ]
        },
        "ContentDecodingError": {
            "__doc__": [
                "str"
            ],
            "request": [
                "Any"
            ],
            "response": [
                "Any"
            ]
        },
        "FileModeWarning": {
            "__doc__": [
                "str"
            ]
        },
        "HTTPError": {
            "__doc__": [
                "str"
            ],
            "request": [
                "Any"
            ],
            "response": [
                "Any"
            ]
        },
        "InvalidHeader": {
            "__doc__": [
                "str"
            ],
            "request": [
                "Any"
            ],
            "response": [
                "Any"
            ]
        },
        "InvalidProxyURL": {
            "__doc__": [
                "str"
            ],
            "request": [
                "Any"
            ],
            "response": [
                "Any"
            ]
        },
        "InvalidSchema": {
            "__doc__": [
                "str"
            ],
            "request": [
                "Any"
            ],
            "response": [
                "Any"
            ]
        },
        "InvalidURL": {
            "__doc__": [
                "str"
            ],
            "request": [
                "Any"
            ],
            "response": [
                "Any"
            ]
        },
        "MissingSchema": {
            "__doc__": [
                "str"
            ],
            "request": [
                "Any"
            ],
            "response": [
                "Any"
            ]
        },
        "ProxyError": {
            "__doc__": [
                "str"
            ],
            "request": [
                "Any"
            ],
            "response": [
                "Any"
            ]
        },
        "ReadTimeout": {
            "__doc__": [
                "str"
            ],
            "request": [
                "Any"
            ],
            "response": [
                "Any"
            ]
        },
        "RequestException": {
            "__doc__": [
                "str"
            ],
            "request": [
                "Any"
            ],
            "response": [
                "Any"
            ]
        },
        "RequestsDependencyWarning": {
            "__doc__": [
                "str"
            ]
        },
        "RequestsWarning": {
            "__doc__": [
                "str"
            ]
        },
        "RetryError": {
            "__doc__": [
                "str"
            ],
            "request": [
                "Any"
            ],
            "response": [
                "Any"
            ]
        },
        "SSLError": {
            "__doc__": [
                "str"
            ],
            "request": [
                "Any"
            ],
            "response": [
                "Any"
            ]
        },
        "StreamConsumedError": {
            "__doc__": [
                "str"
            ],
            "request": [
                "Any"
            ],
            "response": [
                "Any"
            ]
        },
        "Timeout": {
            "__doc__": [
                "str"
            ],
            "request": [
                "Any"
            ],
            "response": [
                "Any"
            ]
        },
        "TooManyRedirects": {
            "__doc__": [
                "str"
            ],
            "request": [
                "Any"
            ],
            "response": [
                "Any"
            ]
        },
        "URLRequired": {
            "__doc__": [
                "str"
            ],
            "request": [
                "Any"
            ],
            "response": [
                "Any"
            ]
        },
        "UnrewindableBodyError": {
            "__doc__": [
                "str"
            ],
            "request": [
                "Any"
            ],
            "response": [
                "Any"
            ]
        }
    },
    "requests-2.22.0/pyi/requests/help.py": {
        "_implementation": {
            "name": "_implementation",
            "location": 19,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {}
        },
        "info": {
            "name": "info",
            "location": 20,
            "return": [
                "Dict[(str, Union[(bool, Dict[(str, Any)])])]"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "global": {
            "OpenSSL": [
                "Optional[module]"
            ],
            "cryptography": [
                "Optional[module]"
            ],
            "print_function": [
                "__future__._Feature"
            ],
            "pyopenssl": [
                "Any"
            ],
            "requests_version": [
                "Any"
            ]
        }
    },
    "requests-2.22.0/pyi/requests/hooks.py": {
        "default_hooks": {
            "name": "default_hooks",
            "location": 7,
            "return": [
                "Dict[(str, List[nothing])]"
            ],
            "arguments": {}
        },
        "dispatch_hook": {
            "name": "dispatch_hook",
            "location": 8,
            "return": [
                "Any"
            ],
            "arguments": {
                "key": [],
                "hooks": [],
                "hook_data": []
            }
        },
        "global": {
            "HOOKS": [
                "List[str]"
            ]
        }
    },
    "requests-2.22.0/pyi/requests/models.py": {
        "encode_multipart_formdata": {
            "name": "encode_multipart_formdata",
            "location": 155,
            "return": [
                "Any"
            ],
            "arguments": {
                "fields": [],
                "boundary": []
            }
        },
        "parse_url": {
            "name": "parse_url",
            "location": 156,
            "return": [
                "Any"
            ],
            "arguments": {
                "url": []
            }
        },
        "PreparedRequest.__init__": {
            "name": "__init__",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PreparedRequest.__repr__": {
            "name": "__repr__",
            "location": 75,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PreparedRequest._get_idna_encoded_host": {
            "name": "_get_idna_encoded_host",
            "location": 77,
            "return": [
                "Any"
            ],
            "arguments": {
                "host": []
            }
        },
        "PreparedRequest.copy": {
            "name": "copy",
            "location": 78,
            "return": [
                "_TPreparedRequest"
            ],
            "arguments": {
                "self": [
                    "_TPreparedRequest"
                ]
            }
        },
        "PreparedRequest.prepare": {
            "name": "prepare",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "method": [],
                "url": [],
                "headers": [],
                "files": [],
                "data": [],
                "params": [],
                "auth": [],
                "cookies": [],
                "hooks": [],
                "json": []
            }
        },
        "PreparedRequest.prepare_auth": {
            "name": "prepare_auth",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "auth": [],
                "url": []
            }
        },
        "PreparedRequest.prepare_body": {
            "name": "prepare_body",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [],
                "files": [],
                "json": []
            }
        },
        "PreparedRequest.prepare_content_length": {
            "name": "prepare_content_length",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "body": []
            }
        },
        "PreparedRequest.prepare_cookies": {
            "name": "prepare_cookies",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cookies": []
            }
        },
        "PreparedRequest.prepare_headers": {
            "name": "prepare_headers",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "headers": []
            }
        },
        "PreparedRequest.prepare_hooks": {
            "name": "prepare_hooks",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hooks": []
            }
        },
        "PreparedRequest.prepare_method": {
            "name": "prepare_method",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "method": []
            }
        },
        "PreparedRequest.prepare_url": {
            "name": "prepare_url",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [],
                "params": []
            }
        },
        "Request.__init__": {
            "name": "__init__",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "method": [],
                "url": [],
                "headers": [],
                "files": [],
                "data": [],
                "params": [],
                "auth": [],
                "cookies": [],
                "hooks": [],
                "json": []
            }
        },
        "Request.__repr__": {
            "name": "__repr__",
            "location": 102,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Request.prepare": {
            "name": "prepare",
            "location": 103,
            "return": [
                "PreparedRequest"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestEncodingMixin._encode_files": {
            "name": "_encode_files",
            "location": 108,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "files": [],
                "data": []
            }
        },
        "RequestEncodingMixin._encode_params": {
            "name": "_encode_params",
            "location": 110,
            "return": [
                "Any"
            ],
            "arguments": {
                "data": []
            }
        },
        "RequestHooksMixin.deregister_hook": {
            "name": "deregister_hook",
            "location": 113,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "event": [],
                "hook": []
            }
        },
        "RequestHooksMixin.register_hook": {
            "name": "register_hook",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [],
                "hook": []
            }
        },
        "Response.__bool__": {
            "name": "__bool__",
            "location": 140,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.__enter__": {
            "name": "__enter__",
            "location": 141,
            "return": [
                "_TResponse"
            ],
            "arguments": {
                "self": [
                    "_TResponse"
                ]
            }
        },
        "Response.__exit__": {
            "name": "__exit__",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.__getstate__": {
            "name": "__getstate__",
            "location": 143,
            "return": [
                "Dict[(builtins.str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.__init__": {
            "name": "__init__",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.__iter__": {
            "name": "__iter__",
            "location": 145,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.__nonzero__": {
            "name": "__nonzero__",
            "location": 146,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.__repr__": {
            "name": "__repr__",
            "location": 147,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.__setstate__": {
            "name": "__setstate__",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "Response.close": {
            "name": "close",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.iter_content": {
            "name": "iter_content",
            "location": 150,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "chunk_size": [],
                "decode_unicode": []
            }
        },
        "Response.iter_lines": {
            "name": "iter_lines",
            "location": 151,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "chunk_size": [],
                "decode_unicode": [],
                "delimiter": []
            }
        },
        "Response.json": {
            "name": "json",
            "location": 152,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.raise_for_status": {
            "name": "raise_for_status",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "global": {
            "CONTENT_CHUNK_SIZE": [
                "int"
            ],
            "Callable": [
                "Any"
            ],
            "CaseInsensitiveDict": [
                "Any"
            ],
            "ChunkedEncodingError": [
                "Any"
            ],
            "ConnectionError": [
                "Any"
            ],
            "ContentDecodingError": [
                "Any"
            ],
            "DEFAULT_REDIRECT_LIMIT": [
                "int"
            ],
            "DecodeError": [
                "Type[urllib3.exceptions.DecodeError]"
            ],
            "HTTPBasicAuth": [
                "Any"
            ],
            "HTTPError": [
                "Any"
            ],
            "ITER_CHUNK_SIZE": [
                "int"
            ],
            "InvalidURL": [
                "Any"
            ],
            "LocationParseError": [
                "Type[urllib3.exceptions.LocationParseError]"
            ],
            "Mapping": [
                "Any"
            ],
            "MissingSchema": [
                "Any"
            ],
            "ProtocolError": [
                "Type[urllib3.exceptions.ProtocolError]"
            ],
            "REDIRECT_STATI": [
                "Tuple[(Any, Any, Any, Any, Any)]"
            ],
            "ReadTimeoutError": [
                "Type[urllib3.exceptions.ReadTimeoutError]"
            ],
            "RequestField": [
                "Type[urllib3.fields.RequestField]"
            ],
            "StreamConsumedError": [
                "Any"
            ],
            "UnsupportedOperation": [
                "Type[io.UnsupportedOperation]"
            ],
            "_copy_cookie_jar": [
                "Any"
            ],
            "basestring": [
                "Any"
            ],
            "builtin_str": [
                "Any"
            ],
            "bytes": [
                "Any"
            ],
            "chardet": [
                "Any"
            ],
            "check_header_validity": [
                "Any"
            ],
            "codes": [
                "Any"
            ],
            "complexjson": [
                "Any"
            ],
            "cookiejar_from_dict": [
                "Any"
            ],
            "cookielib": [
                "Any"
            ],
            "default_hooks": [
                "Any"
            ],
            "get_auth_from_url": [
                "Any"
            ],
            "get_cookie_header": [
                "Any"
            ],
            "guess_filename": [
                "Any"
            ],
            "guess_json_utf": [
                "Any"
            ],
            "is_py2": [
                "Any"
            ],
            "iter_slices": [
                "Any"
            ],
            "parse_header_links": [
                "Any"
            ],
            "requote_uri": [
                "Any"
            ],
            "str": [
                "Any"
            ],
            "stream_decode_response_unicode": [
                "Any"
            ],
            "super_len": [
                "Any"
            ],
            "to_key_val_list": [
                "Any"
            ],
            "to_native_string": [
                "Any"
            ],
            "unicode_is_ascii": [
                "Any"
            ],
            "urlencode": [
                "Any"
            ],
            "urlsplit": [
                "Any"
            ],
            "urlunparse": [
                "Any"
            ]
        },
        "PreparedRequest": {
            "__doc__": [
                "builtins.str"
            ],
            "_body_position": [
                "Any"
            ],
            "_cookies": [
                "Any"
            ],
            "body": [
                "Any"
            ],
            "headers": [
                "Any"
            ],
            "hooks": [
                "Any"
            ],
            "method": [
                "Any"
            ],
            "url": [
                "Any"
            ]
        },
        "Request": {
            "__doc__": [
                "builtins.str"
            ],
            "auth": [
                "Any"
            ],
            "cookies": [
                "Any"
            ],
            "data": [
                "Any"
            ],
            "files": [
                "Any"
            ],
            "headers": [
                "Any"
            ],
            "hooks": [
                "Any"
            ],
            "json": [
                "Any"
            ],
            "method": [
                "Any"
            ],
            "params": [
                "Any"
            ],
            "url": [
                "Any"
            ]
        },
        "RequestEncodingMixin": {
            "path_url": [
                "Annotated[(builtins.str, 'property')]"
            ]
        },
        "RequestHooksMixin": {},
        "Response": {
            "__attrs__": [
                "List[builtins.str]"
            ],
            "__doc__": [
                "builtins.str"
            ],
            "_content": [
                "Optional[Union[(bool, builtins.bytes)]]"
            ],
            "_content_consumed": [
                "bool"
            ],
            "_next": [
                "None"
            ],
            "apparent_encoding": [
                "Annotated[(Any, 'property')]"
            ],
            "content": [
                "Annotated[(Optional[builtins.bytes], 'property')]"
            ],
            "cookies": [
                "Any"
            ],
            "elapsed": [
                "datetime.timedelta"
            ],
            "encoding": [
                "None"
            ],
            "headers": [
                "Any"
            ],
            "history": [
                "List[nothing]"
            ],
            "is_permanent_redirect": [
                "Annotated[(bool, 'property')]"
            ],
            "is_redirect": [
                "Annotated[(bool, 'property')]"
            ],
            "links": [
                "Annotated[(dict, 'property')]"
            ],
            "next": [
                "Annotated[(Any, 'property')]"
            ],
            "ok": [
                "Annotated[(bool, 'property')]"
            ],
            "raw": [
                "None"
            ],
            "reason": [
                "None"
            ],
            "request": [
                "None"
            ],
            "status_code": [
                "None"
            ],
            "text": [
                "Annotated[(Any, 'property')]"
            ],
            "url": [
                "None"
            ]
        }
    },
    "requests-2.22.0/pyi/requests/packages.py": {
        "global": {
            "mod": [
                "str"
            ],
            "package": [
                "str"
            ]
        }
    },
    "requests-2.22.0/pyi/requests/sessions.py": {
        "merge_hooks": {
            "name": "merge_hooks",
            "location": 90,
            "return": [
                "Any"
            ],
            "arguments": {
                "request_hooks": [],
                "session_hooks": [],
                "dict_class": []
            }
        },
        "merge_setting": {
            "name": "merge_setting",
            "location": 91,
            "return": [
                "Any"
            ],
            "arguments": {
                "request_setting": [],
                "session_setting": [],
                "dict_class": []
            }
        },
        "preferred_clock": {
            "name": "preferred_clock",
            "location": 92,
            "return": [
                "float"
            ],
            "arguments": {}
        },
        "session": {
            "name": "session",
            "location": 93,
            "return": [
                "Session"
            ],
            "arguments": {}
        },
        "Session.__enter__": {
            "name": "__enter__",
            "location": 62,
            "return": [
                "_TSession"
            ],
            "arguments": {
                "self": [
                    "_TSession"
                ]
            }
        },
        "Session.__exit__": {
            "name": "__exit__",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Session.__getstate__": {
            "name": "__getstate__",
            "location": 64,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Session.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Session.__setstate__": {
            "name": "__setstate__",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "Session.close": {
            "name": "close",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Session.delete": {
            "name": "delete",
            "location": 68,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "url": []
            }
        },
        "Session.get": {
            "name": "get",
            "location": 69,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "url": []
            }
        },
        "Session.get_adapter": {
            "name": "get_adapter",
            "location": 70,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "url": []
            }
        },
        "Session.head": {
            "name": "head",
            "location": 71,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "url": []
            }
        },
        "Session.merge_environment_settings": {
            "name": "merge_environment_settings",
            "location": 72,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "url": [],
                "proxies": [],
                "stream": [],
                "verify": [],
                "cert": []
            }
        },
        "Session.mount": {
            "name": "mount",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefix": [],
                "adapter": []
            }
        },
        "Session.options": {
            "name": "options",
            "location": 74,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "url": []
            }
        },
        "Session.patch": {
            "name": "patch",
            "location": 75,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "url": [],
                "data": []
            }
        },
        "Session.post": {
            "name": "post",
            "location": 76,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "url": [],
                "data": [],
                "json": []
            }
        },
        "Session.prepare_request": {
            "name": "prepare_request",
            "location": 77,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "Session.put": {
            "name": "put",
            "location": 78,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "url": [],
                "data": []
            }
        },
        "Session.request": {
            "name": "request",
            "location": 79,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "method": [],
                "url": [],
                "params": [],
                "data": [],
                "headers": [],
                "cookies": [],
                "files": [],
                "auth": [],
                "timeout": [],
                "allow_redirects": [],
                "proxies": [],
                "hooks": [],
                "stream": [],
                "verify": [],
                "cert": [],
                "json": []
            }
        },
        "Session.send": {
            "name": "send",
            "location": 80,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "SessionRedirectMixin.get_redirect_target": {
            "name": "get_redirect_target",
            "location": 83,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "resp": []
            }
        },
        "SessionRedirectMixin.rebuild_auth": {
            "name": "rebuild_auth",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepared_request": [],
                "response": []
            }
        },
        "SessionRedirectMixin.rebuild_method": {
            "name": "rebuild_method",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prepared_request": [],
                "response": []
            }
        },
        "SessionRedirectMixin.rebuild_proxies": {
            "name": "rebuild_proxies",
            "location": 86,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "prepared_request": [],
                "proxies": []
            }
        },
        "SessionRedirectMixin.resolve_redirects": {
            "name": "resolve_redirects",
            "location": 87,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "resp": [],
                "req": [],
                "stream": [],
                "timeout": [],
                "verify": [],
                "cert": [],
                "proxies": [],
                "yield_requests": []
            }
        },
        "SessionRedirectMixin.should_strip_auth": {
            "name": "should_strip_auth",
            "location": 88,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "old_url": [],
                "new_url": []
            }
        },
        "global": {
            "CaseInsensitiveDict": [
                "Any"
            ],
            "ChunkedEncodingError": [
                "Any"
            ],
            "ContentDecodingError": [
                "Any"
            ],
            "DEFAULT_PORTS": [
                "Any"
            ],
            "DEFAULT_REDIRECT_LIMIT": [
                "Any"
            ],
            "HTTPAdapter": [
                "Any"
            ],
            "InvalidSchema": [
                "Any"
            ],
            "Mapping": [
                "Any"
            ],
            "OrderedDict": [
                "Any"
            ],
            "PreparedRequest": [
                "Any"
            ],
            "REDIRECT_STATI": [
                "Any"
            ],
            "Request": [
                "Any"
            ],
            "RequestsCookieJar": [
                "Any"
            ],
            "TooManyRedirects": [
                "Any"
            ],
            "_basic_auth_str": [
                "Any"
            ],
            "codes": [
                "Any"
            ],
            "cookiejar_from_dict": [
                "Any"
            ],
            "cookielib": [
                "Any"
            ],
            "default_headers": [
                "Any"
            ],
            "default_hooks": [
                "Any"
            ],
            "dispatch_hook": [
                "Any"
            ],
            "extract_cookies_to_jar": [
                "Any"
            ],
            "get_auth_from_url": [
                "Any"
            ],
            "get_environ_proxies": [
                "Any"
            ],
            "get_netrc_auth": [
                "Any"
            ],
            "is_py3": [
                "Any"
            ],
            "merge_cookies": [
                "Any"
            ],
            "requote_uri": [
                "Any"
            ],
            "rewind_body": [
                "Any"
            ],
            "should_bypass_proxies": [
                "Any"
            ],
            "timedelta": [
                "Type[datetime.timedelta]"
            ],
            "to_key_val_list": [
                "Any"
            ],
            "to_native_string": [
                "Any"
            ],
            "urljoin": [
                "Any"
            ],
            "urlparse": [
                "Any"
            ]
        },
        "Session": {
            "__attrs__": [
                "List[str]"
            ],
            "__doc__": [
                "str"
            ],
            "adapters": [
                "Any"
            ],
            "auth": [
                "None"
            ],
            "cert": [
                "None"
            ],
            "cookies": [
                "Any"
            ],
            "headers": [
                "Any"
            ],
            "hooks": [
                "Any"
            ],
            "max_redirects": [
                "Any"
            ],
            "params": [
                "Dict[(nothing, nothing)]"
            ],
            "proxies": [
                "Dict[(nothing, nothing)]"
            ],
            "stream": [
                "bool"
            ],
            "trust_env": [
                "bool"
            ],
            "verify": [
                "bool"
            ]
        },
        "SessionRedirectMixin": {}
    },
    "requests-2.22.0/pyi/requests/status_codes.py": {
        "_init": {
            "name": "_init",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "global": {
            "LookupDict": [
                "Type[requests.structures.LookupDict]"
            ],
            "_codes": [
                "Dict[(int, Any)]"
            ],
            "codes": [
                "requests.structures.LookupDict"
            ]
        }
    },
    "requests-2.22.0/pyi/requests/structures.py": {
        "CaseInsensitiveDict.__delitem__": {
            "name": "__delitem__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "CaseInsensitiveDict.__eq__": {
            "name": "__eq__",
            "location": 16,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "CaseInsensitiveDict.__getitem__": {
            "name": "__getitem__",
            "location": 17,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "CaseInsensitiveDict.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "CaseInsensitiveDict.__iter__": {
            "name": "__iter__",
            "location": 19,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CaseInsensitiveDict.__len__": {
            "name": "__len__",
            "location": 20,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "CaseInsensitiveDict.__repr__": {
            "name": "__repr__",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CaseInsensitiveDict.__setitem__": {
            "name": "__setitem__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "CaseInsensitiveDict.copy": {
            "name": "copy",
            "location": 23,
            "return": [
                "_TCaseInsensitiveDict"
            ],
            "arguments": {
                "self": [
                    "_TCaseInsensitiveDict"
                ]
            }
        },
        "CaseInsensitiveDict.lower_items": {
            "name": "lower_items",
            "location": 24,
            "return": [
                "Generator[(Tuple[(Any, Any)], Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LookupDict.__getitem__": {
            "name": "__getitem__",
            "location": 29,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "LookupDict.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "LookupDict.__repr__": {
            "name": "__repr__",
            "location": 31,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LookupDict.get": {
            "name": "get",
            "location": 32,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "default": []
            }
        },
        "global": {
            "Mapping": [
                "Any"
            ],
            "MutableMapping": [
                "Any"
            ],
            "OrderedDict": [
                "Type[collections.OrderedDict]"
            ]
        },
        "CaseInsensitiveDict": {
            "__doc__": [
                "str"
            ],
            "_store": [
                "collections.OrderedDict[(Any, Tuple[(Any, Any)])]"
            ]
        },
        "LookupDict": {
            "__doc__": [
                "str"
            ],
            "name": [
                "Any"
            ]
        }
    },
    "requests-2.22.0/pyi/requests/utils.py": {
        "_parse_content_type_header": {
            "name": "_parse_content_type_header",
            "location": 55,
            "return": [
                "Tuple[(Any, dict)]"
            ],
            "arguments": {
                "header": []
            }
        },
        "add_dict_to_cookiejar": {
            "name": "add_dict_to_cookiejar",
            "location": 56,
            "return": [
                "Any"
            ],
            "arguments": {
                "cj": [],
                "cookie_dict": []
            }
        },
        "address_in_network": {
            "name": "address_in_network",
            "location": 57,
            "return": [
                "Any"
            ],
            "arguments": {
                "ip": [],
                "net": []
            }
        },
        "check_header_validity": {
            "name": "check_header_validity",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "header": []
            }
        },
        "default_headers": {
            "name": "default_headers",
            "location": 59,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "default_user_agent": {
            "name": "default_user_agent",
            "location": 60,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "name": []
            }
        },
        "dict_from_cookiejar": {
            "name": "dict_from_cookiejar",
            "location": 61,
            "return": [
                "dict"
            ],
            "arguments": {
                "cj": []
            }
        },
        "dict_to_sequence": {
            "name": "dict_to_sequence",
            "location": 62,
            "return": [
                "Any"
            ],
            "arguments": {
                "d": []
            }
        },
        "dotted_netmask": {
            "name": "dotted_netmask",
            "location": 63,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "mask": []
            }
        },
        "extract_zipped_paths": {
            "name": "extract_zipped_paths",
            "location": 64,
            "return": [
                "Union[(builtins.str, _T0)]"
            ],
            "arguments": {
                "path": [
                    "_T0"
                ]
            }
        },
        "from_key_val_list": {
            "name": "from_key_val_list",
            "location": 65,
            "return": [
                "Any"
            ],
            "arguments": {
                "value": []
            }
        },
        "get_auth_from_url": {
            "name": "get_auth_from_url",
            "location": 66,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "url": []
            }
        },
        "get_encoding_from_headers": {
            "name": "get_encoding_from_headers",
            "location": 67,
            "return": [
                "Any"
            ],
            "arguments": {
                "headers": []
            }
        },
        "get_encodings_from_content": {
            "name": "get_encodings_from_content",
            "location": 68,
            "return": [
                "list"
            ],
            "arguments": {
                "content": []
            }
        },
        "get_environ_proxies": {
            "name": "get_environ_proxies",
            "location": 69,
            "return": [
                "Any"
            ],
            "arguments": {
                "url": [],
                "no_proxy": []
            }
        },
        "get_netrc_auth": {
            "name": "get_netrc_auth",
            "location": 70,
            "return": [
                "Optional[Tuple[(Optional[builtins.str], Optional[builtins.str])]]"
            ],
            "arguments": {
                "url": [],
                "raise_errors": []
            }
        },
        "get_unicode_from_response": {
            "name": "get_unicode_from_response",
            "location": 71,
            "return": [
                "Any"
            ],
            "arguments": {
                "r": []
            }
        },
        "guess_filename": {
            "name": "guess_filename",
            "location": 72,
            "return": [
                "Any"
            ],
            "arguments": {
                "obj": []
            }
        },
        "guess_json_utf": {
            "name": "guess_json_utf",
            "location": 73,
            "return": [
                "Optional[builtins.str]"
            ],
            "arguments": {
                "data": []
            }
        },
        "is_ipv4_address": {
            "name": "is_ipv4_address",
            "location": 74,
            "return": [
                "bool"
            ],
            "arguments": {
                "string_ip": []
            }
        },
        "is_valid_cidr": {
            "name": "is_valid_cidr",
            "location": 75,
            "return": [
                "bool"
            ],
            "arguments": {
                "string_network": []
            }
        },
        "iter_slices": {
            "name": "iter_slices",
            "location": 76,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "string": [],
                "slice_length": []
            }
        },
        "parse_dict_header": {
            "name": "parse_dict_header",
            "location": 77,
            "return": [
                "dict"
            ],
            "arguments": {
                "value": []
            }
        },
        "parse_header_links": {
            "name": "parse_header_links",
            "location": 78,
            "return": [
                "List[dict]"
            ],
            "arguments": {
                "value": []
            }
        },
        "parse_list_header": {
            "name": "parse_list_header",
            "location": 79,
            "return": [
                "list"
            ],
            "arguments": {
                "value": []
            }
        },
        "prepend_scheme_if_needed": {
            "name": "prepend_scheme_if_needed",
            "location": 80,
            "return": [
                "Any"
            ],
            "arguments": {
                "url": [],
                "new_scheme": []
            }
        },
        "requote_uri": {
            "name": "requote_uri",
            "location": 81,
            "return": [
                "Any"
            ],
            "arguments": {
                "uri": []
            }
        },
        "rewind_body": {
            "name": "rewind_body",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "prepared_request": []
            }
        },
        "select_proxy": {
            "name": "select_proxy",
            "location": 83,
            "return": [
                "Any"
            ],
            "arguments": {
                "url": [],
                "proxies": []
            }
        },
        "should_bypass_proxies": {
            "name": "should_bypass_proxies",
            "location": 84,
            "return": [
                "bool"
            ],
            "arguments": {
                "url": [],
                "no_proxy": []
            }
        },
        "stream_decode_response_unicode": {
            "name": "stream_decode_response_unicode",
            "location": 85,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "iterator": [],
                "r": []
            }
        },
        "super_len": {
            "name": "super_len",
            "location": 86,
            "return": [
                "Any"
            ],
            "arguments": {
                "o": []
            }
        },
        "to_key_val_list": {
            "name": "to_key_val_list",
            "location": 87,
            "return": [
                "Optional[list]"
            ],
            "arguments": {
                "value": []
            }
        },
        "unquote_header_value": {
            "name": "unquote_header_value",
            "location": 88,
            "return": [
                "Any"
            ],
            "arguments": {
                "value": [],
                "is_filename": []
            }
        },
        "unquote_unreserved": {
            "name": "unquote_unreserved",
            "location": 89,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "uri": []
            }
        },
        "urldefragauth": {
            "name": "urldefragauth",
            "location": 90,
            "return": [
                "Any"
            ],
            "arguments": {
                "url": []
            }
        },
        "global": {
            "CaseInsensitiveDict": [
                "Any"
            ],
            "DEFAULT_CA_BUNDLE_PATH": [
                "Any"
            ],
            "DEFAULT_PORTS": [
                "Dict[(builtins.str, int)]"
            ],
            "FileModeWarning": [
                "Any"
            ],
            "InvalidHeader": [
                "Any"
            ],
            "InvalidURL": [
                "Any"
            ],
            "Mapping": [
                "Any"
            ],
            "NETRC_FILES": [
                "Tuple[(builtins.str, builtins.str)]"
            ],
            "OrderedDict": [
                "Any"
            ],
            "UNRESERVED_SET": [
                "FrozenSet[builtins.str]"
            ],
            "UnrewindableBodyError": [
                "Any"
            ],
            "_CLEAN_HEADER_REGEX_BYTE": [
                "Pattern[builtins.bytes]"
            ],
            "_CLEAN_HEADER_REGEX_STR": [
                "Pattern[builtins.str]"
            ],
            "__version__": [
                "Any"
            ],
            "_null": [
                "builtins.bytes"
            ],
            "_null2": [
                "builtins.bytes"
            ],
            "_null3": [
                "builtins.bytes"
            ],
            "_parse_list_header": [
                "Any"
            ],
            "basestring": [
                "Any"
            ],
            "bytes": [
                "Any"
            ],
            "certs": [
                "Any"
            ],
            "cookiejar_from_dict": [
                "Any"
            ],
            "getproxies": [
                "Any"
            ],
            "getproxies_environment": [
                "Any"
            ],
            "integer_types": [
                "Any"
            ],
            "is_py3": [
                "Any"
            ],
            "proxy_bypass": [
                "Any"
            ],
            "proxy_bypass_environment": [
                "Any"
            ],
            "quote": [
                "Any"
            ],
            "set_environ": [
                "Callable[(..., contextlib._GeneratorContextManager)]"
            ],
            "str": [
                "Any"
            ],
            "to_native_string": [
                "Any"
            ],
            "unquote": [
                "Any"
            ],
            "urlparse": [
                "Any"
            ],
            "urlunparse": [
                "Any"
            ]
        }
    },
    "requests-2.22.0/pyi/requests/_internal_utils.py": {
        "to_native_string": {
            "name": "to_native_string",
            "location": 10,
            "return": [
                "Any"
            ],
            "arguments": {
                "string": [],
                "encoding": []
            }
        },
        "unicode_is_ascii": {
            "name": "unicode_is_ascii",
            "location": 11,
            "return": [
                "bool"
            ],
            "arguments": {
                "u_string": []
            }
        },
        "global": {
            "builtin_str": [
                "Type[builtins.str]"
            ],
            "is_py2": [
                "bool"
            ],
            "str": [
                "Type[builtins.str]"
            ]
        }
    },
    "requests-2.22.0/pyi/requests/__init__.py": {
        "_check_cryptography": {
            "name": "_check_cryptography",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "cryptography_version": []
            }
        },
        "check_compatibility": {
            "name": "check_compatibility",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "urllib3_version": [],
                "chardet_version": []
            }
        },
        "global": {
            "ConnectTimeout": [
                "Any"
            ],
            "ConnectionError": [
                "Any"
            ],
            "DependencyWarning": [
                "Type[urllib3.exceptions.DependencyWarning]"
            ],
            "FileModeWarning": [
                "Any"
            ],
            "HTTPError": [
                "Any"
            ],
            "NullHandler": [
                "Type[logging.NullHandler]"
            ],
            "PreparedRequest": [
                "Any"
            ],
            "ReadTimeout": [
                "Any"
            ],
            "Request": [
                "Any"
            ],
            "RequestException": [
                "Any"
            ],
            "RequestsDependencyWarning": [
                "Any"
            ],
            "Response": [
                "Any"
            ],
            "Session": [
                "Any"
            ],
            "Timeout": [
                "Any"
            ],
            "TooManyRedirects": [
                "Any"
            ],
            "URLRequired": [
                "Any"
            ],
            "__author__": [
                "Any"
            ],
            "__author_email__": [
                "Any"
            ],
            "__build__": [
                "Any"
            ],
            "__cake__": [
                "Any"
            ],
            "__copyright__": [
                "Any"
            ],
            "__description__": [
                "Any"
            ],
            "__license__": [
                "Any"
            ],
            "__title__": [
                "Any"
            ],
            "__url__": [
                "Any"
            ],
            "__version__": [
                "Any"
            ],
            "codes": [
                "Any"
            ],
            "cryptography_version": [
                "Any"
            ],
            "delete": [
                "Any"
            ],
            "get": [
                "Any"
            ],
            "head": [
                "Any"
            ],
            "options": [
                "Any"
            ],
            "packages": [
                "Any"
            ],
            "patch": [
                "Any"
            ],
            "post": [
                "Any"
            ],
            "put": [
                "Any"
            ],
            "pyopenssl": [
                "Any"
            ],
            "request": [
                "Any"
            ],
            "session": [
                "Any"
            ],
            "utils": [
                "Any"
            ]
        }
    },
    "requests-2.22.0/pyi/requests/__version__.py": {
        "global": {
            "__author__": [
                "str"
            ],
            "__author_email__": [
                "str"
            ],
            "__build__": [
                "int"
            ],
            "__cake__": [
                "str"
            ],
            "__copyright__": [
                "str"
            ],
            "__description__": [
                "str"
            ],
            "__license__": [
                "str"
            ],
            "__title__": [
                "str"
            ],
            "__url__": [
                "str"
            ],
            "__version__": [
                "str"
            ]
        }
    },
    "requests-2.22.0/pyi/tests/compat.py": {
        "u": {
            "name": "u",
            "location": 14,
            "return": [
                "Any"
            ],
            "arguments": {
                "s": []
            }
        },
        "global": {
            "StringIO": [
                "Any"
            ],
            "cStringIO": [
                "Any"
            ],
            "is_py3": [
                "bool"
            ]
        }
    },
    "requests-2.22.0/pyi/tests/conftest.py": {
        "prepare_url": {
            "name": "prepare_url",
            "location": 11,
            "return": [
                "Callable"
            ],
            "arguments": {
                "value": []
            }
        },
        "urljoin": {
            "name": "urljoin",
            "location": 12,
            "return": [
                "AnyStr"
            ],
            "arguments": {
                "base": [
                    "AnyStr"
                ],
                "url": [
                    "Optional[AnyStr]"
                ],
                "allow_fragments": [
                    "bool"
                ]
            }
        },
        "global": {
            "httpbin": [
                "Any"
            ],
            "httpbin_secure": [
                "Any"
            ],
            "pytest": [
                "Any"
            ]
        }
    },
    "requests-2.22.0/pyi/tests/test_help.py": {
        "info": {
            "name": "info",
            "location": 12,
            "return": [
                "Dict[(str, Union[(bool, Dict[(str, Any)])])]"
            ],
            "arguments": {}
        },
        "test_idna_with_version_attribute": {
            "name": "test_idna_with_version_attribute",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_idna_without_version_attribute": {
            "name": "test_idna_without_version_attribute",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_system_ssl": {
            "name": "test_system_ssl",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "VersionedPackage.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "version": []
            }
        },
        "global": {
            "pytest": [
                "Any"
            ]
        },
        "VersionedPackage": {
            "__version__": [
                "Any"
            ]
        }
    },
    "requests-2.22.0/pyi/tests/test_hooks.py": {
        "hook": {
            "name": "hook",
            "location": 9,
            "return": [
                "Any"
            ],
            "arguments": {
                "value": []
            }
        },
        "test_default_hooks": {
            "name": "test_default_hooks",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "global": {
            "pytest": [
                "Any"
            ],
            "test_hooks": [
                "Any"
            ]
        }
    },
    "requests-2.22.0/pyi/tests/test_lowlevel.py": {
        "consume_socket_content": {
            "name": "consume_socket_content",
            "location": 19,
            "return": [
                "bytes"
            ],
            "arguments": {
                "sock": [],
                "timeout": []
            }
        },
        "test_chunked_upload": {
            "name": "test_chunked_upload",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_digestauth_401_count_reset_on_redirect": {
            "name": "test_digestauth_401_count_reset_on_redirect",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_digestauth_401_only_sent_once": {
            "name": "test_digestauth_401_only_sent_once",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_digestauth_only_on_4xx": {
            "name": "test_digestauth_only_on_4xx",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_fragment_not_sent_with_request": {
            "name": "test_fragment_not_sent_with_request",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_fragment_update_on_redirect": {
            "name": "test_fragment_update_on_redirect",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_redirect_rfc1808_to_non_ascii_location": {
            "name": "test_redirect_rfc1808_to_non_ascii_location",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "global": {
            "Server": [
                "Type[tests.testserver.server.Server]"
            ],
            "_proxy_combos": [
                "List[Tuple[(str, str)]]"
            ],
            "_schemes_by_var_prefix": [
                "List[Tuple[(str, List[str])]]"
            ],
            "override_environ": [
                "Callable[(..., contextlib._GeneratorContextManager)]"
            ],
            "prefix": [
                "str"
            ],
            "pytest": [
                "Any"
            ],
            "scheme": [
                "str"
            ],
            "schemes": [
                "List[str]"
            ],
            "test_use_proxy_from_environment": [
                "Any"
            ]
        }
    },
    "requests-2.22.0/pyi/tests/test_packages.py": {
        "test_can_access_chardet_attribute": {
            "name": "test_can_access_chardet_attribute",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_can_access_idna_attribute": {
            "name": "test_can_access_idna_attribute",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_can_access_urllib3_attribute": {
            "name": "test_can_access_urllib3_attribute",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "global": {}
    },
    "requests-2.22.0/pyi/tests/test_requests.py": {
        "_basic_auth_str": {
            "name": "_basic_auth_str",
            "location": 295,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "username": [],
                "password": []
            }
        },
        "cookiejar_from_dict": {
            "name": "cookiejar_from_dict",
            "location": 296,
            "return": [
                "Union[(requests.cookies.RequestsCookieJar, _T1)]"
            ],
            "arguments": {
                "cookie_dict": [],
                "cookiejar": [
                    "_T1"
                ],
                "overwrite": []
            }
        },
        "default_hooks": {
            "name": "default_hooks",
            "location": 297,
            "return": [
                "Dict[(builtins.str, List[nothing])]"
            ],
            "arguments": {}
        },
        "getproxies": {
            "name": "getproxies",
            "location": 298,
            "return": [
                "Dict[(builtins.str, builtins.str)]"
            ],
            "arguments": {}
        },
        "morsel_to_cookie": {
            "name": "morsel_to_cookie",
            "location": 299,
            "return": [
                "cookielib.Cookie"
            ],
            "arguments": {
                "morsel": []
            }
        },
        "test_json_encodes_as_bytes": {
            "name": "test_json_encodes_as_bytes",
            "location": 300,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_requests_are_updated_each_time": {
            "name": "test_requests_are_updated_each_time",
            "location": 301,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": []
            }
        },
        "test_urllib3_pool_connection_closed": {
            "name": "test_urllib3_pool_connection_closed",
            "location": 302,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": []
            }
        },
        "test_urllib3_retries": {
            "name": "test_urllib3_retries",
            "location": 303,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": []
            }
        },
        "u": {
            "name": "u",
            "location": 307,
            "return": [
                "Any"
            ],
            "arguments": {
                "s": []
            }
        },
        "urlparse": {
            "name": "urlparse",
            "location": 311,
            "return": [
                "urllib.parse.ParseResultBytes"
            ],
            "arguments": {
                "url": [
                    "Optional[bytes]"
                ],
                "scheme": [
                    "Optional[bytes]"
                ],
                "allow_fragments": [
                    "bool"
                ]
            }
        },
        "RedirectSession.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "order_of_redirects": []
            }
        },
        "RedirectSession._build_raw": {
            "name": "_build_raw",
            "location": 68,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "RedirectSession.build_response": {
            "name": "build_response",
            "location": 69,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "RedirectSession.send": {
            "name": "send",
            "location": 70,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCaseInsensitiveDict.test_contains": {
            "name": "test_contains",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCaseInsensitiveDict.test_copy": {
            "name": "test_copy",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCaseInsensitiveDict.test_delitem": {
            "name": "test_delitem",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCaseInsensitiveDict.test_docstring_example": {
            "name": "test_docstring_example",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCaseInsensitiveDict.test_equality": {
            "name": "test_equality",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCaseInsensitiveDict.test_fixes_649": {
            "name": "test_fixes_649",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCaseInsensitiveDict.test_get": {
            "name": "test_get",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCaseInsensitiveDict.test_getitem": {
            "name": "test_getitem",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCaseInsensitiveDict.test_iter": {
            "name": "test_iter",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCaseInsensitiveDict.test_len": {
            "name": "test_len",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCaseInsensitiveDict.test_lower_items": {
            "name": "test_lower_items",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCaseInsensitiveDict.test_preserve_key_case": {
            "name": "test_preserve_key_case",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCaseInsensitiveDict.test_preserve_last_key_case": {
            "name": "test_preserve_last_key_case",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCaseInsensitiveDict.test_setdefault": {
            "name": "test_setdefault",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCaseInsensitiveDict.test_update": {
            "name": "test_update",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCaseInsensitiveDict.test_update_retains_unchanged": {
            "name": "test_update_retains_unchanged",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMorselToCookieExpires.test_expires_none": {
            "name": "test_expires_none",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMorselToCookieExpires.test_expires_valid_str": {
            "name": "test_expires_valid_str",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMorselToCookieMaxAge.test_max_age_invalid_str": {
            "name": "test_max_age_invalid_str",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMorselToCookieMaxAge.test_max_age_valid_int": {
            "name": "test_max_age_valid_int",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRequests._patch_adapter_gzipped_redirect": {
            "name": "_patch_adapter_gzipped_redirect",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "url": []
            }
        },
        "TestRequests.test_BASICAUTH_TUPLE_HTTP_200_OK_GET": {
            "name": "test_BASICAUTH_TUPLE_HTTP_200_OK_GET",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_DIGESTAUTH_QUOTES_QOP_VALUE": {
            "name": "test_DIGESTAUTH_QUOTES_QOP_VALUE",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_DIGESTAUTH_WRONG_HTTP_401_GET": {
            "name": "test_DIGESTAUTH_WRONG_HTTP_401_GET",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_DIGEST_AUTH_RETURNS_COOKIE": {
            "name": "test_DIGEST_AUTH_RETURNS_COOKIE",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_DIGEST_AUTH_SETS_SESSION_COOKIES": {
            "name": "test_DIGEST_AUTH_SETS_SESSION_COOKIES",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_DIGEST_HTTP_200_OK_GET": {
            "name": "test_DIGEST_HTTP_200_OK_GET",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_DIGEST_STREAM": {
            "name": "test_DIGEST_STREAM",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_HTTP_200_OK_GET_ALTERNATIVE": {
            "name": "test_HTTP_200_OK_GET_ALTERNATIVE",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_HTTP_200_OK_GET_WITH_MIXED_PARAMS": {
            "name": "test_HTTP_200_OK_GET_WITH_MIXED_PARAMS",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_HTTP_200_OK_GET_WITH_PARAMS": {
            "name": "test_HTTP_200_OK_GET_WITH_PARAMS",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_HTTP_200_OK_HEAD": {
            "name": "test_HTTP_200_OK_HEAD",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_HTTP_200_OK_PUT": {
            "name": "test_HTTP_200_OK_PUT",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_HTTP_302_ALLOW_REDIRECT_GET": {
            "name": "test_HTTP_302_ALLOW_REDIRECT_GET",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_HTTP_302_TOO_MANY_REDIRECTS": {
            "name": "test_HTTP_302_TOO_MANY_REDIRECTS",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_HTTP_302_TOO_MANY_REDIRECTS_WITH_PARAMS": {
            "name": "test_HTTP_302_TOO_MANY_REDIRECTS_WITH_PARAMS",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_HTTP_307_ALLOW_REDIRECT_POST": {
            "name": "test_HTTP_307_ALLOW_REDIRECT_POST",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_HTTP_307_ALLOW_REDIRECT_POST_WITH_SEEKABLE": {
            "name": "test_HTTP_307_ALLOW_REDIRECT_POST_WITH_SEEKABLE",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_POSTBIN_GET_POST_FILES": {
            "name": "test_POSTBIN_GET_POST_FILES",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_POSTBIN_GET_POST_FILES_WITH_DATA": {
            "name": "test_POSTBIN_GET_POST_FILES_WITH_DATA",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_POSTBIN_SEEKED_OBJECT_WITH_NO_ITER": {
            "name": "test_POSTBIN_SEEKED_OBJECT_WITH_NO_ITER",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_auth_is_retained_for_redirect_on_host": {
            "name": "test_auth_is_retained_for_redirect_on_host",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_auth_is_stripped_on_http_downgrade": {
            "name": "test_auth_is_stripped_on_http_downgrade",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "httpbin": [],
                "httpbin_secure": [],
                "httpbin_ca_bundle": []
            }
        },
        "TestRequests.test_autoset_header_values_are_native": {
            "name": "test_autoset_header_values_are_native",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_basic_building": {
            "name": "test_basic_building",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRequests.test_basicauth_encodes_byte_strings": {
            "name": "test_basicauth_encodes_byte_strings",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRequests.test_basicauth_with_netrc": {
            "name": "test_basicauth_with_netrc",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_binary_put": {
            "name": "test_binary_put",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRequests.test_can_send_file_object_with_non_string_filename": {
            "name": "test_can_send_file_object_with_non_string_filename",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_cannot_send_unprepared_requests": {
            "name": "test_cannot_send_unprepared_requests",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_certificate_failure": {
            "name": "test_certificate_failure",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "httpbin_secure": []
            }
        },
        "TestRequests.test_chunked_upload_does_not_set_content_length_header": {
            "name": "test_chunked_upload_does_not_set_content_length_header",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_conflicting_post_params": {
            "name": "test_conflicting_post_params",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_cookie_as_dict_items": {
            "name": "test_cookie_as_dict_items",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRequests.test_cookie_as_dict_keeps_items": {
            "name": "test_cookie_as_dict_keeps_items",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRequests.test_cookie_as_dict_keeps_len": {
            "name": "test_cookie_as_dict_keeps_len",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRequests.test_cookie_as_dict_keys": {
            "name": "test_cookie_as_dict_keys",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRequests.test_cookie_as_dict_values": {
            "name": "test_cookie_as_dict_values",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRequests.test_cookie_duplicate_names_different_domains": {
            "name": "test_cookie_duplicate_names_different_domains",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRequests.test_cookie_duplicate_names_raises_cookie_conflict_error": {
            "name": "test_cookie_duplicate_names_raises_cookie_conflict_error",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRequests.test_cookie_parameters": {
            "name": "test_cookie_parameters",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRequests.test_cookie_persists_via_api": {
            "name": "test_cookie_persists_via_api",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_cookie_policy_copy": {
            "name": "test_cookie_policy_copy",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRequests.test_cookie_quote_wrapped": {
            "name": "test_cookie_quote_wrapped",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_cookie_removed_on_expire": {
            "name": "test_cookie_removed_on_expire",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_cookie_sent_on_redirect": {
            "name": "test_cookie_sent_on_redirect",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_cookielib_cookiejar_on_redirect": {
            "name": "test_cookielib_cookiejar_on_redirect",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_custom_content_type": {
            "name": "test_custom_content_type",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_custom_redirect_mixin": {
            "name": "test_custom_redirect_mixin",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_decompress_gzip": {
            "name": "test_decompress_gzip",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_different_encodings_dont_break_post": {
            "name": "test_different_encodings_dont_break_post",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_empty_response_has_content_none": {
            "name": "test_empty_response_has_content_none",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRequests.test_empty_stream_with_auth_does_not_set_content_length_header": {
            "name": "test_empty_stream_with_auth_does_not_set_content_length_header",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_entry_points": {
            "name": "test_entry_points",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRequests.test_fixes_1329": {
            "name": "test_fixes_1329",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_form_encoded_post_query_multivalued_element": {
            "name": "test_form_encoded_post_query_multivalued_element",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_fragment_maintained_on_redirect": {
            "name": "test_fragment_maintained_on_redirect",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_generic_cookiejar_works": {
            "name": "test_generic_cookiejar_works",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_header_and_body_removal_on_redirect": {
            "name": "test_header_and_body_removal_on_redirect",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_header_keys_are_native": {
            "name": "test_header_keys_are_native",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_header_no_leading_space": {
            "name": "test_header_no_leading_space",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_header_no_return_chars": {
            "name": "test_header_no_return_chars",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_header_remove_is_case_insensitive": {
            "name": "test_header_remove_is_case_insensitive",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_header_validation": {
            "name": "test_header_validation",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_header_value_not_str": {
            "name": "test_header_value_not_str",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_headers_on_session_with_None_are_not_sent": {
            "name": "test_headers_on_session_with_None_are_not_sent",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_headers_preserve_order": {
            "name": "test_headers_preserve_order",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_history_is_always_a_list": {
            "name": "test_history_is_always_a_list",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_hook_receives_request_arguments": {
            "name": "test_hook_receives_request_arguments",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_http_301_changes_post_to_get": {
            "name": "test_http_301_changes_post_to_get",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_http_301_doesnt_change_head_to_get": {
            "name": "test_http_301_doesnt_change_head_to_get",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_http_302_changes_post_to_get": {
            "name": "test_http_302_changes_post_to_get",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_http_302_doesnt_change_head_to_get": {
            "name": "test_http_302_doesnt_change_head_to_get",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_http_303_changes_post_to_get": {
            "name": "test_http_303_changes_post_to_get",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_http_303_doesnt_change_head_to_get": {
            "name": "test_http_303_doesnt_change_head_to_get",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_http_error": {
            "name": "test_http_error",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRequests.test_http_with_certificate": {
            "name": "test_http_with_certificate",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_https_warnings": {
            "name": "test_https_warnings",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "httpbin_secure": [],
                "httpbin_ca_bundle": []
            }
        },
        "TestRequests.test_invalid_ca_certificate_path": {
            "name": "test_invalid_ca_certificate_path",
            "location": 209,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "httpbin_secure": []
            }
        },
        "TestRequests.test_invalid_files_input": {
            "name": "test_invalid_files_input",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_invalid_ssl_certificate_files": {
            "name": "test_invalid_ssl_certificate_files",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "httpbin_secure": []
            }
        },
        "TestRequests.test_json_param_post_content_type_works": {
            "name": "test_json_param_post_content_type_works",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_json_param_post_should_not_override_data_param": {
            "name": "test_json_param_post_should_not_override_data_param",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_links": {
            "name": "test_links",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRequests.test_long_authinfo_in_url": {
            "name": "test_long_authinfo_in_url",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRequests.test_manual_redirect_with_partial_body_read": {
            "name": "test_manual_redirect_with_partial_body_read",
            "location": 216,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_non_prepared_request_error": {
            "name": "test_non_prepared_request_error",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRequests.test_nonhttp_schemes_dont_check_URLs": {
            "name": "test_nonhttp_schemes_dont_check_URLs",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRequests.test_override_content_length": {
            "name": "test_override_content_length",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_param_cookiejar_works": {
            "name": "test_param_cookiejar_works",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_params_are_merged_case_sensitive": {
            "name": "test_params_are_merged_case_sensitive",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_params_bytes_are_encoded": {
            "name": "test_params_bytes_are_encoded",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRequests.test_params_original_order_is_preserved_by_default": {
            "name": "test_params_original_order_is_preserved_by_default",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRequests.test_path_is_not_double_encoded": {
            "name": "test_path_is_not_double_encoded",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRequests.test_post_with_custom_mapping": {
            "name": "test_post_with_custom_mapping",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_prepare_body_position_non_stream": {
            "name": "test_prepare_body_position_non_stream",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRequests.test_prepare_request_with_bytestring_url": {
            "name": "test_prepare_request_with_bytestring_url",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRequests.test_prepared_from_session": {
            "name": "test_prepared_from_session",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_prepared_request_hook": {
            "name": "test_prepared_request_hook",
            "location": 229,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_prepared_request_is_pickleable": {
            "name": "test_prepared_request_is_pickleable",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_prepared_request_with_file_is_pickleable": {
            "name": "test_prepared_request_with_file_is_pickleable",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_prepared_request_with_hook_is_pickleable": {
            "name": "test_prepared_request_with_hook_is_pickleable",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_proxy_auth": {
            "name": "test_proxy_auth",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRequests.test_proxy_auth_empty_pass": {
            "name": "test_proxy_auth_empty_pass",
            "location": 234,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRequests.test_proxy_error": {
            "name": "test_proxy_error",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRequests.test_proxy_error_on_bad_url": {
            "name": "test_proxy_error_on_bad_url",
            "location": 236,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "httpbin": [],
                "httpbin_secure": []
            }
        },
        "TestRequests.test_pyopenssl_redirect": {
            "name": "test_pyopenssl_redirect",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "httpbin_secure": [],
                "httpbin_ca_bundle": []
            }
        },
        "TestRequests.test_redirect_with_wrong_gzipped_header": {
            "name": "test_redirect_with_wrong_gzipped_header",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_request_and_response_are_pickleable": {
            "name": "test_request_and_response_are_pickleable",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_request_cookie_overrides_session_cookie": {
            "name": "test_request_cookie_overrides_session_cookie",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_request_cookies_not_persisted": {
            "name": "test_request_cookies_not_persisted",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_request_ok_set": {
            "name": "test_request_ok_set",
            "location": 242,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_request_with_bytestring_host": {
            "name": "test_request_with_bytestring_host",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_requests_history_is_saved": {
            "name": "test_requests_history_is_saved",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_requests_in_history_are_not_overridden": {
            "name": "test_requests_in_history_are_not_overridden",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_response_chunk_size_type": {
            "name": "test_response_chunk_size_type",
            "location": 246,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRequests.test_response_context_manager": {
            "name": "test_response_context_manager",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_response_decode_unicode": {
            "name": "test_response_decode_unicode",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRequests.test_response_is_iterable": {
            "name": "test_response_is_iterable",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRequests.test_response_iter_lines": {
            "name": "test_response_iter_lines",
            "location": 250,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_response_json_when_content_is_None": {
            "name": "test_response_json_when_content_is_None",
            "location": 251,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_response_reason_unicode": {
            "name": "test_response_reason_unicode",
            "location": 252,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRequests.test_response_reason_unicode_fallback": {
            "name": "test_response_reason_unicode_fallback",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRequests.test_response_without_release_conn": {
            "name": "test_response_without_release_conn",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRequests.test_rewind_body": {
            "name": "test_rewind_body",
            "location": 255,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRequests.test_rewind_body_failed_seek": {
            "name": "test_rewind_body_failed_seek",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRequests.test_rewind_body_failed_tell": {
            "name": "test_rewind_body_failed_tell",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRequests.test_rewind_body_no_seek": {
            "name": "test_rewind_body_no_seek",
            "location": 258,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRequests.test_rewind_partially_read_body": {
            "name": "test_rewind_partially_read_body",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRequests.test_session_close_proxy_clear": {
            "name": "test_session_close_proxy_clear",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestRequests.test_session_get_adapter_prefix_matching": {
            "name": "test_session_get_adapter_prefix_matching",
            "location": 261,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRequests.test_session_get_adapter_prefix_matching_is_case_insensitive": {
            "name": "test_session_get_adapter_prefix_matching_is_case_insensitive",
            "location": 262,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRequests.test_session_get_adapter_prefix_matching_mixed_case": {
            "name": "test_session_get_adapter_prefix_matching_mixed_case",
            "location": 263,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRequests.test_session_hooks_are_overridden_by_request_hooks": {
            "name": "test_session_hooks_are_overridden_by_request_hooks",
            "location": 264,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_session_hooks_are_used_with_no_request_hooks": {
            "name": "test_session_hooks_are_used_with_no_request_hooks",
            "location": 265,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_session_pickling": {
            "name": "test_session_pickling",
            "location": 266,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_set_cookie_on_301": {
            "name": "test_set_cookie_on_301",
            "location": 267,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_should_strip_auth_host_change": {
            "name": "test_should_strip_auth_host_change",
            "location": 268,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRequests.test_should_strip_auth_http_downgrade": {
            "name": "test_should_strip_auth_http_downgrade",
            "location": 269,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRequests.test_should_strip_auth_https_upgrade": {
            "name": "test_should_strip_auth_https_upgrade",
            "location": 270,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRequests.test_should_strip_auth_port_change": {
            "name": "test_should_strip_auth_port_change",
            "location": 271,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRequests.test_status_raising": {
            "name": "test_status_raising",
            "location": 272,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_stream_with_auth_does_not_set_transfer_encoding_header": {
            "name": "test_stream_with_auth_does_not_set_transfer_encoding_header",
            "location": 273,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_time_elapsed_blank": {
            "name": "test_time_elapsed_blank",
            "location": 274,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_transfer_enc_removal_on_redirect": {
            "name": "test_transfer_enc_removal_on_redirect",
            "location": 275,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_transport_adapter_ordering": {
            "name": "test_transport_adapter_ordering",
            "location": 276,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRequests.test_unconsumed_session_response_closes_connection": {
            "name": "test_unconsumed_session_response_closes_connection",
            "location": 277,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_unicode_header_name": {
            "name": "test_unicode_header_name",
            "location": 278,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_unicode_method_name": {
            "name": "test_unicode_method_name",
            "location": 279,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_unicode_method_name_with_request_object": {
            "name": "test_unicode_method_name_with_request_object",
            "location": 280,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_unicode_multipart_post_fieldnames": {
            "name": "test_unicode_multipart_post_fieldnames",
            "location": 281,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_uppercase_scheme_redirect": {
            "name": "test_uppercase_scheme_redirect",
            "location": 282,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_urlencoded_get_query_multivalued_param": {
            "name": "test_urlencoded_get_query_multivalued_param",
            "location": 283,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_whitespaces_are_removed_from_url": {
            "name": "test_whitespaces_are_removed_from_url",
            "location": 284,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimeout.test_encoded_methods": {
            "name": "test_encoded_methods",
            "location": 292,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestTimeout.test_stream_timeout": {
            "name": "test_stream_timeout",
            "location": 293,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "global": {
            "CaseInsensitiveDict": [
                "Type[requests.structures.CaseInsensitiveDict]"
            ],
            "ConnectTimeout": [
                "Type[requests.exceptions.ConnectTimeout]"
            ],
            "ConnectionError": [
                "Type[requests.exceptions.ConnectionError]"
            ],
            "HAS_MODERN_SSL": [
                "bool"
            ],
            "HAS_PYOPENSSL": [
                "bool"
            ],
            "HTTPAdapter": [
                "Type[requests.adapters.HTTPAdapter]"
            ],
            "HTTPDigestAuth": [
                "Type[requests.auth.HTTPDigestAuth]"
            ],
            "InvalidHeader": [
                "Type[requests.exceptions.InvalidHeader]"
            ],
            "InvalidProxyURL": [
                "Type[requests.exceptions.InvalidProxyURL]"
            ],
            "InvalidSchema": [
                "Type[requests.exceptions.InvalidSchema]"
            ],
            "InvalidURL": [
                "Type[requests.exceptions.InvalidURL]"
            ],
            "MissingSchema": [
                "Type[requests.exceptions.MissingSchema]"
            ],
            "Morsel": [
                "Type[http.cookies.Morsel]"
            ],
            "MutableMapping": [
                "Any"
            ],
            "OrderedDict": [
                "Type[collections.OrderedDict]"
            ],
            "PreparedRequest": [
                "Type[requests.models.PreparedRequest]"
            ],
            "ProxyError": [
                "Type[requests.exceptions.ProxyError]"
            ],
            "ReadTimeout": [
                "Type[requests.exceptions.ReadTimeout]"
            ],
            "RetryError": [
                "Type[requests.exceptions.RetryError]"
            ],
            "SSLContext": [
                "Any"
            ],
            "SSLError": [
                "Type[requests.exceptions.SSLError]"
            ],
            "SessionRedirectMixin": [
                "Type[requests.sessions.SessionRedirectMixin]"
            ],
            "StringIO": [
                "Any"
            ],
            "TARPIT": [
                "builtins.str"
            ],
            "Timeout": [
                "Type[requests.exceptions.Timeout]"
            ],
            "TooManyRedirects": [
                "Type[requests.exceptions.TooManyRedirects]"
            ],
            "UnrewindableBodyError": [
                "Type[requests.exceptions.UnrewindableBodyError]"
            ],
            "Urllib3Timeout": [
                "Type[urllib3.util.timeout.Timeout]"
            ],
            "builtin_str": [
                "Type[builtins.str]"
            ],
            "division": [
                "__future__._Feature"
            ],
            "override_environ": [
                "Callable[(..., contextlib._GeneratorContextManager)]"
            ],
            "pytest": [
                "Any"
            ],
            "str": [
                "Type[builtins.str]"
            ],
            "test_data_argument_accepts_tuples": [
                "Any"
            ],
            "test_prepared_copy": [
                "Any"
            ],
            "test_proxy_env_vars_override_default": [
                "Any"
            ],
            "urlencode": [
                "Any"
            ]
        },
        "RedirectSession": {
            "calls": [
                "List[SendCall]"
            ],
            "cookies": [
                "Dict[(nothing, nothing)]"
            ],
            "max_redirects": [
                "int"
            ],
            "redirects": [
                "Any"
            ],
            "trust_env": [
                "bool"
            ]
        },
        "SendCall": {
            "args": [
                "Any"
            ],
            "kwargs": [
                "Any"
            ]
        },
        "TestCaseInsensitiveDict": {
            "test_init": [
                "Any"
            ]
        },
        "TestMorselToCookieExpires": {
            "__doc__": [
                "builtins.str"
            ],
            "test_expires_invalid_int": [
                "Any"
            ]
        },
        "TestMorselToCookieMaxAge": {
            "__doc__": [
                "builtins.str"
            ]
        },
        "TestPreparingURLs": {
            "test_parameters_for_nonstandard_schemes": [
                "Any"
            ],
            "test_preparing_bad_url": [
                "Any"
            ],
            "test_preparing_url": [
                "Any"
            ],
            "test_redirecting_to_bad_url": [
                "Any"
            ],
            "test_url_mutation": [
                "Any"
            ]
        },
        "TestRequests": {
            "_patched_response": [
                "bool"
            ],
            "digest_auth_algo": [
                "Tuple[(builtins.str, builtins.str, builtins.str)]"
            ],
            "test_basic_auth_str_is_always_native": [
                "Any"
            ],
            "test_can_send_objects_with_files": [
                "Any"
            ],
            "test_empty_content_length": [
                "Any"
            ],
            "test_errors": [
                "Any"
            ],
            "test_invalid_url": [
                "Any"
            ],
            "test_mixed_case_scheme_acceptable": [
                "Any"
            ],
            "test_no_body_content_length": [
                "Any"
            ],
            "test_no_content_length": [
                "Any"
            ],
            "test_params_are_added_before_fragment": [
                "Any"
            ],
            "test_response_iter_lines_reentrant": [
                "Any"
            ],
            "test_set_basicauth": [
                "Any"
            ],
            "test_should_strip_auth_default_port": [
                "Any"
            ],
            "test_unicode_get": [
                "Any"
            ],
            "test_unicode_multipart_post": [
                "Any"
            ],
            "test_user_agent_transfers": [
                "Any"
            ]
        },
        "TestTimeout": {
            "test_connect_timeout": [
                "Any"
            ],
            "test_invalid_timeout": [
                "Any"
            ],
            "test_none_timeout": [
                "Any"
            ],
            "test_read_timeout": [
                "Any"
            ],
            "test_total_timeout_connect": [
                "Any"
            ]
        }
    },
    "requests-2.22.0/pyi/tests/test_structures.py": {
        "TestCaseInsensitiveDict.test_copy": {
            "name": "test_copy",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCaseInsensitiveDict.test_list": {
            "name": "test_list",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCaseInsensitiveDict.test_lower_items": {
            "name": "test_lower_items",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCaseInsensitiveDict.test_repr": {
            "name": "test_repr",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLookupDict.test_repr": {
            "name": "test_repr",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "global": {
            "CaseInsensitiveDict": [
                "Type[requests.structures.CaseInsensitiveDict]"
            ],
            "LookupDict": [
                "Type[requests.structures.LookupDict]"
            ],
            "pytest": [
                "Any"
            ]
        },
        "TestCaseInsensitiveDict": {
            "possible_keys": [
                "Any"
            ],
            "setup": [
                "Any"
            ],
            "test_delitem": [
                "Any"
            ],
            "test_getitem": [
                "Any"
            ],
            "test_instance_equality": [
                "Any"
            ]
        },
        "TestLookupDict": {
            "get_item_parameters": [
                "Any"
            ],
            "setup": [
                "Any"
            ],
            "test_get": [
                "Any"
            ],
            "test_getitem": [
                "Any"
            ]
        }
    },
    "requests-2.22.0/pyi/tests/test_testserver.py": {
        "TestTestServer.test_basic": {
            "name": "test_basic",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTestServer.test_basic_response": {
            "name": "test_basic_response",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTestServer.test_basic_waiting_server": {
            "name": "test_basic_waiting_server",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTestServer.test_multiple_requests": {
            "name": "test_multiple_requests",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTestServer.test_request_recovery_with_bigger_timeout": {
            "name": "test_request_recovery_with_bigger_timeout",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTestServer.test_requests_after_timeout_are_not_received": {
            "name": "test_requests_after_timeout_are_not_received",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTestServer.test_server_closes": {
            "name": "test_server_closes",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTestServer.test_server_finishes_on_error": {
            "name": "test_server_finishes_on_error",
            "location": 22,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTestServer.test_server_finishes_when_no_connections": {
            "name": "test_server_finishes_when_no_connections",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTestServer.test_text_response": {
            "name": "test_text_response",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "global": {
            "Server": [
                "Type[tests.testserver.server.Server]"
            ],
            "pytest": [
                "Any"
            ]
        },
        "TestTestServer": {
            "test_request_recovery": [
                "Any"
            ]
        }
    },
    "requests-2.22.0/pyi/tests/test_utils.py": {
        "_parse_content_type_header": {
            "name": "_parse_content_type_header",
            "location": 113,
            "return": [
                "Tuple[(Any, dict)]"
            ],
            "arguments": {
                "header": []
            }
        },
        "add_dict_to_cookiejar": {
            "name": "add_dict_to_cookiejar",
            "location": 114,
            "return": [
                "Any"
            ],
            "arguments": {
                "cj": [],
                "cookie_dict": []
            }
        },
        "address_in_network": {
            "name": "address_in_network",
            "location": 115,
            "return": [
                "Any"
            ],
            "arguments": {
                "ip": [],
                "net": []
            }
        },
        "dotted_netmask": {
            "name": "dotted_netmask",
            "location": 116,
            "return": [
                "str"
            ],
            "arguments": {
                "mask": []
            }
        },
        "extract_zipped_paths": {
            "name": "extract_zipped_paths",
            "location": 117,
            "return": [
                "Union[(str, _T0)]"
            ],
            "arguments": {
                "path": [
                    "_T0"
                ]
            }
        },
        "get_auth_from_url": {
            "name": "get_auth_from_url",
            "location": 118,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "url": []
            }
        },
        "get_encoding_from_headers": {
            "name": "get_encoding_from_headers",
            "location": 119,
            "return": [
                "Any"
            ],
            "arguments": {
                "headers": []
            }
        },
        "get_encodings_from_content": {
            "name": "get_encodings_from_content",
            "location": 120,
            "return": [
                "list"
            ],
            "arguments": {
                "content": []
            }
        },
        "get_environ_proxies": {
            "name": "get_environ_proxies",
            "location": 121,
            "return": [
                "Any"
            ],
            "arguments": {
                "url": [],
                "no_proxy": []
            }
        },
        "guess_filename": {
            "name": "guess_filename",
            "location": 122,
            "return": [
                "Any"
            ],
            "arguments": {
                "obj": []
            }
        },
        "guess_json_utf": {
            "name": "guess_json_utf",
            "location": 123,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "data": []
            }
        },
        "is_ipv4_address": {
            "name": "is_ipv4_address",
            "location": 124,
            "return": [
                "bool"
            ],
            "arguments": {
                "string_ip": []
            }
        },
        "is_valid_cidr": {
            "name": "is_valid_cidr",
            "location": 125,
            "return": [
                "bool"
            ],
            "arguments": {
                "string_network": []
            }
        },
        "iter_slices": {
            "name": "iter_slices",
            "location": 126,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "string": [],
                "slice_length": []
            }
        },
        "parse_dict_header": {
            "name": "parse_dict_header",
            "location": 127,
            "return": [
                "dict"
            ],
            "arguments": {
                "value": []
            }
        },
        "parse_header_links": {
            "name": "parse_header_links",
            "location": 128,
            "return": [
                "List[dict]"
            ],
            "arguments": {
                "value": []
            }
        },
        "prepend_scheme_if_needed": {
            "name": "prepend_scheme_if_needed",
            "location": 129,
            "return": [
                "Any"
            ],
            "arguments": {
                "url": [],
                "new_scheme": []
            }
        },
        "requote_uri": {
            "name": "requote_uri",
            "location": 130,
            "return": [
                "Any"
            ],
            "arguments": {
                "uri": []
            }
        },
        "select_proxy": {
            "name": "select_proxy",
            "location": 131,
            "return": [
                "Any"
            ],
            "arguments": {
                "url": [],
                "proxies": []
            }
        },
        "should_bypass_proxies": {
            "name": "should_bypass_proxies",
            "location": 132,
            "return": [
                "bool"
            ],
            "arguments": {
                "url": [],
                "no_proxy": []
            }
        },
        "super_len": {
            "name": "super_len",
            "location": 133,
            "return": [
                "Any"
            ],
            "arguments": {
                "o": []
            }
        },
        "test_set_environ_raises_exception": {
            "name": "test_set_environ_raises_exception",
            "location": 134,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "to_key_val_list": {
            "name": "to_key_val_list",
            "location": 135,
            "return": [
                "Optional[list]"
            ],
            "arguments": {
                "value": []
            }
        },
        "unicode_is_ascii": {
            "name": "unicode_is_ascii",
            "location": 136,
            "return": [
                "bool"
            ],
            "arguments": {
                "u_string": []
            }
        },
        "unquote_header_value": {
            "name": "unquote_header_value",
            "location": 137,
            "return": [
                "Any"
            ],
            "arguments": {
                "value": [],
                "is_filename": []
            }
        },
        "unquote_unreserved": {
            "name": "unquote_unreserved",
            "location": 138,
            "return": [
                "str"
            ],
            "arguments": {
                "uri": []
            }
        },
        "urldefragauth": {
            "name": "urldefragauth",
            "location": 139,
            "return": [
                "Any"
            ],
            "arguments": {
                "url": []
            }
        },
        "TestAddressInNetwork.test_invalid": {
            "name": "test_invalid",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAddressInNetwork.test_valid": {
            "name": "test_valid",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContentEncodingDetection.test_none": {
            "name": "test_none",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContentEncodingDetection.test_precedence": {
            "name": "test_precedence",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExtractZippedPaths.test_zipped_paths_extracted": {
            "name": "test_zipped_paths_extracted",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tmpdir": []
            }
        },
        "TestGuessJSONUTF.test_bad_utf_like_encoding": {
            "name": "test_bad_utf_like_encoding",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIsIPv4Address.test_valid": {
            "name": "test_valid",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIsValidCIDR.test_valid": {
            "name": "test_valid",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSuperLen.test_string": {
            "name": "test_string",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSuperLen.test_super_len_correctly_calculates_len_of_partially_read_file": {
            "name": "test_super_len_correctly_calculates_len_of_partially_read_file",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSuperLen.test_super_len_with__len__": {
            "name": "test_super_len_with__len__",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSuperLen.test_super_len_with_fileno": {
            "name": "test_super_len_with_fileno",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSuperLen.test_super_len_with_no__len__": {
            "name": "test_super_len_with_no__len__",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSuperLen.test_super_len_with_no_matches": {
            "name": "test_super_len_with_no_matches",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSuperLen.test_super_len_with_tell": {
            "name": "test_super_len_with_tell",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestToKeyValList.test_invalid": {
            "name": "test_invalid",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUnquoteHeaderValue.test_is_filename": {
            "name": "test_is_filename",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "global": {
            "BytesIO": [
                "Type[io.BytesIO]"
            ],
            "CaseInsensitiveDict": [
                "Type[requests.structures.CaseInsensitiveDict]"
            ],
            "ENCODED_PASSWORD": [
                "Any"
            ],
            "ENCODED_USER": [
                "Any"
            ],
            "PASSWORD": [
                "str"
            ],
            "RequestsCookieJar": [
                "Type[requests.cookies.RequestsCookieJar]"
            ],
            "StringIO": [
                "Any"
            ],
            "USER": [
                "str"
            ],
            "all_proxies": [
                "Dict[(str, str)]"
            ],
            "cStringIO": [
                "Any"
            ],
            "compat": [
                "Any"
            ],
            "deque": [
                "Type[collections.deque]"
            ],
            "http_proxies": [
                "Dict[(str, str)]"
            ],
            "mixed_proxies": [
                "Dict[(str, str)]"
            ],
            "pytest": [
                "Any"
            ],
            "set_environ": [
                "Callable[(..., contextlib._GeneratorContextManager)]"
            ],
            "test__parse_content_type_header": [
                "Any"
            ],
            "test_add_dict_to_cookiejar": [
                "Any"
            ],
            "test_dotted_netmask": [
                "Any"
            ],
            "test_get_auth_from_url": [
                "Any"
            ],
            "test_get_encoding_from_headers": [
                "Any"
            ],
            "test_iter_slices": [
                "Any"
            ],
            "test_parse_dict_header": [
                "Any"
            ],
            "test_parse_header_links": [
                "Any"
            ],
            "test_prepend_scheme_if_needed": [
                "Any"
            ],
            "test_requote_uri_with_unquoted_percents": [
                "Any"
            ],
            "test_select_proxies": [
                "Any"
            ],
            "test_set_environ": [
                "Any"
            ],
            "test_should_bypass_proxies": [
                "Any"
            ],
            "test_should_bypass_proxies_no_proxy": [
                "Any"
            ],
            "test_should_bypass_proxies_pass_only_hostname": [
                "Any"
            ],
            "test_should_bypass_proxies_win_registry": [
                "Any"
            ],
            "test_to_native_string": [
                "Any"
            ],
            "test_unicode_is_ascii": [
                "Any"
            ],
            "test_unquote_unreserved": [
                "Any"
            ],
            "test_urldefragauth": [
                "Any"
            ],
            "to_native_string": [
                "Any"
            ]
        },
        "TestAddressInNetwork": {},
        "TestContentEncodingDetection": {
            "test_pragmas": [
                "Any"
            ]
        },
        "TestExtractZippedPaths": {
            "test_unzipped_paths_unchanged": [
                "Any"
            ]
        },
        "TestGetEnvironProxies": {
            "__doc__": [
                "str"
            ],
            "no_proxy": [
                "Any"
            ],
            "test_bypass": [
                "Any"
            ],
            "test_bypass_no_proxy_keyword": [
                "Any"
            ],
            "test_not_bypass": [
                "Any"
            ],
            "test_not_bypass_no_proxy_keyword": [
                "Any"
            ]
        },
        "TestGuessFilename": {
            "test_guess_filename_invalid": [
                "Any"
            ],
            "test_guess_filename_valid": [
                "Any"
            ]
        },
        "TestGuessJSONUTF": {
            "test_encoded": [
                "Any"
            ],
            "test_guess_by_bom": [
                "Any"
            ]
        },
        "TestIsIPv4Address": {
            "test_invalid": [
                "Any"
            ]
        },
        "TestIsValidCIDR": {
            "test_invalid": [
                "Any"
            ]
        },
        "TestSuperLen": {
            "test_file": [
                "Any"
            ],
            "test_io_streams": [
                "Any"
            ],
            "test_super_len_handles_files_raising_weird_errors_in_tell": [
                "Any"
            ],
            "test_super_len_tell_ioerror": [
                "Any"
            ]
        },
        "TestToKeyValList": {
            "test_valid": [
                "Any"
            ]
        },
        "TestUnquoteHeaderValue": {
            "test_valid": [
                "Any"
            ]
        }
    },
    "requests-2.22.0/pyi/tests/utils.py": {
        "global": {
            "override_environ": [
                "Callable[(..., contextlib._GeneratorContextManager)]"
            ]
        }
    },
    "requests-2.22.0/pyi/tests/__init__.py": {
        "global": {
            "SNIMissingWarning": [
                "Type[urllib3.exceptions.SNIMissingWarning]"
            ]
        }
    },
    "requests-2.22.0/pyi/tests/testserver/server.py": {
        "consume_socket_content": {
            "name": "consume_socket_content",
            "location": 35,
            "return": [
                "bytes"
            ],
            "arguments": {
                "sock": [],
                "timeout": []
            }
        },
        "Server.__enter__": {
            "name": "__enter__",
            "location": 22,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Server.__exit__": {
            "name": "__exit__",
            "location": 23,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]"
                ],
                "exc_value": [
                    "Optional[BaseException]"
                ],
                "traceback": []
            }
        },
        "Server.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handler": [],
                "host": [],
                "port": [],
                "requests_to_handle": [],
                "wait_to_close_event": []
            }
        },
        "Server._accept_connection": {
            "name": "_accept_connection",
            "location": 25,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Server._close_server_sock_ignore_errors": {
            "name": "_close_server_sock_ignore_errors",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Server._create_socket_and_bind": {
            "name": "_create_socket_and_bind",
            "location": 27,
            "return": [
                "socket.socket"
            ],
            "arguments": {
                "self": []
            }
        },
        "Server._handle_requests": {
            "name": "_handle_requests",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Server.basic_response_server": {
            "name": "basic_response_server",
            "location": 30,
            "return": [
                "_TServer"
            ],
            "arguments": {
                "cls": [
                    "Type[_TServer]"
                ]
            }
        },
        "Server.run": {
            "name": "run",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Server.text_response_server": {
            "name": "text_response_server",
            "location": 33,
            "return": [
                "_TServer"
            ],
            "arguments": {
                "cls": [
                    "Type[_TServer]"
                ],
                "text": [],
                "request_timeout": []
            }
        },
        "global": {},
        "Server": {
            "WAIT_EVENT_TIMEOUT": [
                "int"
            ],
            "__doc__": [
                "str"
            ],
            "handler": [
                "Any"
            ],
            "handler_results": [
                "list"
            ],
            "host": [
                "Any"
            ],
            "port": [
                "Any"
            ],
            "ready_event": [
                "threading.Event"
            ],
            "requests_to_handle": [
                "Any"
            ],
            "server_sock": [
                "socket.socket"
            ],
            "stop_event": [
                "threading.Event"
            ],
            "wait_to_close_event": [
                "Any"
            ]
        }
    },
    "requests-2.22.0/pyi/tests/testserver/__init__.py": {
        "global": {}
    }
}