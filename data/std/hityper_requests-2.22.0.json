{
    "requests-2.22.0/docs/_themes/flask_theme_support.py": {
        "global": {}
    },
    "requests-2.22.0/docs/conf.py": {
        "global": {}
    },
    "requests-2.22.0/requests/__init__.py": {
        "_check_cryptography": {
            "name": "_check_cryptography",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "cryptography_version": []
            },
            "variables": {
                "cryptography_version": [
                    "list"
                ],
                "warning": [
                    "str"
                ]
            }
        },
        "check_compatibility": {
            "name": "check_compatibility",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "urllib3_version": [],
                "chardet_version": []
            },
            "variables": {
                "major": [
                    "int"
                ],
                "minor": [
                    "int"
                ],
                "patch": [
                    "int"
                ]
            }
        },
        "global": {}
    },
    "requests-2.22.0/requests/__version__.py": {
        "global": {}
    },
    "requests-2.22.0/requests/_internal_utils.py": {
        "global": {},
        "to_native_string": {
            "name": "to_native_string",
            "location": -1,
            "return": [
                "builtin_str"
            ],
            "arguments": {
                "string": [],
                "encoding": [
                    "typing.Text"
                ]
            },
            "variables": {
                "string": [
                    "builtin_str"
                ],
                "out": [
                    "builtin_str"
                ],
                "encoding": [
                    "typing.Text"
                ]
            }
        },
        "unicode_is_ascii": {
            "name": "unicode_is_ascii",
            "location": -1,
            "return": [
                "bool"
            ],
            "arguments": {
                "u_string": []
            },
            "variables": {}
        }
    },
    "requests-2.22.0/requests/adapters.py": {
        "SOCKSProxyManager": {
            "name": "SOCKSProxyManager",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "kwargs": [],
                "args": []
            },
            "variables": {}
        },
        "HTTPAdapter.__getstate__": {
            "name": "__getstate__",
            "location": -1,
            "return": [
                "dict"
            ],
            "arguments": {},
            "variables": {}
        },
        "BaseAdapter.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "HTTPAdapter.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "pool_connections": [
                    "int"
                ],
                "pool_maxsize": [
                    "int"
                ],
                "max_retries": [
                    "int"
                ],
                "pool_block": [
                    "bool"
                ]
            },
            "variables": {
                "DEFAULT_POOLSIZE": [
                    "int"
                ],
                "DEFAULT_RETRIES": [
                    "int"
                ],
                "DEFAULT_POOLBLOCK": [
                    "bool"
                ],
                "max_retries": [
                    "int",
                    "Retry"
                ],
                "config": [
                    "dict"
                ],
                "proxy_manager": [
                    "dict"
                ],
                "pool_connections": [
                    "int"
                ],
                "_pool_connections": [
                    "int"
                ],
                "pool_maxsize": [
                    "int"
                ],
                "_pool_maxsize": [
                    "int"
                ],
                "pool_block": [
                    "bool"
                ],
                "_pool_block": [
                    "bool"
                ]
            }
        },
        "HTTPAdapter.__setstate__": {
            "name": "__setstate__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "state": []
            },
            "variables": {
                "proxy_manager": [
                    "dict"
                ],
                "config": [
                    "dict"
                ]
            }
        },
        "HTTPAdapter.add_headers": {
            "name": "add_headers",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "request": [],
                "kwargs": []
            },
            "variables": {}
        },
        "HTTPAdapter.build_response": {
            "name": "build_response",
            "location": -1,
            "return": [
                "Response"
            ],
            "arguments": {
                "req": [],
                "resp": []
            },
            "variables": {
                "response": [
                    "Response"
                ],
                "response_": [
                    "CaseInsensitiveDict",
                    "HTTPAdapter"
                ],
                "req_": [
                    "bytes"
                ]
            }
        },
        "HTTPAdapter.cert_verify": {
            "name": "cert_verify",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "conn": [],
                "url": [],
                "verify": [],
                "cert": []
            },
            "variables": {
                "verify": [
                    "bool"
                ],
                "cert_loc": [
                    "None"
                ],
                "conn_": [
                    "typing.Text",
                    "None"
                ]
            }
        },
        "BaseAdapter.close": {
            "name": "close",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "HTTPAdapter.close": {
            "name": "close",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "HTTPAdapter.get_connection": {
            "name": "get_connection",
            "location": -1,
            "return": [],
            "arguments": {
                "url": [],
                "proxies": [
                    "None"
                ]
            },
            "variables": {
                "proxies": [
                    "None"
                ]
            }
        },
        "global": {},
        "HTTPAdapter.init_poolmanager": {
            "name": "init_poolmanager",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "connections": [],
                "maxsize": [],
                "block": [
                    "bool"
                ],
                "pool_kwargs": []
            },
            "variables": {
                "DEFAULT_POOLBLOCK": [
                    "bool"
                ],
                "block": [
                    "bool"
                ],
                "_pool_block": [
                    "bool"
                ],
                "poolmanager": [
                    "PoolManager"
                ]
            }
        },
        "HTTPAdapter.proxy_headers": {
            "name": "proxy_headers",
            "location": -1,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "proxy": []
            },
            "variables": {
                "headers": [
                    "dict",
                    "dict[typing.Text, ]"
                ]
            }
        },
        "HTTPAdapter.proxy_manager_for": {
            "name": "proxy_manager_for",
            "location": -1,
            "return": [
                "SOCKSProxyManager"
            ],
            "arguments": {
                "proxy": [],
                "proxy_kwargs": []
            },
            "variables": {
                "manager": [
                    "SOCKSProxyManager"
                ]
            }
        },
        "HTTPAdapter.request_url": {
            "name": "request_url",
            "location": -1,
            "return": [],
            "arguments": {
                "request": [],
                "proxies": []
            },
            "variables": {
                "is_proxied_http_request": [
                    "bool"
                ],
                "using_socks_proxy": [
                    "bool"
                ]
            }
        },
        "BaseAdapter.send": {
            "name": "send",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "request": [],
                "stream": [
                    "bool"
                ],
                "timeout": [
                    "None"
                ],
                "verify": [
                    "bool"
                ],
                "cert": [
                    "None"
                ],
                "proxies": [
                    "None"
                ]
            },
            "variables": {}
        },
        "HTTPAdapter.send": {
            "name": "send",
            "location": -1,
            "return": [],
            "arguments": {
                "request": [],
                "stream": [
                    "bool"
                ],
                "timeout": [
                    "None"
                ],
                "verify": [
                    "bool"
                ],
                "cert": [
                    "None"
                ],
                "proxies": [
                    "None"
                ]
            },
            "variables": {
                "proxies": [
                    "None"
                ],
                "e": [
                    "Exception",
                    "_SSLError",
                    "ReadTimeoutError"
                ],
                "verify": [
                    "bool"
                ],
                "cert": [
                    "None"
                ],
                "stream": [
                    "bool"
                ],
                "timeout": [
                    "None",
                    "tuple",
                    "TimeoutSauce"
                ],
                "chunked": [
                    "bool"
                ],
                "err": [
                    "str",
                    "Exception"
                ],
                "DEFAULT_POOL_TIMEOUT": [
                    "None"
                ],
                "e_": [
                    "ConnectTimeoutError",
                    "ResponseError",
                    "_ProxyError",
                    "_SSLError"
                ]
            }
        }
    },
    "requests-2.22.0/requests/api.py": {
        "delete": {
            "name": "delete",
            "location": -1,
            "return": [],
            "arguments": {
                "url": [],
                "kwargs": []
            },
            "variables": {}
        },
        "get": {
            "name": "get",
            "location": -1,
            "return": [],
            "arguments": {
                "url": [],
                "params": [
                    "None"
                ],
                "kwargs": []
            },
            "variables": {
                "kwargs": [
                    "bool"
                ],
                "params": [
                    "None"
                ]
            }
        },
        "global": {},
        "head": {
            "name": "head",
            "location": -1,
            "return": [],
            "arguments": {
                "url": [],
                "kwargs": []
            },
            "variables": {
                "kwargs": [
                    "bool"
                ]
            }
        },
        "options": {
            "name": "options",
            "location": -1,
            "return": [],
            "arguments": {
                "url": [],
                "kwargs": []
            },
            "variables": {
                "kwargs": [
                    "bool"
                ]
            }
        },
        "patch": {
            "name": "patch",
            "location": -1,
            "return": [],
            "arguments": {
                "url": [],
                "data": [
                    "None"
                ],
                "kwargs": []
            },
            "variables": {
                "data": [
                    "None"
                ]
            }
        },
        "post": {
            "name": "post",
            "location": -1,
            "return": [],
            "arguments": {
                "url": [],
                "data": [
                    "None"
                ],
                "json": [
                    "None"
                ],
                "kwargs": []
            },
            "variables": {
                "data": [
                    "None"
                ],
                "json": [
                    "None"
                ]
            }
        },
        "put": {
            "name": "put",
            "location": -1,
            "return": [],
            "arguments": {
                "url": [],
                "data": [
                    "None"
                ],
                "kwargs": []
            },
            "variables": {
                "data": [
                    "None"
                ]
            }
        },
        "request": {
            "name": "request",
            "location": -1,
            "return": [],
            "arguments": {
                "method": [],
                "url": [],
                "kwargs": []
            },
            "variables": {
                "session": [
                    "Session"
                ]
            }
        }
    },
    "requests-2.22.0/requests/auth.py": {
        "AuthBase.__call__": {
            "name": "__call__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "r": []
            },
            "variables": {}
        },
        "HTTPBasicAuth.__call__": {
            "name": "__call__",
            "location": -1,
            "return": [],
            "arguments": {
                "r": []
            },
            "variables": {}
        },
        "HTTPDigestAuth.__call__": {
            "name": "__call__",
            "location": -1,
            "return": [],
            "arguments": {
                "r": []
            },
            "variables": {
                "self_": [
                    "None",
                    "int"
                ]
            }
        },
        "HTTPProxyAuth.__call__": {
            "name": "__call__",
            "location": -1,
            "return": [],
            "arguments": {
                "r": []
            },
            "variables": {}
        },
        "HTTPBasicAuth.__eq__": {
            "name": "__eq__",
            "location": -1,
            "return": [
                "bool"
            ],
            "arguments": {
                "other": []
            },
            "variables": {}
        },
        "HTTPDigestAuth.__eq__": {
            "name": "__eq__",
            "location": -1,
            "return": [
                "bool"
            ],
            "arguments": {
                "other": []
            },
            "variables": {}
        },
        "HTTPBasicAuth.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "username": [],
                "password": []
            },
            "variables": {}
        },
        "HTTPDigestAuth.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "username": [],
                "password": []
            },
            "variables": {}
        },
        "HTTPBasicAuth.__ne__": {
            "name": "__ne__",
            "location": -1,
            "return": [
                "bool"
            ],
            "arguments": {
                "other": []
            },
            "variables": {}
        },
        "HTTPDigestAuth.__ne__": {
            "name": "__ne__",
            "location": -1,
            "return": [
                "bool"
            ],
            "arguments": {
                "other": []
            },
            "variables": {}
        },
        "_basic_auth_str": {
            "name": "_basic_auth_str",
            "location": -1,
            "return": [],
            "arguments": {
                "username": [],
                "password": []
            },
            "variables": {
                "username": [
                    "str",
                    "bytes"
                ],
                "password": [
                    "str",
                    "bytes"
                ]
            }
        },
        "HTTPDigestAuth.build_digest_header": {
            "name": "build_digest_header",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "method": [],
                "url": []
            },
            "variables": {
                "self_": [
                    "int"
                ],
                "algorithm": [
                    "None"
                ],
                "hash_utf8": [
                    "None"
                ],
                "_algorithm": [
                    "typing.Text"
                ],
                "KD": [
                    "typing.Callable"
                ],
                "entdig": [
                    "None"
                ],
                "path": [
                    "typing.Text"
                ],
                "A1": [
                    "typing.Text"
                ],
                "A2": [
                    "typing.Text"
                ],
                "ncvalue": [
                    "typing.Text"
                ],
                "s": [
                    "bytes"
                ],
                "noncebit": [
                    "typing.Text"
                ]
            }
        },
        "global": {},
        "HTTPDigestAuth.handle_401": {
            "name": "handle_401",
            "location": -1,
            "return": [],
            "arguments": {
                "r": [],
                "kwargs": []
            },
            "variables": {
                "self_": [
                    "int",
                    "None"
                ]
            }
        },
        "HTTPDigestAuth.handle_redirect": {
            "name": "handle_redirect",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "r": [],
                "kwargs": []
            },
            "variables": {
                "self_": [
                    "int"
                ]
            }
        },
        "HTTPDigestAuth.init_per_thread_state": {
            "name": "init_per_thread_state",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "self_": [
                    "bool",
                    "typing.Text",
                    "int",
                    "dict",
                    "None"
                ]
            }
        },
        "HTTPDigestAuth.md5_utf8": {
            "name": "md5_utf8",
            "location": -1,
            "return": [],
            "arguments": {
                "x": []
            },
            "variables": {
                "x": [
                    "str",
                    "bytes"
                ]
            }
        },
        "HTTPDigestAuth.sha256_utf8": {
            "name": "sha256_utf8",
            "location": -1,
            "return": [],
            "arguments": {
                "x": []
            },
            "variables": {
                "x": [
                    "str",
                    "bytes"
                ]
            }
        },
        "HTTPDigestAuth.sha512_utf8": {
            "name": "sha512_utf8",
            "location": -1,
            "return": [],
            "arguments": {
                "x": []
            },
            "variables": {
                "x": [
                    "str",
                    "bytes"
                ]
            }
        },
        "HTTPDigestAuth.sha_utf8": {
            "name": "sha_utf8",
            "location": -1,
            "return": [],
            "arguments": {
                "x": []
            },
            "variables": {
                "x": [
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "requests-2.22.0/requests/certs.py": {
        "global": {}
    },
    "requests-2.22.0/requests/compat.py": {
        "global": {}
    },
    "requests-2.22.0/requests/cookies.py": {
        "RequestsCookieJar.__contains__": {
            "name": "__contains__",
            "location": -1,
            "return": [
                "bool"
            ],
            "arguments": {
                "name": []
            },
            "variables": {}
        },
        "RequestsCookieJar.__delitem__": {
            "name": "__delitem__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "name": []
            },
            "variables": {}
        },
        "RequestsCookieJar.__getitem__": {
            "name": "__getitem__",
            "location": -1,
            "return": [],
            "arguments": {
                "name": []
            },
            "variables": {}
        },
        "RequestsCookieJar.__getstate__": {
            "name": "__getstate__",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "MockRequest.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "request": []
            },
            "variables": {
                "_new_headers": [
                    "dict"
                ]
            }
        },
        "MockResponse.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "headers": []
            },
            "variables": {}
        },
        "RequestsCookieJar.__setitem__": {
            "name": "__setitem__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [],
                "value": []
            },
            "variables": {}
        },
        "RequestsCookieJar.__setstate__": {
            "name": "__setstate__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "state": []
            },
            "variables": {}
        },
        "_copy_cookie_jar": {
            "name": "_copy_cookie_jar",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "jar": []
            },
            "variables": {}
        },
        "RequestsCookieJar._find": {
            "name": "_find",
            "location": -1,
            "return": [],
            "arguments": {
                "name": [],
                "domain": [
                    "None"
                ],
                "path": [
                    "None"
                ]
            },
            "variables": {
                "domain": [
                    "None"
                ],
                "path": [
                    "None"
                ]
            }
        },
        "RequestsCookieJar._find_no_duplicates": {
            "name": "_find_no_duplicates",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [],
                "domain": [
                    "None"
                ],
                "path": [
                    "None"
                ]
            },
            "variables": {
                "toReturn": [
                    "None"
                ],
                "domain": [
                    "None"
                ],
                "path": [
                    "None"
                ]
            }
        },
        "MockRequest.add_header": {
            "name": "add_header",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "key": [],
                "val": []
            },
            "variables": {}
        },
        "MockRequest.add_unredirected_header": {
            "name": "add_unredirected_header",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [],
                "value": []
            },
            "variables": {}
        },
        "cookiejar_from_dict": {
            "name": "cookiejar_from_dict",
            "location": -1,
            "return": [
                "RequestsCookieJar"
            ],
            "arguments": {
                "cookie_dict": [],
                "cookiejar": [
                    "None"
                ],
                "overwrite": [
                    "bool"
                ]
            },
            "variables": {
                "cookiejar": [
                    "None",
                    "RequestsCookieJar"
                ],
                "cookie_dict": [
                    "None"
                ],
                "names_from_jar": [
                    "list"
                ],
                "overwrite": [
                    "bool"
                ]
            }
        },
        "RequestsCookieJar.copy": {
            "name": "copy",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {
                "new_cj": [
                    "RequestsCookieJar"
                ]
            }
        },
        "create_cookie": {
            "name": "create_cookie",
            "location": -1,
            "return": [],
            "arguments": {
                "name": [],
                "value": [],
                "kwargs": []
            },
            "variables": {
                "result": [
                    "dict[typing.Text, typing.Union[int,None,typing.Text,dict[typing.Text, None]]]"
                ],
                "err": [
                    "typing.Text"
                ]
            }
        },
        "extract_cookies_to_jar": {
            "name": "extract_cookies_to_jar",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "jar": [],
                "request": [],
                "response": []
            },
            "variables": {
                "req": [
                    "MockRequest"
                ],
                "res": [
                    "MockResponse"
                ]
            }
        },
        "RequestsCookieJar.get": {
            "name": "get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [],
                "default": [
                    "None"
                ],
                "domain": [
                    "None"
                ],
                "path": [
                    "None"
                ]
            },
            "variables": {
                "domain": [
                    "None"
                ],
                "path": [
                    "None"
                ],
                "default": [
                    "None"
                ]
            }
        },
        "get_cookie_header": {
            "name": "get_cookie_header",
            "location": -1,
            "return": [],
            "arguments": {
                "jar": [],
                "request": []
            },
            "variables": {
                "r": [
                    "MockRequest"
                ]
            }
        },
        "RequestsCookieJar.get_dict": {
            "name": "get_dict",
            "location": -1,
            "return": [
                "dict"
            ],
            "arguments": {
                "domain": [
                    "None"
                ],
                "path": [
                    "None"
                ]
            },
            "variables": {
                "dictionary": [
                    "dict"
                ],
                "domain": [
                    "None"
                ],
                "path": [
                    "None"
                ]
            }
        },
        "MockRequest.get_full_url": {
            "name": "get_full_url",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "MockRequest.get_header": {
            "name": "get_header",
            "location": -1,
            "return": [],
            "arguments": {
                "name": [],
                "default": [
                    "None"
                ]
            },
            "variables": {
                "default": [
                    "None"
                ]
            }
        },
        "MockRequest.get_host": {
            "name": "get_host",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "MockRequest.get_new_headers": {
            "name": "get_new_headers",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "MockRequest.get_origin_req_host": {
            "name": "get_origin_req_host",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "RequestsCookieJar.get_policy": {
            "name": "get_policy",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "MockRequest.get_type": {
            "name": "get_type",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "MockResponse.getheaders": {
            "name": "getheaders",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "name": []
            },
            "variables": {}
        },
        "global": {},
        "MockRequest.has_header": {
            "name": "has_header",
            "location": -1,
            "return": [
                "bool"
            ],
            "arguments": {
                "name": []
            },
            "variables": {}
        },
        "MockRequest.host": {
            "name": "host",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "MockResponse.info": {
            "name": "info",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "MockRequest.is_unverifiable": {
            "name": "is_unverifiable",
            "location": -1,
            "return": [
                "bool"
            ],
            "arguments": {},
            "variables": {}
        },
        "RequestsCookieJar.items": {
            "name": "items",
            "location": -1,
            "return": [
                "list"
            ],
            "arguments": {},
            "variables": {}
        },
        "RequestsCookieJar.iteritems": {
            "name": "iteritems",
            "location": -1,
            "return": [
                "typing.Generator[tuple]"
            ],
            "arguments": {},
            "variables": {}
        },
        "RequestsCookieJar.iterkeys": {
            "name": "iterkeys",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {}
        },
        "RequestsCookieJar.itervalues": {
            "name": "itervalues",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {}
        },
        "RequestsCookieJar.keys": {
            "name": "keys",
            "location": -1,
            "return": [
                "list"
            ],
            "arguments": {},
            "variables": {}
        },
        "RequestsCookieJar.list_domains": {
            "name": "list_domains",
            "location": -1,
            "return": [
                "list"
            ],
            "arguments": {},
            "variables": {
                "domains": [
                    "list"
                ]
            }
        },
        "RequestsCookieJar.list_paths": {
            "name": "list_paths",
            "location": -1,
            "return": [
                "list"
            ],
            "arguments": {},
            "variables": {
                "paths": [
                    "list"
                ]
            }
        },
        "merge_cookies": {
            "name": "merge_cookies",
            "location": -1,
            "return": [],
            "arguments": {
                "cookiejar": [],
                "cookies": []
            },
            "variables": {
                "cookies": [
                    "dict",
                    "cookielib_@_CookieJar"
                ]
            }
        },
        "morsel_to_cookie": {
            "name": "morsel_to_cookie",
            "location": -1,
            "return": [],
            "arguments": {
                "morsel": []
            },
            "variables": {
                "expires": [
                    "None",
                    "int"
                ],
                "time_template": [
                    "typing.Text"
                ]
            }
        },
        "RequestsCookieJar.multiple_domains": {
            "name": "multiple_domains",
            "location": -1,
            "return": [
                "bool"
            ],
            "arguments": {},
            "variables": {
                "domains": [
                    "list"
                ]
            }
        },
        "MockRequest.origin_req_host": {
            "name": "origin_req_host",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "remove_cookie_by_name": {
            "name": "remove_cookie_by_name",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "cookiejar": [],
                "name": [],
                "domain": [
                    "None"
                ],
                "path": [
                    "None"
                ]
            },
            "variables": {
                "clearables": [
                    "list",
                    "list[tuple]"
                ],
                "domain": [
                    "None"
                ],
                "path": [
                    "None"
                ]
            }
        },
        "RequestsCookieJar.set": {
            "name": "set",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [],
                "value": [],
                "kwargs": []
            },
            "variables": {
                "value": [
                    "None",
                    "Morsel"
                ]
            }
        },
        "RequestsCookieJar.set_cookie": {
            "name": "set_cookie",
            "location": -1,
            "return": [],
            "arguments": {
                "cookie": [],
                "kwargs": [],
                "args": []
            },
            "variables": {}
        },
        "MockRequest.unverifiable": {
            "name": "unverifiable",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "RequestsCookieJar.update": {
            "name": "update",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "other": []
            },
            "variables": {
                "other": [
                    "cookielib_@_CookieJar"
                ]
            }
        },
        "RequestsCookieJar.values": {
            "name": "values",
            "location": -1,
            "return": [
                "list"
            ],
            "arguments": {},
            "variables": {}
        }
    },
    "requests-2.22.0/requests/exceptions.py": {
        "RequestException.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "kwargs": [],
                "args": []
            },
            "variables": {}
        },
        "global": {}
    },
    "requests-2.22.0/requests/help.py": {
        "_implementation": {
            "name": "_implementation",
            "location": -1,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {},
            "variables": {
                "implementation_version": [
                    "typing.Text",
                    "str"
                ]
            }
        },
        "global": {},
        "info": {
            "name": "info",
            "location": -1,
            "return": [
                "dict[typing.Text, typing.Union[bool,dict[typing.Text, typing.Union[None,typing.Text]]]]"
            ],
            "arguments": {},
            "variables": {
                "platform_info": [
                    "dict[typing.Text, ]",
                    "dict[typing.Text, typing.Text]"
                ],
                "urllib3_info": [
                    "dict[typing.Text, ]"
                ],
                "chardet_info": [
                    "dict[typing.Text, ]"
                ],
                "pyopenssl_info": [
                    "dict[typing.Text, typing.Union[None,typing.Text]]",
                    "dict[typing.Text, typing.Text]"
                ],
                "OpenSSL": [
                    "None"
                ],
                "cryptography": [
                    "None"
                ],
                "cryptography_info": [
                    "dict[typing.Text, ]"
                ],
                "idna_info": [
                    "dict[typing.Text, ]"
                ],
                "system_ssl": [
                    "None"
                ],
                "system_ssl_info": [
                    "dict[typing.Text, typing.Text]"
                ],
                "pyopenssl": [
                    "None"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        }
    },
    "requests-2.22.0/requests/hooks.py": {
        "default_hooks": {
            "name": "default_hooks",
            "location": -1,
            "return": [
                "dict[typing.Text, list]"
            ],
            "arguments": {},
            "variables": {
                "HOOKS": [
                    "list[typing.Text]"
                ],
                "event": [
                    "typing.Text"
                ]
            }
        },
        "dispatch_hook": {
            "name": "dispatch_hook",
            "location": -1,
            "return": [],
            "arguments": {
                "key": [],
                "hooks": [],
                "hook_data": [],
                "kwargs": []
            },
            "variables": {
                "hooks": [
                    "dict",
                    "list"
                ],
                "_hook_data": [
                    "None"
                ]
            }
        },
        "global": {}
    },
    "requests-2.22.0/requests/packages.py": {
        "global": {}
    },
    "requests-2.22.0/requests/sessions.py": {
        "Session.__enter__": {
            "name": "__enter__",
            "location": -1,
            "return": [
                "Session"
            ],
            "arguments": {},
            "variables": {}
        },
        "Session.__exit__": {
            "name": "__exit__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            },
            "variables": {}
        },
        "Session.__getstate__": {
            "name": "__getstate__",
            "location": -1,
            "return": [
                "dict"
            ],
            "arguments": {},
            "variables": {
                "state": [
                    "dict"
                ]
            }
        },
        "Session.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "auth": [
                    "None"
                ],
                "proxies": [
                    "dict"
                ],
                "params": [
                    "dict"
                ],
                "stream": [
                    "bool"
                ],
                "verify": [
                    "bool"
                ],
                "cert": [
                    "None"
                ],
                "trust_env": [
                    "bool"
                ]
            }
        },
        "Session.__setstate__": {
            "name": "__setstate__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "state": []
            },
            "variables": {}
        },
        "Session.close": {
            "name": "close",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "Session.delete": {
            "name": "delete",
            "location": -1,
            "return": [],
            "arguments": {
                "url": [],
                "kwargs": []
            },
            "variables": {}
        },
        "Session.get": {
            "name": "get",
            "location": -1,
            "return": [],
            "arguments": {
                "url": [],
                "kwargs": []
            },
            "variables": {
                "kwargs": [
                    "bool"
                ]
            }
        },
        "Session.get_adapter": {
            "name": "get_adapter",
            "location": -1,
            "return": [],
            "arguments": {
                "url": []
            },
            "variables": {}
        },
        "SessionRedirectMixin.get_redirect_target": {
            "name": "get_redirect_target",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "resp": []
            },
            "variables": {}
        },
        "global": {},
        "Session.head": {
            "name": "head",
            "location": -1,
            "return": [],
            "arguments": {
                "url": [],
                "kwargs": []
            },
            "variables": {
                "kwargs": [
                    "bool"
                ]
            }
        },
        "Session.merge_environment_settings": {
            "name": "merge_environment_settings",
            "location": -1,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "url": [],
                "proxies": [],
                "stream": [],
                "verify": [],
                "cert": []
            },
            "variables": {
                "proxies": [
                    "None"
                ],
                "no_proxy": [
                    "None"
                ]
            }
        },
        "merge_hooks": {
            "name": "merge_hooks",
            "location": -1,
            "return": [],
            "arguments": {
                "request_hooks": [],
                "session_hooks": [],
                "dict_class": [
                    "typing.OrderedDict"
                ]
            },
            "variables": {
                "dict_class": [
                    "typing.OrderedDict"
                ]
            }
        },
        "merge_setting": {
            "name": "merge_setting",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "request_setting": [],
                "session_setting": [],
                "dict_class": [
                    "typing.OrderedDict"
                ]
            },
            "variables": {
                "session_setting": [
                    "None"
                ],
                "request_setting": [
                    "None"
                ],
                "none_keys": [
                    "list"
                ]
            }
        },
        "Session.mount": {
            "name": "mount",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "prefix": [],
                "adapter": []
            },
            "variables": {
                "keys_to_move": [
                    "list"
                ]
            }
        },
        "Session.options": {
            "name": "options",
            "location": -1,
            "return": [],
            "arguments": {
                "url": [],
                "kwargs": []
            },
            "variables": {
                "kwargs": [
                    "bool"
                ]
            }
        },
        "Session.patch": {
            "name": "patch",
            "location": -1,
            "return": [],
            "arguments": {
                "url": [],
                "data": [
                    "None"
                ],
                "kwargs": []
            },
            "variables": {
                "data": [
                    "None"
                ]
            }
        },
        "Session.post": {
            "name": "post",
            "location": -1,
            "return": [],
            "arguments": {
                "url": [],
                "data": [
                    "None"
                ],
                "json": [
                    "None"
                ],
                "kwargs": []
            },
            "variables": {
                "data": [
                    "None"
                ],
                "json": [
                    "None"
                ]
            }
        },
        "Session.prepare_request": {
            "name": "prepare_request",
            "location": -1,
            "return": [
                "PreparedRequest"
            ],
            "arguments": {
                "request": []
            },
            "variables": {
                "cookies": [
                    "dict"
                ],
                "p": [
                    "PreparedRequest"
                ]
            }
        },
        "Session.put": {
            "name": "put",
            "location": -1,
            "return": [],
            "arguments": {
                "url": [],
                "data": [
                    "None"
                ],
                "kwargs": []
            },
            "variables": {
                "data": [
                    "None"
                ]
            }
        },
        "SessionRedirectMixin.rebuild_auth": {
            "name": "rebuild_auth",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "prepared_request": [],
                "response": []
            },
            "variables": {
                "new_auth": [
                    "None"
                ]
            }
        },
        "SessionRedirectMixin.rebuild_method": {
            "name": "rebuild_method",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "prepared_request": [],
                "response": []
            },
            "variables": {
                "prepared_request_": [
                    "typing.Text"
                ],
                "method": [
                    "typing.Text"
                ]
            }
        },
        "SessionRedirectMixin.rebuild_proxies": {
            "name": "rebuild_proxies",
            "location": -1,
            "return": [
                "dict"
            ],
            "arguments": {
                "prepared_request": [],
                "proxies": []
            },
            "variables": {
                "proxies": [
                    "None",
                    "dict"
                ],
                "new_proxies": [
                    "dict"
                ],
                "username": [
                    "None"
                ],
                "password": [
                    "None"
                ]
            }
        },
        "Session.request": {
            "name": "request",
            "location": -1,
            "return": [],
            "arguments": {
                "method": [],
                "url": [],
                "params": [
                    "None"
                ],
                "data": [
                    "None"
                ],
                "headers": [
                    "None"
                ],
                "cookies": [
                    "None"
                ],
                "files": [
                    "None"
                ],
                "auth": [
                    "None"
                ],
                "timeout": [
                    "None"
                ],
                "allow_redirects": [
                    "bool"
                ],
                "proxies": [
                    "None"
                ],
                "hooks": [
                    "None"
                ],
                "stream": [
                    "None"
                ],
                "verify": [
                    "None"
                ],
                "cert": [
                    "None"
                ],
                "json": [
                    "None"
                ]
            },
            "variables": {
                "headers": [
                    "None"
                ],
                "files": [
                    "None"
                ],
                "data": [
                    "None"
                ],
                "json": [
                    "None"
                ],
                "params": [
                    "None"
                ],
                "auth": [
                    "None"
                ],
                "cookies": [
                    "None"
                ],
                "hooks": [
                    "None"
                ],
                "req": [
                    "Request"
                ],
                "proxies": [
                    "None",
                    "dict"
                ],
                "stream": [
                    "None"
                ],
                "verify": [
                    "None"
                ],
                "cert": [
                    "None"
                ],
                "timeout": [
                    "None"
                ],
                "allow_redirects": [
                    "bool"
                ],
                "send_kwargs": [
                    "dict[typing.Text, typing.Union[None,bool]]"
                ]
            }
        },
        "SessionRedirectMixin.resolve_redirects": {
            "name": "resolve_redirects",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {
                "resp": [],
                "req": [],
                "stream": [
                    "bool"
                ],
                "timeout": [
                    "None"
                ],
                "verify": [
                    "bool"
                ],
                "cert": [
                    "None"
                ],
                "proxies": [
                    "None"
                ],
                "yield_requests": [
                    "bool"
                ],
                "adapter_kwargs": []
            },
            "variables": {
                "hist": [
                    "list"
                ],
                "url": [
                    "typing.Text"
                ],
                "prepared_request_": [
                    "None"
                ],
                "purged_headers": [
                    "tuple[typing.Text]"
                ],
                "header": [
                    "typing.Text"
                ],
                "proxies": [
                    "None"
                ],
                "rewindable": [
                    "bool"
                ],
                "yield_requests": [
                    "bool"
                ],
                "stream": [
                    "bool"
                ],
                "timeout": [
                    "None"
                ],
                "verify": [
                    "bool"
                ],
                "cert": [
                    "None"
                ]
            }
        },
        "Session.send": {
            "name": "send",
            "location": -1,
            "return": [
                "list[int]"
            ],
            "arguments": {
                "request": [],
                "kwargs": []
            },
            "variables": {
                "request": [
                    "Request"
                ],
                "r": [
                    "list[int]"
                ],
                "r_": [
                    "list[int]"
                ],
                "history": [
                    "list",
                    "list[int]"
                ]
            }
        },
        "session": {
            "name": "session",
            "location": -1,
            "return": [
                "Session"
            ],
            "arguments": {},
            "variables": {}
        },
        "SessionRedirectMixin.should_strip_auth": {
            "name": "should_strip_auth",
            "location": -1,
            "return": [
                "bool"
            ],
            "arguments": {
                "old_url": [],
                "new_url": []
            },
            "variables": {
                "changed_port": [
                    "bool"
                ],
                "changed_scheme": [
                    "bool"
                ],
                "default_port": [
                    "tuple[None]"
                ]
            }
        }
    },
    "requests-2.22.0/requests/status_codes.py": {
        "_init": {
            "name": "_init",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "code": [
                    "tuple[typing.Union[int,tuple[typing.Text]]]",
                    "int"
                ],
                "titles": [
                    "tuple[typing.Union[int,tuple[typing.Text]]]"
                ],
                "_codes": [
                    "dict[int, tuple[typing.Text]]"
                ],
                "codes": [
                    "LookupDict"
                ],
                "__doc__": [
                    "None"
                ]
            }
        },
        "doc": {
            "name": "doc",
            "location": -1,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "code": []
            },
            "variables": {
                "_codes": [
                    "dict[int, tuple[typing.Text]]"
                ],
                "n": [
                    "typing.Text"
                ],
                "names": [
                    "str"
                ]
            }
        },
        "global": {}
    },
    "requests-2.22.0/requests/structures.py": {
        "CaseInsensitiveDict.__delitem__": {
            "name": "__delitem__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "key": []
            },
            "variables": {}
        },
        "CaseInsensitiveDict.__eq__": {
            "name": "__eq__",
            "location": -1,
            "return": [
                "bool"
            ],
            "arguments": {
                "other": []
            },
            "variables": {
                "other": [
                    "typing.Mapping",
                    "CaseInsensitiveDict"
                ]
            }
        },
        "CaseInsensitiveDict.__getitem__": {
            "name": "__getitem__",
            "location": -1,
            "return": [],
            "arguments": {
                "key": []
            },
            "variables": {}
        },
        "LookupDict.__getitem__": {
            "name": "__getitem__",
            "location": -1,
            "return": [],
            "arguments": {
                "key": []
            },
            "variables": {}
        },
        "CaseInsensitiveDict.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "None"
                ],
                "kwargs": []
            },
            "variables": {
                "data": [
                    "None",
                    "dict"
                ]
            }
        },
        "LookupDict.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "None"
                ]
            },
            "variables": {
                "name": [
                    "None"
                ]
            }
        },
        "CaseInsensitiveDict.__iter__": {
            "name": "__iter__",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {},
            "variables": {}
        },
        "CaseInsensitiveDict.__len__": {
            "name": "__len__",
            "location": -1,
            "return": [
                "int"
            ],
            "arguments": {},
            "variables": {}
        },
        "CaseInsensitiveDict.__repr__": {
            "name": "__repr__",
            "location": -1,
            "return": [
                "str"
            ],
            "arguments": {},
            "variables": {}
        },
        "LookupDict.__repr__": {
            "name": "__repr__",
            "location": -1,
            "return": [
                "typing.Text"
            ],
            "arguments": {},
            "variables": {}
        },
        "CaseInsensitiveDict.__setitem__": {
            "name": "__setitem__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "key": [],
                "value": []
            },
            "variables": {}
        },
        "CaseInsensitiveDict.copy": {
            "name": "copy",
            "location": -1,
            "return": [
                "CaseInsensitiveDict"
            ],
            "arguments": {},
            "variables": {}
        },
        "LookupDict.get": {
            "name": "get",
            "location": -1,
            "return": [],
            "arguments": {
                "key": [],
                "default": [
                    "None"
                ]
            },
            "variables": {
                "default": [
                    "None"
                ]
            }
        },
        "global": {},
        "CaseInsensitiveDict.lower_items": {
            "name": "lower_items",
            "location": -1,
            "return": [
                "typing.Generator[tuple]"
            ],
            "arguments": {},
            "variables": {}
        }
    },
    "requests-2.22.0/requests/utils.py": {
        "_parse_content_type_header": {
            "name": "_parse_content_type_header",
            "location": -1,
            "return": [
                "tuple[dict[, bool]]"
            ],
            "arguments": {
                "header": []
            },
            "variables": {
                "params_dict": [
                    "dict",
                    "dict[, bool]"
                ],
                "items_to_strip": [
                    "typing.Text"
                ],
                "value": [
                    "bool"
                ]
            }
        },
        "add_dict_to_cookiejar": {
            "name": "add_dict_to_cookiejar",
            "location": -1,
            "return": [],
            "arguments": {
                "cj": [],
                "cookie_dict": []
            },
            "variables": {}
        },
        "address_in_network": {
            "name": "address_in_network",
            "location": -1,
            "return": [
                "bool"
            ],
            "arguments": {
                "ip": [],
                "net": []
            },
            "variables": {}
        },
        "check_header_validity": {
            "name": "check_header_validity",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "header": []
            },
            "variables": {
                "value": [
                    "bytes"
                ]
            }
        },
        "default_headers": {
            "name": "default_headers",
            "location": -1,
            "return": [
                "CaseInsensitiveDict"
            ],
            "arguments": {},
            "variables": {}
        },
        "default_user_agent": {
            "name": "default_user_agent",
            "location": -1,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "name": [
                    "typing.Text"
                ]
            },
            "variables": {
                "name": [
                    "typing.Text"
                ]
            }
        },
        "dict_from_cookiejar": {
            "name": "dict_from_cookiejar",
            "location": -1,
            "return": [
                "dict"
            ],
            "arguments": {
                "cj": []
            },
            "variables": {
                "cookie_dict": [
                    "dict"
                ]
            }
        },
        "dict_to_sequence": {
            "name": "dict_to_sequence",
            "location": -1,
            "return": [],
            "arguments": {
                "d": []
            },
            "variables": {}
        },
        "dotted_netmask": {
            "name": "dotted_netmask",
            "location": -1,
            "return": [],
            "arguments": {
                "mask": []
            },
            "variables": {
                "bits": [
                    "int"
                ]
            }
        },
        "extract_zipped_paths": {
            "name": "extract_zipped_paths",
            "location": -1,
            "return": [],
            "arguments": {
                "path": []
            },
            "variables": {
                "member": [
                    "str"
                ]
            }
        },
        "from_key_val_list": {
            "name": "from_key_val_list",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "value": []
            },
            "variables": {
                "value": [
                    "None"
                ]
            }
        },
        "get_auth_from_url": {
            "name": "get_auth_from_url",
            "location": -1,
            "return": [
                "tuple[typing.Text]"
            ],
            "arguments": {
                "url": []
            },
            "variables": {
                "auth": [
                    "tuple",
                    "tuple[typing.Text]"
                ]
            }
        },
        "get_encoding_from_headers": {
            "name": "get_encoding_from_headers",
            "location": -1,
            "return": [
                "None",
                "typing.Text"
            ],
            "arguments": {
                "headers": []
            },
            "variables": {}
        },
        "get_encodings_from_content": {
            "name": "get_encodings_from_content",
            "location": -1,
            "return": [],
            "arguments": {
                "content": []
            },
            "variables": {}
        },
        "get_environ_proxies": {
            "name": "get_environ_proxies",
            "location": -1,
            "return": [
                "dict"
            ],
            "arguments": {
                "url": [],
                "no_proxy": [
                    "None"
                ]
            },
            "variables": {
                "no_proxy": [
                    "None"
                ]
            }
        },
        "get_netrc_auth": {
            "name": "get_netrc_auth",
            "location": -1,
            "return": [
                "None",
                "tuple"
            ],
            "arguments": {
                "url": [],
                "raise_errors": [
                    "bool"
                ]
            },
            "variables": {
                "netrc_path": [
                    "None"
                ],
                "f": [
                    "typing.Text"
                ],
                "NETRC_FILES": [
                    "tuple[typing.Text]"
                ],
                "url": [
                    "str"
                ],
                "splitstr": [
                    "bytes",
                    "str"
                ],
                "login_i": [
                    "int"
                ],
                "raise_errors": [
                    "bool"
                ]
            }
        },
        "get_unicode_from_response": {
            "name": "get_unicode_from_response",
            "location": -1,
            "return": [
                "str"
            ],
            "arguments": {
                "r": []
            },
            "variables": {
                "tried_encodings": [
                    "list"
                ]
            }
        },
        "global": {},
        "guess_filename": {
            "name": "guess_filename",
            "location": -1,
            "return": [],
            "arguments": {
                "obj": []
            },
            "variables": {}
        },
        "guess_json_utf": {
            "name": "guess_json_utf",
            "location": -1,
            "return": [
                "typing.Text",
                "None"
            ],
            "arguments": {
                "data": []
            },
            "variables": {
                "_null": [
                    "bytes"
                ],
                "_null2": [
                    "bytes"
                ],
                "_null3": [
                    "bytes"
                ]
            }
        },
        "is_ipv4_address": {
            "name": "is_ipv4_address",
            "location": -1,
            "return": [
                "bool"
            ],
            "arguments": {
                "string_ip": []
            },
            "variables": {}
        },
        "is_valid_cidr": {
            "name": "is_valid_cidr",
            "location": -1,
            "return": [
                "bool"
            ],
            "arguments": {
                "string_network": []
            },
            "variables": {
                "mask": [
                    "int"
                ]
            }
        },
        "iter_slices": {
            "name": "iter_slices",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {
                "string": [],
                "slice_length": []
            },
            "variables": {
                "pos": [
                    "int"
                ],
                "slice_length": [
                    "int"
                ]
            }
        },
        "parse_dict_header": {
            "name": "parse_dict_header",
            "location": -1,
            "return": [
                "dict[, None]"
            ],
            "arguments": {
                "value": []
            },
            "variables": {
                "result": [
                    "dict",
                    "dict[, None]"
                ]
            }
        },
        "parse_header_links": {
            "name": "parse_header_links",
            "location": -1,
            "return": [
                "list",
                "list[dict[typing.Text, str]]"
            ],
            "arguments": {
                "value": []
            },
            "variables": {
                "links": [
                    "list",
                    "list[dict[typing.Text, str]]"
                ],
                "replace_chars": [
                    "typing.Text"
                ],
                "value": [
                    "str"
                ],
                "url": [
                    "typing.Text"
                ],
                "params": [
                    "typing.Text"
                ],
                "link": [
                    "dict[typing.Text, str]"
                ],
                "param": [
                    "str"
                ],
                "key": [
                    "str"
                ]
            }
        },
        "parse_list_header": {
            "name": "parse_list_header",
            "location": -1,
            "return": [
                "list"
            ],
            "arguments": {
                "value": []
            },
            "variables": {
                "result": [
                    "list"
                ]
            }
        },
        "prepend_scheme_if_needed": {
            "name": "prepend_scheme_if_needed",
            "location": -1,
            "return": [],
            "arguments": {
                "url": [],
                "new_scheme": []
            },
            "variables": {}
        },
        "proxy_bypass": {
            "name": "proxy_bypass",
            "location": -1,
            "return": [],
            "arguments": {
                "host": []
            },
            "variables": {}
        },
        "proxy_bypass_registry": {
            "name": "proxy_bypass_registry",
            "location": -1,
            "return": [
                "bool"
            ],
            "arguments": {
                "host": []
            },
            "variables": {
                "proxyEnable": [
                    "int"
                ]
            }
        },
        "requote_uri": {
            "name": "requote_uri",
            "location": -1,
            "return": [],
            "arguments": {
                "uri": []
            },
            "variables": {
                "safe_with_percent": [
                    "typing.Text"
                ],
                "safe_without_percent": [
                    "typing.Text"
                ]
            }
        },
        "rewind_body": {
            "name": "rewind_body",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "prepared_request": []
            },
            "variables": {}
        },
        "select_proxy": {
            "name": "select_proxy",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "url": [],
                "proxies": []
            },
            "variables": {
                "proxies": [
                    "dict"
                ],
                "proxy_keys": [
                    "list[typing.Text]"
                ],
                "proxy": [
                    "None"
                ],
                "proxy_key": [
                    "typing.Text"
                ]
            }
        },
        "set_environ": {
            "name": "set_environ",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {
                "env_name": [],
                "value": []
            },
            "variables": {
                "value_changed": [
                    "bool"
                ],
                "old_value": [
                    "None"
                ]
            }
        },
        "should_bypass_proxies": {
            "name": "should_bypass_proxies",
            "location": -1,
            "return": [
                "bool"
            ],
            "arguments": {
                "url": [],
                "no_proxy": []
            },
            "variables": {
                "get_proxy": [
                    "typing.Callable"
                ],
                "no_proxy": [
                    "None",
                    "typing.Generator"
                ],
                "parsed_": [
                    "None"
                ],
                "host_with_port": [
                    "None"
                ],
                "bypass": [
                    "bool"
                ]
            }
        },
        "stream_decode_response_unicode": {
            "name": "stream_decode_response_unicode",
            "location": -1,
            "return": [
                "typing.Generator",
                "None"
            ],
            "arguments": {
                "iterator": [],
                "r": []
            },
            "variables": {
                "r_": [
                    "None"
                ]
            }
        },
        "super_len": {
            "name": "super_len",
            "location": -1,
            "return": [
                "int"
            ],
            "arguments": {
                "o": []
            },
            "variables": {
                "total_length": [
                    "None",
                    "int"
                ],
                "current_position": [
                    "int"
                ]
            }
        },
        "to_key_val_list": {
            "name": "to_key_val_list",
            "location": -1,
            "return": [
                "None",
                "list"
            ],
            "arguments": {
                "value": []
            },
            "variables": {
                "value": [
                    "None"
                ]
            }
        },
        "unquote_header_value": {
            "name": "unquote_header_value",
            "location": -1,
            "return": [],
            "arguments": {
                "value": [],
                "is_filename": [
                    "bool"
                ]
            },
            "variables": {
                "is_filename": [
                    "bool"
                ]
            }
        },
        "unquote_unreserved": {
            "name": "unquote_unreserved",
            "location": -1,
            "return": [
                "str"
            ],
            "arguments": {
                "uri": []
            },
            "variables": {
                "c": [
                    "str"
                ],
                "UNRESERVED_SET": [
                    "set[typing.Text]"
                ]
            }
        },
        "urldefragauth": {
            "name": "urldefragauth",
            "location": -1,
            "return": [],
            "arguments": {
                "url": []
            },
            "variables": {}
        }
    },
    "requests-2.22.0/setup.py": {
        "PyTest.finalize_options": {
            "name": "finalize_options",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "test_args": [
                    "list"
                ],
                "test_suite": [
                    "bool"
                ]
            }
        },
        "global": {},
        "PyTest.initialize_options": {
            "name": "initialize_options",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "pytest_args": [
                    "list[typing.Text]"
                ]
            }
        },
        "PyTest.run_tests": {
            "name": "run_tests",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        }
    },
    "requests-2.22.0/tests/__init__.py": {
        "global": {}
    },
    "requests-2.22.0/tests/compat.py": {
        "global": {},
        "u": {
            "name": "u",
            "location": -1,
            "return": [],
            "arguments": {
                "s": []
            },
            "variables": {}
        }
    },
    "requests-2.22.0/tests/conftest.py": {
        "global": {},
        "httpbin": {
            "name": "httpbin",
            "location": -1,
            "return": [],
            "arguments": {
                "httpbin": []
            },
            "variables": {}
        },
        "httpbin_secure": {
            "name": "httpbin_secure",
            "location": -1,
            "return": [],
            "arguments": {
                "httpbin_secure": []
            },
            "variables": {}
        },
        "inner": {
            "name": "inner",
            "location": -1,
            "return": [],
            "arguments": {
                "suffix": []
            },
            "variables": {}
        },
        "prepare_url": {
            "name": "prepare_url",
            "location": -1,
            "return": [],
            "arguments": {
                "value": []
            },
            "variables": {}
        }
    },
    "requests-2.22.0/tests/test_help.py": {
        "VersionedPackage.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "version": []
            },
            "variables": {}
        },
        "global": {},
        "test_idna_with_version_attribute": {
            "name": "test_idna_with_version_attribute",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            },
            "variables": {}
        },
        "test_idna_without_version_attribute": {
            "name": "test_idna_without_version_attribute",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            },
            "variables": {}
        },
        "test_system_ssl": {
            "name": "test_system_ssl",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        }
    },
    "requests-2.22.0/tests/test_hooks.py": {
        "global": {},
        "hook": {
            "name": "hook",
            "location": -1,
            "return": [],
            "arguments": {
                "value": []
            },
            "variables": {}
        },
        "test_default_hooks": {
            "name": "test_default_hooks",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "test_hooks": {
            "name": "test_hooks",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "hooks_list": [],
                "result": []
            },
            "variables": {}
        }
    },
    "requests-2.22.0/tests/test_lowlevel.py": {
        "digest_failed_response_handler": {
            "name": "digest_failed_response_handler",
            "location": -1,
            "return": [],
            "arguments": {
                "sock": []
            },
            "variables": {}
        },
        "digest_response_handler": {
            "name": "digest_response_handler",
            "location": -1,
            "return": [],
            "arguments": {
                "sock": []
            },
            "variables": {}
        },
        "global": {},
        "redirect_resp_handler": {
            "name": "redirect_resp_handler",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "sock": []
            },
            "variables": {
                "location": [
                    "str"
                ]
            }
        },
        "response_handler": {
            "name": "response_handler",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "sock": []
            },
            "variables": {}
        },
        "test_chunked_upload": {
            "name": "test_chunked_upload",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "url": [
                    "str"
                ]
            }
        },
        "test_digestauth_401_count_reset_on_redirect": {
            "name": "test_digestauth_401_count_reset_on_redirect",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "text_401": [
                    "bytes"
                ],
                "text_302": [
                    "bytes"
                ],
                "text_200": [
                    "bytes"
                ],
                "expected_digest": [
                    "bytes"
                ],
                "server": [
                    "Server"
                ],
                "url": [
                    "str"
                ]
            }
        },
        "test_digestauth_401_only_sent_once": {
            "name": "test_digestauth_401_only_sent_once",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "text_401": [
                    "bytes"
                ],
                "expected_digest": [
                    "bytes"
                ],
                "server": [
                    "Server"
                ],
                "url": [
                    "str"
                ]
            }
        },
        "test_digestauth_only_on_4xx": {
            "name": "test_digestauth_only_on_4xx",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "text_200_chal": [
                    "bytes"
                ],
                "server": [
                    "Server"
                ],
                "url": [
                    "str"
                ]
            }
        },
        "test_fragment_not_sent_with_request": {
            "name": "test_fragment_not_sent_with_request",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "server": [
                    "Server"
                ],
                "url": [
                    "str"
                ],
                "frag": [
                    "bytes"
                ]
            }
        },
        "test_fragment_update_on_redirect": {
            "name": "test_fragment_update_on_redirect",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "server": [
                    "Server"
                ],
                "url": [
                    "str"
                ]
            }
        },
        "test_redirect_rfc1808_to_non_ascii_location": {
            "name": "test_redirect_rfc1808_to_non_ascii_location",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "path": [
                    "typing.Text"
                ],
                "expected_path": [
                    "bytes"
                ],
                "redirect_request": [
                    "list"
                ],
                "server": [
                    "Server"
                ],
                "url": [
                    "str"
                ]
            }
        },
        "test_use_proxy_from_environment": {
            "name": "test_use_proxy_from_environment",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": [],
                "var": [],
                "scheme": []
            },
            "variables": {
                "scheme": [
                    "typing.Text"
                ],
                "url": [
                    "str"
                ],
                "fake_proxy": [
                    "Server"
                ],
                "proxy_url": [
                    "str"
                ],
                "var": [
                    "str"
                ],
                "kwargs": [
                    "dict[str, str]"
                ]
            }
        }
    },
    "requests-2.22.0/tests/test_packages.py": {
        "global": {},
        "test_can_access_chardet_attribute": {
            "name": "test_can_access_chardet_attribute",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "test_can_access_idna_attribute": {
            "name": "test_can_access_idna_attribute",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "test_can_access_urllib3_attribute": {
            "name": "test_can_access_urllib3_attribute",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        }
    },
    "requests-2.22.0/tests/test_requests.py": {
        "TestRequests,DummyAuth.__call__": {
            "name": "__call__",
            "location": -1,
            "return": [],
            "arguments": {
                "r": []
            },
            "variables": {}
        },
        "TestRequests,CustomMapping.__delitem__": {
            "name": "__delitem__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "key": []
            },
            "variables": {}
        },
        "TestRequests,CustomMapping.__getitem__": {
            "name": "__getitem__",
            "location": -1,
            "return": [],
            "arguments": {
                "key": []
            },
            "variables": {}
        },
        "RedirectSession.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "order_of_redirects": []
            },
            "variables": {
                "calls": [
                    "list"
                ],
                "max_redirects": [
                    "int"
                ],
                "cookies": [
                    "dict"
                ],
                "trust_env": [
                    "bool"
                ]
            }
        },
        "TestRequests,BadFileObj.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "data": []
            },
            "variables": {}
        },
        "TestRequests,CustomMapping.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "kwargs": [],
                "args": []
            },
            "variables": {}
        },
        "TestRequests,TestStream.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "data": []
            },
            "variables": {
                "length": [
                    "int"
                ],
                "index": [
                    "int"
                ]
            }
        },
        "TestRequests,BadFileObj.__iter__": {
            "name": "__iter__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestRequests,CustomMapping.__iter__": {
            "name": "__iter__",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "TestRequests,CustomMapping.__len__": {
            "name": "__len__",
            "location": -1,
            "return": [
                "int"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestRequests,TestStream.__len__": {
            "name": "__len__",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "TestRequests,CustomMapping.__setitem__": {
            "name": "__setitem__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "key": [],
                "value": []
            },
            "variables": {}
        },
        "RedirectSession._build_raw": {
            "name": "_build_raw",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "TestRequests._patch_adapter_gzipped_redirect": {
            "name": "_patch_adapter_gzipped_redirect",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [],
                "url": []
            },
            "variables": {
                "_patched_response": [
                    "bool"
                ]
            }
        },
        "RedirectSession.build_response": {
            "name": "build_response",
            "location": -1,
            "return": [
                "Response"
            ],
            "arguments": {},
            "variables": {
                "r": [
                    "Response"
                ],
                "r_": [
                    "int",
                    "CaseInsensitiveDict"
                ]
            }
        },
        "TestRequests.build_response": {
            "name": "build_response",
            "location": -1,
            "return": [],
            "arguments": {
                "kwargs": [],
                "args": []
            },
            "variables": {
                "_patched_response": [
                    "bool"
                ]
            }
        },
        "TestRequests.get_netrc_auth_mock": {
            "name": "get_netrc_auth_mock",
            "location": -1,
            "return": [],
            "arguments": {
                "url": []
            },
            "variables": {}
        },
        "TestRequests,CustomRedirectSession.get_redirect_target": {
            "name": "get_redirect_target",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "resp": []
            },
            "variables": {}
        },
        "global": {},
        "TestRequests.hook": {
            "name": "hook",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "resp": [],
                "kwargs": []
            },
            "variables": {}
        },
        "TestPreparingURLs.normalize_percent_encode": {
            "name": "normalize_percent_encode",
            "location": -1,
            "return": [],
            "arguments": {
                "x": []
            },
            "variables": {}
        },
        "TestRequests,TestStream.read": {
            "name": "read",
            "location": -1,
            "return": [],
            "arguments": {
                "size": [
                    "None"
                ]
            },
            "variables": {
                "size": [
                    "None"
                ]
            }
        },
        "TestRequests.read_mock": {
            "name": "read_mock",
            "location": -1,
            "return": [],
            "arguments": {
                "amt": [],
                "decode_content": [
                    "None"
                ]
            },
            "variables": {}
        },
        "TestRequests,BadFileObj.seek": {
            "name": "seek",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "pos": [],
                "whence": [
                    "int"
                ]
            },
            "variables": {}
        },
        "TestRequests,TestStream.seek": {
            "name": "seek",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "offset": [],
                "where": [
                    "int"
                ]
            },
            "variables": {
                "where": [
                    "int"
                ]
            }
        },
        "RedirectSession.send": {
            "name": "send",
            "location": -1,
            "return": [],
            "arguments": {
                "kwargs": [],
                "args": []
            },
            "variables": {}
        },
        "TestRequests,BadFileObj.tell": {
            "name": "tell",
            "location": -1,
            "return": [
                "int"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestRequests,TestStream.tell": {
            "name": "tell",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "TestRequests.test_BASICAUTH_TUPLE_HTTP_200_OK_GET": {
            "name": "test_BASICAUTH_TUPLE_HTTP_200_OK_GET",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": []
            },
            "variables": {
                "auth": [
                    "tuple[typing.Text]"
                ],
                "s_": [
                    "tuple[typing.Text]"
                ]
            }
        },
        "TestRequests.test_DIGESTAUTH_QUOTES_QOP_VALUE": {
            "name": "test_DIGESTAUTH_QUOTES_QOP_VALUE",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": []
            },
            "variables": {
                "auth": [
                    "HTTPDigestAuth"
                ]
            }
        },
        "TestRequests.test_DIGESTAUTH_WRONG_HTTP_401_GET": {
            "name": "test_DIGESTAUTH_WRONG_HTTP_401_GET",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": []
            },
            "variables": {
                "auth": [
                    "HTTPDigestAuth"
                ],
                "s_": [
                    "HTTPDigestAuth"
                ]
            }
        },
        "TestRequests.test_DIGEST_AUTH_RETURNS_COOKIE": {
            "name": "test_DIGEST_AUTH_RETURNS_COOKIE",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": []
            },
            "variables": {
                "auth": [
                    "HTTPDigestAuth"
                ]
            }
        },
        "TestRequests.test_DIGEST_AUTH_SETS_SESSION_COOKIES": {
            "name": "test_DIGEST_AUTH_SETS_SESSION_COOKIES",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": []
            },
            "variables": {
                "auth": [
                    "HTTPDigestAuth"
                ],
                "s": [
                    "Session"
                ]
            }
        },
        "TestRequests.test_DIGEST_HTTP_200_OK_GET": {
            "name": "test_DIGEST_HTTP_200_OK_GET",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": []
            },
            "variables": {
                "auth": [
                    "HTTPDigestAuth"
                ],
                "s_": [
                    "HTTPDigestAuth"
                ]
            }
        },
        "TestRequests.test_DIGEST_STREAM": {
            "name": "test_DIGEST_STREAM",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": []
            },
            "variables": {
                "auth": [
                    "HTTPDigestAuth"
                ]
            }
        },
        "TestRequests.test_HTTP_200_OK_GET_ALTERNATIVE": {
            "name": "test_HTTP_200_OK_GET_ALTERNATIVE",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": []
            },
            "variables": {
                "r": [
                    "Request"
                ],
                "s": [
                    "Session"
                ]
            }
        },
        "TestRequests.test_HTTP_200_OK_GET_WITH_MIXED_PARAMS": {
            "name": "test_HTTP_200_OK_GET_WITH_MIXED_PARAMS",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": []
            },
            "variables": {
                "heads": [
                    "dict[typing.Text, typing.Text]"
                ]
            }
        },
        "TestRequests.test_HTTP_200_OK_GET_WITH_PARAMS": {
            "name": "test_HTTP_200_OK_GET_WITH_PARAMS",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": []
            },
            "variables": {
                "heads": [
                    "dict[typing.Text, typing.Text]"
                ]
            }
        },
        "TestRequests.test_HTTP_200_OK_HEAD": {
            "name": "test_HTTP_200_OK_HEAD",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": []
            },
            "variables": {}
        },
        "TestRequests.test_HTTP_200_OK_PUT": {
            "name": "test_HTTP_200_OK_PUT",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": []
            },
            "variables": {}
        },
        "TestRequests.test_HTTP_302_ALLOW_REDIRECT_GET": {
            "name": "test_HTTP_302_ALLOW_REDIRECT_GET",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": []
            },
            "variables": {}
        },
        "TestRequests.test_HTTP_302_TOO_MANY_REDIRECTS": {
            "name": "test_HTTP_302_TOO_MANY_REDIRECTS",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": []
            },
            "variables": {
                "e": [
                    "Exception"
                ]
            }
        },
        "TestRequests.test_HTTP_302_TOO_MANY_REDIRECTS_WITH_PARAMS": {
            "name": "test_HTTP_302_TOO_MANY_REDIRECTS_WITH_PARAMS",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": []
            },
            "variables": {
                "s_": [
                    "int"
                ],
                "e": [
                    "Exception"
                ]
            }
        },
        "TestRequests.test_HTTP_307_ALLOW_REDIRECT_POST": {
            "name": "test_HTTP_307_ALLOW_REDIRECT_POST",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": []
            },
            "variables": {}
        },
        "TestRequests.test_HTTP_307_ALLOW_REDIRECT_POST_WITH_SEEKABLE": {
            "name": "test_HTTP_307_ALLOW_REDIRECT_POST_WITH_SEEKABLE",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": []
            },
            "variables": {
                "byte_str": [
                    "bytes"
                ]
            }
        },
        "TestRequests.test_POSTBIN_GET_POST_FILES": {
            "name": "test_POSTBIN_GET_POST_FILES",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": []
            },
            "variables": {
                "f": [
                    "typing.IO"
                ]
            }
        },
        "TestRequests.test_POSTBIN_GET_POST_FILES_WITH_DATA": {
            "name": "test_POSTBIN_GET_POST_FILES_WITH_DATA",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": []
            },
            "variables": {
                "f": [
                    "typing.IO"
                ]
            }
        },
        "TestRequests.test_POSTBIN_SEEKED_OBJECT_WITH_NO_ITER": {
            "name": "test_POSTBIN_SEEKED_OBJECT_WITH_NO_ITER",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": []
            },
            "variables": {
                "test": [
                    "TestStream"
                ]
            }
        },
        "TestRequests.test_auth_is_retained_for_redirect_on_host": {
            "name": "test_auth_is_retained_for_redirect_on_host",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": []
            },
            "variables": {}
        },
        "TestRequests.test_auth_is_stripped_on_http_downgrade": {
            "name": "test_auth_is_stripped_on_http_downgrade",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": [],
                "httpbin_secure": [],
                "httpbin_ca_bundle": []
            },
            "variables": {}
        },
        "TestRequests.test_autoset_header_values_are_native": {
            "name": "test_autoset_header_values_are_native",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": []
            },
            "variables": {
                "data": [
                    "typing.Text"
                ],
                "length": [
                    "typing.Text"
                ],
                "req": [
                    "Request"
                ]
            }
        },
        "TestRequests.test_basic_auth_str_is_always_native": {
            "name": "test_basic_auth_str_is_always_native",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "username": [],
                "password": [],
                "auth_str": []
            },
            "variables": {}
        },
        "TestRequests.test_basic_building": {
            "name": "test_basic_building",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "req": [
                    "Request"
                ],
                "req_": [
                    "typing.Text",
                    "dict[typing.Text, typing.Text]"
                ]
            }
        },
        "TestRequests.test_basicauth_encodes_byte_strings": {
            "name": "test_basicauth_encodes_byte_strings",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "auth": [
                    "tuple[bytes]"
                ],
                "r": [
                    "Request"
                ]
            }
        },
        "TestRequests.test_basicauth_with_netrc": {
            "name": "test_basicauth_with_netrc",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": []
            },
            "variables": {
                "auth": [
                    "tuple[typing.Text]"
                ],
                "wrong_auth": [
                    "tuple[typing.Text]"
                ],
                "s_": [
                    "tuple[typing.Text]"
                ]
            }
        },
        "TestRequests.test_binary_put": {
            "name": "test_binary_put",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestRequests.test_can_send_file_object_with_non_string_filename": {
            "name": "test_can_send_file_object_with_non_string_filename",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": []
            },
            "variables": {
                "f_": [
                    "int"
                ],
                "r": [
                    "Request"
                ]
            }
        },
        "TestRequests.test_can_send_objects_with_files": {
            "name": "test_can_send_objects_with_files",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": [],
                "files": []
            },
            "variables": {
                "data": [
                    "dict[typing.Text, typing.Text]"
                ],
                "files": [
                    "dict[typing.Text, ]"
                ],
                "r": [
                    "Request"
                ]
            }
        },
        "TestRequests.test_cannot_send_unprepared_requests": {
            "name": "test_cannot_send_unprepared_requests",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": []
            },
            "variables": {
                "r": [
                    "Request"
                ]
            }
        },
        "TestRequests.test_certificate_failure": {
            "name": "test_certificate_failure",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin_secure": []
            },
            "variables": {}
        },
        "TestRequests.test_chunked_upload_does_not_set_content_length_header": {
            "name": "test_chunked_upload_does_not_set_content_length_header",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": []
            },
            "variables": {
                "i": [
                    "bytes"
                ],
                "data": [
                    "typing.Generator[bytes]"
                ],
                "r": [
                    "Request"
                ]
            }
        },
        "TestRequests.test_conflicting_post_params": {
            "name": "test_conflicting_post_params",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": []
            },
            "variables": {
                "f": [
                    "typing.IO"
                ]
            }
        },
        "TestTimeout.test_connect_timeout": {
            "name": "test_connect_timeout",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "timeout": []
            },
            "variables": {
                "TARPIT": [
                    "typing.Text"
                ],
                "e": [
                    "Exception"
                ]
            }
        },
        "TestCaseInsensitiveDict.test_contains": {
            "name": "test_contains",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "cid": [
                    "CaseInsensitiveDict"
                ]
            }
        },
        "TestRequests.test_cookie_as_dict_items": {
            "name": "test_cookie_as_dict_items",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "key": [
                    "typing.Text"
                ],
                "value": [
                    "typing.Text"
                ],
                "key1": [
                    "typing.Text"
                ],
                "value1": [
                    "typing.Text"
                ]
            }
        },
        "TestRequests.test_cookie_as_dict_keeps_items": {
            "name": "test_cookie_as_dict_keeps_items",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "key": [
                    "typing.Text"
                ],
                "value": [
                    "typing.Text"
                ],
                "key1": [
                    "typing.Text"
                ],
                "value1": [
                    "typing.Text"
                ]
            }
        },
        "TestRequests.test_cookie_as_dict_keeps_len": {
            "name": "test_cookie_as_dict_keeps_len",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "key": [
                    "typing.Text"
                ],
                "value": [
                    "typing.Text"
                ],
                "key1": [
                    "typing.Text"
                ],
                "value1": [
                    "typing.Text"
                ]
            }
        },
        "TestRequests.test_cookie_as_dict_keys": {
            "name": "test_cookie_as_dict_keys",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "key": [
                    "typing.Text"
                ],
                "value": [
                    "typing.Text"
                ],
                "key1": [
                    "typing.Text"
                ],
                "value1": [
                    "typing.Text"
                ]
            }
        },
        "TestRequests.test_cookie_as_dict_values": {
            "name": "test_cookie_as_dict_values",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "key": [
                    "typing.Text"
                ],
                "value": [
                    "typing.Text"
                ],
                "key1": [
                    "typing.Text"
                ],
                "value1": [
                    "typing.Text"
                ]
            }
        },
        "TestRequests.test_cookie_duplicate_names_different_domains": {
            "name": "test_cookie_duplicate_names_different_domains",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "key": [
                    "typing.Text"
                ],
                "value": [
                    "typing.Text"
                ],
                "domain1": [
                    "typing.Text"
                ],
                "domain2": [
                    "typing.Text"
                ]
            }
        },
        "TestRequests.test_cookie_duplicate_names_raises_cookie_conflict_error": {
            "name": "test_cookie_duplicate_names_raises_cookie_conflict_error",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "key": [
                    "typing.Text"
                ],
                "value": [
                    "typing.Text"
                ],
                "path": [
                    "typing.Text"
                ]
            }
        },
        "TestRequests.test_cookie_parameters": {
            "name": "test_cookie_parameters",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "key": [
                    "typing.Text"
                ],
                "value": [
                    "typing.Text"
                ],
                "secure": [
                    "bool"
                ],
                "domain": [
                    "typing.Text"
                ],
                "rest": [
                    "dict[typing.Text, bool]"
                ]
            }
        },
        "TestRequests.test_cookie_persists_via_api": {
            "name": "test_cookie_persists_via_api",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": []
            },
            "variables": {}
        },
        "TestRequests.test_cookie_policy_copy": {
            "name": "test_cookie_policy_copy",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestRequests.test_cookie_quote_wrapped": {
            "name": "test_cookie_quote_wrapped",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": []
            },
            "variables": {}
        },
        "TestRequests.test_cookie_removed_on_expire": {
            "name": "test_cookie_removed_on_expire",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": []
            },
            "variables": {}
        },
        "TestRequests.test_cookie_sent_on_redirect": {
            "name": "test_cookie_sent_on_redirect",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": []
            },
            "variables": {}
        },
        "TestRequests.test_cookielib_cookiejar_on_redirect": {
            "name": "test_cookielib_cookiejar_on_redirect",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": []
            },
            "variables": {
                "s": [
                    "Session"
                ],
                "req": [
                    "Request"
                ],
                "resp_": [
                    "int"
                ],
                "cookies": [
                    "dict"
                ]
            }
        },
        "TestCaseInsensitiveDict.test_copy": {
            "name": "test_copy",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "cid": [
                    "CaseInsensitiveDict"
                ]
            }
        },
        "TestRequests.test_custom_content_type": {
            "name": "test_custom_content_type",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": []
            },
            "variables": {}
        },
        "TestRequests.test_custom_redirect_mixin": {
            "name": "test_custom_redirect_mixin",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": []
            },
            "variables": {
                "urls_test": [
                    "list"
                ],
                "session": [
                    "CustomRedirectSession"
                ]
            }
        },
        "test_data_argument_accepts_tuples": {
            "name": "test_data_argument_accepts_tuples",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "data": []
            },
            "variables": {
                "p": [
                    "PreparedRequest"
                ]
            }
        },
        "TestRequests.test_decompress_gzip": {
            "name": "test_decompress_gzip",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": []
            },
            "variables": {}
        },
        "TestCaseInsensitiveDict.test_delitem": {
            "name": "test_delitem",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "cid": [
                    "CaseInsensitiveDict"
                ]
            }
        },
        "TestRequests.test_different_encodings_dont_break_post": {
            "name": "test_different_encodings_dont_break_post",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": []
            },
            "variables": {}
        },
        "TestCaseInsensitiveDict.test_docstring_example": {
            "name": "test_docstring_example",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "cid": [
                    "CaseInsensitiveDict"
                ]
            }
        },
        "TestRequests.test_empty_content_length": {
            "name": "test_empty_content_length",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": [],
                "method": []
            },
            "variables": {}
        },
        "TestRequests.test_empty_response_has_content_none": {
            "name": "test_empty_response_has_content_none",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "r": [
                    "Response"
                ]
            }
        },
        "TestRequests.test_empty_stream_with_auth_does_not_set_content_length_header": {
            "name": "test_empty_stream_with_auth_does_not_set_content_length_header",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": []
            },
            "variables": {
                "auth": [
                    "tuple[typing.Text]"
                ],
                "r": [
                    "Request"
                ]
            }
        },
        "TestTimeout.test_encoded_methods": {
            "name": "test_encoded_methods",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": []
            },
            "variables": {}
        },
        "TestRequests.test_entry_points": {
            "name": "test_entry_points",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestCaseInsensitiveDict.test_equality": {
            "name": "test_equality",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "cid": [
                    "CaseInsensitiveDict"
                ],
                "othercid": [
                    "CaseInsensitiveDict"
                ]
            }
        },
        "TestRequests.test_errors": {
            "name": "test_errors",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "url": [],
                "exception": []
            },
            "variables": {}
        },
        "TestMorselToCookieExpires.test_expires_invalid_int": {
            "name": "test_expires_invalid_int",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "value": [],
                "exception": []
            },
            "variables": {}
        },
        "TestMorselToCookieExpires.test_expires_none": {
            "name": "test_expires_none",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestMorselToCookieExpires.test_expires_valid_str": {
            "name": "test_expires_valid_str",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestRequests.test_fixes_1329": {
            "name": "test_fixes_1329",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": []
            },
            "variables": {
                "s": [
                    "Session"
                ]
            }
        },
        "TestCaseInsensitiveDict.test_fixes_649": {
            "name": "test_fixes_649",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "cid": [
                    "CaseInsensitiveDict"
                ]
            }
        },
        "TestRequests.test_form_encoded_post_query_multivalued_element": {
            "name": "test_form_encoded_post_query_multivalued_element",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": []
            },
            "variables": {
                "r": [
                    "Request"
                ]
            }
        },
        "TestRequests.test_fragment_maintained_on_redirect": {
            "name": "test_fragment_maintained_on_redirect",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": []
            },
            "variables": {
                "fragment": [
                    "typing.Text"
                ]
            }
        },
        "TestRequests.test_generic_cookiejar_works": {
            "name": "test_generic_cookiejar_works",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": []
            },
            "variables": {}
        },
        "TestCaseInsensitiveDict.test_get": {
            "name": "test_get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "cid": [
                    "CaseInsensitiveDict"
                ]
            }
        },
        "TestCaseInsensitiveDict.test_getitem": {
            "name": "test_getitem",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "cid": [
                    "CaseInsensitiveDict"
                ]
            }
        },
        "TestRequests.test_header_and_body_removal_on_redirect": {
            "name": "test_header_and_body_removal_on_redirect",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": []
            },
            "variables": {
                "purged_headers": [
                    "tuple[typing.Text]"
                ],
                "ses": [
                    "Session"
                ],
                "req": [
                    "Request"
                ],
                "resp_": [
                    "int"
                ],
                "header": [
                    "typing.Text"
                ]
            }
        },
        "TestRequests.test_header_keys_are_native": {
            "name": "test_header_keys_are_native",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": []
            },
            "variables": {
                "headers": [
                    "dict[bytes, typing.Text]"
                ],
                "r": [
                    "Request"
                ]
            }
        },
        "TestRequests.test_header_no_leading_space": {
            "name": "test_header_no_leading_space",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": []
            },
            "variables": {
                "headers_space": [
                    "dict[typing.Text, typing.Text]"
                ],
                "headers_tab": [
                    "dict[typing.Text, typing.Text]"
                ]
            }
        },
        "TestRequests.test_header_no_return_chars": {
            "name": "test_header_no_return_chars",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": []
            },
            "variables": {
                "headers_ret": [
                    "dict[typing.Text, typing.Text]"
                ],
                "headers_lf": [
                    "dict[typing.Text, typing.Text]"
                ],
                "headers_cr": [
                    "dict[typing.Text, typing.Text]"
                ]
            }
        },
        "TestRequests.test_header_remove_is_case_insensitive": {
            "name": "test_header_remove_is_case_insensitive",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": []
            },
            "variables": {
                "s": [
                    "Session"
                ]
            }
        },
        "TestRequests.test_header_validation": {
            "name": "test_header_validation",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": []
            },
            "variables": {
                "headers_ok": [
                    "dict[typing.Text, typing.Union[typing.Text,bytes]]"
                ]
            }
        },
        "TestRequests.test_header_value_not_str": {
            "name": "test_header_value_not_str",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": []
            },
            "variables": {
                "headers_int": [
                    "dict[typing.Text, int]"
                ],
                "headers_dict": [
                    "dict[typing.Text, dict[typing.Text, typing.Text]]"
                ],
                "headers_list": [
                    "dict[typing.Text, list[typing.Text]]"
                ]
            }
        },
        "TestRequests.test_headers_on_session_with_None_are_not_sent": {
            "name": "test_headers_on_session_with_None_are_not_sent",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": []
            },
            "variables": {
                "ses": [
                    "Session"
                ],
                "req": [
                    "Request"
                ]
            }
        },
        "TestRequests.test_headers_preserve_order": {
            "name": "test_headers_preserve_order",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": []
            },
            "variables": {
                "ses": [
                    "Session"
                ],
                "req": [
                    "Request"
                ],
                "items": [
                    "list"
                ]
            }
        },
        "TestRequests.test_history_is_always_a_list": {
            "name": "test_history_is_always_a_list",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": []
            },
            "variables": {}
        },
        "TestRequests.test_hook_receives_request_arguments": {
            "name": "test_hook_receives_request_arguments",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": []
            },
            "variables": {
                "s": [
                    "Session"
                ],
                "r": [
                    "Request"
                ]
            }
        },
        "TestRequests.test_http_301_changes_post_to_get": {
            "name": "test_http_301_changes_post_to_get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": []
            },
            "variables": {}
        },
        "TestRequests.test_http_301_doesnt_change_head_to_get": {
            "name": "test_http_301_doesnt_change_head_to_get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": []
            },
            "variables": {}
        },
        "TestRequests.test_http_302_changes_post_to_get": {
            "name": "test_http_302_changes_post_to_get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": []
            },
            "variables": {}
        },
        "TestRequests.test_http_302_doesnt_change_head_to_get": {
            "name": "test_http_302_doesnt_change_head_to_get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": []
            },
            "variables": {}
        },
        "TestRequests.test_http_303_changes_post_to_get": {
            "name": "test_http_303_changes_post_to_get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": []
            },
            "variables": {}
        },
        "TestRequests.test_http_303_doesnt_change_head_to_get": {
            "name": "test_http_303_doesnt_change_head_to_get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": []
            },
            "variables": {}
        },
        "TestRequests.test_http_error": {
            "name": "test_http_error",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "response": [
                    "Response"
                ]
            }
        },
        "TestRequests.test_http_with_certificate": {
            "name": "test_http_with_certificate",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": []
            },
            "variables": {}
        },
        "TestRequests.test_https_warnings": {
            "name": "test_https_warnings",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin_secure": [],
                "httpbin_ca_bundle": []
            },
            "variables": {
                "HAS_MODERN_SSL": [
                    "bool"
                ],
                "HAS_PYOPENSSL": [
                    "bool"
                ],
                "warnings_expected": [
                    "tuple[typing.Text]"
                ],
                "warning_records": [
                    "list"
                ],
                "warnings_category": [
                    "tuple"
                ]
            }
        },
        "TestCaseInsensitiveDict.test_init": {
            "name": "test_init",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "cid": []
            },
            "variables": {}
        },
        "TestRequests.test_invalid_ca_certificate_path": {
            "name": "test_invalid_ca_certificate_path",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin_secure": []
            },
            "variables": {
                "INVALID_PATH": [
                    "typing.Text"
                ]
            }
        },
        "TestRequests.test_invalid_files_input": {
            "name": "test_invalid_files_input",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": []
            },
            "variables": {}
        },
        "TestRequests.test_invalid_ssl_certificate_files": {
            "name": "test_invalid_ssl_certificate_files",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin_secure": []
            },
            "variables": {
                "INVALID_PATH": [
                    "typing.Text"
                ]
            }
        },
        "TestTimeout.test_invalid_timeout": {
            "name": "test_invalid_timeout",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": [],
                "timeout": [],
                "error_text": []
            },
            "variables": {}
        },
        "TestRequests.test_invalid_url": {
            "name": "test_invalid_url",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "exception": [],
                "url": []
            },
            "variables": {}
        },
        "TestCaseInsensitiveDict.test_iter": {
            "name": "test_iter",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "cid": [
                    "CaseInsensitiveDict"
                ],
                "keys": [
                    "set[typing.Text]"
                ]
            }
        },
        "test_json_encodes_as_bytes": {
            "name": "test_json_encodes_as_bytes",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "body": [
                    "dict[typing.Text, typing.Text]"
                ],
                "p": [
                    "PreparedRequest"
                ]
            }
        },
        "TestRequests.test_json_param_post_content_type_works": {
            "name": "test_json_param_post_content_type_works",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": []
            },
            "variables": {}
        },
        "TestRequests.test_json_param_post_should_not_override_data_param": {
            "name": "test_json_param_post_should_not_override_data_param",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": []
            },
            "variables": {
                "r": [
                    "Request"
                ]
            }
        },
        "TestCaseInsensitiveDict.test_len": {
            "name": "test_len",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "cid": [
                    "CaseInsensitiveDict"
                ]
            }
        },
        "TestRequests.test_links": {
            "name": "test_links",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "r": [
                    "Response"
                ],
                "r_": [
                    "dict[typing.Text, typing.Text]"
                ]
            }
        },
        "TestRequests.test_long_authinfo_in_url": {
            "name": "test_long_authinfo_in_url",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "url": [
                    "str"
                ]
            }
        },
        "TestCaseInsensitiveDict.test_lower_items": {
            "name": "test_lower_items",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "cid": [
                    "CaseInsensitiveDict"
                ],
                "keyset": [
                    "set"
                ],
                "lowerkeyset": [
                    "set[typing.Text]"
                ]
            }
        },
        "TestRequests.test_manual_redirect_with_partial_body_read": {
            "name": "test_manual_redirect_with_partial_body_read",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": []
            },
            "variables": {
                "s": [
                    "Session"
                ]
            }
        },
        "TestMorselToCookieMaxAge.test_max_age_invalid_str": {
            "name": "test_max_age_invalid_str",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestMorselToCookieMaxAge.test_max_age_valid_int": {
            "name": "test_max_age_valid_int",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestRequests.test_mixed_case_scheme_acceptable": {
            "name": "test_mixed_case_scheme_acceptable",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": [],
                "scheme": []
            },
            "variables": {
                "s": [
                    "Session"
                ],
                "r": [
                    "Request"
                ]
            }
        },
        "TestRequests.test_no_body_content_length": {
            "name": "test_no_body_content_length",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": [],
                "method": []
            },
            "variables": {}
        },
        "TestRequests.test_no_content_length": {
            "name": "test_no_content_length",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": [],
                "method": []
            },
            "variables": {}
        },
        "TestRequests.test_non_prepared_request_error": {
            "name": "test_non_prepared_request_error",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "s": [
                    "Session"
                ],
                "req": [
                    "Request"
                ]
            }
        },
        "TestTimeout.test_none_timeout": {
            "name": "test_none_timeout",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": [],
                "timeout": []
            },
            "variables": {}
        },
        "TestRequests.test_nonhttp_schemes_dont_check_URLs": {
            "name": "test_nonhttp_schemes_dont_check_URLs",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "test_urls": [
                    "tuple[typing.Text]"
                ],
                "test_url": [
                    "typing.Text"
                ],
                "req": [
                    "Request"
                ]
            }
        },
        "TestRequests.test_override_content_length": {
            "name": "test_override_content_length",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": []
            },
            "variables": {
                "headers": [
                    "dict[typing.Text, typing.Text]"
                ]
            }
        },
        "TestRequests.test_param_cookiejar_works": {
            "name": "test_param_cookiejar_works",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": []
            },
            "variables": {}
        },
        "TestPreparingURLs.test_parameters_for_nonstandard_schemes": {
            "name": "test_parameters_for_nonstandard_schemes",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "input": [],
                "params": [],
                "expected": []
            },
            "variables": {
                "r": [
                    "Request"
                ]
            }
        },
        "TestRequests.test_params_are_added_before_fragment": {
            "name": "test_params_are_added_before_fragment",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "url": [],
                "expected": []
            },
            "variables": {}
        },
        "TestRequests.test_params_are_merged_case_sensitive": {
            "name": "test_params_are_merged_case_sensitive",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": []
            },
            "variables": {
                "s": [
                    "Session"
                ]
            }
        },
        "TestRequests.test_params_bytes_are_encoded": {
            "name": "test_params_bytes_are_encoded",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestRequests.test_params_original_order_is_preserved_by_default": {
            "name": "test_params_original_order_is_preserved_by_default",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "session": [
                    "Session"
                ],
                "request": [
                    "Request"
                ]
            }
        },
        "TestRequests.test_path_is_not_double_encoded": {
            "name": "test_path_is_not_double_encoded",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestRequests.test_post_with_custom_mapping": {
            "name": "test_post_with_custom_mapping",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": []
            },
            "variables": {
                "data": [
                    "CustomMapping"
                ]
            }
        },
        "TestRequests.test_prepare_body_position_non_stream": {
            "name": "test_prepare_body_position_non_stream",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "data": [
                    "bytes"
                ]
            }
        },
        "TestRequests.test_prepare_request_with_bytestring_url": {
            "name": "test_prepare_request_with_bytestring_url",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "req": [
                    "Request"
                ],
                "s": [
                    "Session"
                ]
            }
        },
        "test_prepared_copy": {
            "name": "test_prepared_copy",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "kwargs": []
            },
            "variables": {
                "p": [
                    "PreparedRequest"
                ],
                "attr": [
                    "typing.Text"
                ]
            }
        },
        "TestRequests.test_prepared_from_session": {
            "name": "test_prepared_from_session",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": []
            },
            "variables": {
                "req": [
                    "Request"
                ],
                "s": [
                    "Session"
                ],
                "s_": [
                    "DummyAuth"
                ]
            }
        },
        "TestRequests.test_prepared_request_hook": {
            "name": "test_prepared_request_hook",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": []
            },
            "variables": {
                "req": [
                    "Request"
                ],
                "s": [
                    "Session"
                ]
            }
        },
        "TestRequests.test_prepared_request_is_pickleable": {
            "name": "test_prepared_request_is_pickleable",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": []
            },
            "variables": {
                "s": [
                    "Session"
                ]
            }
        },
        "TestRequests.test_prepared_request_with_file_is_pickleable": {
            "name": "test_prepared_request_with_file_is_pickleable",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": []
            },
            "variables": {
                "files": [
                    "dict[typing.Text, typing.IO]"
                ],
                "r": [
                    "Request"
                ],
                "s": [
                    "Session"
                ]
            }
        },
        "TestRequests.test_prepared_request_with_hook_is_pickleable": {
            "name": "test_prepared_request_with_hook_is_pickleable",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": []
            },
            "variables": {
                "r": [
                    "Request"
                ],
                "s": [
                    "Session"
                ]
            }
        },
        "TestPreparingURLs.test_preparing_bad_url": {
            "name": "test_preparing_bad_url",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "url": []
            },
            "variables": {
                "r": [
                    "Request"
                ]
            }
        },
        "TestPreparingURLs.test_preparing_url": {
            "name": "test_preparing_url",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "url": [],
                "expected": []
            },
            "variables": {
                "r": [
                    "Request"
                ]
            }
        },
        "TestCaseInsensitiveDict.test_preserve_key_case": {
            "name": "test_preserve_key_case",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "cid": [
                    "CaseInsensitiveDict"
                ],
                "keyset": [
                    "set[typing.Text]"
                ]
            }
        },
        "TestCaseInsensitiveDict.test_preserve_last_key_case": {
            "name": "test_preserve_last_key_case",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "cid": [
                    "CaseInsensitiveDict"
                ],
                "keyset": [
                    "set[typing.Text]"
                ]
            }
        },
        "TestRequests.test_proxy_auth": {
            "name": "test_proxy_auth",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "adapter": [
                    "HTTPAdapter"
                ]
            }
        },
        "TestRequests.test_proxy_auth_empty_pass": {
            "name": "test_proxy_auth_empty_pass",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "adapter": [
                    "HTTPAdapter"
                ]
            }
        },
        "test_proxy_env_vars_override_default": {
            "name": "test_proxy_env_vars_override_default",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "var": [],
                "url": [],
                "proxy": []
            },
            "variables": {
                "session": [
                    "Session"
                ],
                "prep": [
                    "PreparedRequest"
                ],
                "kwargs": [
                    "dict"
                ]
            }
        },
        "TestRequests.test_proxy_error": {
            "name": "test_proxy_error",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestRequests.test_proxy_error_on_bad_url": {
            "name": "test_proxy_error_on_bad_url",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": [],
                "httpbin_secure": []
            },
            "variables": {}
        },
        "TestRequests.test_pyopenssl_redirect": {
            "name": "test_pyopenssl_redirect",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin_secure": [],
                "httpbin_ca_bundle": []
            },
            "variables": {}
        },
        "TestTimeout.test_read_timeout": {
            "name": "test_read_timeout",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": [],
                "timeout": []
            },
            "variables": {}
        },
        "TestRequests.test_redirect_with_wrong_gzipped_header": {
            "name": "test_redirect_with_wrong_gzipped_header",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": []
            },
            "variables": {
                "s": [
                    "Session"
                ]
            }
        },
        "TestPreparingURLs.test_redirecting_to_bad_url": {
            "name": "test_redirecting_to_bad_url",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": [],
                "url": [],
                "exception": []
            },
            "variables": {}
        },
        "TestRequests.test_request_and_response_are_pickleable": {
            "name": "test_request_and_response_are_pickleable",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": []
            },
            "variables": {}
        },
        "TestRequests.test_request_cookie_overrides_session_cookie": {
            "name": "test_request_cookie_overrides_session_cookie",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": []
            },
            "variables": {}
        },
        "TestRequests.test_request_cookies_not_persisted": {
            "name": "test_request_cookies_not_persisted",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": []
            },
            "variables": {}
        },
        "TestRequests.test_request_ok_set": {
            "name": "test_request_ok_set",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": []
            },
            "variables": {}
        },
        "TestRequests.test_request_with_bytestring_host": {
            "name": "test_request_with_bytestring_host",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": []
            },
            "variables": {
                "s": [
                    "Session"
                ]
            }
        },
        "test_requests_are_updated_each_time": {
            "name": "test_requests_are_updated_each_time",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": []
            },
            "variables": {
                "session": [
                    "RedirectSession"
                ],
                "default_keyword_args": [
                    "dict[typing.Text, typing.Union[bool,None,dict]]"
                ],
                "send_call": [
                    "SendCall"
                ]
            }
        },
        "TestRequests.test_requests_history_is_saved": {
            "name": "test_requests_history_is_saved",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": []
            },
            "variables": {
                "i": [
                    "int"
                ]
            }
        },
        "TestRequests.test_requests_in_history_are_not_overridden": {
            "name": "test_requests_in_history_are_not_overridden",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": []
            },
            "variables": {
                "urls": [
                    "list"
                ],
                "req_urls": [
                    "list"
                ]
            }
        },
        "TestRequests.test_response_chunk_size_type": {
            "name": "test_response_chunk_size_type",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "r": [
                    "Response"
                ]
            }
        },
        "TestRequests.test_response_context_manager": {
            "name": "test_response_context_manager",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": []
            },
            "variables": {}
        },
        "TestRequests.test_response_decode_unicode": {
            "name": "test_response_decode_unicode",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "r": [
                    "Response"
                ],
                "r_": [
                    "bool",
                    "bytes",
                    "typing.Text"
                ]
            }
        },
        "TestRequests.test_response_is_iterable": {
            "name": "test_response_is_iterable",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "r": [
                    "Response"
                ]
            }
        },
        "TestRequests.test_response_iter_lines": {
            "name": "test_response_iter_lines",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": []
            },
            "variables": {}
        },
        "TestRequests.test_response_iter_lines_reentrant": {
            "name": "test_response_iter_lines_reentrant",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": []
            },
            "variables": {}
        },
        "TestRequests.test_response_json_when_content_is_None": {
            "name": "test_response_json_when_content_is_None",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": []
            },
            "variables": {
                "r_": [
                    "int",
                    "bool"
                ]
            }
        },
        "TestRequests.test_response_reason_unicode": {
            "name": "test_response_reason_unicode",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "r": [
                    "Response"
                ],
                "r_": [
                    "typing.Text",
                    "bytes",
                    "int",
                    "None"
                ]
            }
        },
        "TestRequests.test_response_reason_unicode_fallback": {
            "name": "test_response_reason_unicode_fallback",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "r": [
                    "Response"
                ],
                "r_": [
                    "typing.Text",
                    "bytes",
                    "int",
                    "None"
                ],
                "reason": [
                    "typing.Text"
                ]
            }
        },
        "TestRequests.test_response_without_release_conn": {
            "name": "test_response_without_release_conn",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "resp": [
                    "Response"
                ]
            }
        },
        "TestRequests.test_rewind_body": {
            "name": "test_rewind_body",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestRequests.test_rewind_body_failed_seek": {
            "name": "test_rewind_body_failed_seek",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "data": [
                    "BadFileObj"
                ]
            }
        },
        "TestRequests.test_rewind_body_failed_tell": {
            "name": "test_rewind_body_failed_tell",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "data": [
                    "BadFileObj"
                ]
            }
        },
        "TestRequests.test_rewind_body_no_seek": {
            "name": "test_rewind_body_no_seek",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "data": [
                    "BadFileObj"
                ]
            }
        },
        "TestRequests.test_rewind_partially_read_body": {
            "name": "test_rewind_partially_read_body",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestRequests.test_session_close_proxy_clear": {
            "name": "test_session_close_proxy_clear",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            },
            "variables": {
                "proxies": [
                    "dict[typing.Text, ]"
                ],
                "session": [
                    "Session"
                ]
            }
        },
        "TestRequests.test_session_get_adapter_prefix_matching": {
            "name": "test_session_get_adapter_prefix_matching",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "prefix": [
                    "typing.Text"
                ],
                "more_specific_prefix": [
                    "typing.Text"
                ],
                "url_matching_only_prefix": [
                    "typing.Text"
                ],
                "url_matching_more_specific_prefix": [
                    "typing.Text"
                ],
                "url_not_matching_prefix": [
                    "typing.Text"
                ],
                "s": [
                    "Session"
                ],
                "prefix_adapter": [
                    "HTTPAdapter"
                ],
                "more_specific_prefix_adapter": [
                    "HTTPAdapter"
                ]
            }
        },
        "TestRequests.test_session_get_adapter_prefix_matching_is_case_insensitive": {
            "name": "test_session_get_adapter_prefix_matching_is_case_insensitive",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "mixed_case_prefix": [
                    "typing.Text"
                ],
                "url_matching_prefix_with_different_case": [
                    "typing.Text"
                ],
                "s": [
                    "Session"
                ],
                "my_adapter": [
                    "HTTPAdapter"
                ]
            }
        },
        "TestRequests.test_session_get_adapter_prefix_matching_mixed_case": {
            "name": "test_session_get_adapter_prefix_matching_mixed_case",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "mixed_case_prefix": [
                    "typing.Text"
                ],
                "url_matching_prefix": [
                    "typing.Text"
                ],
                "s": [
                    "Session"
                ],
                "my_adapter": [
                    "HTTPAdapter"
                ]
            }
        },
        "TestRequests.test_session_hooks_are_overridden_by_request_hooks": {
            "name": "test_session_hooks_are_overridden_by_request_hooks",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": []
            },
            "variables": {
                "hook1": [
                    "typing.Callable"
                ],
                "hook2": [
                    "typing.Callable"
                ],
                "s": [
                    "Session"
                ],
                "r": [
                    "Request"
                ]
            }
        },
        "TestRequests.test_session_hooks_are_used_with_no_request_hooks": {
            "name": "test_session_hooks_are_used_with_no_request_hooks",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": []
            },
            "variables": {
                "hook": [
                    "typing.Callable"
                ],
                "s": [
                    "Session"
                ],
                "r": [
                    "Request"
                ]
            }
        },
        "TestRequests.test_session_pickling": {
            "name": "test_session_pickling",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": []
            },
            "variables": {
                "r": [
                    "Request"
                ],
                "s": [
                    "Session"
                ]
            }
        },
        "TestRequests.test_set_basicauth": {
            "name": "test_set_basicauth",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": [],
                "username": [],
                "password": []
            },
            "variables": {
                "auth": [
                    "tuple"
                ],
                "r": [
                    "Request"
                ]
            }
        },
        "TestRequests.test_set_cookie_on_301": {
            "name": "test_set_cookie_on_301",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": []
            },
            "variables": {}
        },
        "TestCaseInsensitiveDict.test_setdefault": {
            "name": "test_setdefault",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "cid": [
                    "CaseInsensitiveDict"
                ]
            }
        },
        "TestRequests.test_should_strip_auth_default_port": {
            "name": "test_should_strip_auth_default_port",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "old_uri": [],
                "new_uri": []
            },
            "variables": {
                "s": [
                    "Session"
                ]
            }
        },
        "TestRequests.test_should_strip_auth_host_change": {
            "name": "test_should_strip_auth_host_change",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "s": [
                    "Session"
                ]
            }
        },
        "TestRequests.test_should_strip_auth_http_downgrade": {
            "name": "test_should_strip_auth_http_downgrade",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "s": [
                    "Session"
                ]
            }
        },
        "TestRequests.test_should_strip_auth_https_upgrade": {
            "name": "test_should_strip_auth_https_upgrade",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "s": [
                    "Session"
                ]
            }
        },
        "TestRequests.test_should_strip_auth_port_change": {
            "name": "test_should_strip_auth_port_change",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "s": [
                    "Session"
                ]
            }
        },
        "TestRequests.test_status_raising": {
            "name": "test_status_raising",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": []
            },
            "variables": {}
        },
        "TestTimeout.test_stream_timeout": {
            "name": "test_stream_timeout",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": []
            },
            "variables": {
                "e": [
                    "Exception"
                ]
            }
        },
        "TestRequests.test_stream_with_auth_does_not_set_transfer_encoding_header": {
            "name": "test_stream_with_auth_does_not_set_transfer_encoding_header",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": []
            },
            "variables": {
                "auth": [
                    "tuple[typing.Text]"
                ],
                "r": [
                    "Request"
                ]
            }
        },
        "TestRequests.test_time_elapsed_blank": {
            "name": "test_time_elapsed_blank",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": []
            },
            "variables": {
                "total_seconds": [
                    "int"
                ]
            }
        },
        "TestTimeout.test_total_timeout_connect": {
            "name": "test_total_timeout_connect",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "timeout": []
            },
            "variables": {
                "TARPIT": [
                    "typing.Text"
                ]
            }
        },
        "TestRequests.test_transfer_enc_removal_on_redirect": {
            "name": "test_transfer_enc_removal_on_redirect",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": []
            },
            "variables": {
                "purged_headers": [
                    "tuple[typing.Text]"
                ],
                "ses": [
                    "Session"
                ],
                "req": [
                    "Request"
                ],
                "resp": [
                    "Response"
                ],
                "resp_": [
                    "int"
                ],
                "header": [
                    "typing.Text"
                ]
            }
        },
        "TestRequests.test_transport_adapter_ordering": {
            "name": "test_transport_adapter_ordering",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "s": [
                    "Session"
                ],
                "order": [
                    "list[typing.Text]"
                ],
                "s2": [
                    "Session"
                ],
                "s2_": [
                    "dict[typing.Text, HTTPAdapter]"
                ]
            }
        },
        "TestRequests.test_unconsumed_session_response_closes_connection": {
            "name": "test_unconsumed_session_response_closes_connection",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": []
            },
            "variables": {}
        },
        "TestRequests.test_unicode_get": {
            "name": "test_unicode_get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": [],
                "url": [],
                "params": []
            },
            "variables": {}
        },
        "TestRequests.test_unicode_header_name": {
            "name": "test_unicode_header_name",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": []
            },
            "variables": {}
        },
        "TestRequests.test_unicode_method_name": {
            "name": "test_unicode_method_name",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": []
            },
            "variables": {
                "files": [
                    "dict[typing.Text, typing.IO]"
                ]
            }
        },
        "TestRequests.test_unicode_method_name_with_request_object": {
            "name": "test_unicode_method_name_with_request_object",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": []
            },
            "variables": {
                "files": [
                    "dict[typing.Text, typing.IO]"
                ],
                "s": [
                    "Session"
                ],
                "req": [
                    "Request"
                ]
            }
        },
        "TestRequests.test_unicode_multipart_post": {
            "name": "test_unicode_multipart_post",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": [],
                "data": []
            },
            "variables": {}
        },
        "TestRequests.test_unicode_multipart_post_fieldnames": {
            "name": "test_unicode_multipart_post_fieldnames",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": []
            },
            "variables": {
                "r": [
                    "Request"
                ]
            }
        },
        "TestCaseInsensitiveDict.test_update": {
            "name": "test_update",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "cid": [
                    "CaseInsensitiveDict"
                ]
            }
        },
        "TestCaseInsensitiveDict.test_update_retains_unchanged": {
            "name": "test_update_retains_unchanged",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "cid": [
                    "CaseInsensitiveDict"
                ]
            }
        },
        "TestRequests.test_uppercase_scheme_redirect": {
            "name": "test_uppercase_scheme_redirect",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": []
            },
            "variables": {}
        },
        "TestPreparingURLs.test_url_mutation": {
            "name": "test_url_mutation",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "input": [],
                "expected": []
            },
            "variables": {
                "r": [
                    "Request"
                ]
            }
        },
        "TestRequests.test_urlencoded_get_query_multivalued_param": {
            "name": "test_urlencoded_get_query_multivalued_param",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": []
            },
            "variables": {}
        },
        "test_urllib3_pool_connection_closed": {
            "name": "test_urllib3_pool_connection_closed",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": []
            },
            "variables": {
                "s": [
                    "Session"
                ],
                "e": [
                    "Exception"
                ]
            }
        },
        "test_urllib3_retries": {
            "name": "test_urllib3_retries",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": []
            },
            "variables": {
                "s": [
                    "Session"
                ]
            }
        },
        "TestRequests.test_user_agent_transfers": {
            "name": "test_user_agent_transfers",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "httpbin": [],
                "key": []
            },
            "variables": {
                "heads": [
                    "dict[, typing.Text]"
                ]
            }
        },
        "TestRequests.test_whitespaces_are_removed_from_url": {
            "name": "test_whitespaces_are_removed_from_url",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        }
    },
    "requests-2.22.0/tests/test_structures.py": {
        "global": {},
        "TestCaseInsensitiveDict.setup": {
            "name": "setup",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "case_insensitive_dict": [
                    "CaseInsensitiveDict"
                ]
            }
        },
        "TestLookupDict.setup": {
            "name": "setup",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "lookup_dict": [
                    "LookupDict"
                ],
                "self_": [
                    "int"
                ]
            }
        },
        "TestCaseInsensitiveDict.test_copy": {
            "name": "test_copy",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestCaseInsensitiveDict.test_delitem": {
            "name": "test_delitem",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "key": []
            },
            "variables": {}
        },
        "TestLookupDict.test_get": {
            "name": "test_get",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "key": [],
                "value": []
            },
            "variables": {}
        },
        "TestCaseInsensitiveDict.test_getitem": {
            "name": "test_getitem",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "key": []
            },
            "variables": {}
        },
        "TestLookupDict.test_getitem": {
            "name": "test_getitem",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "key": [],
                "value": []
            },
            "variables": {}
        },
        "TestCaseInsensitiveDict.test_instance_equality": {
            "name": "test_instance_equality",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "other": [],
                "result": []
            },
            "variables": {}
        },
        "TestCaseInsensitiveDict.test_list": {
            "name": "test_list",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestCaseInsensitiveDict.test_lower_items": {
            "name": "test_lower_items",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestCaseInsensitiveDict.test_repr": {
            "name": "test_repr",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestLookupDict.test_repr": {
            "name": "test_repr",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        }
    },
    "requests-2.22.0/tests/test_testserver.py": {
        "global": {},
        "TestTestServer.handler": {
            "name": "handler",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "sock": []
            },
            "variables": {}
        },
        "TestTestServer.test_basic": {
            "name": "test_basic",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "question": [
                    "bytes"
                ],
                "answer": [
                    "bytes"
                ]
            }
        },
        "TestTestServer.test_basic_response": {
            "name": "test_basic_response",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestTestServer.test_basic_waiting_server": {
            "name": "test_basic_waiting_server",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestTestServer.test_multiple_requests": {
            "name": "test_multiple_requests",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "requests_to_handle": [
                    "int"
                ],
                "server_url": [
                    "str"
                ]
            }
        },
        "TestTestServer.test_request_recovery": {
            "name": "test_request_recovery",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "first_request": [
                    "bytes"
                ],
                "second_request": [
                    "bytes"
                ]
            }
        },
        "TestTestServer.test_request_recovery_with_bigger_timeout": {
            "name": "test_request_recovery_with_bigger_timeout",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "data": [
                    "bytes"
                ]
            }
        },
        "TestTestServer.test_requests_after_timeout_are_not_received": {
            "name": "test_requests_after_timeout_are_not_received",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestTestServer.test_server_closes": {
            "name": "test_server_closes",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestTestServer.test_server_finishes_on_error": {
            "name": "test_server_finishes_on_error",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestTestServer.test_server_finishes_when_no_connections": {
            "name": "test_server_finishes_when_no_connections",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestTestServer.test_text_response": {
            "name": "test_text_response",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        }
    },
    "requests-2.22.0/tests/test_utils.py": {
        "RegHandle.Close": {
            "name": "Close",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "OpenKey": {
            "name": "OpenKey",
            "location": -1,
            "return": [],
            "arguments": {
                "key": [],
                "subkey": []
            },
            "variables": {}
        },
        "QueryValueEx": {
            "name": "QueryValueEx",
            "location": -1,
            "return": [
                "list"
            ],
            "arguments": {
                "key": [],
                "value_name": []
            },
            "variables": {
                "key": [
                    "ie_settings"
                ]
            }
        },
        "TestSuperLen,LenFile.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "len": [
                    "int"
                ]
            }
        },
        "TestSuperLen,BoomFile.__len__": {
            "name": "__len__",
            "location": -1,
            "return": [
                "int"
            ],
            "arguments": {},
            "variables": {}
        },
        "global": {},
        "TestGetEnvironProxies.no_proxy": {
            "name": "no_proxy",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "request": [],
                "monkeypatch": []
            },
            "variables": {}
        },
        "TestSuperLen,NoLenBoomFile.seek": {
            "name": "seek",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "offset": [],
                "whence": []
            },
            "variables": {}
        },
        "TestSuperLen,BoomFile.tell": {
            "name": "tell",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestSuperLen,NoLenBoomFile.tell": {
            "name": "tell",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "test__parse_content_type_header": {
            "name": "test__parse_content_type_header",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "value": [],
                "expected": []
            },
            "variables": {}
        },
        "test_add_dict_to_cookiejar": {
            "name": "test_add_dict_to_cookiejar",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "cookiejar": []
            },
            "variables": {
                "cookiedict": [
                    "dict[typing.Text, typing.Text]"
                ],
                "cookies": [
                    "dict"
                ]
            }
        },
        "TestGuessJSONUTF.test_bad_utf_like_encoding": {
            "name": "test_bad_utf_like_encoding",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestGetEnvironProxies.test_bypass": {
            "name": "test_bypass",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "url": []
            },
            "variables": {}
        },
        "TestGetEnvironProxies.test_bypass_no_proxy_keyword": {
            "name": "test_bypass_no_proxy_keyword",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "url": []
            },
            "variables": {
                "no_proxy": [
                    "typing.Text"
                ]
            }
        },
        "test_dotted_netmask": {
            "name": "test_dotted_netmask",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "mask": [],
                "expected": []
            },
            "variables": {}
        },
        "TestGuessJSONUTF.test_encoded": {
            "name": "test_encoded",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "encoding": []
            },
            "variables": {
                "data": [
                    "bytes"
                ]
            }
        },
        "TestSuperLen.test_file": {
            "name": "test_file",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [],
                "mode": [],
                "warnings_num": [],
                "recwarn": []
            },
            "variables": {}
        },
        "test_get_auth_from_url": {
            "name": "test_get_auth_from_url",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "url": [],
                "auth": []
            },
            "variables": {}
        },
        "test_get_encoding_from_headers": {
            "name": "test_get_encoding_from_headers",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "value": [],
                "expected": []
            },
            "variables": {}
        },
        "TestGuessJSONUTF.test_guess_by_bom": {
            "name": "test_guess_by_bom",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "encoding": [],
                "expected": []
            },
            "variables": {
                "data": [
                    "bytes"
                ]
            }
        },
        "TestGuessFilename.test_guess_filename_invalid": {
            "name": "test_guess_filename_invalid",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "value": []
            },
            "variables": {}
        },
        "TestGuessFilename.test_guess_filename_valid": {
            "name": "test_guess_filename_valid",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "value": [],
                "expected_type": []
            },
            "variables": {}
        },
        "TestAddressInNetwork.test_invalid": {
            "name": "test_invalid",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestIsIPv4Address.test_invalid": {
            "name": "test_invalid",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "value": []
            },
            "variables": {}
        },
        "TestIsValidCIDR.test_invalid": {
            "name": "test_invalid",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "value": []
            },
            "variables": {}
        },
        "TestToKeyValList.test_invalid": {
            "name": "test_invalid",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestSuperLen.test_io_streams": {
            "name": "test_io_streams",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "stream": [],
                "value": []
            },
            "variables": {}
        },
        "TestUnquoteHeaderValue.test_is_filename": {
            "name": "test_is_filename",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "test_iter_slices": {
            "name": "test_iter_slices",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "value": [],
                "length": []
            },
            "variables": {}
        },
        "TestContentEncodingDetection.test_none": {
            "name": "test_none",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestGetEnvironProxies.test_not_bypass": {
            "name": "test_not_bypass",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "url": []
            },
            "variables": {}
        },
        "TestGetEnvironProxies.test_not_bypass_no_proxy_keyword": {
            "name": "test_not_bypass_no_proxy_keyword",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "url": [],
                "monkeypatch": []
            },
            "variables": {
                "no_proxy": [
                    "typing.Text"
                ]
            }
        },
        "test_parse_dict_header": {
            "name": "test_parse_dict_header",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "value": [],
                "expected": []
            },
            "variables": {}
        },
        "test_parse_header_links": {
            "name": "test_parse_header_links",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "value": [],
                "expected": []
            },
            "variables": {}
        },
        "TestContentEncodingDetection.test_pragmas": {
            "name": "test_pragmas",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "content": []
            },
            "variables": {}
        },
        "TestContentEncodingDetection.test_precedence": {
            "name": "test_precedence",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "content": [
                    "str"
                ]
            }
        },
        "test_prepend_scheme_if_needed": {
            "name": "test_prepend_scheme_if_needed",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "value": [],
                "expected": []
            },
            "variables": {}
        },
        "test_requote_uri_with_unquoted_percents": {
            "name": "test_requote_uri_with_unquoted_percents",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "uri": [],
                "expected": []
            },
            "variables": {}
        },
        "test_select_proxies": {
            "name": "test_select_proxies",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "url": [],
                "expected": [],
                "proxies": []
            },
            "variables": {}
        },
        "test_set_environ": {
            "name": "test_set_environ",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "env_name": [],
                "value": []
            },
            "variables": {}
        },
        "test_set_environ_raises_exception": {
            "name": "test_set_environ_raises_exception",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "test_should_bypass_proxies": {
            "name": "test_should_bypass_proxies",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "url": [],
                "expected": [],
                "monkeypatch": []
            },
            "variables": {}
        },
        "test_should_bypass_proxies_no_proxy": {
            "name": "test_should_bypass_proxies_no_proxy",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "url": [],
                "expected": [],
                "monkeypatch": []
            },
            "variables": {
                "no_proxy": [
                    "typing.Text"
                ]
            }
        },
        "test_should_bypass_proxies_pass_only_hostname": {
            "name": "test_should_bypass_proxies_pass_only_hostname",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "url": [],
                "expected": [],
                "mocker": []
            },
            "variables": {}
        },
        "test_should_bypass_proxies_win_registry": {
            "name": "test_should_bypass_proxies_win_registry",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "url": [],
                "expected": [],
                "override": [],
                "monkeypatch": []
            },
            "variables": {
                "override": [
                    "None",
                    "typing.Text"
                ],
                "ie_settings": [
                    "RegHandle"
                ]
            }
        },
        "TestSuperLen.test_string": {
            "name": "test_string",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestSuperLen.test_super_len_correctly_calculates_len_of_partially_read_file": {
            "name": "test_super_len_correctly_calculates_len_of_partially_read_file",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestSuperLen.test_super_len_handles_files_raising_weird_errors_in_tell": {
            "name": "test_super_len_handles_files_raising_weird_errors_in_tell",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "error": []
            },
            "variables": {}
        },
        "TestSuperLen.test_super_len_tell_ioerror": {
            "name": "test_super_len_tell_ioerror",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "error": []
            },
            "variables": {}
        },
        "TestSuperLen.test_super_len_with__len__": {
            "name": "test_super_len_with__len__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "foo": [
                    "list[int]"
                ]
            }
        },
        "TestSuperLen.test_super_len_with_fileno": {
            "name": "test_super_len_with_fileno",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {
                "f": [
                    "typing.IO"
                ],
                "file_data": [
                    "str"
                ]
            }
        },
        "TestSuperLen.test_super_len_with_no__len__": {
            "name": "test_super_len_with_no__len__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestSuperLen.test_super_len_with_no_matches": {
            "name": "test_super_len_with_no_matches",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestSuperLen.test_super_len_with_tell": {
            "name": "test_super_len_with_tell",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "test_to_native_string": {
            "name": "test_to_native_string",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "value": [],
                "expected": []
            },
            "variables": {}
        },
        "test_unicode_is_ascii": {
            "name": "test_unicode_is_ascii",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "value": [],
                "expected": []
            },
            "variables": {}
        },
        "test_unquote_unreserved": {
            "name": "test_unquote_unreserved",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "uri": [],
                "expected": []
            },
            "variables": {}
        },
        "TestExtractZippedPaths.test_unzipped_paths_unchanged": {
            "name": "test_unzipped_paths_unchanged",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "path": []
            },
            "variables": {}
        },
        "test_urldefragauth": {
            "name": "test_urldefragauth",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "url": [],
                "expected": []
            },
            "variables": {}
        },
        "TestAddressInNetwork.test_valid": {
            "name": "test_valid",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestIsIPv4Address.test_valid": {
            "name": "test_valid",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestIsValidCIDR.test_valid": {
            "name": "test_valid",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "TestToKeyValList.test_valid": {
            "name": "test_valid",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "value": [],
                "expected": []
            },
            "variables": {}
        },
        "TestUnquoteHeaderValue.test_valid": {
            "name": "test_valid",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "value": [],
                "expected": []
            },
            "variables": {}
        },
        "TestExtractZippedPaths.test_zipped_paths_extracted": {
            "name": "test_zipped_paths_extracted",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": []
            },
            "variables": {}
        }
    },
    "requests-2.22.0/tests/testserver/__init__.py": {
        "global": {}
    },
    "requests-2.22.0/tests/testserver/server.py": {
        "Server.__enter__": {
            "name": "__enter__",
            "location": -1,
            "return": [
                "tuple"
            ],
            "arguments": {},
            "variables": {}
        },
        "Server.__exit__": {
            "name": "__exit__",
            "location": -1,
            "return": [
                "bool"
            ],
            "arguments": {
                "exc_type": [],
                "exc_value": [],
                "traceback": []
            },
            "variables": {
                "exc_type": [
                    "None"
                ]
            }
        },
        "Server.__init__": {
            "name": "__init__",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {
                "handler": [
                    "None"
                ],
                "host": [
                    "typing.Text"
                ],
                "port": [
                    "int"
                ],
                "requests_to_handle": [
                    "int"
                ],
                "wait_to_close_event": [
                    "None"
                ]
            },
            "variables": {
                "handler": [
                    "None"
                ],
                "handler_results": [
                    "list"
                ],
                "host": [
                    "typing.Text"
                ],
                "port": [
                    "int"
                ],
                "requests_to_handle": [
                    "int"
                ],
                "wait_to_close_event": [
                    "None"
                ]
            }
        },
        "Server._accept_connection": {
            "name": "_accept_connection",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "Server._close_server_sock_ignore_errors": {
            "name": "_close_server_sock_ignore_errors",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "Server._create_socket_and_bind": {
            "name": "_create_socket_and_bind",
            "location": -1,
            "return": [],
            "arguments": {},
            "variables": {}
        },
        "Server._handle_requests": {
            "name": "_handle_requests",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "Server.basic_response_server": {
            "name": "basic_response_server",
            "location": -1,
            "return": [],
            "arguments": {
                "cls": [],
                "kwargs": []
            },
            "variables": {}
        },
        "consume_socket_content": {
            "name": "consume_socket_content",
            "location": -1,
            "return": [
                "bytes"
            ],
            "arguments": {
                "sock": [],
                "timeout": [
                    "float"
                ]
            },
            "variables": {
                "chunks": [
                    "int"
                ],
                "content": [
                    "bytes"
                ],
                "timeout": [
                    "float"
                ]
            }
        },
        "global": {},
        "Server.run": {
            "name": "run",
            "location": -1,
            "return": [
                "None"
            ],
            "arguments": {},
            "variables": {}
        },
        "Server.text_response_handler": {
            "name": "text_response_handler",
            "location": -1,
            "return": [],
            "arguments": {
                "sock": []
            },
            "variables": {}
        },
        "Server.text_response_server": {
            "name": "text_response_server",
            "location": -1,
            "return": [
                "Server"
            ],
            "arguments": {
                "cls": [],
                "text": [],
                "request_timeout": [
                    "float"
                ],
                "kwargs": []
            },
            "variables": {}
        }
    },
    "requests-2.22.0/tests/utils.py": {
        "global": {},
        "override_environ": {
            "name": "override_environ",
            "location": -1,
            "return": [
                "typing.Generator"
            ],
            "arguments": {
                "kwargs": []
            },
            "variables": {
                "value": [
                    "None"
                ]
            }
        }
    }
}