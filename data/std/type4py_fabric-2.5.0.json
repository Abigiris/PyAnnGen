{
    "fabric-2.5.0/setup.py": {
        "global": {
            "_locals": [
                "int",
                "Optional[str]",
                "set",
                "str",
                "Optional[List[str]]",
                "frozenset[str]",
                "ImportError"
            ],
            "binary_name": [
                "str",
                "Dict[int, str]"
            ],
            "env_wants_v2": [
                "List[str]",
                "List[Union[Any, Any, Any]]",
                "frozenset[str]",
                "int",
                "List[Union[Any, Any]]"
            ],
            "fabric2_present": [
                "int",
                "dict",
                "List[int]",
                "List[List[int]]",
                "str"
            ],
            "fabric_present": [
                "int",
                "dict",
                "List[int]",
                "List[List[int]]",
                "str"
            ],
            "here": [
                "str"
            ],
            "long_description": [
                "str"
            ],
            "only_v2_present": [
                "str",
                "List[Tuple[int, int]]",
                "range",
                "List[Tuple[str, str]]",
                "Dict[str, str]",
                "Tuple[int, int]",
                "List[int]"
            ],
            "package_name": [
                "str",
                "dict"
            ],
            "packages": [
                "list",
                "str",
                "dict",
                "List[str]",
                "Dict[str, Type[Any]]"
            ],
            "pytest_deps": [
                "List[str]",
                "dict",
                "list",
                "str"
            ],
            "testing_deps": [
                "List[str]",
                "list",
                "List[Tuple[str, str, str, str]]",
                "List[Callable[[], None]]"
            ],
            "version": [
                "str",
                "Dict[int, str]"
            ]
        }
    },
    "fabric-2.5.0/tasks.py": {
        "publish": {
            "name": "publish",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "c": [
                    "Optional[str]",
                    "Dict[str, Any]",
                    "Optional[Tuple[Any]]"
                ],
                "check_desc": [
                    "bool",
                    "dict",
                    "float",
                    "str",
                    "Optional[Dict]"
                ],
                "directory": [
                    "int",
                    "bool"
                ],
                "dry_run": [
                    "int",
                    "bool",
                    "str"
                ],
                "index": [
                    "str",
                    "Dict[str, List[Any]]",
                    "Union[int, float]",
                    "int",
                    "List[str]",
                    "Dict[str, dict]",
                    "Dict[str, Any]"
                ],
                "kwargs": [],
                "sdist": [
                    "int",
                    "Dict[str, Union[str, int, bool]]"
                ],
                "sign": [
                    "bool",
                    "slp.util.types.Embeddings",
                    "dict",
                    "List[str]",
                    "bytes"
                ],
                "wheel": [
                    "int",
                    "Dict[str, Union[str, int, bool]]"
                ]
            },
            "variables": {
                "builder": [
                    "Set[str]",
                    "Tuple[Type[Any]]",
                    "str",
                    "Dict[str, List[int]]"
                ],
                "check_desc": [
                    "str",
                    "List[str]",
                    "Type[str]",
                    "Pattern[str]",
                    "Set[str]",
                    "int"
                ],
                "config": [
                    "dict",
                    "Dict[str, Union[Any, Any, Any]]",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "Dict[str, Union[Any, Any, Any, Any]]"
                ],
                "index": [
                    "str",
                    "dict",
                    "frozenset[str]",
                    "Dict[str, str]"
                ],
                "sign": [
                    "int",
                    "str",
                    "List[Tuple[int, int]]",
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "sanity_test_from_v1": {
            "name": "sanity_test_from_v1",
            "location": 62,
            "return": [
                "DefaultDict",
                "Iterable[Mapping[str, Any]]",
                "Optional[bool]",
                "str",
                "float"
            ],
            "arguments": {
                "args": [],
                "c": [
                    "int",
                    "str"
                ],
                "kwargs": []
            },
            "variables": {
                "PYTHON": [
                    "str",
                    "Dict[str, str]",
                    "list",
                    "bool",
                    "Dict[str, List[str]]"
                ],
                "config": [],
                "cxn": [],
                "gateway": [
                    "str"
                ],
                "host_string": [
                    "str",
                    "bool",
                    "Tuple[Literal, Literal, Literal, Literal, Literal]",
                    "int",
                    "Tuple[Literal, Literal, Literal, Literal, Literal, Literal]",
                    "List[str]",
                    "Final"
                ],
                "no_agent": [
                    "bool",
                    "str",
                    "list",
                    "int",
                    "Callable"
                ],
                "password": [
                    "str",
                    "bool",
                    "Dict[str, str]",
                    "ClassVar"
                ],
                "port": [
                    "int",
                    "Dict[str, int]"
                ],
                "user": [
                    "str",
                    "List[Union[Any, Any]]",
                    "List[Tuple[int, str, str]]",
                    "list",
                    "functools.partial[Need]"
                ]
            }
        },
        "integration": {
            "name": "integration",
            "location": 103,
            "return": [
                "bool",
                "Optional[bool]",
                "Optional[int]"
            ],
            "arguments": {
                "args": [],
                "c": [
                    "bool",
                    "str",
                    "int"
                ],
                "capture": [
                    "bool",
                    "str",
                    "int"
                ],
                "color": [
                    "bool",
                    "str",
                    "int"
                ],
                "k": [
                    "bool",
                    "str",
                    "int"
                ],
                "kwargs": [],
                "module": [
                    "bool",
                    "str",
                    "int"
                ],
                "opts": [
                    "bool",
                    "str",
                    "int"
                ],
                "pty": [
                    "bool",
                    "str",
                    "int"
                ],
                "verbose": [
                    "bool",
                    "str",
                    "int"
                ],
                "x": [
                    "bool",
                    "str",
                    "int"
                ]
            },
            "variables": {}
        },
        "global": {
            "__doc__": [
                "str",
                "List[str]",
                "int",
                "Dict[str, List[Any]]",
                "Tuple[str, str, str, str, str, str, str, str]"
            ],
            "my_release": [],
            "ns": [
                "List[int]",
                "str",
                "List[str]",
                "List[Dict[str, Any]]",
                "list"
            ]
        }
    },
    "fabric-2.5.0/fabric/config.py": {
        "Config.from_v1": {
            "name": "from_v1",
            "location": 42,
            "return": [
                "List[Dict[str, Any]]",
                "int",
                "Callable[..., None]",
                "str"
            ],
            "arguments": {
                "args": [],
                "cls": [
                    "str",
                    "dict"
                ],
                "env": [
                    "str",
                    "Callable",
                    "bool",
                    "dict",
                    "Dict[str, str]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "data": [
                    "str",
                    "List[str]"
                ],
                "passwd": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "Config.__init__": {
            "name": "__init__",
            "location": 104,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "explicit": [
                    "list",
                    "str",
                    "bool"
                ],
                "lazy": [
                    "Dict[str, str]",
                    "dict",
                    "str",
                    "Type[\"ExtractableWordnet\"]"
                ],
                "ssh_config": [
                    "Optional[Dict[str, str]]",
                    "List[str]",
                    "dict",
                    "Union[dict, Dict[str, Any]]",
                    "List[Tuple[Any, Any, Any]]",
                    "List[Tuple[str, int]]"
                ],
                "system_path": [
                    "list",
                    "List[str]",
                    "int",
                    "str"
                ]
            }
        },
        "Config.set_runtime_ssh_path": {
            "name": "set_runtime_ssh_path",
            "location": 165,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "path": [
                    "str"
                ],
                "self": []
            },
            "variables": {}
        },
        "Config.load_ssh_config": {
            "name": "load_ssh_config",
            "location": 176,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_runtime_ssh_path": [
                    "str"
                ]
            }
        },
        "Config.clone": {
            "name": "clone",
            "location": 195,
            "return": [
                "Iterable[str]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "new": [
                    "List[List[str]]",
                    "List[str]",
                    "nucypher.config.node.CharacterConfiguration",
                    "List[Tuple[int, float]]"
                ]
            }
        },
        "Config._clone_init_kwargs": {
            "name": "_clone_init_kwargs",
            "location": 221,
            "return": [
                "int",
                "Exception",
                "dict",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "args": [],
                "kw": [
                    "Optional[int]",
                    "str",
                    "bool",
                    "int"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_config": [
                    "paramiko.config.SSHConfig",
                    "isorsettings.Config",
                    "halogen.config.ConfigUnion[Any]",
                    "data_platform.config.ConfigManager",
                    "cincoconfig.config.Config",
                    "qcodes.configuration.config.Config"
                ],
                "kwargs": [
                    "dict",
                    "list",
                    "Dict[str, Any]"
                ],
                "new_config": [
                    "cmk.base.config.HostConfig",
                    "chalice.config.Config",
                    "synotools.models.config.syno.SynoConfig",
                    "pvcmd.polyvers._vendor.traitlets.config.loader.Config",
                    "croud.config.configuration.Configuration"
                ]
            }
        },
        "Config._load_ssh_files": {
            "name": "_load_ssh_files",
            "location": 234,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "msg": [
                    "str"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "Config._load_ssh_file": {
            "name": "_load_ssh_file",
            "location": 257,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "path": [
                    "str"
                ],
                "self": []
            },
            "variables": {
                "msg": [
                    "str",
                    "Tuple[str, str, str]",
                    "Optional[str]"
                ],
                "new_rules": [
                    "int",
                    "Type[List[int]]",
                    "Type[range]",
                    "str"
                ],
                "old_rules": [
                    "int",
                    "Dict[str, Union[Any, Any]]",
                    "Type[List[int]]",
                    "DefaultDict[Any, int]",
                    "Pattern[str]",
                    "dict",
                    "List[Tuple[int, int, int]]"
                ]
            }
        },
        "Config.global_defaults": {
            "name": "global_defaults",
            "location": 276,
            "return": [
                "list",
                "Dict[str, Dict[str, int]]",
                "bool",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "defaults": [
                    "str",
                    "int",
                    "List[int]",
                    "Dict[str, List[float]]",
                    "float"
                ],
                "ours": [
                    "list",
                    "tuple",
                    "dict"
                ]
            }
        },
        "global": {}
    },
    "fabric-2.5.0/fabric/connection.py": {
        "opens": {
            "name": "opens",
            "location": 28,
            "return": [
                "str",
                "mypy.nodes.Context",
                "Sequence",
                "type"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "method": [
                    "Event",
                    "MutableMapping",
                    "homeassistancore.Event",
                    "Dict[str, Any]"
                ],
                "self": [
                    "str"
                ]
            },
            "variables": {}
        },
        "derive_shorthand": {
            "name": "derive_shorthand",
            "location": 33,
            "return": [
                "str",
                "transfer.models.Scope"
            ],
            "arguments": {
                "args": [],
                "host_string": [
                    "str",
                    "NamedTuple",
                    "int"
                ],
                "kwargs": []
            },
            "variables": {
                "host": [
                    "str",
                    "int",
                    "Pattern[str]"
                ],
                "host_port": [
                    "int",
                    "tuple",
                    "Type[str]"
                ],
                "hostport": [
                    "str",
                    "Dict[str, str]",
                    "Union[Literal, str]"
                ],
                "port": [
                    "int",
                    "Type[str]",
                    "Optional[int]",
                    "Tuple[int]",
                    "Dict[str, Any]",
                    "Union[Literal, Literal]",
                    "Tuple[Type[str]]"
                ],
                "user": [
                    "str",
                    "Optional[str]",
                    "int",
                    "Generator[str, None, None]",
                    "Optional[raiden.transfer.state.TokenNetworkState]"
                ],
                "user_hostport": [
                    "str",
                    "Dict[str, Dict[str, Any]]"
                ]
            }
        },
        "Connection.from_v1": {
            "name": "from_v1",
            "location": 152,
            "return": [
                "List[Dict[str, Any]]",
                "int",
                "Callable[..., None]",
                "str"
            ],
            "arguments": {
                "args": [],
                "cls": [
                    "str",
                    "dict"
                ],
                "env": [
                    "dict",
                    "bool"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "connect_kwargs": [
                    "str",
                    "Union[List[Any], List[str]]",
                    "Dict[str, Any]",
                    "List[Tuple[str, int]]",
                    "Dict[str, Union[Any, str]]"
                ],
                "shorthand": [
                    "int",
                    "dict",
                    "List[int]",
                    "List[List[int]]",
                    "str"
                ]
            }
        },
        "Connection.__init__": {
            "name": "__init__",
            "location": 216,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "config": [
                    "int",
                    "app.config.Config",
                    "Mapping[str, Any]",
                    "Config",
                    "Dict[str, Any]",
                    "Optional[tuple]"
                ],
                "connect_kwargs": [
                    "str",
                    "Optional[List[str]]",
                    "Optional[List[Any]]",
                    "int",
                    "Optional[str]",
                    "bool"
                ],
                "connect_timeout": [
                    "str",
                    "bool"
                ],
                "forward_agent": [
                    "Optional[str]",
                    "Optional[bool]",
                    "bool",
                    "Optional[List[str]]",
                    "Optional[List[Any]]",
                    "Optional[Dict[str, Any]]"
                ],
                "gateway": [
                    "Optional[bool]",
                    "Optional[List[str]]",
                    "bool",
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[float]"
                ],
                "host": [
                    "bool",
                    "float",
                    "Optional[str]",
                    "List[Tuple[str, str]]",
                    "str",
                    "bytes"
                ],
                "inline_ssh_env": [
                    "Optional[str]",
                    "Optional[bool]",
                    "bool",
                    "Optional[List[str]]",
                    "Optional[List[Any]]"
                ],
                "kwargs": [],
                "port": [
                    "Optional[str]",
                    "Optional[dict]",
                    "Optional[Dict[str, Any]]",
                    "str"
                ],
                "self": [],
                "user": [
                    "Dict[str, Any]",
                    "bool",
                    "Dict[str, Optional[str]]",
                    "Optional[str]",
                    "Optional[Dict[str, str]]",
                    "Dict[str, str]",
                    "str"
                ]
            },
            "variables": {
                "client": [],
                "config": [
                    "chalice.config.Config",
                    "cincoconfig.config.Config",
                    "nucypher.config.characters.BobConfiguration"
                ],
                "connect_kwargs": [
                    "int",
                    "str",
                    "Dict[str, Dict[str, Any]]",
                    "range",
                    "T",
                    "List[int]",
                    "List[List[str]]",
                    "float"
                ],
                "connect_timeout": [
                    "int",
                    "str"
                ],
                "err": [
                    "str",
                    "Dict[str, str]"
                ],
                "forward_agent": [
                    "str",
                    "Tuple[float, float]",
                    "float",
                    "int"
                ],
                "gateway": [
                    "Optional[float]"
                ],
                "host": [
                    "str",
                    "int",
                    "Dict[str, str]",
                    "Optional[str]"
                ],
                "inline_ssh_env": [
                    "str",
                    "Dict[str, str]",
                    "Counter[str]",
                    "Type[Dict[str, Any]]"
                ],
                "map_": [
                    "int",
                    "bool",
                    "float"
                ],
                "original_host": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ],
                "port": [
                    "bool",
                    "str",
                    "List[str]",
                    "Type[Tuple[str, Any]]"
                ],
                "shorthand": [
                    "int",
                    "List[str]",
                    "str",
                    "Pattern[str]",
                    "dict"
                ],
                "ssh_config": [
                    "Tuple[int, int, Literal]",
                    "str"
                ],
                "transport": [
                    "Config",
                    "\"Frame\"",
                    "str",
                    "Dict[str, Any]"
                ],
                "user": [
                    "Dict[str, None]",
                    "Dict[str, Any]",
                    "Tuple[None, Tuple[None, None]]",
                    "Optional[str]",
                    "dict"
                ]
            }
        },
        "Connection.resolve_connect_kwargs": {
            "name": "resolve_connect_kwargs",
            "location": 467,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "args": [],
                "connect_kwargs": [
                    "str"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "conf_val": [
                    "float",
                    "int",
                    "str",
                    "Set[str]"
                ],
                "connect_kwargs": [
                    "int",
                    "dict"
                ],
                "kwarg_val": [
                    "int",
                    "List[Tuple[str, Any]]",
                    "Tuple[Any, Any]",
                    "dss.config.Replica",
                    "List[str]",
                    "Dict[Any, str]",
                    "bool"
                ]
            }
        },
        "Connection.get_gateway": {
            "name": "get_gateway",
            "location": 496,
            "return": [
                "Optional[str]",
                "Optional[bool]",
                "Optional[Type[Exception]]",
                "int"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "cxn": [
                    "str",
                    "tuple",
                    "Generator[int, None, None]",
                    "Type[Optional[Any]]",
                    "int",
                    "Pattern[str]",
                    "List[str]",
                    "list"
                ],
                "hops": [
                    "dict",
                    "str",
                    "Dict[str, str]",
                    "Set[str]",
                    "Dict[str, Type[Any]]"
                ],
                "kwargs": [
                    "Dict[str, Any]",
                    "dict",
                    "ennead.config.Config",
                    "str",
                    "Dict[str, str]"
                ],
                "prev_gw": [
                    "str",
                    "Optional[str]",
                    "int",
                    "threading.local",
                    "List[int]",
                    "List[None]",
                    "Dict[str, Any]"
                ]
            }
        },
        "Connection.__repr__": {
            "name": "__repr__",
            "location": 526,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "bits": [
                    "str",
                    "dict",
                    "list",
                    "List[str]",
                    "tuple"
                ],
                "val": [
                    "list",
                    "Generator[Any, None, None]",
                    "List[Tuple[int, int]]",
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "Connection._identity": {
            "name": "_identity",
            "location": 551,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Connection.__eq__": {
            "name": "__eq__",
            "location": 557,
            "return": [
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "other": [
                    "str",
                    "int"
                ],
                "self": []
            },
            "variables": {}
        },
        "Connection.__lt__": {
            "name": "__lt__",
            "location": 562,
            "return": [
                "bool",
                "mypy.nodes.Context",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "Tuple[float, float]",
                    "Type"
                ],
                "self": []
            },
            "variables": {}
        },
        "Connection.__hash__": {
            "name": "__hash__",
            "location": 565,
            "return": [
                "int",
                "Tuple[int, int]",
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Connection.derive_shorthand": {
            "name": "derive_shorthand",
            "location": 570,
            "return": [
                "str"
            ],
            "arguments": {
                "args": [],
                "host_string": [
                    "str"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Connection.is_connected": {
            "name": "is_connected",
            "location": 577,
            "return": [
                "Dict[str, int]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Connection.open": {
            "name": "open",
            "location": 585,
            "return": [
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "Union[tuple, list]",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "err": [
                    "str",
                    "List[str]"
                ],
                "kwargs": [
                    "int",
                    "Pattern[str]",
                    "dict",
                    "range",
                    "str",
                    "io.StringIO",
                    "Final"
                ],
                "transport": [
                    "str",
                    "int",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "Connection.open_gateway": {
            "name": "open_gateway",
            "location": 637,
            "return": [
                "int",
                "Tuple[bytes]",
                "Dict[str, Any]",
                "Tuple[int, int]",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "dummy": [],
                "ssh_conf": [
                    "str"
                ]
            }
        },
        "Connection.close": {
            "name": "close",
            "location": 677,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Connection.__enter__": {
            "name": "__enter__",
            "location": 690,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Connection.__exit__": {
            "name": "__exit__",
            "location": 693,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "exc": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Connection.create_session": {
            "name": "create_session",
            "location": 697,
            "return": [
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_agent_handler": [
                    "bool",
                    "Callable",
                    "Dict[str, Union[Any, Any, Any]]"
                ],
                "channel": [
                    "bytes",
                    "Dict[str, Dict[str, Any]]",
                    "dict",
                    "Tuple[Literal, Literal, Literal]",
                    "int",
                    "list"
                ]
            }
        },
        "Connection._remote_runner": {
            "name": "_remote_runner",
            "location": 703,
            "return": [
                "Dict[str, Any]",
                "Optional[str]",
                "revlibs.connections.config.Config",
                "qutebrowser.config.config.Config",
                "bool",
                "int"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Connection.run": {
            "name": "run",
            "location": 707,
            "return": [
                "bool",
                "Awaitable",
                "Optional[int]"
            ],
            "arguments": {
                "args": [],
                "command": [
                    "str",
                    "yacron.config.JobConfig",
                    "Tuple[str, str]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Connection.sudo": {
            "name": "sudo",
            "location": 724,
            "return": [],
            "arguments": {
                "args": [],
                "command": [
                    "Optional[str]",
                    "str",
                    "bytes"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Connection.local": {
            "name": "local",
            "location": 737,
            "return": [
                "str",
                "mypy.nodes.Context",
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Connection.sftp": {
            "name": "sftp",
            "location": 751,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_sftp": [
                    "int",
                    "str"
                ]
            }
        },
        "Connection.get": {
            "name": "get",
            "location": 766,
            "return": [
                "str",
                "bool",
                "tuple"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Connection.put": {
            "name": "put",
            "location": 777,
            "return": [
                "str",
                "bool",
                "Optional[Any]",
                "List[str]",
                "Callable[[KT], VT]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Connection.forward_local": {
            "name": "forward_local",
            "location": 793,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "local_host": [],
                "local_port": [
                    "int",
                    "bool",
                    "dict"
                ],
                "remote_host": [],
                "remote_port": [
                    "int",
                    "bool",
                    "dict"
                ],
                "self": []
            },
            "variables": {
                "finished": [
                    "int",
                    "List[int]",
                    "List[str]",
                    "List[Optional[str]]",
                    "str"
                ],
                "manager": [],
                "remote_port": [
                    "str",
                    "int"
                ],
                "wrapper": [
                    "dict",
                    "float",
                    "int",
                    "Tuple[str, str, str, str, str]"
                ]
            }
        },
        "Connection.callback": {
            "name": "callback",
            "location": 962,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "channel": [
                    "str",
                    "Type[T]",
                    "list"
                ],
                "dst_addr_tup": [
                    "bool",
                    "list",
                    "List[int]",
                    "str"
                ],
                "kwargs": [],
                "self": [],
                "src_addr_tup": [
                    "bool",
                    "list",
                    "List[int]",
                    "str"
                ]
            },
            "variables": {
                "sock": [
                    "baseplate.lib.config.EndpointConfiguration"
                ],
                "tunnel": [
                    "List[int]",
                    "int",
                    "float"
                ]
            }
        },
        "Connection.forward_remote": {
            "name": "forward_remote",
            "location": 892,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "local_host": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "local_port": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "remote_host": [
                    "int",
                    "str",
                    "Optional[str]",
                    "baseplate.lib.config.EndpointConfiguration"
                ],
                "remote_port": [
                    "int",
                    "str",
                    "Optional[str]",
                    "baseplate.lib.config.EndpointConfiguration"
                ],
                "self": []
            },
            "variables": {
                "local_port": [
                    "str",
                    "List[str]",
                    "int",
                    "Dict[str, List[Any]]",
                    "Tuple[str, str, str, str, str, str, str, str]"
                ],
                "tunnels": [
                    "str",
                    "List[str]",
                    "int",
                    "Dict[str, List[Any]]",
                    "Tuple[str, str, str, str, str, str, str, str]"
                ]
            }
        },
        "global": {}
    },
    "fabric-2.5.0/fabric/exceptions.py": {
        "GroupException.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "result": [
                    "Counter",
                    "int",
                    "Dict[str, Any]",
                    "bool",
                    "str",
                    "Tuple[int, int]",
                    "list"
                ],
                "self": []
            },
            "variables": {
                "result": [
                    "dict",
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "global": {}
    },
    "fabric-2.5.0/fabric/executor.py": {
        "Executor.normalize_hosts": {
            "name": "normalize_hosts",
            "location": 24,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "hosts": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "dicts": [
                    "list",
                    "Tuple[None, Any]",
                    "List[str]"
                ],
                "value": [
                    "list",
                    "tuple",
                    "Dict[str, Set[int]]",
                    "dict"
                ]
            }
        },
        "Executor.anonymous": {
            "name": "anonymous",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "c": [
                    "List[str]",
                    "Dict[str, Any]",
                    "Union[int, float]",
                    "tuple",
                    "bool",
                    "int"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Executor.expand_calls": {
            "name": "expand_calls",
            "location": 50,
            "return": [
                "bool",
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "List[str]"
            ],
            "arguments": {
                "apply_hosts": [
                    "tests.hints.Function.Call",
                    "Callable",
                    "Exception"
                ],
                "args": [],
                "calls": [
                    "tests.hints.Function.Call",
                    "Callable",
                    "Exception"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "anon": [
                    "Dict[str, Any]",
                    "int",
                    "Dict[Any, list]",
                    "list",
                    "Set[Tuple[Any, Any]]",
                    "float",
                    "dict"
                ],
                "call": [
                    "list",
                    "float",
                    "List[int]",
                    "dict"
                ],
                "call_hosts": [
                    "list",
                    "float",
                    "List[int]",
                    "dict"
                ],
                "cli_hosts": [
                    "int",
                    "str",
                    "float",
                    "List[str]",
                    "Dict[str, str]"
                ],
                "cxn_params": [
                    "str",
                    "List[str]",
                    "int",
                    "Dict[str, List[Any]]",
                    "Tuple[str, str, str, str, str, str, str, str]"
                ],
                "host_str": [
                    "str",
                    "Type[Optional[str]]",
                    "property"
                ],
                "ret": [
                    "Dict[str, Any]",
                    "Dict[int, Any]",
                    "Tuple[Tuple[str, Any]]",
                    "Dict[str, None]",
                    "dict",
                    "str",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "Executor.parameterize": {
            "name": "parameterize",
            "location": 101,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "call": [
                    "Dict[str, Any]",
                    "ClassVar",
                    "Dict[str, Iterable[Any]]",
                    "Mapping[Tuple[str, str], Any]",
                    "Mapping[str, T]",
                    "int"
                ],
                "connection_init_kwargs": [
                    "dict",
                    "Exception"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "clone": [
                    "list",
                    "List[Dict[str, Any]]",
                    "List[int]",
                    "List[List[int]]",
                    "Dict[int, int]",
                    "int"
                ],
                "msg": [
                    "str",
                    "List[str]",
                    "property",
                    "Dict[str, str]"
                ],
                "new_call_kwargs": [
                    "str",
                    "dict",
                    "Dict[str, Union[Any, Any, Any, Any]]",
                    "Optional[str]",
                    "OrderedDict[str, Any]",
                    "Dict[str, List[Any]]"
                ]
            }
        },
        "Executor.dedupe": {
            "name": "dedupe",
            "location": 122,
            "return": [
                "str",
                "golem_messages.message.tasks.WantToComputeTask",
                "List[str]",
                "bytes"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "tasks": [
                    "List[str]",
                    "str",
                    "Task",
                    "List[type.Task]",
                    "pc.data.Task",
                    "taskiapplication.models.task.Task",
                    "Dict[str, Any]"
                ]
            },
            "variables": {}
        },
        "global": {}
    },
    "fabric-2.5.0/fabric/group.py": {
        "thread_worker": {
            "name": "thread_worker",
            "location": 187,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "cxn": [
                    "str",
                    "list",
                    "Union[List, str]",
                    "Type"
                ],
                "kwargs": [],
                "queue": [
                    "multiprocessing.Queue",
                    "str"
                ]
            },
            "variables": {
                "result": [
                    "int",
                    "dict",
                    "Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]",
                    "bool",
                    "Union[MutableMapping[str, Any], MutableSequence[Any], bool, float, int, str]",
                    "str"
                ]
            }
        },
        "Group.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "hosts": [
                    "str",
                    "int"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Group.from_connections": {
            "name": "from_connections",
            "location": 90,
            "return": [
                "str",
                "Callable",
                "Callable[[None, None], bool]"
            ],
            "arguments": {
                "args": [],
                "cls": [
                    "str",
                    "Callable"
                ],
                "connections": [
                    "list",
                    "bool",
                    "bytes",
                    "Dict[str, Any]",
                    "str"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "group": [
                    "str",
                    "dict",
                    "Type[Callable[Any, str]]",
                    "list"
                ]
            }
        },
        "Group.run": {
            "name": "run",
            "location": 102,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Group.get": {
            "name": "get",
            "location": 138,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Group.close": {
            "name": "close",
            "location": 150,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Group.__enter__": {
            "name": "__enter__",
            "location": 159,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Group.__exit__": {
            "name": "__exit__",
            "location": 162,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "exc": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "SerialGroup.run": {
            "name": "run",
            "location": 173,
            "return": [
                "str",
                "int",
                "Set[str]",
                "Mapping[str, int]",
                "bool",
                "\"Parameter\""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "excepted": [
                    "int",
                    "list",
                    "bool",
                    "Set[str]"
                ],
                "results": [
                    "Tuple[Any, Any]",
                    "tuple",
                    "bool",
                    "dict",
                    "Tuple[Literal, Literal, Literal]",
                    "List[Dict[str, str]]",
                    "List[str]"
                ]
            }
        },
        "ThreadingGroup.run": {
            "name": "run",
            "location": 200,
            "return": [
                "str",
                "int",
                "Set[str]",
                "Mapping[str, int]",
                "bool",
                "\"Parameter\""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "cxn": [
                    "dict",
                    "Dict[str, str]",
                    "str",
                    "List[Tuple[Any, Any]]",
                    "list"
                ],
                "excepted": [
                    "int",
                    "list",
                    "bool",
                    "Set[str]"
                ],
                "my_kwargs": [
                    "dict",
                    "Dict[KT, VT]",
                    "Dict[str, Any]",
                    "Dict[str, int]"
                ],
                "queue": [
                    "int",
                    "str",
                    "dict",
                    "List[int]",
                    "Dict[str, str]",
                    "Tuple[int]"
                ],
                "result": [
                    "dict",
                    "OrderedDict"
                ],
                "results": [
                    "dict",
                    "OrderedDict",
                    "list",
                    "Dict[str, int]"
                ],
                "thread": [
                    "List[int]",
                    "str"
                ],
                "threads": [
                    "list",
                    "Generator[Any, None, None]",
                    "List[Tuple[int, int]]",
                    "str",
                    "float",
                    "int"
                ],
                "wrapper": [
                    "Tuple[Type[tuple], Type[list]]",
                    "list",
                    "dict"
                ]
            }
        },
        "GroupResult.__init__": {
            "name": "__init__",
            "location": 265,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_failures": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ],
                "_successes": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ]
            }
        },
        "GroupResult._bifurcate": {
            "name": "_bifurcate",
            "location": 270,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "GroupResult.succeeded": {
            "name": "succeeded",
            "location": 283,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "GroupResult.failed": {
            "name": "failed",
            "location": 293,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "global": {}
    },
    "fabric-2.5.0/fabric/main.py": {
        "make_program": {
            "name": "make_program",
            "location": 150,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": []
            },
            "variables": {}
        },
        "Fab.print_version": {
            "name": "print_version",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Fab.core_args": {
            "name": "core_args",
            "location": 23,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "core_args": [
                    "list",
                    "Generator[Any, None, None]",
                    "Dict[str, Literal[True]]",
                    "List[str]",
                    "dict"
                ],
                "my_args": [
                    "List[str]",
                    "List[Tuple[str, Any]]",
                    "str",
                    "Dict[str, Any]",
                    "OrderedDict[str, str]",
                    "Dict[str, str]"
                ]
            }
        },
        "Fab._remainder_only": {
            "name": "_remainder_only",
            "location": 61,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Fab.load_collection": {
            "name": "load_collection",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "collection": [
                    "str",
                    "Dict[str, Any]",
                    "pyquil.Program",
                    "dict",
                    "int"
                ]
            }
        },
        "Fab.no_tasks_given": {
            "name": "no_tasks_given",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Fab.create_config": {
            "name": "create_config",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "config": [
                    "Dict[str, Dict[str, Any]]",
                    "dict"
                ]
            }
        },
        "Fab.update_config": {
            "name": "update_config",
            "location": 111,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "connect_kwargs": [
                    "Dict[str, Union[Any, Any, Any, Any]]",
                    "Dict[int, int]",
                    "Set[str]",
                    "str",
                    "Type[Dict[str, Any]]",
                    "List[Tuple[int, str]]"
                ],
                "path": [
                    "list",
                    "int",
                    "dict",
                    "List[str]"
                ],
                "prompt": [
                    "float",
                    "int",
                    "str"
                ],
                "timeout": [
                    "int",
                    "float"
                ]
            }
        },
        "global": {
            "program": [
                "str",
                "List[str]",
                "int",
                "Dict[str, List[Any]]",
                "Tuple[str, str, str, str, str, str, str, str]"
            ]
        }
    },
    "fabric-2.5.0/fabric/runners.py": {
        "Remote.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "inline_env": [
                    "List[Mapping[str, Any]]",
                    "Set[str]",
                    "list",
                    "dict",
                    "MutableMapping[Any, Any]",
                    "Dict[str, Tuple[Any, Any]]"
                ]
            }
        },
        "Remote.start": {
            "name": "start",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "command": [
                    "Optional[str]",
                    "bool",
                    "str"
                ],
                "env": [
                    "str",
                    "Dict[str, Set[str]]",
                    "Dict[str, Any]",
                    "bool",
                    "List[str]"
                ],
                "kwargs": [],
                "self": [],
                "shell": [
                    "bool",
                    "Optional[Mapping[str, Any]]",
                    "Optional[Iterable[Any]]",
                    "Type[Any]",
                    "Tuple[str]"
                ],
                "timeout": [
                    "bool",
                    "Optional[Mapping[str, Any]]",
                    "Optional[Iterable[Any]]",
                    "Type[Any]",
                    "Tuple[str]"
                ]
            },
            "variables": {
                "channel": [
                    "int",
                    "Pattern[str]"
                ],
                "cols": [
                    "int",
                    "bytearray"
                ],
                "command": [
                    "str",
                    "List[str]",
                    "Dict[str, str]",
                    "Optional[str]"
                ],
                "parameters": [
                    "dict",
                    "str",
                    "Dict[str, Union[Any, Any]]",
                    "Pattern[bytes]",
                    "Dict[str, str]",
                    "List[str]"
                ],
                "rows": [
                    "int"
                ]
            }
        },
        "Remote.read_proc_stdout": {
            "name": "read_proc_stdout",
            "location": 60,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "num_bytes": [
                    "int",
                    "float",
                    "list"
                ],
                "self": []
            },
            "variables": {}
        },
        "Remote.read_proc_stderr": {
            "name": "read_proc_stderr",
            "location": 63,
            "return": [
                "str",
                "int",
                "Callable",
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "num_bytes": [
                    "int",
                    "Optional[int]"
                ],
                "self": []
            },
            "variables": {}
        },
        "Remote._write_proc_stdin": {
            "name": "_write_proc_stdin",
            "location": 66,
            "return": [
                "float",
                "bool",
                "Optional[bool]",
                "str",
                "Optional[bytes]"
            ],
            "arguments": {
                "args": [],
                "data": [
                    "dict",
                    "str",
                    "bytes"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Remote.close_proc_stdin": {
            "name": "close_proc_stdin",
            "location": 69,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Remote.process_is_finished": {
            "name": "process_is_finished",
            "location": 73,
            "return": [
                "str",
                "Iterable[int]",
                "int"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Remote.send_interrupt": {
            "name": "send_interrupt",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "interrupt": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Remote.returncode": {
            "name": "returncode",
            "location": 92,
            "return": [
                "Optional[str]",
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Remote.generate_result": {
            "name": "generate_result",
            "location": 95,
            "return": [
                "bool",
                "int",
                "str",
                "Optional[Any]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Remote.stop": {
            "name": "stop",
            "location": 99,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Remote.kill": {
            "name": "kill",
            "location": 103,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Result.__init__": {
            "name": "__init__",
            "location": 142,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "connection": [
                    "Dict[str, str]",
                    "frozenset[str]",
                    "Type[\"ExtractableWordnet\"]",
                    "str",
                    "Dict[str, Any]",
                    "Dict[str, Union[Any, Any, Any, Any]]"
                ]
            }
        },
        "global": {}
    },
    "fabric-2.5.0/fabric/tasks.py": {
        "task": {
            "name": "task",
            "location": 24,
            "return": [
                "bool",
                "dict"
            ],
            "arguments": {
                "args": [],
                "kwargs": []
            },
            "variables": {}
        },
        "Task.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "hosts": [
                    "str",
                    "list",
                    "bool",
                    "Dict[str, Union[Any, Any, Any]]",
                    "tuple",
                    "List[str]"
                ]
            }
        },
        "ConnectionCall.__init__": {
            "name": "__init__",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "init_kwargs": [
                    "int",
                    "Pattern[str]",
                    "Dict[str, Any]",
                    "Callable[[], Any]",
                    "Dict[str, Union[dict, Any, Any, Any, Any, Any, Any]]",
                    "List[str]"
                ]
            }
        },
        "ConnectionCall.clone_kwargs": {
            "name": "clone_kwargs",
            "location": 94,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Set[str]]",
                "Optional[Union[str, Any, Any, Any]]",
                "Dict[str, str]",
                "dict"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "kwargs": [
                    "str",
                    "Dict[str, str]",
                    "Dict[str, int]",
                    "Dict[str, Union[int, str]]",
                    "Dict[str, float]",
                    "List[int]",
                    "Set[str]"
                ]
            }
        },
        "ConnectionCall.make_context": {
            "name": "make_context",
            "location": 104,
            "return": [
                "str",
                "bool",
                "Dict[str, int]",
                "float"
            ],
            "arguments": {
                "args": [],
                "config": [
                    "dbcontracts.connection.AdapterRequiredConfig",
                    "Dict[str, Any]",
                    "Mapping[str, Any]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "kwargs": [
                    "Dict[str, bool]",
                    "Dict[Any, str]",
                    "Dict[str, Union[bool, str]]",
                    "Dict[str, Literal]",
                    "Dict[str, Tuple[str, str]]",
                    "Dict[str, Any]",
                    "ChainMap[Any, Any]"
                ]
            }
        },
        "ConnectionCall.__repr__": {
            "name": "__repr__",
            "location": 112,
            "return": [
                "bool",
                "List[str]",
                "Set[str]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "ret": [
                    "str"
                ]
            }
        },
        "global": {}
    },
    "fabric-2.5.0/fabric/transfer.py": {
        "Transfer.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "connection": [
                    "int",
                    "bool",
                    "float"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "connection": [
                    "str",
                    "int",
                    "Optional[float]",
                    "bool"
                ]
            }
        },
        "Transfer.sftp": {
            "name": "sftp",
            "location": 32,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Transfer.is_remote_dir": {
            "name": "is_remote_dir",
            "location": 35,
            "return": [
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "path": [
                    "str"
                ],
                "self": []
            },
            "variables": {}
        },
        "Transfer.get": {
            "name": "get",
            "location": 41,
            "return": [
                "str",
                "bool",
                "dict",
                "set",
                "List[str]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "local": [
                    "str",
                    "int"
                ],
                "preserve_mode": [
                    "bool",
                    "int",
                    "str",
                    "Optional[List[str]]"
                ],
                "remote": [
                    "str",
                    "float",
                    "List[str]",
                    "bytes",
                    "bool",
                    "int"
                ],
                "self": []
            },
            "variables": {
                "is_file_like": [
                    "List[List[str]]",
                    "str",
                    "List[str]",
                    "List[Tuple[str, str, str]]",
                    "Final[str]",
                    "bool",
                    "list",
                    "Set[str]"
                ],
                "local": [
                    "Dict[str, List[Any]]",
                    "list",
                    "Optional[str]",
                    "Set[str]",
                    "str",
                    "deque[str]"
                ],
                "mode": [
                    "str",
                    "bool",
                    "int",
                    "float"
                ],
                "orig_local": [
                    "str",
                    "list",
                    "bytes"
                ],
                "orig_remote": [
                    "str",
                    "list",
                    "bytes"
                ],
                "remote": [
                    "str",
                    "dict",
                    "int",
                    "Dict[str, List[Any]]"
                ],
                "remote_mode": [
                    "str"
                ]
            }
        },
        "Transfer.put": {
            "name": "put",
            "location": 147,
            "return": [
                "bool",
                "List[object]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "local": [
                    "bool",
                    "str",
                    "List[str]",
                    "List[Dict[str, Any]]"
                ],
                "preserve_mode": [
                    "float",
                    "bool",
                    "Dict[str, Dict[str, Any]]",
                    "int",
                    "static_frame.core.util.DtypesSpecifier"
                ],
                "remote": [
                    "str",
                    "int",
                    "bytes",
                    "float"
                ],
                "self": []
            },
            "variables": {
                "is_file_like": [
                    "List[List[str]]",
                    "str",
                    "List[str]",
                    "List[Tuple[str, str, str]]",
                    "Final[str]",
                    "bool",
                    "list",
                    "Set[str]"
                ],
                "local": [
                    "str",
                    "dict",
                    "Dict[str, str]"
                ],
                "local_base": [
                    "str"
                ],
                "local_mode": [
                    "int",
                    "str",
                    "Dict[str, str]"
                ],
                "mode": [
                    "str",
                    "int",
                    "float",
                    "List[bytes]"
                ],
                "msg": [
                    "str"
                ],
                "orig_local": [
                    "Collection[int]",
                    "tuple",
                    "dict",
                    "List[str]",
                    "float"
                ],
                "orig_remote": [
                    "str",
                    "list",
                    "bytes"
                ],
                "pointer": [
                    "int",
                    "dict",
                    "List[int]",
                    "List[List[int]]",
                    "str"
                ],
                "prejoined_remote": [
                    "str",
                    "list"
                ],
                "remote": [
                    "Dict[str, Any]",
                    "str",
                    "IO[bytes]"
                ]
            }
        },
        "Result.__init__": {
            "name": "__init__",
            "location": 304,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "connection": [
                    "int",
                    "bool",
                    "float"
                ],
                "kwargs": [],
                "local": [
                    "int",
                    "bool",
                    "float"
                ],
                "orig_local": [
                    "int",
                    "bool",
                    "float"
                ],
                "orig_remote": [
                    "int",
                    "bool",
                    "float"
                ],
                "remote": [
                    "int",
                    "bool",
                    "float"
                ],
                "self": []
            },
            "variables": {
                "connection": [
                    "str",
                    "int",
                    "Optional[float]",
                    "bool"
                ],
                "local": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ],
                "orig_local": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ],
                "orig_remote": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ],
                "remote": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ]
            }
        },
        "global": {}
    },
    "fabric-2.5.0/fabric/tunnels.py": {
        "TunnelManager.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "finished": [
                    "int",
                    "bool",
                    "float"
                ],
                "kwargs": [],
                "local_host": [
                    "bool",
                    "str",
                    "int",
                    "List[str]"
                ],
                "local_port": [
                    "bool",
                    "str",
                    "int",
                    "List[str]"
                ],
                "remote_host": [
                    "bool",
                    "str",
                    "int",
                    "List[str]"
                ],
                "remote_port": [
                    "bool",
                    "str",
                    "int",
                    "List[str]"
                ],
                "self": [],
                "transport": [
                    "int",
                    "bool",
                    "float"
                ]
            },
            "variables": {
                "finished": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ],
                "local_address": [
                    "int",
                    "str",
                    "bool",
                    "dict",
                    "Dict[str, Any]"
                ],
                "remote_address": [
                    "int",
                    "str",
                    "bool",
                    "dict",
                    "Dict[str, Any]"
                ],
                "transport": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ]
            }
        },
        "TunnelManager._run": {
            "name": "_run",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "channel": [
                    "str",
                    "List[str]",
                    "dict",
                    "Dict[str, Literal]",
                    "Dict[Any, str]"
                ],
                "exceptions": [
                    "list",
                    "dict",
                    "List[dict]"
                ],
                "finished": [
                    "Set[str]",
                    "set",
                    "int",
                    "Type[Tuple[int, int]]",
                    "Dict[str, Optional[str]]"
                ],
                "local_addr": [
                    "int"
                ],
                "sock": [],
                "tun_sock": [],
                "tunnel": [],
                "tunnels": [
                    "list",
                    "Generator[Any, None, None]",
                    "List[Tuple[int, int]]",
                    "str",
                    "float",
                    "int"
                ],
                "wrapper": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "Tunnel.__init__": {
            "name": "__init__",
            "location": 119,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "channel": [
                    "float",
                    "bool",
                    "int"
                ],
                "finished": [
                    "float",
                    "bool",
                    "int"
                ],
                "kwargs": [],
                "self": [],
                "sock": [
                    "float",
                    "bool",
                    "int"
                ]
            },
            "variables": {
                "channel": [
                    "str",
                    "int",
                    "dict",
                    "\"Point\""
                ],
                "channel_chunk_size": [
                    "int",
                    "str",
                    "list",
                    "util.IDM",
                    "float"
                ],
                "finished": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ],
                "sock": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ],
                "socket_chunk_size": [
                    "int"
                ]
            }
        },
        "Tunnel._run": {
            "name": "_run",
            "location": 127,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "empty_chan": [
                    "int",
                    "str",
                    "float",
                    "Tuple[Any, Any, Any, Any, Any, Any, Any]"
                ],
                "empty_sock": [
                    "int",
                    "list",
                    "float"
                ],
                "r": [
                    "float",
                    "int"
                ],
                "w": [
                    "str",
                    "dict",
                    "List[str]",
                    "int",
                    "Pattern[str]",
                    "float",
                    "Dict[str, Any]"
                ],
                "x": [
                    "int",
                    "float",
                    "List[List[int]]",
                    "bytes"
                ]
            }
        },
        "Tunnel.read_and_write": {
            "name": "read_and_write",
            "location": 146,
            "return": [
                "bool"
            ],
            "arguments": {
                "args": [],
                "chunk_size": [
                    "Optional[str]",
                    "int",
                    "float",
                    "str"
                ],
                "kwargs": [],
                "reader": [
                    "Optional[str]",
                    "int",
                    "float",
                    "str"
                ],
                "self": [],
                "writer": [
                    "bool",
                    "int",
                    "List[Dict]",
                    "str",
                    "dict"
                ]
            },
            "variables": {
                "data": [
                    "int",
                    "bytes",
                    "List[int]",
                    "str",
                    "List[str]"
                ]
            }
        },
        "global": {}
    },
    "fabric-2.5.0/fabric/util.py": {
        "get_local_user": {
            "name": "get_local_user",
            "location": 16,
            "return": [
                "str",
                "list",
                "List[str]"
            ],
            "arguments": {
                "args": [],
                "kwargs": []
            },
            "variables": {
                "username": [
                    "dict"
                ]
            }
        },
        "global": {
            "log": [
                "int",
                "float",
                "Optional[str]",
                "logging.Logger",
                "Tuple[Tuple[Any, Literal], Tuple[Any, Literal]]",
                "str",
                "logging.Formatter"
            ],
            "win32": [
                "bool",
                "float",
                "int",
                "List[str]"
            ]
        }
    },
    "fabric-2.5.0/fabric/_version.py": {
        "global": {
            "__version__": [
                "str",
                "int"
            ],
            "__version_info__": [
                "Tuple[int, int, int, int, int, int, int, int, int, int]",
                "Tuple[int, int, int, int, int, int, int, int, int]",
                "Tuple[str, str]",
                "Tuple[Literal, List[Any]]",
                "Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]",
                "Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]"
            ]
        }
    },
    "fabric-2.5.0/fabric/testing/base.py": {
        "Command.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "cmd": [
                    "int",
                    "float",
                    "bool",
                    "List[int]"
                ],
                "err": [
                    "int",
                    "float",
                    "bool",
                    "List[int]"
                ],
                "exit": [
                    "int",
                    "float",
                    "bool",
                    "List[int]"
                ],
                "in_": [
                    "float"
                ],
                "kwargs": [],
                "out": [
                    "float"
                ],
                "self": [],
                "waits": [
                    "int",
                    "float",
                    "bool",
                    "List[int]"
                ]
            },
            "variables": {
                "cmd": [
                    "int",
                    "bool",
                    "float"
                ],
                "err": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ],
                "exit": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ],
                "in_": [
                    "int",
                    "float",
                    "List[Tuple[float, float]]"
                ],
                "out": [
                    "float",
                    "property",
                    "Dict[str, int]",
                    "List[int]",
                    "List[str]",
                    "List[float]"
                ],
                "waits": [
                    "bytes",
                    "str",
                    "int"
                ]
            }
        },
        "Command.__repr__": {
            "name": "__repr__",
            "location": 65,
            "return": [
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "MockChannel.__init__": {
            "name": "__init__",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "MockChannel._get_child_mock": {
            "name": "_get_child_mock",
            "location": 90,
            "return": [
                "List[str]",
                "tests.async_mock.Mock"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "MockChannel.recv": {
            "name": "recv",
            "location": 94,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "count": [
                    "str",
                    "List[Tuple[int, int]]",
                    "bool"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "MockChannel.recv_stderr": {
            "name": "recv_stderr",
            "location": 97,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "count": [
                    "str",
                    "List[Tuple[int, int]]",
                    "bool"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "MockChannel.sendall": {
            "name": "sendall",
            "location": 100,
            "return": [
                "bool"
            ],
            "arguments": {
                "args": [],
                "data": [
                    "bytes",
                    "str",
                    "Union[str, bytes]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Session.__init__": {
            "name": "__init__",
            "location": 136,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "cmd": [
                    "Optional[str]",
                    "Optional[float]",
                    "Optional[int]",
                    "bool"
                ],
                "commands": [
                    "str",
                    "Dict[str, str]",
                    "int"
                ],
                "err": [
                    "Optional[str]",
                    "Optional[bool]",
                    "int",
                    "bool",
                    "str",
                    "Optional[int]"
                ],
                "exit": [
                    "Optional[str]",
                    "Optional[bool]",
                    "int",
                    "bool",
                    "str",
                    "Optional[int]"
                ],
                "host": [
                    "bool",
                    "int",
                    "Iterable['adi.Instance']",
                    "Exception"
                ],
                "in_": [
                    "Optional[bool]",
                    "bool",
                    "Optional[float]",
                    "Optional[List[str]]"
                ],
                "kwargs": [],
                "out": [
                    "Optional[str]",
                    "Optional[int]",
                    "str",
                    "Optional[List[str]]",
                    "Dict[str, Any]",
                    "Optional[float]"
                ],
                "port": [
                    "bool",
                    "int",
                    "Iterable['adi.Instance']",
                    "Exception"
                ],
                "self": [],
                "user": [
                    "bool",
                    "int",
                    "Iterable['adi.Instance']",
                    "Exception"
                ],
                "waits": [
                    "Optional[str]",
                    "Optional[float]",
                    "Optional[int]",
                    "Optional[List[str]]"
                ]
            },
            "variables": {
                "commands": [
                    "int",
                    "List[str]",
                    "str",
                    "Final",
                    "Match[Any]",
                    "DefaultDict[Any, int]",
                    "dict"
                ],
                "host": [
                    "str",
                    "int"
                ],
                "kwargs": [
                    "dict",
                    "list"
                ],
                "params": [
                    "str",
                    "List[int]",
                    "List[str]",
                    "Union[Literal, str]",
                    "list"
                ],
                "port": [
                    "Dict[str, Dict[int, str]]",
                    "float",
                    "Dict[str, Any]",
                    "Dict[int, int]",
                    "dict",
                    "str",
                    "Dict[str, int]"
                ],
                "user": [
                    "str",
                    "int",
                    "Tuple[int, str]",
                    "DefaultDict[Any, List[Any]]",
                    "Set[str]"
                ]
            }
        },
        "Session.generate_mocks": {
            "name": "generate_mocks",
            "location": 181,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "actives": [
                    "Dict[str, str]",
                    "int"
                ],
                "channel": [
                    "str",
                    "Dict[str, Union[int, str]]",
                    "Generator[str, None, None]"
                ],
                "channels": [
                    "str"
                ],
                "client": [
                    "unittesmock.Mock"
                ],
                "readies": [
                    "str",
                    "List[str]",
                    "Pattern[str]",
                    "Dict[str, Any]"
                ],
                "transport": [
                    "int"
                ]
            }
        },
        "Session.sanity_check": {
            "name": "sanity_check",
            "location": 238,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "calls": [
                    "list",
                    "str",
                    "Dict[str, Any]",
                    "List[str]"
                ],
                "session_opens": [
                    "list",
                    "List[str]",
                    "Sequence[str]"
                ],
                "transport": [
                    "Dict[str, Dict[str, Any]]",
                    "unittesmock.Mock",
                    "property",
                    "mock.MagicMock",
                    "str"
                ]
            }
        },
        "MockRemote.__init__": {
            "name": "__init__",
            "location": 284,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "MockRemote.expect": {
            "name": "expect",
            "location": 289,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "MockRemote.expect_sessions": {
            "name": "expect_sessions",
            "location": 299,
            "return": [
                "bool",
                "bytes",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "sessions": [
                    "Dict[str, Any]",
                    "bool",
                    "str"
                ]
            },
            "variables": {
                "sessions": [
                    "Optional[str]"
                ]
            }
        },
        "MockRemote.start": {
            "name": "start",
            "location": 315,
            "return": [
                "List[str]",
                "List[Dict]",
                "str",
                "Union[str, List[Any]]",
                "List[List[Any]]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "SSHClient": [
                    "str"
                ],
                "clients": [
                    "str"
                ],
                "patcher": [
                    "str",
                    "io.TextIOWrapper",
                    "List[Tuple[int, int]]",
                    "int"
                ],
                "side_effect": [
                    "List[str]"
                ]
            }
        },
        "MockRemote.stop": {
            "name": "stop",
            "location": 336,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "MockRemote.sanity": {
            "name": "sanity",
            "location": 348,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "MockSFTP.__init__": {
            "name": "__init__",
            "location": 371,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "autostart": [
                    "int",
                    "Dict[str, Any]",
                    "Union[str, int]",
                    "bool"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "MockSFTP.fake_abspath": {
            "name": "fake_abspath",
            "location": 384,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "path": [
                    "str"
                ],
                "self": []
            },
            "variables": {}
        },
        "MockSFTP.start": {
            "name": "start",
            "location": 375,
            "return": [
                "Dict[str, Sequence[str]]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "Client": [
                    "Dict[str, str]",
                    "str",
                    "bool"
                ],
                "client_patcher": [
                    "Dict[str, str]",
                    "str",
                    "bool"
                ],
                "fake_mode": [
                    "str",
                    "int",
                    "list"
                ],
                "mock_os": [
                    "list",
                    "Dict[str, List[Any]]",
                    "List[str]",
                    "List[Dict[str, Any]]",
                    "int"
                ],
                "os_patcher": [
                    "str",
                    "List[str]",
                    "int",
                    "Dict[str, List[Any]]",
                    "Tuple[str, str, str, str, str, str, str, str]"
                ],
                "sftp": [
                    "Tuple[Literal, Literal, int]",
                    "int",
                    "List[Dict[str, Any]]",
                    "Dict[str, Union[float, str]]"
                ]
            }
        },
        "MockSFTP.stop": {
            "name": "stop",
            "location": 400,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "global": {
            "warning": [
                "str",
                "bool",
                "int"
            ]
        }
    },
    "fabric-2.5.0/fabric/testing/fixtures.py": {
        "connection": {
            "name": "connection",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": []
            },
            "variables": {
                "c": [
                    "List[Tuple[Any, Any, Any]]",
                    "pymysql.connections.Connection"
                ],
                "local": [
                    "int",
                    "dict",
                    "List[int]",
                    "List[List[int]]",
                    "str"
                ],
                "run": [
                    "Dict[str, float]",
                    "int",
                    "List[int]",
                    "str",
                    "List[List[float]]"
                ]
            }
        },
        "remote": {
            "name": "remote",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": []
            },
            "variables": {
                "remote": [
                    "int",
                    "str",
                    "unittesmock.Mock"
                ]
            }
        },
        "sftp": {
            "name": "sftp",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": []
            },
            "variables": {
                "client": [
                    "mock.Mock",
                    "unittesmock.Mock"
                ],
                "mock": [
                    "unittesmock.Mock",
                    "mock.Mock",
                    "Mock"
                ],
                "mock_os": [
                    "mock.Mock",
                    "unittesmock.Mock",
                    "Mock"
                ],
                "transfer": [
                    "str",
                    "int"
                ]
            }
        },
        "sftp_objs": {
            "name": "sftp_objs",
            "location": 113,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "sftp": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            },
            "variables": {}
        },
        "transfer": {
            "name": "transfer",
            "location": 123,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "sftp": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            },
            "variables": {}
        },
        "client": {
            "name": "client",
            "location": 133,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": []
            },
            "variables": {
                "client": []
            }
        },
        "global": {
            "cxn": [
                "str",
                "List[str]",
                "int",
                "Dict[str, List[Any]]",
                "Tuple[str, str, str, str, str, str, str, str]"
            ],
            "warning": [
                "str",
                "bool",
                "int"
            ]
        }
    },
    "fabric-2.5.0/integration/concurrency.py": {
        "_worker": {
            "name": "_worker",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "count": [
                    "str",
                    "int",
                    "bool",
                    "SupportsBytes",
                    "Sequence[str]"
                ],
                "cxn": [
                    "bool",
                    "list",
                    "Optional[int]",
                    "gevenqueue.Queue"
                ],
                "expected": [
                    "bool",
                    "int",
                    "Dict[str, str]",
                    "float"
                ],
                "kwargs": [],
                "num_words": [
                    "int",
                    "Optional[int]"
                ],
                "queue": [
                    "bool",
                    "int",
                    "Dict[str, str]",
                    "float"
                ],
                "start": [
                    "int",
                    "Optional[int]"
                ]
            },
            "variables": {
                "cmd": [
                    "str",
                    "List[str]",
                    "Pattern[str]",
                    "dict",
                    "int"
                ],
                "result": [
                    "list",
                    "str",
                    "List[Dict[str, str]]"
                ],
                "stdout": [
                    "Generator[Any, None, None]",
                    "str",
                    "List[str]",
                    "float",
                    "dict",
                    "Pattern[str]"
                ],
                "tail": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "concurrency.setup": {
            "name": "setup",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "cxn1": [
                    "int",
                    "Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]",
                    "bool",
                    "Type[str]"
                ],
                "cxn2": [
                    "int",
                    "Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]",
                    "bool",
                    "Type[str]"
                ],
                "cxn3": [
                    "int",
                    "Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]",
                    "bool",
                    "Type[str]"
                ],
                "cxns": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ]
            }
        },
        "concurrency.connections_objects_do_not_share_connection_state": {
            "name": "connections_objects_do_not_share_connection_state",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "cxn1": [
                    "Pattern[str]",
                    "str",
                    "int",
                    "bool"
                ],
                "cxn2": [
                    "str"
                ],
                "cxn3": [
                    "Pattern[str]",
                    "str",
                    "int",
                    "bool"
                ],
                "ports": [
                    "int",
                    "frozenset[str]",
                    "bool",
                    "dict",
                    "Tuple[Literal, Literal]",
                    "Tuple[Any, Any]"
                ]
            }
        },
        "concurrency.manual_threading_works_okay": {
            "name": "manual_threading_works_okay",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "chunk": [
                    "int",
                    "Counter[int]",
                    "deque[int]"
                ],
                "chunksize": [
                    "int",
                    "List[int]",
                    "str"
                ],
                "cxn": [
                    "Optional[Dict[str, Any]]",
                    "Optional[float]",
                    "dict"
                ],
                "data": [
                    "str",
                    "list"
                ],
                "end": [
                    "int",
                    "float",
                    "str"
                ],
                "err": [
                    "str",
                    "Dict[str, str]"
                ],
                "expected": [
                    "Optional[List]",
                    "str",
                    "int",
                    "Exception",
                    "List[List[str]]"
                ],
                "kwargs": [
                    "Exception",
                    "T"
                ],
                "num_words": [
                    "int"
                ],
                "queue": [
                    "int",
                    "dict"
                ],
                "result": [
                    "dict",
                    "Dict[str, Any]",
                    "list",
                    "Dict[str, int]",
                    "Dict[str, Union[None, int, str]]"
                ],
                "start": [
                    "int"
                ],
                "thread": [
                    "Tuple[int, int, int]",
                    "deque",
                    "list",
                    "List[str]",
                    "Dict[str, Callable[[], Any]]"
                ],
                "threads": [
                    "list",
                    "Generator[Any, None, None]",
                    "List[Tuple[int, int]]",
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "global": {
            "_words": [
                "str",
                "Union[Literal, str]"
            ]
        }
    },
    "fabric-2.5.0/integration/connection.py": {
        "skip_outside_travis": {
            "name": "skip_outside_travis",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": []
            },
            "variables": {}
        },
        "ssh_connections.open_method_generates_real_connection": {
            "name": "open_method_generates_real_connection",
            "location": 18,
            "return": [
                "List[str]",
                "Optional[Iterable[str]]",
                "str",
                "Dict[str, Any]",
                "Iterable[str]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "c": [
                    "Union[dict, Dict[str, int]]",
                    "str"
                ]
            }
        },
        "ssh_connections.close_method_closes_connection": {
            "name": "close_method_closes_connection",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "c": [
                    "int",
                    "Dict[str, float]",
                    "Dict[str, Optional[Any]]",
                    "Counter[int]"
                ]
            }
        },
        "run.simple_command_on_host": {
            "name": "simple_command_on_host",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "result": [
                    "Dict[str, Any]",
                    "Dict[str, int]",
                    "list",
                    "dict"
                ]
            }
        },
        "run.simple_command_with_pty": {
            "name": "simple_command_with_pty",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "cols": [
                    "List[int]",
                    "int",
                    "List[str]",
                    "list",
                    "List[Tuple[Any, Any]]",
                    "str"
                ],
                "found": [
                    "str",
                    "List[str]",
                    "list",
                    "List[Dict[str, Any]]",
                    "dict",
                    "Set[str]"
                ],
                "result": [
                    "List[str]",
                    "Dict[str, Any]",
                    "str"
                ],
                "rows": [
                    "List[float]",
                    "List[List[int]]",
                    "List[str]",
                    "int",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "local.wraps_invoke_run": {
            "name": "wraps_invoke_run",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "cxn": [
                    "List[str]",
                    "list",
                    "List[Type[Any]]",
                    "List[bool]",
                    "dict",
                    "tuple"
                ],
                "result": [
                    "list",
                    "List[List[str]]",
                    "List[bool]",
                    "Dict[str, Any]",
                    "tuple",
                    "List[Union[int, str]]",
                    "List[Tuple[Any, int, int, str, str]]"
                ]
            }
        },
        "sudo.setup": {
            "name": "setup",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "config": [
                    "Dict[str, List[int]]",
                    "Dict[str, Dict[str, bool]]",
                    "Type[Dict[str, Any]]",
                    "dict",
                    "omdlib.type_defs.Config",
                    "config_composer.core.config.Config",
                    "Dict[str, Union[Any, Any, bool, int, str]]"
                ],
                "cxn": [
                    "dict",
                    "int"
                ]
            }
        },
        "sudo.sudo_command": {
            "name": "sudo_command",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "sudo.mixed_sudo_and_normal_commands": {
            "name": "mixed_sudo_and_normal_commands",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "logname": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "command_timeout.setup": {
            "name": "setup",
            "location": 122,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "cxn": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ]
            }
        },
        "command_timeout.does_not_raise_exception_when_under_timeout": {
            "name": "does_not_raise_exception_when_under_timeout",
            "location": 125,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "command_timeout.raises_exception_when_over_timeout": {
            "name": "raises_exception_when_over_timeout",
            "location": 128,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "elapsed": [
                    "float",
                    "int",
                    "Type[float]"
                ],
                "start": [
                    "List[str]",
                    "float"
                ]
            }
        },
        "Connection_.mixed_use_of_local_and_run": {
            "name": "mixed_use_of_local_and_run",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "cxn": [
                    "list",
                    "List[str]",
                    "str",
                    "Dict[str, str]"
                ],
                "result": [
                    "dict",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "Connection_.large_remote_commands_finish_cleanly": {
            "name": "large_remote_commands_finish_cleanly",
            "location": 106,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "cxn": [
                    "str",
                    "List[str]"
                ],
                "lines": [
                    "list",
                    "str",
                    "List[str]",
                    "Dict[str, Dict[str, str]]"
                ],
                "path": [
                    "str"
                ],
                "stdout": [
                    "List[str]",
                    "str",
                    "float",
                    "list"
                ],
                "words": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "global": {}
    },
    "fabric-2.5.0/integration/group.py": {
        "Group_.simple_command": {
            "name": "simple_command",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "group": [
                    "List[str]",
                    "str"
                ],
                "outs": [
                    "List[str]",
                    "Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]",
                    "list",
                    "str"
                ],
                "result": [
                    "list",
                    "List[float]",
                    "int",
                    "Generator[Any, None, None]",
                    "dict",
                    "List[str]"
                ]
            }
        },
        "Group_.failed_command": {
            "name": "failed_command",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "exits": [
                    "list",
                    "List[Tuple[Any, Any]]",
                    "List[Tuple[str, str, str]]"
                ],
                "group": [
                    "List[str]",
                    "Dict[str, str]",
                    "str"
                ]
            }
        },
        "Group_.excepted_command": {
            "name": "excepted_command",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "group": [
                    "List[str]",
                    "Dict[str, str]",
                    "str"
                ]
            }
        },
        "global": {}
    },
    "fabric-2.5.0/integration/transfer.py": {
        "_support": {
            "name": "_support",
            "location": 10,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "parts": [
                    "str",
                    "bool"
                ]
            },
            "variables": {}
        },
        "get.setup": {
            "name": "setup",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "c": [
                    "List[int]",
                    "int",
                    "complex",
                    "str",
                    "List[str]",
                    "bytes",
                    "float"
                ],
                "remote": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ]
            }
        },
        "get.base_case": {
            "name": "base_case",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "tmpdir": [
                    "str",
                    "sqlite3.Connection",
                    "int",
                    "Optional[str]"
                ]
            },
            "variables": {
                "local": [
                    "int",
                    "str",
                    "List[str]"
                ],
                "result": [
                    "List[str]",
                    "Dict[str, str]",
                    "str",
                    "Dict[str, Union[Any, Any]]",
                    "Pattern[str]"
                ]
            }
        },
        "get.file_like_objects": {
            "name": "file_like_objects",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "fd": [
                    "io.BytesIO",
                    "io.StringIO",
                    "os.stat_result"
                ],
                "result": [
                    "str",
                    "dict",
                    "Tuple[Union[float, str], Union[float, str], Union[float, str], Union[float, str], str]",
                    "List[str]"
                ]
            }
        },
        "get.mode_preservation": {
            "name": "mode_preservation",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "tmpdir": [
                    "str",
                    "List[str]",
                    "List[List[str]]"
                ]
            },
            "variables": {
                "local": [
                    "str",
                    "List[str]"
                ],
                "remote": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "put.setup": {
            "name": "setup",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "c": [
                    "List[int]",
                    "int",
                    "complex",
                    "str",
                    "List[str]",
                    "bytes",
                    "float"
                ],
                "remote": [
                    "str",
                    "set"
                ]
            }
        },
        "put.base_case": {
            "name": "base_case",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "local_dir": [
                    "str"
                ],
                "result": [
                    "list",
                    "Set[str]"
                ],
                "tmpdir": [
                    "int",
                    "float"
                ]
            }
        },
        "put.file_like_objects": {
            "name": "file_like_objects",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "fd": [
                    "io.StringIO"
                ],
                "remote_str": [
                    "str"
                ],
                "result": [
                    "str",
                    "Generator[Any, None, None]",
                    "dict",
                    "list",
                    "Dict[str, List[Any]]"
                ]
            }
        },
        "put.mode_preservation": {
            "name": "mode_preservation",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "tmpdir": [
                    "str",
                    "List[str]",
                    "List[List[str]]"
                ]
            },
            "variables": {
                "local": [
                    "int",
                    "io.BytesIO",
                    "str",
                    "io.TextIOWrapper",
                    "IO[bytes]"
                ],
                "remote": [
                    "io.BufferedReader"
                ]
            }
        },
        "global": {}
    },
    "fabric-2.5.0/sites/shared_conf.py": {
        "global": {
            "copyright": [
                "str",
                "List[str]",
                "int",
                "Dict[str, List[Any]]",
                "Tuple[str, str, str, str, str, str, str, str]"
            ],
            "default_role": [
                "str",
                "int",
                "List[Tuple[str, int]]",
                "datetime.timedelta"
            ],
            "doctest_global_setup": [
                "str",
                "List[str]",
                "int",
                "Dict[str, List[Any]]",
                "Tuple[str, str, str, str, str, str, str, str]"
            ],
            "exclude_trees": [
                "bool"
            ],
            "extensions": [
                "int",
                "dict",
                "List[int]",
                "List[List[int]]",
                "str",
                "datetime.timedelta"
            ],
            "html_sidebars": [
                "str",
                "List[str]",
                "int",
                "Dict[str, List[Any]]",
                "Tuple[str, str, str, str, str, str, str, str]"
            ],
            "html_static_path": [
                "List[str]",
                "str",
                "list"
            ],
            "html_theme": [
                "str",
                "List[str]",
                "int",
                "Dict[str, List[Any]]",
                "Tuple[str, str, str, str, str, str, str, str]"
            ],
            "html_theme_options": [
                "int",
                "Dict[str, Union[bool, str]]",
                "Tuple[Tuple[str, str], Tuple[str, str], Tuple[str, str], Tuple[str, str]]",
                "Dict[str, int]",
                "Dict[str, None]",
                "Dict[str, Union[int, str]]",
                "str"
            ],
            "html_theme_path": [
                "List[str]",
                "str",
                "list"
            ],
            "intersphinx_mapping": [
                "Dict[str, Tuple[str, None]]",
                "Dict[str, str]",
                "Dict[str, None]",
                "Dict[str, Tuple[str, Any]]",
                "Dict[str, bool]",
                "Type[Dict[str, Any]]"
            ],
            "inv_target": [
                "str",
                "Optional[str]",
                "Optional[bytes]",
                "frozenset[str]",
                "ImportError"
            ],
            "inv_www_target": [
                "str",
                "Optional[str]",
                "Optional[bytes]",
                "frozenset[str]",
                "ImportError"
            ],
            "master_doc": [
                "str",
                "List[str]",
                "int",
                "Dict[str, List[Any]]",
                "Tuple[str, str, str, str, str, str, str, str]"
            ],
            "on_dev": [
                "int",
                "dict",
                "List[int]",
                "List[List[int]]",
                "str",
                "datetime.timedelta"
            ],
            "on_rtd": [
                "int",
                "dict",
                "List[int]",
                "List[List[int]]",
                "str",
                "datetime.timedelta"
            ],
            "on_travis": [
                "int",
                "dict",
                "List[int]",
                "List[List[int]]",
                "str",
                "datetime.timedelta"
            ],
            "para_target": [
                "str",
                "Optional[str]",
                "Optional[bytes]",
                "frozenset[str]",
                "ImportError"
            ],
            "project": [
                "str"
            ],
            "source_suffix": [
                "str",
                "Optional[str]",
                "Tuple[Dict[str, Any]]",
                "List[str]"
            ],
            "templates_path": [
                "List[str]"
            ],
            "year": [
                "int",
                "dict",
                "List[int]",
                "List[List[int]]",
                "str",
                "datetime.timedelta"
            ]
        }
    },
    "fabric-2.5.0/sites/docs/conf.py": {
        "global": {
            "autodoc_default_flags": [
                "List[str]",
                "list",
                "int"
            ],
            "target": [],
            "www": [
                "KeysView[str]",
                "dict",
                "Dict[int, str]",
                "Dict[str, Union[int, str]]",
                "str"
            ]
        }
    },
    "fabric-2.5.0/sites/www/conf.py": {
        "global": {
            "releases_document_name": [
                "str",
                "List[str]",
                "dict"
            ],
            "releases_github_path": [
                "List[str]",
                "str",
                "list"
            ],
            "target": [
                "int",
                "Dict[str, int]",
                "float",
                "Dict[str, str]",
                "Dict[str, Any]"
            ]
        }
    },
    "fabric-2.5.0/tests/config.py": {
        "additional_kwargs.forwards_arbitrary_kwargs_to_init": {
            "name": "forwards_arbitrary_kwargs_to_init",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "config": [
                    "dict",
                    "config_composer.core.config.Config",
                    "Dict[str, Union[Any, Any, Any]]",
                    "sheepdoge.config.Config",
                    "cincoconfig.config.Config",
                    "Type[Dict[str, Any]]",
                    "Dict[str, Union[Any, Any, Any, Any]]",
                    "Dict[str, Dict[str, bool]]"
                ]
            }
        },
        "additional_kwargs.subservient_to_runtime_overrides": {
            "name": "subservient_to_runtime_overrides",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "config": [
                    "Dict[str, Union[Any, Any, Any]]",
                    "str",
                    "dict",
                    "Dict[str, Union[Any, Any, Any, Any]]",
                    "Type[Dict[str, Any]]",
                    "Dict[str, Any]"
                ],
                "env": [
                    "yacron.config.JobConfig",
                    "Dict[str, str]",
                    "dict",
                    "Dict[Any, Dict[Any, bool]]",
                    "Dict[Any, str]",
                    "Dict[str, Any]",
                    "Dict[Any, Dict[str, dict]]",
                    "Dict[Any, Dict[Any, Any]]"
                ],
                "sudo_password": [
                    "Type[str]",
                    "str",
                    "bool",
                    "frozenset[str]"
                ]
            }
        },
        "additional_kwargs.connect_kwargs_also_merged_with_imported_values": {
            "name": "connect_kwargs_also_merged_with_imported_values",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "conf": [
                    "int",
                    "bool"
                ]
            }
        },
        "key_filename.base": {
            "name": "base",
            "location": 121,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "config": [
                    "Dict[str, Union[Any, Any]]",
                    "Dict[Any, Dict[str, Any]]",
                    "Dict[str, List[str]]",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "key_filename.is_not_set_if_None": {
            "name": "is_not_set_if_None",
            "location": 127,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "config": [
                    "Dict[str, Union[Any, Any, Any]]",
                    "bytes",
                    "Dict[str, Any]",
                    "Dict[str, Union[Any, Any, Any, Any]]"
                ]
            }
        },
        "password.set_just_to_connect_kwargs_if_sudo_password_set": {
            "name": "set_just_to_connect_kwargs_if_sudo_password_set",
            "location": 138,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "config": [
                    "int",
                    "Set[str]",
                    "Dict[str, str]",
                    "str",
                    "Optional[dict]"
                ],
                "passwd": [
                    "int",
                    "float"
                ]
            }
        },
        "password.set_to_both_password_fields_if_necessary": {
            "name": "set_to_both_password_fields_if_necessary",
            "location": 144,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "config": [
                    "Dict[Any, str]",
                    "Dict[str, Any]",
                    "bytes",
                    "cincoconfig.config.Config",
                    "Dict[str, Union[int, str, Any]]",
                    "Dict[str, str]"
                ]
            }
        },
        "var_mappings.always_use_pty": {
            "name": "always_use_pty",
            "location": 105,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "config": [
                    "cincoconfig.config.Config",
                    "int",
                    "pymap.backend.redis.Config"
                ]
            }
        },
        "var_mappings.forward_agent": {
            "name": "forward_agent",
            "location": 112,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "config": [
                    "cincoconfig.config.Config",
                    "Dict[str, Any]",
                    "sheepdoge.config.Config",
                    "halogen.config.ConfigUnion[Any]"
                ]
            }
        },
        "var_mappings.gateway": {
            "name": "gateway",
            "location": 116,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "config": [
                    "Dict[str, Union[Any, Any, Any]]",
                    "bytes"
                ]
            }
        },
        "var_mappings.no_agent": {
            "name": "no_agent",
            "location": 131,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "config": [
                    "Dict[str, Union[int, str]]",
                    "Dict[str, str]",
                    "Config",
                    "chalice.config.Config"
                ]
            }
        },
        "var_mappings.ssh_config_path": {
            "name": "ssh_config_path",
            "location": 149,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "config": [
                    "config_composer.core.config.Config",
                    "sheepdoge.config.Config",
                    "cincoconfig.config.Config",
                    "dict",
                    "kuyruk.config.Config"
                ]
            }
        },
        "var_mappings.sudo_password": {
            "name": "sudo_password",
            "location": 154,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "config": [
                    "kuyruk.config.Config",
                    "shanghai.config.ShanghaiConfiguration",
                    "bytes",
                    "Final"
                ]
            }
        },
        "var_mappings.sudo_prompt": {
            "name": "sudo_prompt",
            "location": 158,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "config": [
                    "kuyruk.config.Config",
                    "shanghai.config.ShanghaiConfiguration",
                    "bytes",
                    "Final"
                ]
            }
        },
        "var_mappings.timeout": {
            "name": "timeout",
            "location": 162,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "config": [
                    "Dict[str, Union[Any, Any, Any]]",
                    "sheepdoge.config.Config",
                    "Type[Dict[str, Any]]",
                    "bytes",
                    "shanghai.config.ShanghaiConfiguration",
                    "dict"
                ]
            }
        },
        "var_mappings.use_ssh_config": {
            "name": "use_ssh_config",
            "location": 166,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "config": [
                    "dict",
                    "Dict[str, Union[Any, Any, Any]]",
                    "Dict[str, Any]",
                    "Dict[str, Union[Any, Any, Any, Any]]",
                    "Dict[str, str]"
                ]
            }
        },
        "var_mappings.warn_only": {
            "name": "warn_only",
            "location": 173,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "config": [
                    "Dict[str, Any]",
                    "dict",
                    "config_composer.core.config.Config",
                    "cincoconfig.config.Config"
                ]
            }
        },
        "from_v1.setup": {
            "name": "setup",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "env": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "from_v1._conf": {
            "name": "_conf",
            "location": 66,
            "return": [
                "Callable",
                "Dict[str, Dict[str, Any]]",
                "Callable[[str], None]",
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "from_v1.must_be_given_explicit_env_arg": {
            "name": "must_be_given_explicit_env_arg",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "config": [
                    "Dict[str, Any]",
                    "routemaster.config.model.Config",
                    "config_composer.core.config.Config",
                    "sheepdoge.config.Config",
                    "Dict[Any, Dict[str, Any]]"
                ]
            }
        },
        "Config_.defaults_to_merger_of_global_defaults": {
            "name": "defaults_to_merger_of_global_defaults",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "c": [
                    "Dict[bytes, str]",
                    "List[int]",
                    "Dict[str, Any]",
                    "Dict[str, Union[Any, Any, Any, str]]"
                ]
            }
        },
        "Config_.our_global_defaults_can_override_invokes": {
            "name": "our_global_defaults_can_override_invokes",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "Config_.has_various_Fabric_specific_default_keys": {
            "name": "has_various_Fabric_specific_default_keys",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "c": [
                    "int",
                    "Counter[Any]"
                ]
            }
        },
        "Config_.overrides_some_Invoke_defaults": {
            "name": "overrides_some_Invoke_defaults",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "config": [
                    "snapcrafinternal.project_loader._config.Config",
                    "flask.config.Config",
                    "solo.config.app.Config",
                    "azafea.config.Config",
                    "gridsync.config.Config"
                ]
            }
        },
        "Config_.uses_Fabric_prefix": {
            "name": "uses_Fabric_prefix",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "core_ssh_load_option_allows_skipping_ssh_config_loading.skips_default_paths": {
            "name": "skips_default_paths",
            "location": 286,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "method": [
                    "str",
                    "bool"
                ],
                "self": []
            },
            "variables": {}
        },
        "core_ssh_load_option_allows_skipping_ssh_config_loading.does_not_affect_explicit_object": {
            "name": "does_not_affect_explicit_object",
            "location": 291,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "method": [
                    "str"
                ],
                "self": []
            },
            "variables": {
                "c": [
                    "Dict[bytes, str]",
                    "List[int]",
                    "Dict[str, int]",
                    "str",
                    "Dict[str, Union[Any, Any, Any, str]]"
                ],
                "sc": [
                    "cincoconfig.config.Schema",
                    "list",
                    "bool",
                    "Tuple[Any, Any, Any]",
                    "dict"
                ]
            }
        },
        "core_ssh_load_option_allows_skipping_ssh_config_loading.does_not_skip_loading_runtime_path": {
            "name": "does_not_skip_loading_runtime_path",
            "location": 300,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "method": [
                    "str",
                    "Optional[str]",
                    "IO[bytes]"
                ],
                "self": []
            },
            "variables": {}
        },
        "lazy_loading_and_explicit_methods.may_use_lazy_plus_explicit_methods_to_control_flow": {
            "name": "may_use_lazy_plus_explicit_methods_to_control_flow",
            "location": 311,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "method": [
                    "str",
                    "Union[str, Dict[str, Any]]",
                    "dict"
                ],
                "self": []
            },
            "variables": {
                "c": [
                    "str",
                    "Dict[bytes, str]",
                    "dict"
                ]
            }
        },
        "ssh_config_loading.defaults_to_empty_sshconfig_obj_if_no_files_found": {
            "name": "defaults_to_empty_sshconfig_obj_if_no_files_found",
            "location": 195,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "c": [
                    "float",
                    "set",
                    "Counter[Any]",
                    "dict",
                    "List[int]",
                    "list",
                    "List[List[Any]]"
                ]
            }
        },
        "ssh_config_loading.object_can_be_given_explicitly_via_ssh_config_kwarg": {
            "name": "object_can_be_given_explicitly_via_ssh_config_kwarg",
            "location": 204,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "sc": [
                    "str",
                    "dss.config.Replica",
                    "cincoconfig.config.Schema",
                    "bool",
                    "dict"
                ]
            }
        },
        "ssh_config_loading.when_config_obj_given_default_paths_are_not_sought": {
            "name": "when_config_obj_given_default_paths_are_not_sought",
            "location": 209,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "method": [
                    "str",
                    "bool",
                    "Tuple[Optional[str], Optional[str]]",
                    "Optional[str]"
                ],
                "self": []
            },
            "variables": {
                "sc": [
                    "str",
                    "List[str]",
                    "Dict[str, str]",
                    "cincoconfig.config.Schema",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "ssh_config_loading.config_obj_prevents_loading_runtime_path_too": {
            "name": "config_obj_prevents_loading_runtime_path_too",
            "location": 215,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "method": [
                    "str",
                    "List[Optional[bytes]]"
                ],
                "self": []
            },
            "variables": {
                "sc": [
                    "qutebrowser.config.configfiles.ConfigPyWriter",
                    "paramiko.config.SSHConfig",
                    "rl_algorithms.utils.config.ConfigDict",
                    "dss.config.Replica",
                    "baseplate.lib.config.ConfigNamespace"
                ]
            }
        },
        "ssh_config_loading.when_runtime_path_given_other_paths_are_not_sought": {
            "name": "when_runtime_path_given_other_paths_are_not_sought",
            "location": 221,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "method": [
                    "str",
                    "Optional[str]",
                    "bytearray",
                    "bytes"
                ],
                "self": []
            },
            "variables": {}
        },
        "ssh_config_loading.runtime_path_can_be_given_via_config_itself": {
            "name": "runtime_path_can_be_given_via_config_itself",
            "location": 226,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "method": [
                    "str",
                    "MutableMapping[str, Any]",
                    "int",
                    "dict"
                ],
                "self": []
            },
            "variables": {}
        },
        "ssh_config_loading.runtime_path_does_not_die_silently": {
            "name": "runtime_path_does_not_die_silently",
            "location": 230,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "ssh_config_loading.default_file_paths_match_openssh": {
            "name": "default_file_paths_match_openssh",
            "location": 241,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "method": [
                    "str",
                    "int",
                    "bool",
                    "Dict[str, Any]"
                ],
                "self": []
            },
            "variables": {}
        },
        "ssh_config_loading.system_path_loads_ok": {
            "name": "system_path_loads_ok",
            "location": 247,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "c": [
                    "str",
                    "Dict[str, Dict[str, Any]]",
                    "List[str]",
                    "bool",
                    "int",
                    "Deque[int]"
                ],
                "names": [
                    "str",
                    "int",
                    "bytes",
                    "Optional[str]"
                ]
            }
        },
        "ssh_config_loading.user_path_loads_ok": {
            "name": "user_path_loads_ok",
            "location": 254,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "c": [
                    "str",
                    "Dict[str, str]",
                    "RuntimeError",
                    "dict",
                    "List[str]",
                    "int",
                    "bytes",
                    "Dict[int, str]"
                ],
                "names": [
                    "str",
                    "int",
                    "bytes",
                    "Optional[str]"
                ]
            }
        },
        "ssh_config_loading.both_paths_loaded_if_both_exist_with_user_winning": {
            "name": "both_paths_loaded_if_both_exist_with_user_winning",
            "location": 259,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "c": [
                    "classmethod",
                    "str"
                ],
                "expected": [
                    "str",
                    "Dict[int, List[Any]]",
                    "List[Union[int, str]]",
                    "List[str]"
                ],
                "names": [
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "ssh_config_loading.runtime_path_subject_to_user_expansion": {
            "name": "runtime_path_subject_to_user_expansion",
            "location": 271,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "method": [
                    "str",
                    "dict",
                    "List[str]",
                    "bytes"
                ],
                "self": []
            },
            "variables": {
                "tilded": [
                    "dict",
                    "str",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "ssh_config_loading.user_path_subject_to_user_expansion": {
            "name": "user_path_subject_to_user_expansion",
            "location": 278,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "method": [],
                "self": []
            },
            "variables": {
                "tilded": [
                    "str",
                    "int",
                    "Optional[List[Any]]",
                    "List[Dict[str, str]]",
                    "Optional[str]"
                ]
            }
        },
        "global": {}
    },
    "fabric-2.5.0/tests/connection.py": {
        "_select_result": {
            "name": "_select_result",
            "location": 34,
            "return": [
                "int",
                "Type",
                "str",
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "obj": [
                    "dict"
                ]
            },
            "variables": {
                "initial": [
                    "Tuple[slice]",
                    "tuple"
                ]
            }
        },
        "basic_attributes.is_connected_defaults_to_False": {
            "name": "is_connected_defaults_to_False",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "basic_attributes.client_defaults_to_a_new_SSHClient": {
            "name": "client_defaults_to_a_new_SSHClient",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "c": [
                    "int",
                    "str",
                    "dict"
                ]
            }
        },
        "known_hosts_behavior.defaults_to_auto_add": {
            "name": "defaults_to_auto_add",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "host.is_required": {
            "name": "is_required",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "host.is_exposed_as_attribute": {
            "name": "is_exposed_as_attribute",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "host.may_contain_user_shorthand": {
            "name": "may_contain_user_shorthand",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "c": [
                    "str",
                    "Callable",
                    "List[str]"
                ]
            }
        },
        "host.may_contain_port_shorthand": {
            "name": "may_contain_port_shorthand",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "c": [
                    "str",
                    "Callable",
                    "List[str]"
                ]
            }
        },
        "host.may_contain_user_and_port_shorthand": {
            "name": "may_contain_user_and_port_shorthand",
            "location": 92,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "c": [
                    "list",
                    "List[bytes]",
                    "str",
                    "float",
                    "Callable[[bytes], bytes]",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "host.ipv6_addresses_work_ok_but_avoid_port_shorthand": {
            "name": "ipv6_addresses_work_ok_but_avoid_port_shorthand",
            "location": 98,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "c": [
                    "Dict[bytes, str]",
                    "List[str]",
                    "List[int]",
                    "Counter[Any]",
                    "Set[str]"
                ],
                "c2": [
                    "frozenset[str]",
                    "int",
                    "float",
                    "List[int]"
                ]
            }
        },
        "user.defaults_to_local_user_with_no_config": {
            "name": "defaults_to_local_user_with_no_config",
            "location": 110,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "user.accepts_config_user_option": {
            "name": "accepts_config_user_option",
            "location": 114,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "config": [
                    "cincoconfig.config.Config",
                    "tf_encrypted.config.LocalConfig",
                    "kuyruk.config.Config",
                    "sheepdoge.config.Config",
                    "Config"
                ]
            }
        },
        "user.may_be_given_as_kwarg": {
            "name": "may_be_given_as_kwarg",
            "location": 118,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "user.errors_when_given_as_both_kwarg_and_shorthand": {
            "name": "errors_when_given_as_both_kwarg_and_shorthand",
            "location": 122,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "user.kwarg_wins_over_config": {
            "name": "kwarg_wins_over_config",
            "location": 125,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "config": [
                    "dict",
                    "Type[Dict[str, Any]]",
                    "Dict[str, Any]",
                    "shanghai.config.ShanghaiConfiguration",
                    "str",
                    "Dict[str, Union[Any, Any, bool, int, str]]",
                    "Dict[str, Union[Any, Any, Any]]"
                ],
                "cxn": [
                    "cincoconfig.config.Schema",
                    "cincoconfig.config.Config",
                    "rl_algorithms.utils.config.ConfigDict"
                ]
            }
        },
        "user.shorthand_wins_over_config": {
            "name": "shorthand_wins_over_config",
            "location": 130,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "config": [
                    "Type[Dict[str, Any]]",
                    "dict",
                    "Dict[str, Union[Any, Any, Any]]",
                    "Dict[str, Any]",
                    "shanghai.config.ShanghaiConfiguration",
                    "Dict[str, Union[Any, Any, Any, Any]]",
                    "Dict[str, Union[Any, Any, bool, int, str]]"
                ],
                "cxn": [
                    "cincoconfig.config.Config",
                    "cincoconfig.config.Schema",
                    "Dict[str, Union[Any, Any, Any, Any]]",
                    "app.config.Config",
                    "int"
                ]
            }
        },
        "port.defaults_to_22_because_yup": {
            "name": "defaults_to_22_because_yup",
            "location": 136,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "port.accepts_configuration_port": {
            "name": "accepts_configuration_port",
            "location": 139,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "config": [
                    "cincoconfig.config.Config",
                    "tf_encrypted.config.LocalConfig",
                    "kuyruk.config.Config",
                    "sheepdoge.config.Config",
                    "Config"
                ]
            }
        },
        "port.may_be_given_as_kwarg": {
            "name": "may_be_given_as_kwarg",
            "location": 143,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "port.errors_when_given_as_both_kwarg_and_shorthand": {
            "name": "errors_when_given_as_both_kwarg_and_shorthand",
            "location": 147,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "port.kwarg_wins_over_config": {
            "name": "kwarg_wins_over_config",
            "location": 150,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "config": [
                    "Type[Dict[str, Any]]",
                    "shanghai.config.ShanghaiConfiguration",
                    "kuyruk.config.Config",
                    "dict",
                    "Dict[str, Union[Any, str]]",
                    "Dict[str, List[int]]",
                    "Dict[str, Union[Any, Any, bool, int, str]]"
                ],
                "cxn": [
                    "Dict[str, Union[Any, str]]",
                    "Dict[str, int]",
                    "int"
                ]
            }
        },
        "port.shorthand_wins_over_config": {
            "name": "shorthand_wins_over_config",
            "location": 155,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "config": [
                    "Type[Dict[str, Any]]",
                    "dict",
                    "Dict[str, Union[Any, Any, Any]]",
                    "Dict[str, Any]",
                    "shanghai.config.ShanghaiConfiguration",
                    "Dict[str, Union[Any, Any, Any, Any]]",
                    "Dict[str, Union[Any, Any, bool, int, str]]"
                ],
                "cxn": [
                    "cincoconfig.config.Config",
                    "cincoconfig.config.Schema",
                    "Dict[str, Union[Any, Any, Any, Any]]",
                    "app.config.Config",
                    "int"
                ]
            }
        },
        "forward_agent.defaults_to_False": {
            "name": "defaults_to_False",
            "location": 161,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "forward_agent.accepts_configuration_value": {
            "name": "accepts_configuration_value",
            "location": 164,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "config": [
                    "hub2labhook.config.FailFastConfig",
                    "dict",
                    "kuyruk.config.Config",
                    "config_composer.core.config.Config",
                    "Dict[str, str]",
                    "sheepdoge.config.Config",
                    "isorsettings.Config"
                ]
            }
        },
        "forward_agent.may_be_given_as_kwarg": {
            "name": "may_be_given_as_kwarg",
            "location": 168,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "cxn": [
                    "str",
                    "dict",
                    "bool",
                    "List[Tuple[Any, Any]]",
                    "Dict[str, Tuple[str, bool]]"
                ]
            }
        },
        "forward_agent.kwarg_wins_over_config": {
            "name": "kwarg_wins_over_config",
            "location": 172,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "config": [
                    "neuromation.api.config._ConfigData",
                    "str",
                    "Dict[str, str]"
                ],
                "cxn": [
                    "str",
                    "bool",
                    "supertunnel.ssh.config.SSHConfiguration",
                    "cincoconfig.config.Schema"
                ]
            }
        },
        "connect_timeout.defaults_to_None": {
            "name": "defaults_to_None",
            "location": 178,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "connect_timeout.accepts_configuration_value": {
            "name": "accepts_configuration_value",
            "location": 181,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "config": [
                    "cincoconfig.config.Config",
                    "sheepdoge.config.Config",
                    "tf_encrypted.config.LocalConfig",
                    "kuyruk.config.Config"
                ]
            }
        },
        "connect_timeout.may_be_given_as_kwarg": {
            "name": "may_be_given_as_kwarg",
            "location": 185,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "cxn": [
                    "int",
                    "Set[str]",
                    "List[int]",
                    "float"
                ]
            }
        },
        "connect_timeout.kwarg_wins_over_config": {
            "name": "kwarg_wins_over_config",
            "location": 189,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "config": [
                    "kuyruk.config.Config",
                    "Dict[str, Union[bool, str]]",
                    "omdlib.type_defs.Config",
                    "RuntimeError",
                    "Dict[str, Any]",
                    "Dict[str, Dict[str, Any]]"
                ],
                "cxn": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "config.is_not_required": {
            "name": "is_not_required",
            "location": 199,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "config.can_be_specified": {
            "name": "can_be_specified",
            "location": 202,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "c": [
                    "baseplate.lib.config.ConfigNamespace",
                    "str",
                    "Dict[str, str]"
                ],
                "config": [
                    "dict",
                    "chalice.config.Config",
                    "Config",
                    "nucypher.config.node.CharacterConfiguration",
                    "Dict[str, Tuple[str, str]]",
                    "monkq.config.Setting"
                ]
            }
        },
        "config.if_given_an_invoke_Config_we_upgrade_to_our_own_Config": {
            "name": "if_given_an_invoke_Config_we_upgrade_to_our_own_Config",
            "location": 209,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "cxn": [
                    "str",
                    "Dict[str, str]",
                    "Dict[str, Union[Any, Any, Any]]",
                    "bool"
                ],
                "vanilla": [
                    "bool",
                    "str",
                    "cincoconfig.config.Schema",
                    "int",
                    "list",
                    "Union[dict, Dict[str, Any]]"
                ]
            }
        },
        "gateway.is_optional_and_defaults_to_None": {
            "name": "is_optional_and_defaults_to_None",
            "location": 222,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "c": [
                    "Union[Literal, Literal]",
                    "List[str]",
                    "str",
                    "ImportError",
                    "Callable[[bytes], bytes]",
                    "float",
                    "bool"
                ]
            }
        },
        "gateway.takes_a_Connection": {
            "name": "takes_a_Connection",
            "location": 226,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "c": [
                    "dict",
                    "DefaultDict[int, Dict[str, float]]",
                    "List[int]",
                    "itertools.cycle[str]",
                    "List[List[Any]]"
                ]
            }
        },
        "gateway.takes_a_string": {
            "name": "takes_a_string",
            "location": 231,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "c": [
                    "float",
                    "int",
                    "str"
                ]
            }
        },
        "gateway.accepts_configuration_value": {
            "name": "accepts_configuration_value",
            "location": 235,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "config": [
                    "dict",
                    "Type[Dict[str, Any]]",
                    "shanghai.config.ShanghaiConfiguration",
                    "Dict[str, Any]",
                    "Dict[str, Union[Any, Any, bool, int, str]]",
                    "str",
                    "Dict[str, Union[Any, Any, Any]]"
                ],
                "cxn": [
                    "cincoconfig.config.Config",
                    "cincoconfig.config.Schema",
                    "Dict[str, Union[Any, Any, Any, Any]]",
                    "app.config.Config",
                    "int"
                ],
                "gw": [
                    "cincoconfig.config.Config",
                    "cincoconfig.config.Schema",
                    "Dict[str, Union[Any, Any, Any, Any]]",
                    "app.config.Config",
                    "int"
                ]
            }
        },
        "initializes_client.instantiates_empty_SSHClient": {
            "name": "instantiates_empty_SSHClient",
            "location": 245,
            "return": [
                ""
            ],
            "arguments": {
                "Client": [
                    "unittesmock.Mock",
                    "int"
                ],
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "initializes_client.sets_missing_host_key_policy": {
            "name": "sets_missing_host_key_policy",
            "location": 250,
            "return": [
                ""
            ],
            "arguments": {
                "Policy": [
                    "bytes",
                    "unittesmock.Mock",
                    "mock.MagicMock"
                ],
                "args": [],
                "client": [
                    "bool",
                    "str",
                    "List[str]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "return_value": [
                    "List[Dict[str, Any]]",
                    "Dict[str, Union[Any, Any, Any]]",
                    "Dict[str, Dict[str, Any]]",
                    "str",
                    "List[Dict[str, str]]",
                    "list"
                ],
                "sentinel": [
                    "Tuple[Literal, Literal]",
                    "MagicMock[Union[mock.AsyncMock, mock.MagicMock]]",
                    "property"
                ],
                "set_policy": [
                    "str",
                    "Tuple[str, str]"
                ]
            }
        },
        "initializes_client.is_made_available_as_client_attr": {
            "name": "is_made_available_as_client_attr",
            "location": 258,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "client": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "hostname.original_host_always_set": {
            "name": "original_host_always_set",
            "location": 297,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "cxn": [
                    "int",
                    "list",
                    "str",
                    "Dict[int, str]",
                    "dict",
                    "Dict[str, int]"
                ]
            }
        },
        "hostname.hostname_directive_overrides_host_attr": {
            "name": "hostname_directive_overrides_host_attr",
            "location": 302,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "config": [
                    "neuromation.api.config._ConfigData",
                    "dict",
                    "cerise.config.Config",
                    "Dict[str, int]",
                    "str"
                ],
                "cxn": [
                    "cincoconfig.config.Schema",
                    "cincoconfig.config.Config",
                    "pkrecv.config.Config",
                    "distutils.command.config.config",
                    "pxl.config.Config"
                ],
                "path": [
                    "str",
                    "List[str]",
                    "bool",
                    "list"
                ]
            }
        },
        "user.wins_over_default": {
            "name": "wins_over_default",
            "location": 316,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "user.wins_over_configuration": {
            "name": "wins_over_configuration",
            "location": 319,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "cxn": [
                    "int",
                    "Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]",
                    "bool",
                    "Type[str]"
                ]
            }
        },
        "user.loses_to_explicit": {
            "name": "loses_to_explicit",
            "location": 323,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "config": [
                    "cincoconfig.config.Config",
                    "Dict[str, str]",
                    "Config"
                ],
                "cxn": [
                    "cincoconfig.config.Config",
                    "cincoconfig.config.Schema",
                    "Dict[str, Union[Any, Any, Any, Any]]",
                    "app.config.Config",
                    "int"
                ]
            }
        },
        "port.wins_over_default": {
            "name": "wins_over_default",
            "location": 330,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "port.wins_over_configuration": {
            "name": "wins_over_configuration",
            "location": 333,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "cxn": [
                    "int",
                    "Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]",
                    "bool",
                    "Type[str]"
                ]
            }
        },
        "port.loses_to_explicit": {
            "name": "loses_to_explicit",
            "location": 337,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "config": [
                    "cincoconfig.config.Config",
                    "Dict[str, str]",
                    "Config"
                ],
                "cxn": [
                    "pkrecv.config.Config",
                    "pxl.config.Config"
                ]
            }
        },
        "forward_agent.wins_over_default": {
            "name": "wins_over_default",
            "location": 343,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "forward_agent.wins_over_configuration": {
            "name": "wins_over_configuration",
            "location": 346,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "cxn": [
                    "str",
                    "dict",
                    "Union[Literal, Literal]",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "forward_agent.loses_to_explicit": {
            "name": "loses_to_explicit",
            "location": 352,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "config": [
                    "cincoconfig.config.Config",
                    "sheepdoge.config.Config",
                    "Config"
                ],
                "cxn": [
                    "cincoconfig.config.Schema",
                    "cincoconfig.config.Config",
                    "baseplate.lib.config.EndpointConfiguration",
                    "app.config.Config"
                ]
            }
        },
        "proxy_command.wins_over_default": {
            "name": "wins_over_default",
            "location": 361,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "proxy_command.wins_over_configuration": {
            "name": "wins_over_configuration",
            "location": 364,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "cxn": [
                    "int",
                    "Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]",
                    "bool",
                    "Type[str]"
                ]
            }
        },
        "proxy_command.loses_to_explicit": {
            "name": "loses_to_explicit",
            "location": 368,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "config": [
                    "cincoconfig.config.Config",
                    "Dict[str, str]",
                    "Config"
                ],
                "cxn": [
                    "cincoconfig.config.Config",
                    "cincoconfig.config.Schema",
                    "Dict[str, Union[Any, Any, Any, Any]]",
                    "app.config.Config",
                    "int"
                ]
            }
        },
        "proxy_command.explicit_False_turns_off_feature": {
            "name": "explicit_False_turns_off_feature",
            "location": 376,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "config": [
                    "cincoconfig.config.Config",
                    "Dict[str, str]",
                    "sheepdoge.config.Config",
                    "Config"
                ],
                "cxn": [
                    "cincoconfig.config.Config",
                    "cincoconfig.config.Schema",
                    "List[str]",
                    "app.config.Config",
                    "int"
                ]
            }
        },
        "proxy_jump.setup": {
            "name": "setup",
            "location": 384,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "_expected_gw": [
                    "int",
                    "str",
                    "util.IDM",
                    "bytes"
                ]
            }
        },
        "proxy_jump.wins_over_default": {
            "name": "wins_over_default",
            "location": 387,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "cxn": [
                    "str",
                    "int",
                    "bool",
                    "Pattern[str]"
                ]
            }
        },
        "proxy_jump.wins_over_configuration": {
            "name": "wins_over_configuration",
            "location": 391,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "cxn": [
                    "str",
                    "float",
                    "Type[Mapping[str, Any]]",
                    "Dict[int, str]",
                    "int",
                    "Pattern[str]",
                    "OrderedDict[str, int]"
                ]
            }
        },
        "proxy_jump.loses_to_explicit": {
            "name": "loses_to_explicit",
            "location": 397,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "config": [
                    "cincoconfig.config.Config",
                    "Dict[str, str]",
                    "sheepdoge.config.Config"
                ],
                "cxn": [
                    "cincoconfig.config.Config",
                    "cincoconfig.config.Schema",
                    "Dict[str, Union[Any, Any, Any, Any]]",
                    "app.config.Config",
                    "int"
                ]
            }
        },
        "proxy_jump.explicit_False_turns_off_feature": {
            "name": "explicit_False_turns_off_feature",
            "location": 406,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "config": [
                    "cincoconfig.config.Config",
                    "sheepdoge.config.Config",
                    "Config"
                ],
                "cxn": [
                    "cincoconfig.config.Config",
                    "cincoconfig.config.Schema",
                    "List[str]",
                    "app.config.Config",
                    "int"
                ]
            }
        },
        "proxy_jump.wins_over_proxycommand": {
            "name": "wins_over_proxycommand",
            "location": 411,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "cxn": [
                    "int",
                    "Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]",
                    "bool",
                    "Type[str]"
                ]
            }
        },
        "proxy_jump.multi_hop_works_ok": {
            "name": "multi_hop_works_ok",
            "location": 415,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "cxn": [
                    "int",
                    "Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]",
                    "bool",
                    "Type[str]"
                ],
                "innermost": [
                    "int",
                    "dict",
                    "List[int]",
                    "List[List[int]]",
                    "str"
                ],
                "middle": [
                    "int",
                    "dict",
                    "List[int]",
                    "List[List[int]]",
                    "str"
                ],
                "outermost": [
                    "int",
                    "dict",
                    "List[int]",
                    "List[List[int]]",
                    "str"
                ]
            }
        },
        "proxy_jump.wildcards_do_not_trigger_recursion": {
            "name": "wildcards_do_not_trigger_recursion",
            "location": 424,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "conf": [
                    "Dict[str, Union[Any, Any, Any]]",
                    "List[str]",
                    "int",
                    "dict",
                    "str",
                    "Tuple[Literal, Literal, Literal]",
                    "Dict[str, Any]"
                ],
                "cxn": [
                    "dict",
                    "dss.config.Replica",
                    "str",
                    "List[Union[Any, Any, Any, Any]]"
                ]
            }
        },
        "proxy_jump.multihop_plus_wildcards_still_no_recursion": {
            "name": "multihop_plus_wildcards_still_no_recursion",
            "location": 431,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "conf": [
                    "Dict[str, Union[Any, Any, Any]]",
                    "List[str]",
                    "int",
                    "dict",
                    "str",
                    "Tuple[Literal, Literal, Literal]",
                    "Dict[str, Any]"
                ],
                "cxn": [
                    "str",
                    "Dict[str, str]",
                    "Dict[str, Union[Any, Any, Any]]"
                ],
                "inner": [
                    "Set[int]"
                ],
                "outer": [
                    "int",
                    "dict",
                    "List[int]",
                    "List[List[int]]",
                    "str"
                ]
            }
        },
        "proxy_jump.gateway_Connections_get_parent_connection_configs": {
            "name": "gateway_Connections_get_parent_connection_configs",
            "location": 442,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "conf": [
                    "cincoconfig.config.Schema"
                ],
                "cxn": [
                    "cincoconfig.config.Schema",
                    "str",
                    "baseplate.lib.config.EndpointConfiguration",
                    "square.dtypes.Config"
                ]
            }
        },
        "connect_timeout.wins_over_default": {
            "name": "wins_over_default",
            "location": 458,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "connect_timeout.wins_over_configuration": {
            "name": "wins_over_configuration",
            "location": 461,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "cxn": [
                    "int"
                ]
            }
        },
        "connect_timeout.loses_to_explicit": {
            "name": "loses_to_explicit",
            "location": 467,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "config": [
                    "Dict[str, Any]",
                    "Dict[Any, str]",
                    "chalice.config.Config",
                    "sheepdoge.config.Config",
                    "pvcmd.polyvers._vendor.traitlets.config.loader.Config"
                ],
                "cxn": [
                    "bool",
                    "dss.config.Replica",
                    "Set[str]",
                    "Dict[Union[bool, str], Any]"
                ]
            }
        },
        "identity_file.basic_loading_of_value": {
            "name": "basic_loading_of_value",
            "location": 478,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "value": [
                    "int"
                ]
            }
        },
        "ssh_config._runtime_config": {
            "name": "_runtime_config",
            "location": 263,
            "return": [
                "Optional[str]",
                "config.Config",
                "str",
                "settings.Config"
            ],
            "arguments": {
                "args": [],
                "basename": [
                    "str",
                    "Dict[str, Any]",
                    "int"
                ],
                "kwargs": [],
                "overrides": [
                    "Optional[str]",
                    "Optional[dict]",
                    "str"
                ],
                "self": []
            },
            "variables": {
                "confname": [
                    "List[str]",
                    "str"
                ],
                "overrides": [
                    "chalice.config.DeployedResources",
                    "int"
                ],
                "runtime_path": [
                    "str",
                    "list"
                ]
            }
        },
        "ssh_config._runtime_cxn": {
            "name": "_runtime_cxn",
            "location": 272,
            "return": [
                "Optional[str]",
                "str",
                "dict"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "config": [
                    "Dict[str, Union[Any, Any, Any]]",
                    "Dict[str, Any]",
                    "Dict[str, List[str]]",
                    "Dict[Any, Dict[str, Any]]"
                ]
            }
        },
        "ssh_config.effectively_blank_when_no_loaded_config": {
            "name": "effectively_blank_when_no_loaded_config",
            "location": 276,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "c": [
                    "Config",
                    "List[List[int]]",
                    "dict",
                    "ClassVar",
                    "str",
                    "Dict[str, Union[Any, Any, Any, Any]]",
                    "Dict[str, Any]",
                    "Set[str]"
                ],
                "cxn": [
                    "Dict[str, Any]",
                    "unittesmock.Mock",
                    "dict",
                    "Dict[str, str]",
                    "Dict[str, Union[Any, str]]",
                    "Dict[str, Tuple[str, str]]"
                ]
            }
        },
        "ssh_config.shows_result_of_lookup_when_loaded_config": {
            "name": "shows_result_of_lookup_when_loaded_config",
            "location": 283,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "conf": [
                    "int",
                    "str",
                    "Dict[int, int]",
                    "frozenset[int]"
                ],
                "expected": [
                    "str",
                    "Dict[int, List[Any]]",
                    "List[Union[int, str]]",
                    "List[str]"
                ]
            }
        },
        "connect_kwargs.defaults_to_empty_dict": {
            "name": "defaults_to_empty_dict",
            "location": 485,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "connect_kwargs.may_be_given_explicitly": {
            "name": "may_be_given_explicitly",
            "location": 488,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "cxn": [
                    "int",
                    "str",
                    "float",
                    "Optional[int]"
                ]
            }
        },
        "connect_kwargs.may_be_configured": {
            "name": "may_be_configured",
            "location": 492,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "c": [
                    "str",
                    "busboy.util.Maybe[bool]",
                    "List[str]",
                    "tuple",
                    "Optional[int]",
                    "List[Union[Any, Any, Any, str]]"
                ],
                "cxn": [
                    "str",
                    "List[Dict[str, Any]]",
                    "Dict[str, str]"
                ]
            }
        },
        "connect_kwargs.kwarg_wins_over_config": {
            "name": "kwarg_wins_over_config",
            "location": 497,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "c": [
                    "classmethod",
                    "str"
                ],
                "cxn": [
                    "int",
                    "str",
                    "List[str]",
                    "List[Dict[str, Any]]",
                    "Dict[str, Dict[str, int]]"
                ]
            }
        },
        "inline_ssh_env.defaults_to_config_value": {
            "name": "defaults_to_config_value",
            "location": 506,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "config": [
                    "kuyruk.config.Config",
                    "hub2labhook.config.FailFastConfig",
                    "tf_encrypted.config.LocalConfig",
                    "Config",
                    "sheepdoge.config.Config",
                    "dict"
                ]
            }
        },
        "inline_ssh_env.may_be_given": {
            "name": "may_be_given",
            "location": 511,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "cxn": [
                    "str",
                    "List[str]",
                    "list",
                    "List[Optional[bool]]",
                    "List[List[str]]"
                ]
            }
        },
        "obtaining_config.defaults_to_calling_Config_from_v1": {
            "name": "defaults_to_calling_Config_from_v1",
            "location": 530,
            "return": [
                ""
            ],
            "arguments": {
                "Config_from_v1": [
                    "Callable",
                    "int",
                    "cmk.base.config.HostConfig"
                ],
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "obtaining_config.may_be_given_config_explicitly": {
            "name": "may_be_given_config_explicitly",
            "location": 535,
            "return": [
                ""
            ],
            "arguments": {
                "Config_from_v1": [
                    "Dict[str, Any]",
                    "Type[T]",
                    "dict",
                    "bool",
                    "int",
                    "str"
                ],
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "additional_kwargs.forwards_arbitrary_kwargs_to_init": {
            "name": "forwards_arbitrary_kwargs_to_init",
            "location": 543,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "cxn": [
                    "int",
                    "Dict[Tuple[str, str], int]",
                    "float"
                ]
            }
        },
        "additional_kwargs.conflicting_kwargs_win_over_v1_env_values": {
            "name": "conflicting_kwargs_win_over_v1_env_values",
            "location": 554,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "cxn": [
                    "dict",
                    "str",
                    "int"
                ],
                "env": [
                    "str",
                    "int",
                    "Dict[str, str]"
                ]
            }
        },
        "port.basic": {
            "name": "basic",
            "location": 577,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "cxn": [
                    "int",
                    "float",
                    "list",
                    "List[Callable[[], bool]]",
                    "Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]",
                    "bool",
                    "Type[str]"
                ]
            }
        },
        "port.casted_to_int": {
            "name": "casted_to_int",
            "location": 581,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "cxn": [
                    "int",
                    "float",
                    "list",
                    "List[Callable[[], bool]]",
                    "Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]",
                    "bool",
                    "Type[str]"
                ]
            }
        },
        "port.not_supplied_if_given_in_host_string": {
            "name": "not_supplied_if_given_in_host_string",
            "location": 585,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "cxn": [
                    "int",
                    "Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]",
                    "bool",
                    "Type[str]"
                ]
            }
        },
        "var_mappings.host_string": {
            "name": "host_string",
            "location": 564,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "cxn": [
                    "int",
                    "Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]",
                    "bool",
                    "Type[str]"
                ]
            }
        },
        "var_mappings.None_host_string_errors_usefully": {
            "name": "None_host_string_errors_usefully",
            "location": 569,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "var_mappings.user": {
            "name": "user",
            "location": 572,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "cxn": [
                    "int",
                    "Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]",
                    "bool",
                    "Type[str]"
                ]
            }
        },
        "from_v1.setup": {
            "name": "setup",
            "location": 517,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "env": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "from_v1._cxn": {
            "name": "_cxn",
            "location": 520,
            "return": [
                "Dict[str, Any]",
                "dict",
                "Optional[int]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "from_v1.must_be_given_explicit_env_arg": {
            "name": "must_be_given_explicit_env_arg",
            "location": 524,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "cxn": [
                    "int",
                    "float",
                    "List[int]",
                    "Type[List[Any]]",
                    "Callable(chr)[[int], str]",
                    "Type[str]"
                ]
            }
        },
        "string_representation.str_displays_repr": {
            "name": "str_displays_repr",
            "location": 592,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "c": [
                    "int",
                    "str"
                ]
            }
        },
        "string_representation.displays_core_params": {
            "name": "displays_core_params",
            "location": 596,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "c": [
                    "int",
                    "bytes"
                ],
                "template": [
                    "str",
                    "dict",
                    "T",
                    "bytes",
                    "Dict[str, Set[str]]"
                ]
            }
        },
        "string_representation.omits_default_param_values": {
            "name": "omits_default_param_values",
            "location": 601,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "c": [
                    "int",
                    "bool",
                    "float",
                    "List[Tuple[int, str]]",
                    "list"
                ]
            }
        },
        "string_representation.param_comparison_uses_config": {
            "name": "param_comparison_uses_config",
            "location": 605,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "c": [
                    "int",
                    "list"
                ],
                "conf": [
                    "bool",
                    "str",
                    "list",
                    "Dict[str, Union[Any, str]]"
                ],
                "template": [
                    "str",
                    "dict",
                    "T",
                    "bytes",
                    "Dict[str, Set[str]]"
                ]
            }
        },
        "string_representation.proxyjump_gateway_shows_type": {
            "name": "proxyjump_gateway_shows_type",
            "location": 613,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "c": [
                    "Dict[bytes, str]",
                    "Optional[int]",
                    "list"
                ],
                "template": [
                    "str",
                    "dict",
                    "T",
                    "bytes",
                    "Dict[str, Set[str]]"
                ]
            }
        },
        "string_representation.proxycommand_gateway_shows_type": {
            "name": "proxycommand_gateway_shows_type",
            "location": 618,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "c": [
                    "int",
                    "Dict[bytes, str]",
                    "list",
                    "List[str]"
                ],
                "template": [
                    "str",
                    "dict",
                    "T",
                    "bytes",
                    "Dict[str, Set[str]]"
                ]
            }
        },
        "comparison_and_hashing.comparison_uses_host_user_and_port": {
            "name": "comparison_uses_host_user_and_port",
            "location": 624,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "c1": [
                    "Optional[int]",
                    "list"
                ],
                "c2": [
                    "Optional[int]",
                    "list"
                ]
            }
        },
        "comparison_and_hashing.comparison_to_non_Connections_is_False": {
            "name": "comparison_to_non_Connections_is_False",
            "location": 636,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "comparison_and_hashing.hashing_works": {
            "name": "hashing_works",
            "location": 639,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "comparison_and_hashing.sorting_works": {
            "name": "sorting_works",
            "location": 642,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "open.has_no_required_args_and_returns_None": {
            "name": "has_no_required_args_and_returns_None",
            "location": 653,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "client": [
                    "str",
                    "int",
                    "bool"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "open.calls_SSHClient_connect": {
            "name": "calls_SSHClient_connect",
            "location": 656,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "client": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "open.passes_through_connect_kwargs": {
            "name": "passes_through_connect_kwargs",
            "location": 663,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "client": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "open.refuses_to_overwrite_connect_kwargs_with_others": {
            "name": "refuses_to_overwrite_connect_kwargs_with_others",
            "location": 672,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "client": [
                    "str",
                    "bool",
                    "int",
                    "Optional[Dict]",
                    "List[int]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "err": [
                    "Final",
                    "float",
                    "list",
                    "str",
                    "int"
                ]
            }
        },
        "open.connect_kwargs_protection_not_tripped_by_defaults": {
            "name": "connect_kwargs_protection_not_tripped_by_defaults",
            "location": 694,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "client": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "open.submits_connect_timeout": {
            "name": "submits_connect_timeout",
            "location": 703,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "client": [
                    "bool",
                    "bytes"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "open.is_connected_True_when_successful": {
            "name": "is_connected_True_when_successful",
            "location": 709,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "client": [
                    "str",
                    "bool",
                    "int",
                    "Optional[Dict]",
                    "List[int]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "c": [
                    "str",
                    "int",
                    "Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal]",
                    "float",
                    "List[List[int]]"
                ]
            }
        },
        "open.short_circuits_if_already_connected": {
            "name": "short_circuits_if_already_connected",
            "location": 714,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "client": [
                    "float",
                    "str"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "cxn": [
                    "str",
                    "int",
                    "list"
                ]
            }
        },
        "open.is_connected_still_False_when_connect_fails": {
            "name": "is_connected_still_False_when_connect_fails",
            "location": 723,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "client": [
                    "time.Time"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "cxn": [
                    "str",
                    "Callable(os.path.join)[..., Any][[[Named(a, Union[_PathLike[str], str]), Variable(Union[_PathLike[str], str])], str][Any, Any]]",
                    "int"
                ]
            }
        },
        "open.uses_configured_user_host_and_port": {
            "name": "uses_configured_user_host_and_port",
            "location": 732,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "client": [
                    "unittesmock.Mock",
                    "int"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "open.uses_gateway_channel_as_sock_for_SSHClient_connect": {
            "name": "uses_gateway_channel_as_sock_for_SSHClient_connect",
            "location": 740,
            "return": [
                ""
            ],
            "arguments": {
                "Client": [
                    "unittesmock.Mock",
                    "mock.MagicMock"
                ],
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "gw": [
                    "Tuple[str, str, str, str, str]"
                ],
                "kwargs": [
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "Pattern[str]",
                    "str",
                    "Dict[str, Union[int, str]]",
                    "Dict[str, Union[Any, str]]"
                ],
                "main": [
                    "Set[str]",
                    "Dict[int, str]",
                    "str",
                    "List[Union[dict, Any]]",
                    "int"
                ],
                "mock_gw": [
                    "Mock",
                    "Dict[str, Union[int, str]]"
                ],
                "mock_main": [
                    "Dict[str, Tuple[str, Any]]",
                    "unittesmock.Mock",
                    "mode.utils.mocks.Mock"
                ],
                "open": [
                    "str",
                    "int",
                    "list"
                ],
                "open_channel": [
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]",
                    "bool",
                    "dict"
                ],
                "side_effect": [
                    "Dict[int, Dict[str, Any]]",
                    "Tuple[Literal, Literal, Literal]",
                    "str"
                ],
                "sock_arg": [
                    "Dict[int, Dict[str, Any]]",
                    "str"
                ]
            }
        },
        "open.uses_proxycommand_as_sock_for_Client_connect": {
            "name": "uses_proxycommand_as_sock_for_Client_connect",
            "location": 762,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "client": [
                    "List[str]",
                    "bool"
                ],
                "kwargs": [],
                "moxy": [
                    "bytes",
                    "mock.MagicMock",
                    "unittesmock.Mock"
                ],
                "self": []
            },
            "variables": {
                "main": [
                    "Set[str]",
                    "Dict[int, str]",
                    "str",
                    "List[Union[dict, Any]]",
                    "int"
                ],
                "sock_arg": [
                    "str",
                    "list",
                    "Dict[str, int]"
                ]
            }
        },
        "connect_kwargs_key_filename.merges_sources": {
            "name": "merges_sources",
            "location": 847,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "client": [],
                "expected": [
                    "bool",
                    "List[Dict]",
                    "Union[str, int]"
                ],
                "invoke": [
                    "bool",
                    "str",
                    "int",
                    "Optional[bool]",
                    "dict"
                ],
                "kwarg": [
                    "bool",
                    "str",
                    "int",
                    "Optional[bool]",
                    "dict"
                ],
                "kwargs": [],
                "self": [],
                "ssh": [
                    "bool",
                    "str",
                    "int",
                    "Optional[bool]",
                    "dict"
                ]
            },
            "variables": {
                "conf": [
                    "cincoconfig.config.Schema",
                    "cincoconfig.config.Config",
                    "baseplate.lib.config.EndpointConfiguration"
                ],
                "config_kwargs": [
                    "Dict[str, Union[Any, Any, Any]]",
                    "Dict[str, Dict[str, bool]]",
                    "dict",
                    "Dict[str, Union[Any, Any, Any, Any]]",
                    "omdlib.type_defs.Config",
                    "Dict[str, dict]"
                ],
                "connect_kwargs": [
                    "int",
                    "Dict[str, int]",
                    "Set[str]",
                    "bool",
                    "Dict[str, Union[Any, Any, Any, Any]]",
                    "List[str]"
                ],
                "kwargs": [
                    "str",
                    "vimiv.config.styles.Style"
                ]
            }
        },
        "close.has_no_required_args_and_returns_None": {
            "name": "has_no_required_args_and_returns_None",
            "location": 881,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "client": [
                    "str",
                    "int",
                    "bool"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "c": [
                    "Type[Iterator[Any]]",
                    "str",
                    "TextIO",
                    "float"
                ]
            }
        },
        "close.calls_SSHClient_close": {
            "name": "calls_SSHClient_close",
            "location": 886,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "client": [
                    "int",
                    "unittesmock.Mock"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "c": [
                    "str",
                    "List[bytes]",
                    "int",
                    "Callable[[bytes], bytes]",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "close.calls_agent_handler_close_if_enabled": {
            "name": "calls_agent_handler_close_if_enabled",
            "location": 894,
            "return": [
                ""
            ],
            "arguments": {
                "Handler": [
                    "mock.MagicMock"
                ],
                "args": [],
                "client": [
                    "str",
                    "bool",
                    "List[Tuple[int, str]]",
                    "Callable"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "c": [
                    "str",
                    "Dict[bytes, str]",
                    "Set[str]",
                    "OrderedDict[str, Any]"
                ]
            }
        },
        "close.short_circuits_if_not_connected": {
            "name": "short_circuits_if_not_connected",
            "location": 902,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "client": [
                    "Dict[str, Any]",
                    "List[str]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "c": [
                    "int",
                    "float"
                ]
            }
        },
        "close.class_works_as_a_closing_contextmanager": {
            "name": "class_works_as_a_closing_contextmanager",
            "location": 909,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "client": [
                    "int"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "create_session.calls_open_for_you": {
            "name": "calls_open_for_you",
            "location": 915,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "client": [
                    "bool",
                    "int",
                    "Optional[Dict]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "c": [
                    "Counter[Any]",
                    "str"
                ],
                "open": [
                    "Type[Iterator[Any]]",
                    "Tuple[int]",
                    "str",
                    "bytes",
                    "list"
                ],
                "transport": [
                    "int",
                    "dict",
                    "List[int]",
                    "List[List[int]]",
                    "str"
                ]
            }
        },
        "create_session.activates_paramiko_agent_forwarding_if_configured": {
            "name": "activates_paramiko_agent_forwarding_if_configured",
            "location": 923,
            "return": [
                ""
            ],
            "arguments": {
                "Handler": [
                    "int"
                ],
                "args": [],
                "client": [
                    "bool",
                    "str",
                    "List[Tuple[int, str]]",
                    "Callable"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "c": [
                    "dict",
                    "list",
                    "Tuple[Literal, Literal, Literal]",
                    "List[Dict[str, Any]]",
                    "str"
                ],
                "chan": [
                    "sqlite3.dbapi2.Connection",
                    "str",
                    "Dict[str, str]",
                    "Dict[str, float]",
                    "list",
                    "bool"
                ]
            }
        },
        "run.calls_open_for_you": {
            "name": "calls_open_for_you",
            "location": 935,
            "return": [
                ""
            ],
            "arguments": {
                "Remote": [
                    "bool",
                    "int",
                    "Optional[Dict]",
                    "List[int]",
                    "str"
                ],
                "args": [],
                "client": [
                    "bool",
                    "int",
                    "Optional[Dict]",
                    "List[int]",
                    "str"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "c": [
                    "frozenset[str]",
                    "list",
                    "set"
                ],
                "open": [
                    "Type[Iterator[Any]]",
                    "Tuple[int]",
                    "str",
                    "bytes",
                    "list"
                ]
            }
        },
        "run.passes_inline_env_to_Remote": {
            "name": "passes_inline_env_to_Remote",
            "location": 942,
            "return": [
                ""
            ],
            "arguments": {
                "Remote": [
                    "boto3.client",
                    "List[str]"
                ],
                "args": [],
                "client": [
                    "bool",
                    "str",
                    "int",
                    "Optional[Dict]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "run.calls_Remote_run_with_command_and_kwargs_and_returns_its_result": {
            "name": "calls_Remote_run_with_command_and_kwargs_and_returns_its_result",
            "location": 949,
            "return": [
                ""
            ],
            "arguments": {
                "Remote": [],
                "args": [],
                "client": [
                    "str",
                    "bool"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "c": [
                    "Generator[Any, None, None]",
                    "Counter[Any]",
                    "Iterator[Any]"
                ],
                "r1": [
                    "int",
                    "Dict[Any, int]",
                    "Dict[str, int]",
                    "six.moves.range"
                ],
                "r2": [
                    "Dict[str, str]",
                    "List[int]",
                    "six.moves.queue.Queue[Any]",
                    "Dict[str, Union[Any, Any]]",
                    "str",
                    "Counter[Any]",
                    "Dict[str, Union[Any, Any, Any, str]]",
                    "Dict[str, Any]"
                ],
                "remote": [
                    "str",
                    "Union[Literal, str]",
                    "Dict[str, Union[Any, Any]]",
                    "Dict[str, Union[int, str]]",
                    "Dict[str, Union[Any, Any, Any]]",
                    "mock.Mock"
                ],
                "sentinel": [
                    "str"
                ]
            }
        },
        "local.calls_invoke_Local_run": {
            "name": "calls_invoke_Local_run",
            "location": 973,
            "return": [
                ""
            ],
            "arguments": {
                "Local": [
                    "bool",
                    "Union[bool, str]"
                ],
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "sudo.calls_open_for_you": {
            "name": "calls_open_for_you",
            "location": 980,
            "return": [
                ""
            ],
            "arguments": {
                "Remote": [
                    "bool",
                    "int",
                    "Optional[Dict]",
                    "List[int]",
                    "str"
                ],
                "args": [],
                "client": [
                    "bool",
                    "int",
                    "Optional[Dict]",
                    "List[int]",
                    "str"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "c": [
                    "os.stat_result",
                    "os._wrap_close"
                ],
                "open": [
                    "Type[Iterator[Any]]",
                    "Tuple[int]",
                    "str",
                    "bytes",
                    "list"
                ]
            }
        },
        "sudo.passes_inline_env_to_Remote": {
            "name": "passes_inline_env_to_Remote",
            "location": 987,
            "return": [
                ""
            ],
            "arguments": {
                "Remote": [
                    "boto3.client",
                    "List[str]"
                ],
                "args": [],
                "client": [
                    "bool",
                    "str",
                    "int",
                    "Optional[Dict]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "sudo.basic_invocation": {
            "name": "basic_invocation",
            "location": 994,
            "return": [
                ""
            ],
            "arguments": {
                "Remote": [
                    "int"
                ],
                "args": [],
                "client": [
                    "bool",
                    "str",
                    "List[Tuple[int, str]]",
                    "Callable"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "cmd": [
                    "str",
                    "Dict[str, List[str]]",
                    "Tuple[str]"
                ],
                "cxn": [
                    "str",
                    "list",
                    "List[str]",
                    "dict"
                ],
                "expected": [
                    "float",
                    "str",
                    "Dict[str, Dict[str, Any]]",
                    "List[str]",
                    "Dict[str, Dict[str, str]]"
                ]
            }
        },
        "sudo.per_host_password_works_as_expected": {
            "name": "per_host_password_works_as_expected",
            "location": 1013,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "sftp.returns_result_of_client_open_sftp": {
            "name": "returns_result_of_client_open_sftp",
            "location": 1025,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "client": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "sentinel": [
                    "unittesmock.Mock",
                    "app.config.Config",
                    "pkrecv.config.Config"
                ]
            }
        },
        "sftp.lazily_caches_result": {
            "name": "lazily_caches_result",
            "location": 1032,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "client": [
                    "float",
                    "str"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "cxn": [
                    "int",
                    "list",
                    "str",
                    "Dict[int, str]",
                    "dict",
                    "Dict[str, int]"
                ],
                "err": [
                    "str",
                    "Set[str]",
                    "int"
                ],
                "first": [
                    "str",
                    "Tuple[str, str]",
                    "List[int]",
                    "list",
                    "Dict[str, Optional[float]]"
                ],
                "second": [
                    "str",
                    "Tuple[str, str]",
                    "List[int]",
                    "list",
                    "Dict[str, Optional[float]]"
                ],
                "sentinel1": [
                    "str"
                ],
                "sentinel2": [
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "get.calls_Transfer_get": {
            "name": "calls_Transfer_get",
            "location": 1045,
            "return": [
                ""
            ],
            "arguments": {
                "Transfer": [
                    "str",
                    "pyramid.config.Configurator"
                ],
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "c": [
                    "str",
                    "float",
                    "int",
                    "Dict[Any, str]"
                ]
            }
        },
        "put.calls_Transfer_put": {
            "name": "calls_Transfer_put",
            "location": 1054,
            "return": [
                ""
            ],
            "arguments": {
                "Transfer": [
                    "bool",
                    "int",
                    "List[str]",
                    "str",
                    "List[int]"
                ],
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "c": [
                    "int",
                    "bytearray",
                    "float",
                    "List[int]",
                    "slice",
                    "str"
                ]
            }
        },
        "forward_local._forward_local": {
            "name": "_forward_local",
            "location": 1065,
            "return": [
                ""
            ],
            "arguments": {
                "Client": [
                    "mock.MagicMock",
                    "unittesmock.Mock"
                ],
                "args": [],
                "kwargs": [],
                "mocket": [
                    "bytes",
                    "mock.MagicMock",
                    "unittesmock.Mock"
                ],
                "select": [
                    "set",
                    "int",
                    "str",
                    "bool"
                ],
                "self": []
            },
            "variables": {
                "channel": [
                    "str",
                    "Dict[str, str]",
                    "dict"
                ],
                "client": [],
                "data": [
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "Dict[int, List[str]]",
                    "List[Dict[str, Any]]",
                    "Dict[str, Union[int, str]]"
                ],
                "listener_exception": [
                    "Tuple[str, str]",
                    "str",
                    "Dict[str, Any]",
                    "Set[str]"
                ],
                "listener_sock": [
                    "str",
                    "Dict[str, Union[Any, str]]",
                    "Dict[str, Any]"
                ],
                "local_addr": [
                    "Dict[int, Dict[str, Any]]",
                    "Tuple[Literal, Literal, Literal]",
                    "str",
                    "List[str]"
                ],
                "local_host": [
                    "Dict[int, Any]",
                    "str",
                    "dict"
                ],
                "local_port": [
                    "int",
                    "Dict[str, Union[None, Any, str]]",
                    "List[str]",
                    "frozenset[str]",
                    "Type[str]"
                ],
                "obj": [
                    "str",
                    "dict",
                    "Optional[int]",
                    "Optional[List[str]]"
                ],
                "remote_host": [
                    "int",
                    "Dict[int, Any]",
                    "str",
                    "mock.MagicMock"
                ],
                "remote_port": [
                    "list",
                    "List[float]",
                    "Dict[str, int]",
                    "Counter[int]",
                    "Type[str]",
                    "defaultdict"
                ],
                "return_value": [
                    "str",
                    "Generator[Any, None, None]",
                    "Dict[Any, Union[int, str]]",
                    "Dict[str, List[Any]]",
                    "Dict[str, Any]",
                    "List[Dict[str, str]]"
                ],
                "transport": [
                    "int",
                    "routemaster.config.model.Gate",
                    "bytes",
                    "Dict[str, Union[Any, Any, Any]]",
                    "Dict[str, Dict[str, Any]]",
                    "List[Dict[str, Any]]",
                    "list"
                ],
                "tunnel_exception": [
                    "dict",
                    "Set[str]"
                ],
                "tunnel_sock": [
                    "str",
                    "Dict[str, Union[Any, str]]"
                ]
            }
        },
        "forward_local.forwards_local_port_to_remote_end": {
            "name": "forwards_local_port_to_remote_end",
            "location": 1130,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "forward_local.distinct_remote_port": {
            "name": "distinct_remote_port",
            "location": 1133,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "forward_local.non_localhost_listener": {
            "name": "non_localhost_listener",
            "location": 1136,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "forward_local.non_remote_localhost_connection": {
            "name": "non_remote_localhost_connection",
            "location": 1141,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "forward_local._thread_error": {
            "name": "_thread_error",
            "location": 1146,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "which": [
                    "int",
                    "str",
                    "dict",
                    "List[float]"
                ]
            },
            "variables": {
                "err": [
                    "str",
                    "Tuple[str, str, str, str]",
                    "Tuple[str, str]",
                    "ClassVar",
                    "Tuple[str, str, str, str, str]"
                ],
                "inner": [
                    "str",
                    "int"
                ]
            }
        },
        "forward_local.tunnel_errors_bubble_up": {
            "name": "tunnel_errors_bubble_up",
            "location": 1170,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "forward_local.tunnel_manager_errors_bubble_up": {
            "name": "tunnel_manager_errors_bubble_up",
            "location": 1173,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "forward_local.multiple_tunnels_can_be_open_at_once": {
            "name": "multiple_tunnels_can_be_open_at_once",
            "location": 1178,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "forward_remote._forward_remote": {
            "name": "_forward_remote",
            "location": 1185,
            "return": [
                ""
            ],
            "arguments": {
                "Client": [
                    "str",
                    "bool",
                    "int",
                    "Optional[Dict]",
                    "List[int]"
                ],
                "args": [],
                "kwargs": [],
                "mocket": [
                    "mock.MagicMock"
                ],
                "select": [
                    "set",
                    "int",
                    "str",
                    "bool"
                ],
                "self": []
            },
            "variables": {
                "call": [
                    "List[Dict[str, Any]]"
                ],
                "chan": [
                    "Dict[str, Dict[str, Any]]",
                    "list",
                    "unittesmock.Mock",
                    "str"
                ],
                "cxn": [
                    "int",
                    "float",
                    "List[str]",
                    "set",
                    "dict",
                    "List[int]",
                    "list"
                ],
                "local_host": [
                    "str",
                    "Type[str]",
                    "Dict[str, str]",
                    "float"
                ],
                "local_port": [
                    "int",
                    "Type[str]",
                    "Type[range]",
                    "Dict[str, str]",
                    "str"
                ],
                "remote_host": [
                    "Dict[str, str]",
                    "str",
                    "dict"
                ],
                "remote_port": [
                    "str",
                    "Set[str]",
                    "Tuple[Any, Any, Any]",
                    "Dict[Any, Union[int, str]]",
                    "Dict[Any, float]",
                    "int"
                ],
                "tun_socket": [
                    "str",
                    "Dict[str, Union[Any, Any]]",
                    "Dict[str, Dict[str, Any]]"
                ],
                "tup": [
                    "List[str]",
                    "str",
                    "float"
                ]
            }
        },
        "forward_remote.forwards_remote_port_to_local_end": {
            "name": "forwards_remote_port_to_local_end",
            "location": 1234,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "forward_remote.distinct_local_port": {
            "name": "distinct_local_port",
            "location": 1237,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "forward_remote.non_localhost_connections": {
            "name": "non_localhost_connections",
            "location": 1240,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "forward_remote.remote_non_localhost_listener": {
            "name": "remote_non_localhost_listener",
            "location": 1245,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "forward_remote.multiple_tunnels_can_be_open_at_once": {
            "name": "multiple_tunnels_can_be_open_at_once",
            "location": 1252,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "forward_remote.tunnel_errors_bubble_up": {
            "name": "tunnel_errors_bubble_up",
            "location": 1255,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "forward_remote.listener_errors_bubble_up": {
            "name": "listener_errors_bubble_up",
            "location": 1258,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "global": {
            "remote_path": [
                "str",
                "list",
                "Type[Sequence[str]]",
                "Tuple[str]",
                "tuple",
                "int"
            ]
        }
    },
    "fabric-2.5.0/tests/executor.py": {
        "_get_executor": {
            "name": "_get_executor",
            "location": 11,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "args": [],
                "hosts_flag": [
                    "Optional[str]",
                    "bool",
                    "Optional[bool]",
                    "Optional[float]"
                ],
                "hosts_kwarg": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "int",
                    "Optional[bytes]"
                ],
                "kwargs": [],
                "post": [
                    "Optional[str]",
                    "Optional[Tuple[int, int]]",
                    "bool"
                ],
                "remainder": [
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            },
            "variables": {
                "body": [
                    "set",
                    "ValueError",
                    "mindgraph.graph.Task",
                    "Dict[Any, int]",
                    "deque[Any]",
                    "list"
                ],
                "coll": [
                    "List[str]",
                    "str",
                    "list"
                ],
                "core_args": [
                    "List[str]",
                    "dict",
                    "Dict[Any, Tuple[str, Any]]"
                ],
                "hosts": [
                    "str",
                    "List[str]",
                    "dict"
                ],
                "post_tasks": [
                    "list",
                    "Dict[str, Union[Any, Any, Any]]",
                    "tuple",
                    "golem.task.taskbase.Task",
                    "asyncio.tasks.Task[Any]",
                    "Counter[Any]"
                ],
                "remainder": [
                    "click.core.Context",
                    "list",
                    "unittesmock.Mock",
                    "MutableMapping[Any, Any]",
                    "str"
                ],
                "task": [
                    "Dict[str, Union[Any, Any]]",
                    "Dict[str, Any]"
                ],
                "value": [
                    "property",
                    "Dict[int, str]",
                    "float",
                    "List[Dict[str, Any]]",
                    "int",
                    "Pattern[str]",
                    "str",
                    "Exception"
                ]
            }
        },
        "_execute": {
            "name": "_execute",
            "location": 26,
            "return": [
                "str",
                "List[str]",
                "bytes"
            ],
            "arguments": {
                "args": [],
                "kwargs": []
            },
            "variables": {
                "executor": [
                    "list",
                    "dict",
                    "float"
                ],
                "invocation": [
                    "Set[str]",
                    "int",
                    "Dict[str, Union[int, str]]",
                    "List[str]",
                    "str",
                    "bool"
                ],
                "task": [
                    "Dict[str, Any]",
                    "dict",
                    "Dict[str, Tuple[Any, Any]]",
                    "Dict[str, str]"
                ]
            }
        },
        "hosts_flag_empty.no_parameterization_is_done": {
            "name": "no_parameterization_is_done",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "task": [
                    "Dict[str, Any]",
                    "int",
                    "List[Dict[str, Any]]",
                    "Dict[str, Union[int, str]]",
                    "asyncio.tasks.Task[Any]"
                ]
            }
        },
        "hosts_flag_set.parameterization_per_host": {
            "name": "parameterization_per_host",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "task": [
                    "list",
                    "Dict[str, Any]",
                    "Dict[str, Union[int, str]]",
                    "dict"
                ]
            }
        },
        "hosts_flag_set.post_tasks_happen_once_only": {
            "name": "post_tasks_happen_once_only",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "post": [
                    "str",
                    "list"
                ],
                "task": [
                    "int",
                    "Type[tuple]",
                    "Dict[str, Any]",
                    "str",
                    "set",
                    "list"
                ]
            }
        },
        "hosts_attribute_on_task_objects.parameterization_per_host": {
            "name": "parameterization_per_host",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "task": [
                    "asyncio.tasks.Task[Any]",
                    "Dict[str, Any]"
                ]
            }
        },
        "hosts_attribute_on_task_objects.post_tasks_happen_once_only": {
            "name": "post_tasks_happen_once_only",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "post": [
                    "dict",
                    "str",
                    "list",
                    "snorkel.classification.task.Task"
                ],
                "task": [
                    "list",
                    "dict",
                    "Dict[str, Type[Any]]"
                ]
            }
        },
        "hosts_attribute_on_task_objects.may_give_Connection_kwargs_as_values": {
            "name": "may_give_Connection_kwargs_as_values",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "expected": [
                    "List[str]",
                    "list",
                    "List[Tuple[str, str]]",
                    "tuple",
                    "int",
                    "Tuple[Union[Any, Any]]",
                    "frozenset[str]"
                ],
                "task": [
                    "deque[Any]",
                    "list",
                    "asyncio.tasks.Task[None]"
                ]
            }
        },
        "Invoke_task_objects_without_hosts_attribute_still_work.execution_happens_normally_without_parameterization": {
            "name": "execution_happens_normally_without_parameterization",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "body": [
                    "str",
                    "list",
                    "List[Tuple[str, str]]"
                ],
                "coll": [
                    "str",
                    "Dict[str, str]",
                    "Mapping",
                    "frozenset[int]",
                    "dict"
                ],
                "core_args": [
                    "List[str]",
                    "dict",
                    "Dict[str, Union[Any, Any]]",
                    "List[int]",
                    "Dict[str, Optional[float]]"
                ],
                "hosts": [
                    "apistar.exceptions.ErrorMessage",
                    "str",
                    "Dict[str, str]",
                    "dict",
                    "Dict[str, Type[Any]]"
                ]
            }
        },
        "Invoke_task_objects_without_hosts_attribute_still_work.hosts_flag_still_triggers_parameterization": {
            "name": "hosts_flag_still_triggers_parameterization",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "body": [
                    "str",
                    "list",
                    "List[Tuple[str, str]]"
                ],
                "coll": [
                    "str",
                    "Dict[str, str]",
                    "Mapping",
                    "frozenset[int]",
                    "dict"
                ],
                "core_args": [
                    "List[str]",
                    "dict",
                    "Dict[str, Union[Any, Any]]",
                    "List[int]",
                    "Dict[str, Optional[float]]"
                ],
                "hosts": [
                    "apistar.exceptions.ErrorMessage",
                    "Dict[str, Type[Any]]"
                ],
                "value": [
                    "property",
                    "int",
                    "Dict[int, str]",
                    "float",
                    "str",
                    "Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]"
                ]
            }
        },
        "hosts_flag_vs_attributes.flag_wins": {
            "name": "flag_wins",
            "location": 103,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "task": [
                    "mindgraph.graph.Task",
                    "dict",
                    "reminders.task.Task",
                    "Dict[int, str]",
                    "list",
                    "asyncio.tasks.Task[Any]"
                ]
            }
        },
        "remainder.raises_NothingToDo_when_no_hosts": {
            "name": "raises_NothingToDo_when_no_hosts",
            "location": 111,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "remainder.creates_anonymous_call_per_host": {
            "name": "creates_anonymous_call_per_host",
            "location": 115,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "dedupe.deduplication_not_performed": {
            "name": "deduplication_not_performed",
            "location": 122,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "task": [
                    "mindgraph.graph.Task",
                    "Dict[str, str]",
                    "reminders.task.Task",
                    "str",
                    "Pattern[Any]",
                    "dict",
                    "Set[str]"
                ]
            }
        },
        "parameterize.always_generates_ConnectionCall_with_host_attr": {
            "name": "always_generates_ConnectionCall_with_host_attr",
            "location": 127,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "calls": [
                    "list"
                ],
                "executor": [
                    "int",
                    "dict"
                ],
                "task": [
                    "int",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "global": {}
    },
    "fabric-2.5.0/tests/group.py": {
        "tester": {
            "name": "tester",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "a": [
                    "bool",
                    "Callable[[], None]",
                    "KT",
                    "list",
                    "str"
                ],
                "args": [],
                "k": [
                    "bool",
                    "Callable[[], None]",
                    "KT",
                    "list",
                    "str"
                ],
                "kwargs": []
            },
            "variables": {
                "car": [
                    "int",
                    "str",
                    "float",
                    "Dict[str, Union[dict, Any]]"
                ],
                "cdr": [
                    "int",
                    "str",
                    "float",
                    "Dict[str, Union[dict, Any]]"
                ],
                "predecessors": [
                    "int",
                    "dict",
                    "List[int]",
                    "List[List[int]]",
                    "str"
                ],
                "successors": [
                    "int",
                    "dict",
                    "List[int]",
                    "List[List[int]]",
                    "str"
                ]
            }
        },
        "_make_serial_tester": {
            "name": "_make_serial_tester",
            "location": 66,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "cxns": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "index": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "kwargs": []
            },
            "variables": {
                "args": [
                    "str",
                    "property",
                    "tuple",
                    "list",
                    "Dict[str, Any]",
                    "List[str]",
                    "Type[tuple]"
                ],
                "kwargs": [
                    "dict",
                    "Mapping",
                    "Mapping[str, Any]",
                    "Dict[str, int]",
                    "Dict[str, Any]",
                    "Mapping[Any, Any]",
                    "Dict[str, Literal]"
                ]
            }
        },
        "init.may_be_empty": {
            "name": "may_be_empty",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "init.takes_splat_arg_of_host_strings": {
            "name": "takes_splat_arg_of_host_strings",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "g": [
                    "str",
                    "int",
                    "list"
                ]
            }
        },
        "init.takes_splat_kwargs_and_passes_them_to_Connections": {
            "name": "takes_splat_kwargs_and_passes_them_to_Connections",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "g": [
                    "str",
                    "Iterator[int]",
                    "Dict[str, int]"
                ]
            }
        },
        "from_connections.inits_from_iterable_of_Connections": {
            "name": "inits_from_iterable_of_Connections",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "g": [
                    "List[str]",
                    "int",
                    "dict",
                    "Dict[str, Tuple[Any, Any, Any, int]]"
                ]
            }
        },
        "run.not_implemented_in_base_class": {
            "name": "not_implemented_in_base_class",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "close_and_contextmanager_behavior.close_closes_all_member_connections": {
            "name": "close_closes_all_member_connections",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "cxns": [
                    "dict",
                    "str",
                    "Dict[str, Union[int, str]]",
                    "set"
                ],
                "g": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "close_and_contextmanager_behavior.contextmanager_behavior_works_like_Connection": {
            "name": "contextmanager_behavior_works_like_Connection",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "cxns": [
                    "dict",
                    "str",
                    "Dict[str, Union[int, str]]",
                    "set"
                ],
                "g": [
                    "List[str]",
                    "int",
                    "str",
                    "Set[int]",
                    "Dict[int, Tuple[Any, Any]]",
                    "Tuple[str, str, str, str, str, str, str, str]",
                    "Tuple[str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str]"
                ]
            }
        },
        "Group_.acts_like_an_iterable_of_Connections": {
            "name": "acts_like_an_iterable_of_Connections",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "g": [
                    "list",
                    "Type[str]",
                    "List[str]",
                    "str",
                    "Type[range]"
                ]
            }
        },
        "run.executes_arguments_on_contents_run_serially": {
            "name": "executes_arguments_on_contents_run_serially",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "args": [],
                "cxns": [
                    "Dict[int, str]",
                    "Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]",
                    "Set[str]",
                    "List[str]",
                    "Dict[str, Union[int, str]]"
                ],
                "g": [
                    "sqlite3.dbapi2.Connection"
                ],
                "kwargs": [],
                "run": [
                    "int",
                    "Tuple[int, int]"
                ],
                "side_effect": []
            }
        },
        "run.errors_in_execution_capture_and_continue_til_end": {
            "name": "errors_in_execution_capture_and_continue_til_end",
            "location": 98,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "cxns": [
                    "dict",
                    "Dict[str, Any]",
                    "list",
                    "List[Dict[str, Any]]",
                    "str"
                ],
                "expected": [
                    "dict",
                    "List[str]",
                    "Dict[str, Union[dict, Any]]",
                    "Optional[str]",
                    "OrderedDict[str, Union[Any, Any]]",
                    "Tuple[Literal, Literal, Literal]",
                    "Dict[str, Union[Any, str]]",
                    "Type[List[Any]]"
                ],
                "failed": [
                    "Dict[str, Union[dict, Any, Any, Any]]",
                    "Dict[str, Union[Any, int, str]]",
                    "str",
                    "Dict[str, str]",
                    "List[Dict[str, Any]]"
                ],
                "g": [
                    "sqlite3.dbapi2.Connection",
                    "list"
                ],
                "onoz": [],
                "result": [
                    "dict",
                    "Union[None, dict, List[Any], bool, float, int, str]"
                ],
                "succeeded": [
                    "str",
                    "List[Dict[str, Any]]",
                    "List[str]"
                ]
            }
        },
        "run.returns_results_mapping": {
            "name": "returns_results_mapping",
            "location": 238,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "cxns": [
                    "list",
                    "int",
                    "Dict[str, List[Any]]",
                    "dict"
                ],
                "expected": [
                    "List[str]",
                    "bool",
                    "int",
                    "dict",
                    "list",
                    "str"
                ],
                "g": [
                    "str",
                    "List[str]",
                    "list"
                ],
                "result": [
                    "Dict[str, str]",
                    "dict",
                    "str",
                    "Generator[Any, None, None]"
                ]
            }
        },
        "run.executes_arguments_on_contents_run_via_threading": {
            "name": "executes_arguments_on_contents_run_via_threading",
            "location": 144,
            "return": [
                ""
            ],
            "arguments": {
                "Queue": [
                    "List[str]",
                    "unittesmock.Mock"
                ],
                "Thread": [
                    "str",
                    "mock.Mock",
                    "dict",
                    "bool"
                ],
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "err": [
                    "str",
                    "Dict[str, str]",
                    "List[str]",
                    "Dict[str, Any]",
                    "dict",
                    "Dict[str, Type[Any]]"
                ],
                "expected": [
                    "Dict[int, Any]",
                    "Dict[str, Any]",
                    "dict",
                    "OrderedDict[str, List[str]]",
                    "Dict[str, str]",
                    "float",
                    "list"
                ],
                "g": [
                    "int",
                    "Counter",
                    "float",
                    "str"
                ],
                "instantiations": [
                    "int",
                    "Set[str]",
                    "List[str]",
                    "list",
                    "Tuple[Literal, Literal]",
                    "float"
                ],
                "queue": [
                    "str",
                    "Dict[str, Type[Any]]"
                ]
            }
        },
        "run.queue_used_to_return_results": {
            "name": "queue_used_to_return_results",
            "location": 184,
            "return": [
                ""
            ],
            "arguments": {
                "Queue": [
                    "List[int]",
                    "float",
                    "Sequence[Dict[str, str]]"
                ],
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "cxns": [
                    "list",
                    "List[str]",
                    "unittesmock.Mock",
                    "int"
                ],
                "expected": [
                    "List[int]",
                    "List[List[str]]",
                    "Set[str]",
                    "List[Dict[str, Any]]",
                    "int",
                    "str",
                    "List[Type[Any]]",
                    "dict"
                ],
                "fakes": [
                    "str",
                    "List[str]"
                ],
                "g": [
                    "sqlite3.dbapi2.Connection",
                    "list"
                ],
                "gets": [
                    "Tuple[Literal, Literal]",
                    "int",
                    "list"
                ],
                "puts": [
                    "list",
                    "List[str]",
                    "List[int]"
                ],
                "queue": [
                    "str",
                    "Dict[str, Union[Any, Any]]"
                ],
                "results": [
                    "Dict[str, Any]",
                    "Tuple[Literal, Literal, Literal]",
                    "dict"
                ]
            }
        },
        "run.bubbles_up_errors_within_threads": {
            "name": "bubbles_up_errors_within_threads",
            "location": 206,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "cxns": [
                    "list",
                    "unittesmock.Mock",
                    "Dict[int, Dict[str, Any]]"
                ],
                "expected": [
                    "dict",
                    "List[str]",
                    "Dict[str, Union[dict, Any]]",
                    "Optional[str]",
                    "OrderedDict[str, Union[Any, Any]]",
                    "Tuple[Literal, Literal, Literal]",
                    "Dict[str, Union[Any, str]]",
                    "Type[List[Any]]"
                ],
                "failed": [
                    "Dict[str, Union[dict, Any, Any, Any]]",
                    "Dict[str, Union[Any, int, str]]",
                    "str",
                    "Dict[str, str]",
                    "List[Dict[str, Any]]"
                ],
                "g": [
                    "memoryview"
                ],
                "onoz": [],
                "result": [
                    "dict",
                    "Union[None, dict, List[Any], bool, float, int, str]"
                ],
                "succeeded": [
                    "str",
                    "List[Dict[str, Any]]",
                    "List[str]"
                ]
            }
        },
        "ThreadingGroup_.setup": {
            "name": "setup",
            "location": 136,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "args": [
                    "Dict[str, Any]"
                ],
                "cxns": [
                    "int",
                    "Tuple[Literal, Literal]",
                    "float",
                    "str"
                ],
                "kwargs": [
                    "List[List[Any]]",
                    "bool",
                    "list",
                    "Counter[Any]",
                    "str"
                ]
            }
        },
        "global": {}
    },
    "fabric-2.5.0/tests/main.py": {
        "core_program_behavior.version_output_contains_our_name_plus_deps": {
            "name": "version_output_contains_our_name_plus_deps",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "core_program_behavior.help_output_says_fab": {
            "name": "help_output_says_fab",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "core_program_behavior.exposes_hosts_flag_in_help": {
            "name": "exposes_hosts_flag_in_help",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "core_program_behavior.executes_remainder_as_anonymous_task": {
            "name": "executes_remainder_as_anonymous_task",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "remote": [
                    "str"
                ],
                "self": []
            },
            "variables": {}
        },
        "core_program_behavior.uses_FABRIC_env_prefix": {
            "name": "uses_FABRIC_env_prefix",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "environ": [
                    "int",
                    "bool",
                    "bytes"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "core_program_behavior.basic_pre_and_post_tasks_still_work": {
            "name": "basic_pre_and_post_tasks_still_work",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "filenames.loads_fabfile_not_tasks": {
            "name": "loads_fabfile_not_tasks",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "filenames.loads_fabric_config_files_not_invoke_ones": {
            "name": "loads_fabric_config_files_not_invoke_ones",
            "location": 103,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "runtime_ssh_config_path._run": {
            "name": "_run",
            "location": 111,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "file_": [
                    "str",
                    "list"
                ],
                "flag": [
                    "str",
                    "list"
                ],
                "kwargs": [],
                "self": [],
                "tasks": [
                    "str",
                    "list"
                ]
            },
            "variables": {
                "cmd": [
                    "str",
                    "List[List[Any]]",
                    "Dict[str, str]",
                    "Optional[str]",
                    "Callable(os.path.join)[..., Any][[[Named(a, Union[_PathLike[str], str]), Variable(Union[_PathLike[str], str])], str][Any, Any]]"
                ]
            }
        },
        "runtime_ssh_config_path.capital_F_flag_specifies_runtime_ssh_config_file": {
            "name": "capital_F_flag_specifies_runtime_ssh_config_file",
            "location": 123,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "runtime_ssh_config_path.long_form_flag_also_works": {
            "name": "long_form_flag_also_works",
            "location": 126,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "runtime_ssh_config_path.IOErrors_if_given_missing_file": {
            "name": "IOErrors_if_given_missing_file",
            "location": 130,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "runtime_ssh_config_path.config_only_loaded_once_per_session": {
            "name": "config_only_loaded_once_per_session",
            "location": 134,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "method": [
                    "str",
                    "bytes",
                    "dict",
                    "List[str]"
                ],
                "self": []
            },
            "variables": {}
        },
        "hosts_flag_parameterizes_tasks.single_string_is_single_host_and_single_exec": {
            "name": "single_string_is_single_host_and_single_exec",
            "location": 149,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "remote": [
                    "str",
                    "bytes",
                    "Iterable[str]"
                ],
                "self": []
            },
            "variables": {}
        },
        "hosts_flag_parameterizes_tasks.comma_separated_string_is_multiple_hosts": {
            "name": "comma_separated_string_is_multiple_hosts",
            "location": 157,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "remote": [
                    "libcloud.common.base.BaseDriver",
                    "int",
                    "dict",
                    "Dict[str, Any]",
                    "str"
                ],
                "self": []
            },
            "variables": {}
        },
        "hosts_flag_parameterizes_tasks.multiple_hosts_works_with_remainder_too": {
            "name": "multiple_hosts_works_with_remainder_too",
            "location": 164,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "remote": [
                    "Dict[str, Any]",
                    "golem_messages.message.base.Message",
                    "Dict[Hashable, Any]",
                    "int"
                ],
                "self": []
            },
            "variables": {}
        },
        "hosts_flag_parameterizes_tasks.host_string_shorthand_is_passed_through": {
            "name": "host_string_shorthand_is_passed_through",
            "location": 170,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "remote": [
                    "str",
                    "int",
                    "bool",
                    "dict"
                ],
                "self": []
            },
            "variables": {}
        },
        "hosts_flag_parameterizes_tasks.config_mutation_not_preserved": {
            "name": "config_mutation_not_preserved",
            "location": 182,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "hosts_flag_parameterizes_tasks.pre_post_tasks_are_not_parameterized_across_hosts": {
            "name": "pre_post_tasks_are_not_parameterized_across_hosts",
            "location": 189,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "expected": [
                    "str",
                    "Type[List[Any]]",
                    "Dict[str, str]"
                ],
                "output": [
                    "str",
                    "Tuple[Dict, int]"
                ]
            }
        },
        "hosts_task_arg_parameterizes_tasks.single_string_is_single_exec": {
            "name": "single_string_is_single_exec",
            "location": 210,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "remote": [
                    "str",
                    "bytes",
                    "Iterable[str]"
                ],
                "self": []
            },
            "variables": {}
        },
        "hosts_task_arg_parameterizes_tasks.multiple_strings_is_multiple_host_args": {
            "name": "multiple_strings_is_multiple_host_args",
            "location": 215,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "remote": [
                    "Mapping[str, Any]",
                    "Dict[str, Any]"
                ],
                "self": []
            },
            "variables": {}
        },
        "hosts_task_arg_parameterizes_tasks.host_string_shorthand_works_ok": {
            "name": "host_string_shorthand_works_ok",
            "location": 222,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "remote": [
                    "str",
                    "bool"
                ],
                "self": []
            },
            "variables": {}
        },
        "hosts_task_arg_parameterizes_tasks.may_give_Connection_init_kwarg_dicts": {
            "name": "may_give_Connection_init_kwarg_dicts",
            "location": 227,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "remote": [
                    "int",
                    "Dict[str, Any]"
                ],
                "self": []
            },
            "variables": {}
        },
        "hosts_task_arg_parameterizes_tasks.may_give_mixed_value_types": {
            "name": "may_give_mixed_value_types",
            "location": 235,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "remote": [
                    "Mapping[str, Any]"
                ],
                "self": []
            },
            "variables": {}
        },
        "no_hosts_flag_or_task_arg.calls_task_once_with_invoke_context": {
            "name": "calls_task_once_with_invoke_context",
            "location": 244,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "no_hosts_flag_or_task_arg.vanilla_Invoke_task_works_too": {
            "name": "vanilla_Invoke_task_works_too",
            "location": 248,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "no_hosts_flag_or_task_arg.generates_exception_if_combined_with_remainder": {
            "name": "generates_exception_if_combined_with_remainder",
            "location": 253,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "no_hosts_flag_or_task_arg.invokelike_multitask_invocation_preserves_config_mutation": {
            "name": "invokelike_multitask_invocation_preserves_config_mutation",
            "location": 256,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "connect_timeout.dash_t_supplies_default_connect_timeout": {
            "name": "dash_t_supplies_default_connect_timeout",
            "location": 263,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "connect_timeout.double_dash_connect_timeout_also_works": {
            "name": "double_dash_connect_timeout_also_works",
            "location": 267,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "runtime_identity_file.dash_i_supplies_default_connect_kwarg_key_filename": {
            "name": "dash_i_supplies_default_connect_kwarg_key_filename",
            "location": 274,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "runtime_identity_file.double_dash_identity_also_works": {
            "name": "double_dash_identity_also_works",
            "location": 282,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "runtime_identity_file.may_be_given_multiple_times": {
            "name": "may_be_given_multiple_times",
            "location": 288,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "secrets_prompts._expect_prompt": {
            "name": "_expect_prompt",
            "location": 296,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "flag": [
                    "str",
                    "dict",
                    "Hashable"
                ],
                "getpass": [
                    "bool",
                    "str",
                    "int",
                    "Callable",
                    "dict"
                ],
                "key": [
                    "str",
                    "dict",
                    "Hashable"
                ],
                "kwargs": [],
                "prompt": [
                    "dict",
                    "str",
                    "bytes"
                ],
                "self": [],
                "value": [
                    "str"
                ]
            },
            "variables": {
                "cmd": [
                    "str",
                    "Pattern[str]",
                    "int"
                ],
                "return_value": [
                    "Dict[str, Dict[str, Any]]",
                    "Dict[str, Union[Any, Any, Any]]",
                    "List[str]",
                    "List[Dict[str, Any]]",
                    "List[Dict[str, str]]",
                    "str"
                ]
            }
        },
        "secrets_prompts.password_prompt_updates_connect_kwargs": {
            "name": "password_prompt_updates_connect_kwargs",
            "location": 305,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "secrets_prompts.passphrase_prompt_updates_connect_kwargs": {
            "name": "passphrase_prompt_updates_connect_kwargs",
            "location": 313,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "configuration_updating_and_merging.key_filename_can_be_set_via_non_override_config_levels": {
            "name": "key_filename_can_be_set_via_non_override_config_levels",
            "location": 322,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "configuration_updating_and_merging.cli_identity_still_overrides_when_non_empty": {
            "name": "cli_identity_still_overrides_when_non_empty",
            "location": 330,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "completion.complete_flag_does_not_trigger_remainder_only_behavior": {
            "name": "complete_flag_does_not_trigger_remainder_only_behavior",
            "location": 338,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "output": [
                    "str",
                    "dict",
                    "list",
                    "List[str]"
                ]
            }
        },
        "main.python_dash_m_acts_like_fab": {
            "name": "python_dash_m_acts_like_fab",
            "location": 354,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "capsys": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "expected_output": [
                    "str",
                    "bytes",
                    "Dict[str, Set[str]]"
                ],
                "output": [
                    "str",
                    "Tuple[Literal, Literal]",
                    "dict",
                    "Generator[Any, None, None]",
                    "bytes"
                ]
            }
        },
        "global": {}
    },
    "fabric-2.5.0/tests/runners.py": {
        "_Connection": {
            "name": "_Connection",
            "location": 19,
            "return": [
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": []
            },
            "variables": {}
        },
        "_runner": {
            "name": "_runner",
            "location": 24,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": []
            },
            "variables": {}
        },
        "_OopsRemote.wait": {
            "name": "wait",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "run.calls_expected_paramiko_bits": {
            "name": "calls_expected_paramiko_bits",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "remote": [
                    "str",
                    "Type"
                ],
                "self": []
            },
            "variables": {}
        },
        "run.writes_remote_streams_to_local_streams": {
            "name": "writes_remote_streams_to_local_streams",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "remote": [
                    "str",
                    "int"
                ],
                "self": []
            },
            "variables": {
                "fakeout": [
                    "str",
                    "Tuple[str, str]"
                ]
            }
        },
        "run.pty_True_uses_paramiko_get_pty": {
            "name": "pty_True_uses_paramiko_get_pty",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "remote": [
                    "str",
                    "IO[Any]",
                    "Union[int, float]",
                    "int"
                ],
                "self": []
            },
            "variables": {
                "chan": [
                    "int",
                    "str"
                ],
                "cols": [
                    "int",
                    "Dict[str, str]",
                    "float"
                ],
                "rows": [
                    "int",
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "float"
                ]
            }
        },
        "run.return_value_is_Result_subclass_exposing_cxn_used": {
            "name": "return_value_is_Result_subclass_exposing_cxn_used",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "remote": [
                    "bool",
                    "bytes",
                    "int",
                    "Callable[[], bytes]"
                ],
                "self": []
            },
            "variables": {
                "c": [
                    "List[int]",
                    "Counter[Any]",
                    "dict",
                    "Generator[Any, None, None]"
                ],
                "result": [
                    "Dict[str, Union[int, str]]",
                    "click.testing.Result",
                    "DefaultDict[Any, dict]"
                ]
            }
        },
        "run.channel_is_closed_normally": {
            "name": "channel_is_closed_normally",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "remote": [
                    "int",
                    "str"
                ],
                "self": []
            },
            "variables": {
                "chan": [
                    "dict",
                    "List[str]",
                    "DefaultDict[Any, List[Any]]",
                    "bytes"
                ]
            }
        },
        "run.channel_is_closed_on_body_exceptions": {
            "name": "channel_is_closed_on_body_exceptions",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "remote": [
                    "float",
                    "bytes",
                    "int",
                    "List[Tuple[int, int]]",
                    "str"
                ],
                "self": []
            },
            "variables": {
                "chan": [
                    "unittesmock.Mock",
                    "Dict[int, Dict[str, Any]]"
                ],
                "r": [
                    "str",
                    "Dict[str, str]",
                    "dict",
                    "List[int]"
                ]
            }
        },
        "run.oops": {
            "name": "oops",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "run.channel_close_skipped_when_channel_not_even_made": {
            "name": "channel_close_skipped_when_channel_not_even_made",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "create_session": [
                    "str",
                    "Dict[str, Any]",
                    "Dict[bytes, bytes]",
                    "Type[str]",
                    "Set[str]",
                    "List[Tuple[str, str]]"
                ],
                "cxn": [
                    "grpy.repo.base.Connection",
                    "unittesmock.Mock"
                ]
            }
        },
        "start.sends_env_to_paramiko_update_environment_by_default": {
            "name": "sends_env_to_paramiko_update_environment_by_default",
            "location": 123,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "remote": [
                    "str",
                    "Tuple[int, int]",
                    "int",
                    "bool"
                ],
                "self": []
            },
            "variables": {
                "chan": [
                    "str",
                    "dict",
                    "int",
                    "bytes",
                    "Callable"
                ]
            }
        },
        "start.uses_export_prefixing_when_inline_env_is_True": {
            "name": "uses_export_prefixing_when_inline_env_is_True",
            "location": 128,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "remote": [
                    "str",
                    "int",
                    "bytes",
                    "bool"
                ],
                "self": []
            },
            "variables": {
                "chan": [
                    "bool",
                    "int",
                    "str",
                    "bytes",
                    "set",
                    "Dict[str, str]",
                    "float"
                ],
                "r": [
                    "str",
                    "set",
                    "dict",
                    "Match[Any]",
                    "Dict[Any, List[float]]",
                    "Union[Literal, str]"
                ]
            }
        },
        "Remote_.needs_handle_on_a_Connection": {
            "name": "needs_handle_on_a_Connection",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "c": [
                    "dict",
                    "List[Union[Any, int]]",
                    "int"
                ]
            }
        },
        "Remote_.kill_closes_the_channel": {
            "name": "kill_closes_the_channel",
            "location": 136,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "channel": [
                    "tests.mock.zwave.MockValue",
                    "mode.utils.mocks.Mock"
                ],
                "runner": [
                    "Tuple[List[str], Tuple[Literal, Literal], List[str]]"
                ]
            }
        },
        "global": {
            "CMD": [
                "str",
                "int"
            ]
        }
    },
    "fabric-2.5.0/tests/task.py": {
        "_dummy": {
            "name": "_dummy",
            "location": 98,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "c": [
                    "str",
                    "Tuple[str]"
                ],
                "kwargs": []
            },
            "variables": {}
        },
        "Task_.body": {
            "name": "body",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "c": [
                    "Iterable[T]",
                    "dict",
                    "bool",
                    "int"
                ],
                "kwargs": [],
                "parts": [
                    "Iterable[T]",
                    "dict",
                    "bool",
                    "int"
                ],
                "self": []
            },
            "variables": {}
        },
        "Task_.accepts_Invoke_level_init_kwargs": {
            "name": "accepts_Invoke_level_init_kwargs",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "t": [
                    "str"
                ]
            }
        },
        "Task_.allows_hosts_kwarg": {
            "name": "allows_hosts_kwarg",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "hosts_kwarg.mytask": {
            "name": "mytask",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "c": [
                    "str",
                    "Tuple[str]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "hosts_kwarg._run": {
            "name": "_run",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "hosts": [
                    "int",
                    "str"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "hosts_kwarg.values_may_be_connection_first_posarg_strings": {
            "name": "values_may_be_connection_first_posarg_strings",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "hosts_kwarg.values_may_be_Connection_constructor_kwarg_dicts": {
            "name": "values_may_be_Connection_constructor_kwarg_dicts",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "hosts_kwarg.values_may_be_mixed": {
            "name": "values_may_be_mixed",
            "location": 94,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "task_.body": {
            "name": "body",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "c": [
                    "Iterable[T]",
                    "dict",
                    "bool",
                    "int"
                ],
                "kwargs": [],
                "parts": [
                    "Iterable[T]",
                    "dict",
                    "bool",
                    "int"
                ],
                "self": []
            },
            "variables": {}
        },
        "task_.accepts_Invoke_level_kwargs": {
            "name": "accepts_Invoke_level_kwargs",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "t": [
                    "str"
                ]
            }
        },
        "task_.returns_Fabric_level_Task_instance": {
            "name": "returns_Fabric_level_Task_instance",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "task_.does_not_touch_klass_kwarg_if_explicitly_given": {
            "name": "does_not_touch_klass_kwarg_if_explicitly_given",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "init.inherits_regular_kwargs": {
            "name": "inherits_regular_kwargs",
            "location": 106,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "call": [
                    "list"
                ],
                "t": []
            }
        },
        "init.extends_with_init_kwargs_kwarg": {
            "name": "extends_with_init_kwargs_kwarg",
            "location": 120,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "call": [
                    "list"
                ]
            }
        },
        "str.includes_init_kwargs_host_value": {
            "name": "includes_init_kwargs_host_value",
            "location": 130,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "call": [
                    "list",
                    "List[int]",
                    "Dict[str, Union[int, str]]",
                    "set",
                    "Dict[str, Type[Any]]",
                    "str",
                    "Dict[str, Any]"
                ],
                "expected": [
                    "List[str]",
                    "bool",
                    "str",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "global": {}
    },
    "fabric-2.5.0/tests/transfer.py": {
        "init.requires_connection": {
            "name": "requires_connection",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "cxn": [
                    "list",
                    "Dict[int, str]",
                    "str"
                ]
            }
        },
        "is_remote_dir.returns_bool_of_stat_ISDIR_flag": {
            "name": "returns_bool_of_stat_ISDIR_flag",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "sftp_objs": [
                    "str",
                    "bool",
                    "float"
                ]
            },
            "variables": {
                "sftp": [
                    "float",
                    "str",
                    "Mapping"
                ],
                "xfer": [
                    "str",
                    "list"
                ]
            }
        },
        "is_remote_dir.returns_False_if_stat_raises_IOError": {
            "name": "returns_False_if_stat_raises_IOError",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "sftp_objs": [
                    "str",
                    "List[str]",
                    "int"
                ]
            },
            "variables": {
                "sftp": [
                    "float",
                    "Pattern[str]",
                    "int",
                    "str",
                    "List[str]"
                ],
                "xfer": [
                    "str",
                    "list"
                ]
            }
        },
        "basics.accepts_single_remote_path_posarg": {
            "name": "accepts_single_remote_path_posarg",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "sftp_objs": [
                    "Callable",
                    "bool",
                    "Callable[[str], None]",
                    "str"
                ]
            },
            "variables": {
                "client": [
                    "paramiko.clienSSHClient",
                    "unittesmock.Mock"
                ],
                "transfer": [
                    "str",
                    "int"
                ]
            }
        },
        "basics.accepts_local_and_remote_kwargs": {
            "name": "accepts_local_and_remote_kwargs",
            "location": 145,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "sftp_objs": [
                    "float",
                    "int",
                    "bool"
                ]
            },
            "variables": {
                "sftp": [
                    "int",
                    "dict",
                    "Dict[str, Union[Any, Any, Any]]"
                ],
                "transfer": [
                    "str",
                    "int",
                    "list"
                ]
            }
        },
        "basics.returns_rich_Result_object": {
            "name": "returns_rich_Result_object",
            "location": 153,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "transfer": [
                    "List[Dict[str, Any]]",
                    "bool"
                ]
            },
            "variables": {
                "cxn": [
                    "dict",
                    "list",
                    "Dict[str, List[Any]]"
                ],
                "result": [
                    "list",
                    "bool",
                    "Tuple[Any, Any]"
                ]
            }
        },
        "path_arg_edge_cases.local_None_uses_remote_filename": {
            "name": "local_None_uses_remote_filename",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "transfer": [
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            },
            "variables": {}
        },
        "path_arg_edge_cases.local_empty_string_uses_remote_filename": {
            "name": "local_empty_string_uses_remote_filename",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "transfer": [
                    "bool",
                    "Dict[str, Any]",
                    "str"
                ]
            },
            "variables": {}
        },
        "path_arg_edge_cases.remote_arg_is_required": {
            "name": "remote_arg_is_required",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "transfer": [
                    "Dict[str, Any]",
                    "dict",
                    "Mapping[str, Any]"
                ]
            },
            "variables": {}
        },
        "path_arg_edge_cases.remote_arg_cannot_be_None": {
            "name": "remote_arg_cannot_be_None",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "transfer": [
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "Union[Dict, str]"
                ]
            },
            "variables": {}
        },
        "path_arg_edge_cases.remote_arg_cannot_be_empty_string": {
            "name": "remote_arg_cannot_be_empty_string",
            "location": 92,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "transfer": [
                    "Dict[str, Any]",
                    "dict"
                ]
            },
            "variables": {}
        },
        "file_like_local_paths._get_to_stringio": {
            "name": "_get_to_stringio",
            "location": 98,
            "return": [
                "Dict[str, Any]",
                "dict",
                "list"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "sftp_objs": [
                    "bool",
                    "str",
                    "Optional[\"Frame\"]"
                ]
            },
            "variables": {
                "client": [
                    "unittesmock.Mock"
                ],
                "fd": [
                    "int",
                    "unittesmock.Mock"
                ],
                "result": [
                    "str",
                    "Dict[str, Any]"
                ],
                "transfer": [
                    "float",
                    "Optional[str]",
                    "str",
                    "int",
                    "Tuple[str, str, str, str, str]"
                ]
            }
        },
        "file_like_local_paths.remote_path_to_local_StringIO": {
            "name": "remote_path_to_local_StringIO",
            "location": 108,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "sftp_objs": [
                    "str",
                    "Dict[str, Any]",
                    "bool"
                ]
            },
            "variables": {}
        },
        "file_like_local_paths.result_contains_fd_for_local_path": {
            "name": "result_contains_fd_for_local_path",
            "location": 241,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "sftp_objs": [
                    "Callable",
                    "bool"
                ]
            },
            "variables": {
                "fd": [
                    "dict",
                    "Union[Literal, int]",
                    "List[str]",
                    "Type[Dict[Any, Any]]",
                    "int"
                ],
                "result": [
                    "dict"
                ]
            }
        },
        "mode_concerns.setup": {
            "name": "setup",
            "location": 117,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "attrs": [
                    "str",
                    "Dict[str, str]",
                    "bool",
                    "dict"
                ]
            }
        },
        "mode_concerns.preserves_remote_mode_by_default": {
            "name": "preserves_remote_mode_by_default",
            "location": 121,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "sftp": []
            },
            "variables": {
                "client": [],
                "mock_os": [
                    "str",
                    "unittesmock.Mock",
                    "Dict[str, Union[Any, Any]]"
                ],
                "transfer": [
                    "str",
                    "List[str]",
                    "float",
                    "Tuple[str, str, str, str, str]"
                ]
            }
        },
        "mode_concerns.allows_disabling_remote_mode_preservation": {
            "name": "allows_disabling_remote_mode_preservation",
            "location": 130,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "sftp": []
            },
            "variables": {
                "client": [],
                "mock_os": [
                    "Dict[str, Tuple[str, Any]]",
                    "mock._Call",
                    "Dict[str, Any]"
                ],
                "transfer": [
                    "str",
                    "bool",
                    "Dict[str, Union[Any, Any]]"
                ]
            }
        },
        "basics.accepts_single_local_path_posarg": {
            "name": "accepts_single_local_path_posarg",
            "location": 138,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "sftp_objs": [
                    "Callable",
                    "bool",
                    "Callable[[str], None]",
                    "str"
                ]
            },
            "variables": {
                "client": [
                    "unittesmock.Mock"
                ],
                "transfer": [
                    "List[str]"
                ]
            }
        },
        "file_like_local_objects.name_attribute_present_appends_like_basename": {
            "name": "name_attribute_present_appends_like_basename",
            "location": 176,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "sftp_objs": [
                    "Dict[str, Any]",
                    "str",
                    "int",
                    "Iterator",
                    "Container[str]"
                ]
            },
            "variables": {
                "local": [
                    "bytes",
                    "Tuple[int, int, int]",
                    "str"
                ],
                "name": [
                    "str",
                    "Dict[str, str]",
                    "Tuple[str, str, str]"
                ],
                "sftp": [],
                "xfer": [
                    "str",
                    "int",
                    "list"
                ]
            }
        },
        "file_like_local_objects.no_name_attribute_raises_ValueError": {
            "name": "no_name_attribute_raises_ValueError",
            "location": 189,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "sftp_objs": [
                    "str",
                    "Dict[str, Any]"
                ]
            },
            "variables": {
                "local": [
                    "str",
                    "bool"
                ],
                "sftp": [
                    "float",
                    "str",
                    "Mapping"
                ],
                "xfer": [
                    "str",
                    "int",
                    "list"
                ]
            }
        },
        "remote_end_is_directory.appends_local_file_basename": {
            "name": "appends_local_file_basename",
            "location": 165,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "sftp_objs": [
                    "bool",
                    "str",
                    "int",
                    "Dict[str, Any]"
                ]
            },
            "variables": {
                "sftp": [],
                "xfer": [
                    "str",
                    "int",
                    "list"
                ]
            }
        },
        "path_arg_edge_cases.remote_None_uses_local_filename": {
            "name": "remote_None_uses_local_filename",
            "location": 196,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "transfer": [
                    "str",
                    "dict"
                ]
            },
            "variables": {}
        },
        "path_arg_edge_cases.remote_empty_string_uses_local_filename": {
            "name": "remote_empty_string_uses_local_filename",
            "location": 199,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "transfer": []
            },
            "variables": {}
        },
        "path_arg_edge_cases.remote_cant_be_empty_if_local_file_like": {
            "name": "remote_cant_be_empty_if_local_file_like",
            "location": 203,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "transfer": [
                    "Union[str, IO]",
                    "str",
                    "int",
                    "Optional[str]"
                ]
            },
            "variables": {}
        },
        "path_arg_edge_cases.local_arg_is_required": {
            "name": "local_arg_is_required",
            "location": 207,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "transfer": [
                    "str",
                    "int",
                    "Mapping"
                ]
            },
            "variables": {}
        },
        "path_arg_edge_cases.local_arg_cannot_be_None": {
            "name": "local_arg_cannot_be_None",
            "location": 211,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "transfer": [
                    "str",
                    "int",
                    "Optional[int]"
                ]
            },
            "variables": {}
        },
        "path_arg_edge_cases.local_arg_cannot_be_empty_string": {
            "name": "local_arg_cannot_be_empty_string",
            "location": 215,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "transfer": [
                    "int",
                    "str",
                    "bytes"
                ]
            },
            "variables": {}
        },
        "file_like_local_paths._put_from_stringio": {
            "name": "_put_from_stringio",
            "location": 221,
            "return": [
                "Dict[str, Any]",
                "dict",
                "list"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "sftp_objs": [
                    "str",
                    "bool",
                    "Iterable[str]",
                    "Optional[\"Frame\"]"
                ]
            },
            "variables": {
                "client": [
                    "unittesmock.Mock"
                ],
                "fd": [
                    "str",
                    "bytes"
                ],
                "result": [
                    "str"
                ],
                "transfer": [
                    "str",
                    "int"
                ]
            }
        },
        "file_like_local_paths.remote_path_from_local_StringIO": {
            "name": "remote_path_from_local_StringIO",
            "location": 231,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "sftp_objs": [
                    "int",
                    "str",
                    "List[str]"
                ]
            },
            "variables": {}
        },
        "file_like_local_paths.local_FLOs_are_rewound_before_putting": {
            "name": "local_FLOs_are_rewound_before_putting",
            "location": 234,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "transfer": []
            },
            "variables": {
                "fd": [
                    "Dict[str, Dict[str, Any]]",
                    "unittesmock.Mock",
                    "list",
                    "Tuple[Literal, Literal]"
                ],
                "seek_calls": [
                    "list",
                    "str",
                    "Dict[int, int]",
                    "List[str]",
                    "List[Union[Any, Any, Any]]"
                ]
            }
        },
        "mode_concerns.preserves_local_mode_by_default": {
            "name": "preserves_local_mode_by_default",
            "location": 247,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "sftp": []
            },
            "variables": {
                "client": [],
                "mock_os": [
                    "unittesmock.Mock",
                    "Mock"
                ],
                "transfer": [
                    "mock.MagicMock",
                    "property"
                ]
            }
        },
        "mode_concerns.allows_disabling_local_mode_preservation": {
            "name": "allows_disabling_local_mode_preservation",
            "location": 254,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": [],
                "sftp_objs": [
                    "Callable",
                    "bool",
                    "Callable[[str], None]",
                    "str"
                ]
            },
            "variables": {
                "client": [
                    "paramiko.clienSSHClient"
                ],
                "transfer": [
                    "str"
                ]
            }
        },
        "global": {}
    },
    "fabric-2.5.0/tests/util.py": {
        "get_local_user_.defaults_to_getpass_getuser": {
            "name": "defaults_to_getpass_getuser",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "getuser": [
                    "bytes",
                    "str"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "get_local_user_.KeyError_means_SaaS_and_thus_None": {
            "name": "KeyError_means_SaaS_and_thus_None",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "getuser": [
                    "bool",
                    "str",
                    "List[str]",
                    "Optional[BaseException]"
                ],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "global": {}
    },
    "fabric-2.5.0/tests/_util.py": {
        "support_path": {
            "name": "support_path",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": []
            },
            "variables": {}
        },
        "load": {
            "name": "load",
            "location": 29,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "name": [
                    "str"
                ]
            },
            "variables": {
                "imported": [
                    "Dict[str, Any]",
                    "dict",
                    "str",
                    "List[List[Any]]",
                    "bool"
                ]
            }
        },
        "expect": {
            "name": "expect",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "invocation": [
                    "str",
                    "int",
                    "Optional[Tuple[int, int]]"
                ],
                "kwargs": [],
                "out": [
                    "str",
                    "Dict[str, float]",
                    "int",
                    "dict",
                    "Callable",
                    "bool"
                ],
                "program": [
                    "Optional[float]",
                    "bool",
                    "Union[Sequence[Any], Tuple[float, float]]",
                    "Callable[[], Iterable[float]]"
                ],
                "test": [
                    "str",
                    "int"
                ]
            },
            "variables": {
                "err": [
                    "str",
                    "int"
                ],
                "output": [
                    "str",
                    "bytes",
                    "list",
                    "List[str]"
                ],
                "program": [
                    "str",
                    "int",
                    "Union[Literal, Literal]"
                ]
            }
        },
        "faux_v1_env": {
            "name": "faux_v1_env",
            "location": 75,
            "return": [
                "int",
                "bool",
                "Tuple[str]",
                "float"
            ],
            "arguments": {
                "args": [],
                "kwargs": []
            },
            "variables": {}
        },
        "Config.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {
                "wat": [
                    "int",
                    "dict",
                    "List[int]",
                    "List[List[int]]",
                    "str"
                ]
            }
        },
        "Connection.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "self": []
            },
            "variables": {}
        },
        "global": {
            "config_file": [
                "str",
                "List[str]"
            ],
            "support": [
                "str",
                "list",
                "Dict[str, str]",
                "List[str]",
                "Set[str]"
            ]
        }
    },
    "fabric-2.5.0/tests/_support/fabfile.py": {
        "build": {
            "name": "build",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "c": [
                    "str",
                    "bool",
                    "dict",
                    "Iterable[bytes]"
                ],
                "kwargs": []
            },
            "variables": {}
        },
        "deploy": {
            "name": "deploy",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "c": [
                    "str",
                    "Tuple[str]"
                ],
                "kwargs": []
            },
            "variables": {}
        },
        "basic_run": {
            "name": "basic_run",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "c": [
                    "int",
                    "List[int]",
                    "str",
                    "bool"
                ],
                "kwargs": []
            },
            "variables": {}
        },
        "expect_vanilla_Context": {
            "name": "expect_vanilla_Context",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "c": [
                    "list",
                    "List[Dict[str, Any]]",
                    "bool",
                    "int",
                    "Tuple[str, Any]",
                    "List[T]",
                    "Iterable[str]"
                ],
                "kwargs": []
            },
            "variables": {}
        },
        "expect_from_env": {
            "name": "expect_from_env",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "c": [
                    "str",
                    "List[List[str]]",
                    "List[str]"
                ],
                "kwargs": []
            },
            "variables": {}
        },
        "expect_mutation_to_fail": {
            "name": "expect_mutation_to_fail",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "c": [
                    "List[str]",
                    "dict",
                    "bool",
                    "Dict[str, Any]",
                    "int"
                ],
                "kwargs": []
            },
            "variables": {}
        },
        "mutate": {
            "name": "mutate",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "c": [
                    "int",
                    "str",
                    "Counter",
                    "Iterable[Tuple[int, int]]"
                ],
                "kwargs": []
            },
            "variables": {
                "foo": [
                    "int",
                    "dict",
                    "List[int]",
                    "List[List[int]]",
                    "str"
                ]
            }
        },
        "expect_mutation": {
            "name": "expect_mutation",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "c": [
                    "str",
                    "List[int]",
                    "dict",
                    "List[str]",
                    "int"
                ],
                "kwargs": []
            },
            "variables": {}
        },
        "expect_identity": {
            "name": "expect_identity",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "c": [
                    "int",
                    "dict"
                ],
                "kwargs": []
            },
            "variables": {}
        },
        "expect_identities": {
            "name": "expect_identities",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "c": [
                    "int",
                    "dict"
                ],
                "kwargs": []
            },
            "variables": {}
        },
        "expect_connect_timeout": {
            "name": "expect_connect_timeout",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "c": [
                    "int",
                    "Union[int, str]",
                    "dict",
                    "Dict[str, int]",
                    "List[str]"
                ],
                "kwargs": []
            },
            "variables": {}
        },
        "first": {
            "name": "first",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "c": [
                    "str",
                    "Tuple[str]"
                ],
                "kwargs": []
            },
            "variables": {}
        },
        "third": {
            "name": "third",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "c": [
                    "str",
                    "Tuple[str]"
                ],
                "kwargs": []
            },
            "variables": {}
        },
        "second": {
            "name": "second",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "c": [
                    "int",
                    "float",
                    "List[List[str]]",
                    "Tuple['cirq.Qid']"
                ],
                "kwargs": [],
                "show_host": [
                    "str",
                    "Tuple[str]"
                ]
            },
            "variables": {}
        },
        "hosts_are_myhost": {
            "name": "hosts_are_myhost",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "c": [
                    "int",
                    "str",
                    "Counter",
                    "Union[str, List[str]]"
                ],
                "kwargs": []
            },
            "variables": {}
        },
        "two_hosts": {
            "name": "two_hosts",
            "location": 92,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "c": [
                    "int",
                    "str",
                    "Counter",
                    "Iterable[Tuple[int, int]]"
                ],
                "kwargs": []
            },
            "variables": {}
        },
        "hosts_are_host_stringlike": {
            "name": "hosts_are_host_stringlike",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "c": [
                    "int",
                    "str",
                    "Counter",
                    "Union[str, List[str]]"
                ],
                "kwargs": []
            },
            "variables": {}
        },
        "hosts_are_mixed_values": {
            "name": "hosts_are_mixed_values",
            "location": 102,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "c": [
                    "str",
                    "bool"
                ],
                "kwargs": []
            },
            "variables": {}
        },
        "hosts_are_init_kwargs": {
            "name": "hosts_are_init_kwargs",
            "location": 107,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "c": [
                    "str",
                    "bool"
                ],
                "kwargs": []
            },
            "variables": {}
        },
        "vanilla_Task_works_ok": {
            "name": "vanilla_Task_works_ok",
            "location": 112,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "c": [
                    "List[str]",
                    "Counter[str]",
                    "Dict[str, Optional[str]]",
                    "str",
                    "Sequence[str]"
                ],
                "kwargs": []
            },
            "variables": {}
        },
        "global": {}
    },
    "fabric-2.5.0/tests/_support/prompting.py": {
        "expect_connect_kwarg": {
            "name": "expect_connect_kwarg",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "c": [
                    "int",
                    "str",
                    "bool"
                ],
                "key": [
                    "int",
                    "str",
                    "bool"
                ],
                "kwargs": [],
                "val": [
                    "int",
                    "str",
                    "bool"
                ]
            },
            "variables": {}
        },
        "global": {}
    },
    "fabric-2.5.0/tests/_support/runtime_fabfile.py": {
        "runtime_ssh_config": {
            "name": "runtime_ssh_config",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "c": [
                    "str",
                    "Type",
                    "Mapping[Any, Any]",
                    "Optional[\"GraphLogger\"]",
                    "Set[str]"
                ],
                "kwargs": []
            },
            "variables": {}
        },
        "dummy": {
            "name": "dummy",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "c": [
                    "str",
                    "Tuple[str]"
                ],
                "kwargs": []
            },
            "variables": {}
        },
        "global": {}
    },
    "fabric-2.5.0/tests/_support/json_conf/fabfile.py": {
        "expect_conf_value": {
            "name": "expect_conf_value",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "c": [
                    "str",
                    "int",
                    "List[int]",
                    "dict",
                    "bool"
                ],
                "kwargs": []
            },
            "variables": {}
        },
        "global": {}
    },
    "fabric-2.5.0/tests/_support/py_conf/fabfile.py": {
        "expect_conf_value": {
            "name": "expect_conf_value",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "c": [
                    "str",
                    "int",
                    "List[int]",
                    "dict",
                    "bool"
                ],
                "kwargs": []
            },
            "variables": {}
        },
        "global": {}
    },
    "fabric-2.5.0/tests/_support/py_conf/fabric.py": {
        "global": {
            "it_came_from": [
                "str",
                "Optional[bool]",
                "Tuple[str, str, str]",
                "int",
                "Final"
            ]
        }
    },
    "fabric-2.5.0/tests/_support/yaml_conf/fabfile.py": {
        "expect_conf_value": {
            "name": "expect_conf_value",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "c": [
                    "str",
                    "int",
                    "List[int]",
                    "dict",
                    "bool"
                ],
                "kwargs": []
            },
            "variables": {}
        },
        "global": {}
    },
    "fabric-2.5.0/tests/_support/yml_conf/fabfile.py": {
        "expect_conf_value": {
            "name": "expect_conf_value",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "c": [
                    "str",
                    "int",
                    "List[int]",
                    "dict",
                    "bool"
                ],
                "kwargs": []
            },
            "variables": {}
        },
        "expect_conf_key_filename": {
            "name": "expect_conf_key_filename",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "c": [
                    "str"
                ],
                "kwargs": []
            },
            "variables": {
                "expected": [
                    "str",
                    "Dict[str, Union[Any, Any]]",
                    "List[str]",
                    "list",
                    "Dict[str, str]"
                ],
                "got": [
                    "str",
                    "Dict[str, str]",
                    "Dict[Any, str]",
                    "Dict[str, Set[str]]"
                ]
            }
        },
        "expect_cli_key_filename": {
            "name": "expect_cli_key_filename",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "c": [
                    "str"
                ],
                "kwargs": []
            },
            "variables": {
                "expected": [
                    "str",
                    "Dict[str, Union[Any, Any]]",
                    "List[str]",
                    "list",
                    "Dict[str, str]"
                ],
                "got": [
                    "str",
                    "Dict[str, str]",
                    "Dict[Any, str]",
                    "Dict[str, Set[str]]"
                ]
            }
        },
        "global": {}
    }
}